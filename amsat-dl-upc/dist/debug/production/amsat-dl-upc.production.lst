

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sat Nov 30 10:23:22 2019

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F2520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1,inline
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=2
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=2
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=2
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=2
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=2
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=2
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=2
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=2
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=2
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=2
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1,group=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1,group=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1,group=2
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1,inline
    94                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    95                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   100                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   101  0000                     
   102                           ; Version 2.10
   103                           ; Generated 31/07/2019 GMT
   104                           ; 
   105                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
   106                           ; All rights reserved.
   107                           ; 
   108                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   109                           ; 
   110                           ; Redistribution and use in source and binary forms, with or without modification, are
   111                           ; permitted provided that the following conditions are met:
   112                           ; 
   113                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   114                           ;        conditions and the following disclaimer.
   115                           ; 
   116                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   117                           ;        of conditions and the following disclaimer in the documentation and/or other
   118                           ;        materials provided with the distribution.
   119                           ; 
   120                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   121                           ;        software without specific prior written permission.
   122                           ; 
   123                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   124                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   125                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   126                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   127                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   128                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   129                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   130                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   131                           ; 
   132                           ; 
   133                           ; Code-generator required, PIC18F2520 Definitions
   134                           ; 
   135                           ; SFR Addresses
   136  0000                     
   137                           	psect	idataCOMRAM
   138  0058F6                     __pidataCOMRAM:
   139                           	opt callstack 0
   140                           
   141                           ;initializer for _g_pending_cmd
   142  0058F6  FF                 	db	255
   143                           
   144                           	psect	idataBANK0
   145  0058E6                     __pidataBANK0:
   146                           	opt callstack 0
   147                           
   148                           ;initializer for _g_ptt_debounce_counter
   149  0058E6  000A               	dw	10
   150                           
   151                           ;initializer for _g_pout
   152  0058E8  0001               	dw	1
   153                           
   154                           ;initializer for _g_ipc
   155  0058EA  0005               	dw	5
   156                           
   157                           ;initializer for _g_cmd_debounce_counter
   158  0058EC  000A               	dw	10
   159                           
   160                           ;initializer for _g_applied_cmd
   161  0058EE  FF                 	db	255
   162                           
   163                           	psect	idataBANK1
   164  0058EF                     __pidataBANK1:
   165                           	opt callstack 0
   166                           
   167                           ;initializer for stoa@F1144
   168  0058EF  28                 	db	40
   169  0058F0  6E                 	db	110
   170  0058F1  75                 	db	117
   171  0058F2  6C                 	db	108
   172  0058F3  6C                 	db	108
   173  0058F4  29                 	db	41
   174  0058F5  00                 	db	0
   175                           
   176                           	psect	mediumconst
   177  00717E                     __pmediumconst:
   178                           	opt callstack 0
   179  00717E  00                 	db	0
   180  00717F                     _table_220:
   181                           	opt callstack 0
   182  00717F  FDDA               	dw	64986
   183  007181  FDDA               	dw	64986
   184  007183  FDDA               	dw	64986
   185  007185  FDDA               	dw	64986
   186  007187  FDDA               	dw	64986
   187  007189  FDDA               	dw	64986
   188  00718B  FDDA               	dw	64986
   189  00718D  FDDA               	dw	64986
   190  00718F  FDDA               	dw	64986
   191  007191  FDDA               	dw	64986
   192  007193  FDDA               	dw	64986
   193  007195  FDDA               	dw	64986
   194  007197  FDDA               	dw	64986
   195  007199  FDDA               	dw	64986
   196  00719B  FDDA               	dw	64986
   197  00719D  FDDA               	dw	64986
   198  00719F  FDDA               	dw	64986
   199  0071A1  FDDA               	dw	64986
   200  0071A3  FDDA               	dw	64986
   201  0071A5  FDDA               	dw	64986
   202  0071A7  FDDA               	dw	64986
   203  0071A9  FDDA               	dw	64986
   204  0071AB  FDDA               	dw	64986
   205  0071AD  FDDA               	dw	64986
   206  0071AF  FDDA               	dw	64986
   207  0071B1  FDDA               	dw	64986
   208  0071B3  FDDA               	dw	64986
   209  0071B5  FDDA               	dw	64986
   210  0071B7  FDDA               	dw	64986
   211  0071B9  FDDA               	dw	64986
   212  0071BB  FDDA               	dw	64986
   213  0071BD  FDDA               	dw	64986
   214  0071BF  FDDA               	dw	64986
   215  0071C1  FDDA               	dw	64986
   216  0071C3  FDDA               	dw	64986
   217  0071C5  FDDA               	dw	64986
   218  0071C7  FDDA               	dw	64986
   219  0071C9  FDDA               	dw	64986
   220  0071CB  FDDA               	dw	64986
   221  0071CD  FDDA               	dw	64986
   222  0071CF  FDDA               	dw	64986
   223  0071D1  FDDA               	dw	64986
   224  0071D3  FDDA               	dw	64986
   225  0071D5  FDDA               	dw	64986
   226  0071D7  FDDA               	dw	64986
   227  0071D9  FDDA               	dw	64986
   228  0071DB  FDDA               	dw	64986
   229  0071DD  FDDA               	dw	64986
   230  0071DF  FDDA               	dw	64986
   231  0071E1  FDDA               	dw	64986
   232  0071E3  FDDA               	dw	64986
   233  0071E5  FDDA               	dw	64986
   234  0071E7  FDDA               	dw	64986
   235  0071E9  FDDA               	dw	64986
   236  0071EB  FDDA               	dw	64986
   237  0071ED  FDDA               	dw	64986
   238  0071EF  FDDA               	dw	64986
   239  0071F1  FDDA               	dw	64986
   240  0071F3  FDDA               	dw	64986
   241  0071F5  FDDA               	dw	64986
   242  0071F7  FDDA               	dw	64986
   243  0071F9  FDDA               	dw	64986
   244  0071FB  FDDA               	dw	64986
   245  0071FD  FDDA               	dw	64986
   246  0071FF  FDDA               	dw	64986
   247  007201  FDDA               	dw	64986
   248  007203  FDDA               	dw	64986
   249  007205  FDDA               	dw	64986
   250  007207  FDDA               	dw	64986
   251  007209  FDDA               	dw	64986
   252  00720B  FDDA               	dw	64986
   253  00720D  FDDA               	dw	64986
   254  00720F  FDDA               	dw	64986
   255  007211  FDDA               	dw	64986
   256  007213  FDDA               	dw	64986
   257  007215  FDDA               	dw	64986
   258  007217  FDDA               	dw	64986
   259  007219  FDDA               	dw	64986
   260  00721B  FDDA               	dw	64986
   261  00721D  FDDA               	dw	64986
   262  00721F  FDDA               	dw	64986
   263  007221  FDDA               	dw	64986
   264  007223  FDDA               	dw	64986
   265  007225  FDDA               	dw	64986
   266  007227  FDDA               	dw	64986
   267  007229  FDDA               	dw	64986
   268  00722B  FDDA               	dw	64986
   269  00722D  FDDA               	dw	64986
   270  00722F  FDDA               	dw	64986
   271  007231  FDDA               	dw	64986
   272  007233  FDDA               	dw	64986
   273  007235  FDDA               	dw	64986
   274  007237  FDDA               	dw	64986
   275  007239  FDDA               	dw	64986
   276  00723B  FDDA               	dw	64986
   277  00723D  FDDA               	dw	64986
   278  00723F  FDDA               	dw	64986
   279  007241  FDDA               	dw	64986
   280  007243  FDDA               	dw	64986
   281  007245  FDDA               	dw	64986
   282  007247  FDDA               	dw	64986
   283  007249  FDDA               	dw	64986
   284  00724B  FDDA               	dw	64986
   285  00724D  FDDA               	dw	64986
   286  00724F  FDDA               	dw	64986
   287  007251  FDDA               	dw	64986
   288  007253  FDDA               	dw	64986
   289  007255  FDDA               	dw	64986
   290  007257  FDDA               	dw	64986
   291  007259  FDDA               	dw	64986
   292  00725B  FDDA               	dw	64986
   293  00725D  FDDA               	dw	64986
   294  00725F  FDDA               	dw	64986
   295  007261  FDDA               	dw	64986
   296  007263  FDDA               	dw	64986
   297  007265  FDDA               	dw	64986
   298  007267  FDDA               	dw	64986
   299  007269  FDDA               	dw	64986
   300  00726B  FDDA               	dw	64986
   301  00726D  FDDA               	dw	64986
   302  00726F  FDDA               	dw	64986
   303  007271  FDDA               	dw	64986
   304  007273  FDDA               	dw	64986
   305  007275  FDDA               	dw	64986
   306  007277  FDDA               	dw	64986
   307  007279  FDDA               	dw	64986
   308  00727B  FDDA               	dw	64986
   309  00727D  FDDA               	dw	64986
   310  00727F  FDDA               	dw	64986
   311  007281  FDDA               	dw	64986
   312  007283  FDDA               	dw	64986
   313  007285  FDDA               	dw	64986
   314  007287  FDDA               	dw	64986
   315  007289  FDDA               	dw	64986
   316  00728B  FDDA               	dw	64986
   317  00728D  FDDA               	dw	64986
   318  00728F  FDDA               	dw	64986
   319  007291  FDDA               	dw	64986
   320  007293  FDDA               	dw	64986
   321  007295  FDDA               	dw	64986
   322  007297  FDDA               	dw	64986
   323  007299  FDDA               	dw	64986
   324  00729B  FDDA               	dw	64986
   325  00729D  FDDA               	dw	64986
   326  00729F  FDDA               	dw	64986
   327  0072A1  FDDA               	dw	64986
   328  0072A3  FDDA               	dw	64986
   329  0072A5  FDDA               	dw	64986
   330  0072A7  FDDA               	dw	64986
   331  0072A9  FDDA               	dw	64986
   332  0072AB  FDDA               	dw	64986
   333  0072AD  FDDA               	dw	64986
   334  0072AF  FDDA               	dw	64986
   335  0072B1  FDDA               	dw	64986
   336  0072B3  FDDA               	dw	64986
   337  0072B5  FDDA               	dw	64986
   338  0072B7  FDDA               	dw	64986
   339  0072B9  FDDA               	dw	64986
   340  0072BB  FDDA               	dw	64986
   341  0072BD  FDDA               	dw	64986
   342  0072BF  FDDA               	dw	64986
   343  0072C1  FDDA               	dw	64986
   344  0072C3  FDDA               	dw	64986
   345  0072C5  FDDA               	dw	64986
   346  0072C7  FDDA               	dw	64986
   347  0072C9  FDDA               	dw	64986
   348  0072CB  FDDA               	dw	64986
   349  0072CD  FDDA               	dw	64986
   350  0072CF  FDDA               	dw	64986
   351  0072D1  FDDA               	dw	64986
   352  0072D3  FDDA               	dw	64986
   353  0072D5  FDDA               	dw	64986
   354  0072D7  FDDA               	dw	64986
   355  0072D9  FDDA               	dw	64986
   356  0072DB  FDDA               	dw	64986
   357  0072DD  FDDA               	dw	64986
   358  0072DF  FDDA               	dw	64986
   359  0072E1  FDDA               	dw	64986
   360  0072E3  FDDA               	dw	64986
   361  0072E5  FDDA               	dw	64986
   362  0072E7  FDDA               	dw	64986
   363  0072E9  FDDA               	dw	64986
   364  0072EB  FDDA               	dw	64986
   365  0072ED  FDDA               	dw	64986
   366  0072EF  FDDA               	dw	64986
   367  0072F1  FDDA               	dw	64986
   368  0072F3  FDDA               	dw	64986
   369  0072F5  FDDA               	dw	64986
   370  0072F7  FDDA               	dw	64986
   371  0072F9  FDDA               	dw	64986
   372  0072FB  FDDA               	dw	64986
   373  0072FD  FDDA               	dw	64986
   374  0072FF  FDDA               	dw	64986
   375  007301  FDDA               	dw	64986
   376  007303  FDDA               	dw	64986
   377  007305  FDDA               	dw	64986
   378  007307  FDDA               	dw	64986
   379  007309  FDDA               	dw	64986
   380  00730B  FDDA               	dw	64986
   381  00730D  FDDA               	dw	64986
   382  00730F  FDDA               	dw	64986
   383  007311  FDDA               	dw	64986
   384  007313  FDDA               	dw	64986
   385  007315  FDDA               	dw	64986
   386  007317  FDDA               	dw	64986
   387  007319  FDDA               	dw	64986
   388  00731B  FDDA               	dw	64986
   389  00731D  FDDA               	dw	64986
   390  00731F  FDDA               	dw	64986
   391  007321  FDDA               	dw	64986
   392  007323  FDDA               	dw	64986
   393  007325  FDDA               	dw	64986
   394  007327  FDDA               	dw	64986
   395  007329  FDDA               	dw	64986
   396  00732B  FDDA               	dw	64986
   397  00732D  FDDA               	dw	64986
   398  00732F  FDDA               	dw	64986
   399  007331  FDDA               	dw	64986
   400  007333  FDDA               	dw	64986
   401  007335  FDDA               	dw	64986
   402  007337  FDDA               	dw	64986
   403  007339  FDDA               	dw	64986
   404  00733B  FDDA               	dw	64986
   405  00733D  FDDA               	dw	64986
   406  00733F  FDDA               	dw	64986
   407  007341  FDDA               	dw	64986
   408  007343  FDDA               	dw	64986
   409  007345  FDDA               	dw	64986
   410  007347  FDDA               	dw	64986
   411  007349  FDDA               	dw	64986
   412  00734B  FDDA               	dw	64986
   413  00734D  FDDA               	dw	64986
   414  00734F  FDDA               	dw	64986
   415  007351  FDDA               	dw	64986
   416  007353  FDDA               	dw	64986
   417  007355  FDDA               	dw	64986
   418  007357  FDDA               	dw	64986
   419  007359  FDDA               	dw	64986
   420  00735B  FDDA               	dw	64986
   421  00735D  FDDA               	dw	64986
   422  00735F  FDDA               	dw	64986
   423  007361  FDDA               	dw	64986
   424  007363  FDDA               	dw	64986
   425  007365  FDDA               	dw	64986
   426  007367  FDDA               	dw	64986
   427  007369  FDDA               	dw	64986
   428  00736B  FDDA               	dw	64986
   429  00736D  FDDA               	dw	64986
   430  00736F  FDDA               	dw	64986
   431  007371  FDDA               	dw	64986
   432  007373  FDDA               	dw	64986
   433  007375  FDDA               	dw	64986
   434  007377  FDDA               	dw	64986
   435  007379  FDDA               	dw	64986
   436  00737B  FDDA               	dw	64986
   437  00737D  FDDA               	dw	64986
   438  00737F  FDDA               	dw	64986
   439  007381  FDDA               	dw	64986
   440  007383  FDDA               	dw	64986
   441  007385  FDDA               	dw	64986
   442  007387  FDDA               	dw	64986
   443  007389  FDDA               	dw	64986
   444  00738B  FDDA               	dw	64986
   445  00738D  FDDA               	dw	64986
   446  00738F  FDDA               	dw	64986
   447  007391  FDDA               	dw	64986
   448  007393  FDDA               	dw	64986
   449  007395  FDDA               	dw	64986
   450  007397  FDDA               	dw	64986
   451  007399  FDDA               	dw	64986
   452  00739B  FDDA               	dw	64986
   453  00739D  FDDA               	dw	64986
   454  00739F  FDDA               	dw	64986
   455  0073A1  FDDA               	dw	64986
   456  0073A3  FDDA               	dw	64986
   457  0073A5  FDDA               	dw	64986
   458  0073A7  FDDA               	dw	64986
   459  0073A9  FDDA               	dw	64986
   460  0073AB  FDDA               	dw	64986
   461  0073AD  FDDA               	dw	64986
   462  0073AF  FDDA               	dw	64986
   463  0073B1  FDDA               	dw	64986
   464  0073B3  FDDA               	dw	64986
   465  0073B5  FDDA               	dw	64986
   466  0073B7  FDDA               	dw	64986
   467  0073B9  FDDA               	dw	64986
   468  0073BB  FDDA               	dw	64986
   469  0073BD  FDDA               	dw	64986
   470  0073BF  FDDA               	dw	64986
   471  0073C1  FDDA               	dw	64986
   472  0073C3  FDDA               	dw	64986
   473  0073C5  FDDA               	dw	64986
   474  0073C7  FDDA               	dw	64986
   475  0073C9  FDDA               	dw	64986
   476  0073CB  FDDA               	dw	64986
   477  0073CD  FDDA               	dw	64986
   478  0073CF  FDDA               	dw	64986
   479  0073D1  FDDA               	dw	64986
   480  0073D3  FDDA               	dw	64986
   481  0073D5  FDDA               	dw	64986
   482  0073D7  FDDA               	dw	64986
   483  0073D9  FDDA               	dw	64986
   484  0073DB  FDDA               	dw	64986
   485  0073DD  FDDA               	dw	64986
   486  0073DF  FDDA               	dw	64986
   487  0073E1  FDDA               	dw	64986
   488  0073E3  FDDA               	dw	64986
   489  0073E5  FDDA               	dw	64986
   490  0073E7  FDDA               	dw	64986
   491  0073E9  FDDA               	dw	64986
   492  0073EB  FDDA               	dw	64986
   493  0073ED  FDDA               	dw	64986
   494  0073EF  FDDA               	dw	64986
   495  0073F1  FDDA               	dw	64986
   496  0073F3  FDDA               	dw	64986
   497  0073F5  FDDA               	dw	64986
   498  0073F7  FDDA               	dw	64986
   499  0073F9  FDDA               	dw	64986
   500  0073FB  FDDA               	dw	64986
   501  0073FD  FDDA               	dw	64986
   502  0073FF  FDDA               	dw	64986
   503  007401  FDDA               	dw	64986
   504  007403  FDDA               	dw	64986
   505  007405  FDDA               	dw	64986
   506  007407  FDDA               	dw	64986
   507  007409  FDDA               	dw	64986
   508  00740B  FDDA               	dw	64986
   509  00740D  FDDA               	dw	64986
   510  00740F  FDDA               	dw	64986
   511  007411  FDDA               	dw	64986
   512  007413  FDDA               	dw	64986
   513  007415  FDDA               	dw	64986
   514  007417  FDDA               	dw	64986
   515  007419  FDDA               	dw	64986
   516  00741B  FDDA               	dw	64986
   517  00741D  FDDA               	dw	64986
   518  00741F  FDDA               	dw	64986
   519  007421  FDDA               	dw	64986
   520  007423  FDDA               	dw	64986
   521  007425  FDDA               	dw	64986
   522  007427  FDDA               	dw	64986
   523  007429  FDDA               	dw	64986
   524  00742B  FDDA               	dw	64986
   525  00742D  FDDA               	dw	64986
   526  00742F  FDDA               	dw	64986
   527  007431  FDDA               	dw	64986
   528  007433  FDDA               	dw	64986
   529  007435  FDDA               	dw	64986
   530  007437  FDDA               	dw	64986
   531  007439  FDDA               	dw	64986
   532  00743B  FDDA               	dw	64986
   533  00743D  FDDA               	dw	64986
   534  00743F  FDDA               	dw	64986
   535  007441  FDDA               	dw	64986
   536  007443  FDDA               	dw	64986
   537  007445  FDDA               	dw	64986
   538  007447  FDDD               	dw	64989
   539  007449  FDE0               	dw	64992
   540  00744B  FDE4               	dw	64996
   541  00744D  FDE8               	dw	65000
   542  00744F  FDEB               	dw	65003
   543  007451  FDEF               	dw	65007
   544  007453  FDF2               	dw	65010
   545  007455  FDF6               	dw	65014
   546  007457  FDFA               	dw	65018
   547  007459  FDFD               	dw	65021
   548  00745B  FE01               	dw	65025
   549  00745D  FE05               	dw	65029
   550  00745F  FE08               	dw	65032
   551  007461  FE0C               	dw	65036
   552  007463  FE0F               	dw	65039
   553  007465  FE13               	dw	65043
   554  007467  FE16               	dw	65046
   555  007469  FE1A               	dw	65050
   556  00746B  FE1E               	dw	65054
   557  00746D  FE21               	dw	65057
   558  00746F  FE25               	dw	65061
   559  007471  FE28               	dw	65064
   560  007473  FE2C               	dw	65068
   561  007475  FE2F               	dw	65071
   562  007477  FE33               	dw	65075
   563  007479  FE37               	dw	65079
   564  00747B  FE3A               	dw	65082
   565  00747D  FE3E               	dw	65086
   566  00747F  FE41               	dw	65089
   567  007481  FE45               	dw	65093
   568  007483  FE48               	dw	65096
   569  007485  FE4C               	dw	65100
   570  007487  FE50               	dw	65104
   571  007489  FE53               	dw	65107
   572  00748B  FE57               	dw	65111
   573  00748D  FE5A               	dw	65114
   574  00748F  FE5E               	dw	65118
   575  007491  FE61               	dw	65121
   576  007493  FE65               	dw	65125
   577  007495  FE69               	dw	65129
   578  007497  FE6C               	dw	65132
   579  007499  FE70               	dw	65136
   580  00749B  FE73               	dw	65139
   581  00749D  FE77               	dw	65143
   582  00749F  FE7A               	dw	65146
   583  0074A1  FE7E               	dw	65150
   584  0074A3  FE81               	dw	65153
   585  0074A5  FE85               	dw	65157
   586  0074A7  FE88               	dw	65160
   587  0074A9  FE8C               	dw	65164
   588  0074AB  FE8F               	dw	65167
   589  0074AD  FE93               	dw	65171
   590  0074AF  FE96               	dw	65174
   591  0074B1  FE9A               	dw	65178
   592  0074B3  FE9D               	dw	65181
   593  0074B5  FEA1               	dw	65185
   594  0074B7  FEA5               	dw	65189
   595  0074B9  FEA8               	dw	65192
   596  0074BB  FEAC               	dw	65196
   597  0074BD  FEAF               	dw	65199
   598  0074BF  FEB3               	dw	65203
   599  0074C1  FEB6               	dw	65206
   600  0074C3  FEBA               	dw	65210
   601  0074C5  FEBD               	dw	65213
   602  0074C7  FEC1               	dw	65217
   603  0074C9  FEC4               	dw	65220
   604  0074CB  FEC8               	dw	65224
   605  0074CD  FECB               	dw	65227
   606  0074CF  FECF               	dw	65231
   607  0074D1  FED4               	dw	65236
   608  0074D3  FED6               	dw	65238
   609  0074D5  FED9               	dw	65241
   610  0074D7  FEDD               	dw	65245
   611  0074D9  FEE0               	dw	65248
   612  0074DB  FEE4               	dw	65252
   613  0074DD  FEE7               	dw	65255
   614  0074DF  FEEA               	dw	65258
   615  0074E1  FEEE               	dw	65262
   616  0074E3  FEF1               	dw	65265
   617  0074E5  FEF5               	dw	65269
   618  0074E7  FEF8               	dw	65272
   619  0074E9  FEFC               	dw	65276
   620  0074EB  FEFF               	dw	65279
   621  0074ED  FF03               	dw	65283
   622  0074EF  FF06               	dw	65286
   623  0074F1  FF0A               	dw	65290
   624  0074F3  FF0D               	dw	65293
   625  0074F5  FF10               	dw	65296
   626  0074F7  FF14               	dw	65300
   627  0074F9  FF17               	dw	65303
   628  0074FB  FF1B               	dw	65307
   629  0074FD  FF1E               	dw	65310
   630  0074FF  FF22               	dw	65314
   631  007501  FF25               	dw	65317
   632  007503  FF29               	dw	65321
   633  007505  FF2C               	dw	65324
   634  007507  FF30               	dw	65328
   635  007509  FF33               	dw	65331
   636  00750B  FF38               	dw	65336
   637  00750D  FF3A               	dw	65338
   638  00750F  FF3D               	dw	65341
   639  007511  FF41               	dw	65345
   640  007513  FF44               	dw	65348
   641  007515  FF48               	dw	65352
   642  007517  FF4B               	dw	65355
   643  007519  FF4E               	dw	65358
   644  00751B  FF52               	dw	65362
   645  00751D  FF55               	dw	65365
   646  00751F  FF59               	dw	65369
   647  007521  FF5C               	dw	65372
   648  007523  FF5F               	dw	65375
   649  007525  FF63               	dw	65379
   650  007527  FF66               	dw	65382
   651  007529  FF6A               	dw	65386
   652  00752B  FF6D               	dw	65389
   653  00752D  FF71               	dw	65393
   654  00752F  FF74               	dw	65396
   655  007531  FF77               	dw	65399
   656  007533  FF7B               	dw	65403
   657  007535  FF7E               	dw	65406
   658  007537  FF82               	dw	65410
   659  007539  FF85               	dw	65413
   660  00753B  FF88               	dw	65416
   661  00753D  FF8C               	dw	65420
   662  00753F  FF8F               	dw	65423
   663  007541  FF93               	dw	65427
   664  007543  FF96               	dw	65430
   665  007545  FF99               	dw	65433
   666  007547  FF9C               	dw	65436
   667  007549  FFA0               	dw	65440
   668  00754B  FFA4               	dw	65444
   669  00754D  FFA7               	dw	65447
   670  00754F  FFAB               	dw	65451
   671  007551  FFAE               	dw	65454
   672  007553  FFB1               	dw	65457
   673  007555  FFB5               	dw	65461
   674  007557  FFB8               	dw	65464
   675  007559  FFBC               	dw	65468
   676  00755B  FFBF               	dw	65471
   677  00755D  FFC3               	dw	65475
   678  00755F  FFC6               	dw	65478
   679  007561  FFC9               	dw	65481
   680  007563  FFCD               	dw	65485
   681  007565  FFD0               	dw	65488
   682  007567  FFD4               	dw	65492
   683  007569  FFD7               	dw	65495
   684  00756B  FFDA               	dw	65498
   685  00756D  FFDE               	dw	65502
   686  00756F  FFE1               	dw	65505
   687  007571  FFE5               	dw	65509
   688  007573  FFE8               	dw	65512
   689  007575  FFEC               	dw	65516
   690  007577  FFEF               	dw	65519
   691  007579  FFF2               	dw	65522
   692  00757B  FFF6               	dw	65526
   693  00757D  FFF9               	dw	65529
   694  00757F  FFFD               	dw	65533
   695  007581  0000               	dw	0
   696  007583  0004               	dw	4
   697  007585  0007               	dw	7
   698  007587  000A               	dw	10
   699  007589  000E               	dw	14
   700  00758B  0011               	dw	17
   701  00758D  0015               	dw	21
   702  00758F  0018               	dw	24
   703  007591  001C               	dw	28
   704  007593  001F               	dw	31
   705  007595  0022               	dw	34
   706  007597  0026               	dw	38
   707  007599  0029               	dw	41
   708  00759B  002D               	dw	45
   709  00759D  0030               	dw	48
   710  00759F  0034               	dw	52
   711  0075A1  0037               	dw	55
   712  0075A3  003B               	dw	59
   713  0075A5  003E               	dw	62
   714  0075A7  0041               	dw	65
   715  0075A9  0045               	dw	69
   716  0075AB  0048               	dw	72
   717  0075AD  004C               	dw	76
   718  0075AF  004F               	dw	79
   719  0075B1  0053               	dw	83
   720  0075B3  0056               	dw	86
   721  0075B5  005A               	dw	90
   722  0075B7  005D               	dw	93
   723  0075B9  0060               	dw	96
   724  0075BB  0064               	dw	100
   725  0075BD  0067               	dw	103
   726  0075BF  006B               	dw	107
   727  0075C1  006E               	dw	110
   728  0075C3  0072               	dw	114
   729  0075C5  0075               	dw	117
   730  0075C7  0079               	dw	121
   731  0075C9  007C               	dw	124
   732  0075CB  007F               	dw	127
   733  0075CD  0083               	dw	131
   734  0075CF  0086               	dw	134
   735  0075D1  008A               	dw	138
   736  0075D3  008D               	dw	141
   737  0075D5  0091               	dw	145
   738  0075D7  0094               	dw	148
   739  0075D9  0098               	dw	152
   740  0075DB  009B               	dw	155
   741  0075DD  009E               	dw	158
   742  0075DF  00A2               	dw	162
   743  0075E1  00A5               	dw	165
   744  0075E3  00A9               	dw	169
   745  0075E5  00AC               	dw	172
   746  0075E7  00B0               	dw	176
   747  0075E9  00B3               	dw	179
   748  0075EB  00B7               	dw	183
   749  0075ED  00BA               	dw	186
   750  0075EF  00BD               	dw	189
   751  0075F1  00C1               	dw	193
   752  0075F3  00C4               	dw	196
   753  0075F5  00C8               	dw	200
   754  0075F7  00CB               	dw	203
   755  0075F9  00CF               	dw	207
   756  0075FB  00D2               	dw	210
   757  0075FD  00D6               	dw	214
   758  0075FF  00D9               	dw	217
   759  007601  00DD               	dw	221
   760  007603  00E0               	dw	224
   761  007605  00E4               	dw	228
   762  007607  00E7               	dw	231
   763  007609  00EA               	dw	234
   764  00760B  00EE               	dw	238
   765  00760D  00F1               	dw	241
   766  00760F  00F5               	dw	245
   767  007611  00FA               	dw	250
   768  007613  00FC               	dw	252
   769  007615  00FF               	dw	255
   770  007617  0103               	dw	259
   771  007619  0106               	dw	262
   772  00761B  010A               	dw	266
   773  00761D  010D               	dw	269
   774  00761F  0111               	dw	273
   775  007621  0114               	dw	276
   776  007623  0118               	dw	280
   777  007625  011B               	dw	283
   778  007627  011F               	dw	287
   779  007629  0122               	dw	290
   780  00762B  0126               	dw	294
   781  00762D  0129               	dw	297
   782  00762F  012C               	dw	300
   783  007631  0130               	dw	304
   784  007633  0134               	dw	308
   785  007635  0137               	dw	311
   786  007637  013B               	dw	315
   787  007639  013E               	dw	318
   788  00763B  0142               	dw	322
   789  00763D  0145               	dw	325
   790  00763F  0149               	dw	329
   791  007641  014C               	dw	332
   792  007643  0150               	dw	336
   793  007645  0153               	dw	339
   794  007647  0157               	dw	343
   795  007649  015A               	dw	346
   796  00764B  015E               	dw	350
   797  00764D  0162               	dw	354
   798  00764F  0165               	dw	357
   799  007651  0169               	dw	361
   800  007653  016C               	dw	364
   801  007655  0170               	dw	368
   802  007657  0173               	dw	371
   803  007659  0177               	dw	375
   804  00765B  017A               	dw	378
   805  00765D  017E               	dw	382
   806  00765F  0181               	dw	385
   807  007661  0185               	dw	389
   808  007663  0188               	dw	392
   809  007665  018C               	dw	396
   810  007667  0190               	dw	400
   811  007669  0193               	dw	403
   812  00766B  0197               	dw	407
   813  00766D  019A               	dw	410
   814  00766F  019E               	dw	414
   815  007671  01A1               	dw	417
   816  007673  01A5               	dw	421
   817  007675  01A9               	dw	425
   818  007677  01AC               	dw	428
   819  007679  01B0               	dw	432
   820  00767B  01B3               	dw	435
   821  00767D  01B7               	dw	439
   822  00767F  01BB               	dw	443
   823  007681  01BE               	dw	446
   824  007683  01C2               	dw	450
   825  007685  01C5               	dw	453
   826  007687  01C9               	dw	457
   827  007689  01CD               	dw	461
   828  00768B  01D0               	dw	464
   829  00768D  01D4               	dw	468
   830  00768F  01D7               	dw	471
   831  007691  01DB               	dw	475
   832  007693  01DF               	dw	479
   833  007695  01E2               	dw	482
   834  007697  01E6               	dw	486
   835  007699  01E9               	dw	489
   836  00769B  01ED               	dw	493
   837  00769D  01F1               	dw	497
   838  00769F  01F4               	dw	500
   839  0076A1  01F8               	dw	504
   840  0076A3  01FC               	dw	508
   841  0076A5  01FF               	dw	511
   842  0076A7  0203               	dw	515
   843  0076A9  0207               	dw	519
   844  0076AB  020A               	dw	522
   845  0076AD  020E               	dw	526
   846  0076AF  0211               	dw	529
   847  0076B1  0215               	dw	533
   848  0076B3  0219               	dw	537
   849  0076B5  021C               	dw	540
   850  0076B7  0220               	dw	544
   851  0076B9  0224               	dw	548
   852  0076BB  0227               	dw	551
   853  0076BD  022B               	dw	555
   854  0076BF  022F               	dw	559
   855  0076C1  0232               	dw	562
   856  0076C3  0236               	dw	566
   857  0076C5  023A               	dw	570
   858  0076C7  023D               	dw	573
   859  0076C9  0241               	dw	577
   860  0076CB  0245               	dw	581
   861  0076CD  0248               	dw	584
   862  0076CF  024C               	dw	588
   863  0076D1  0250               	dw	592
   864  0076D3  0253               	dw	595
   865  0076D5  0258               	dw	600
   866  0076D7  025B               	dw	603
   867  0076D9  025E               	dw	606
   868  0076DB  0262               	dw	610
   869  0076DD  0266               	dw	614
   870  0076DF  026A               	dw	618
   871  0076E1  026D               	dw	621
   872  0076E3  0271               	dw	625
   873  0076E5  0275               	dw	629
   874  0076E7  0279               	dw	633
   875  0076E9  027C               	dw	636
   876  0076EB  0280               	dw	640
   877  0076ED  0284               	dw	644
   878  0076EF  0287               	dw	647
   879  0076F1  028B               	dw	651
   880  0076F3  028F               	dw	655
   881  0076F5  0293               	dw	659
   882  0076F7  0296               	dw	662
   883  0076F9  029A               	dw	666
   884  0076FB  029E               	dw	670
   885  0076FD  02A2               	dw	674
   886  0076FF  02A5               	dw	677
   887  007701  02A9               	dw	681
   888  007703  02AD               	dw	685
   889  007705  02B0               	dw	688
   890  007707  02B4               	dw	692
   891  007709  02B8               	dw	696
   892  00770B  02BC               	dw	700
   893  00770D  02BF               	dw	703
   894  00770F  02C3               	dw	707
   895  007711  02C7               	dw	711
   896  007713  02CB               	dw	715
   897  007715  02CF               	dw	719
   898  007717  02D3               	dw	723
   899  007719  02D6               	dw	726
   900  00771B  02DA               	dw	730
   901  00771D  02DE               	dw	734
   902  00771F  02E2               	dw	738
   903  007721  02E6               	dw	742
   904  007723  02EA               	dw	746
   905  007725  02ED               	dw	749
   906  007727  02F1               	dw	753
   907  007729  02F5               	dw	757
   908  00772B  02F9               	dw	761
   909  00772D  02FD               	dw	765
   910  00772F  0301               	dw	769
   911  007731  0304               	dw	772
   912  007733  0308               	dw	776
   913  007735  030C               	dw	780
   914  007737  0310               	dw	784
   915  007739  0314               	dw	788
   916  00773B  0317               	dw	791
   917  00773D  031B               	dw	795
   918  00773F  0320               	dw	800
   919  007741  0323               	dw	803
   920  007743  0327               	dw	807
   921  007745  032B               	dw	811
   922  007747  032F               	dw	815
   923  007749  0333               	dw	819
   924  00774B  0337               	dw	823
   925  00774D  033B               	dw	827
   926  00774F  033F               	dw	831
   927  007751  0343               	dw	835
   928  007753  0346               	dw	838
   929  007755  034A               	dw	842
   930  007757  034E               	dw	846
   931  007759  0352               	dw	850
   932  00775B  0356               	dw	854
   933  00775D  035A               	dw	858
   934  00775F  035E               	dw	862
   935  007761  0362               	dw	866
   936  007763  0366               	dw	870
   937  007765  036A               	dw	874
   938  007767  036E               	dw	878
   939  007769  0372               	dw	882
   940  00776B  0376               	dw	886
   941  00776D  037A               	dw	890
   942  00776F  037E               	dw	894
   943  007771  0381               	dw	897
   944  007773  0384               	dw	900
   945  007775  038A               	dw	906
   946  007777  038E               	dw	910
   947  007779  0392               	dw	914
   948  00777B  0396               	dw	918
   949  00777D  039A               	dw	922
   950  00777F  039E               	dw	926
   951  007781  03A2               	dw	930
   952  007783  03A6               	dw	934
   953  007785  03AA               	dw	938
   954  007787  03AE               	dw	942
   955  007789  03B2               	dw	946
   956  00778B  03B6               	dw	950
   957  00778D  03BA               	dw	954
   958  00778F  03BE               	dw	958
   959  007791  03C2               	dw	962
   960  007793  03C6               	dw	966
   961  007795  03CA               	dw	970
   962  007797  03CE               	dw	974
   963  007799  03D2               	dw	978
   964  00779B  03D6               	dw	982
   965  00779D  03DA               	dw	986
   966  00779F  03DE               	dw	990
   967  0077A1  03E2               	dw	994
   968  0077A3  03E8               	dw	1000
   969  0077A5  03EA               	dw	1002
   970  0077A7  03EF               	dw	1007
   971  0077A9  03F3               	dw	1011
   972  0077AB  03F7               	dw	1015
   973  0077AD  03FB               	dw	1019
   974  0077AF  03FF               	dw	1023
   975  0077B1  0404               	dw	1028
   976  0077B3  0408               	dw	1032
   977  0077B5  040C               	dw	1036
   978  0077B7  0410               	dw	1040
   979  0077B9  0414               	dw	1044
   980  0077BB  0419               	dw	1049
   981  0077BD  041D               	dw	1053
   982  0077BF  0421               	dw	1057
   983  0077C1  0425               	dw	1061
   984  0077C3  0429               	dw	1065
   985  0077C5  042E               	dw	1070
   986  0077C7  0432               	dw	1074
   987  0077C9  0436               	dw	1078
   988  0077CB  043A               	dw	1082
   989  0077CD  043E               	dw	1086
   990  0077CF  0443               	dw	1091
   991  0077D1  0447               	dw	1095
   992  0077D3  044C               	dw	1100
   993  0077D5  044F               	dw	1103
   994  0077D7  0454               	dw	1108
   995  0077D9  0459               	dw	1113
   996  0077DB  045D               	dw	1117
   997  0077DD  0462               	dw	1122
   998  0077DF  0466               	dw	1126
   999  0077E1  046B               	dw	1131
  1000  0077E3  046F               	dw	1135
  1001  0077E5  0474               	dw	1140
  1002  0077E7  0479               	dw	1145
  1003  0077E9  047D               	dw	1149
  1004  0077EB  0482               	dw	1154
  1005  0077ED  0486               	dw	1158
  1006  0077EF  048B               	dw	1163
  1007  0077F1  048F               	dw	1167
  1008  0077F3  0494               	dw	1172
  1009  0077F5  0499               	dw	1177
  1010  0077F7  049D               	dw	1181
  1011  0077F9  04A2               	dw	1186
  1012  0077FB  04A6               	dw	1190
  1013  0077FD  04AB               	dw	1195
  1014  0077FF  04B0               	dw	1200
  1015  007801  04B5               	dw	1205
  1016  007803  04BA               	dw	1210
  1017  007805  04BF               	dw	1215
  1018  007807  04C4               	dw	1220
  1019  007809  04C9               	dw	1225
  1020  00780B  04CE               	dw	1230
  1021  00780D  04D3               	dw	1235
  1022  00780F  04D8               	dw	1240
  1023  007811  04DD               	dw	1245
  1024  007813  04E2               	dw	1250
  1025  007815  04E8               	dw	1256
  1026  007817  04EE               	dw	1262
  1027  007819  04F3               	dw	1267
  1028  00781B  04F9               	dw	1273
  1029  00781D  04FE               	dw	1278
  1030  00781F  0504               	dw	1284
  1031  007821  0509               	dw	1289
  1032  007823  050F               	dw	1295
  1033  007825  0514               	dw	1300
  1034  007827  051B               	dw	1307
  1035  007829  0522               	dw	1314
  1036  00782B  0529               	dw	1321
  1037  00782D  0530               	dw	1328
  1038  00782F  0536               	dw	1334
  1039  007831  053D               	dw	1341
  1040  007833  0544               	dw	1348
  1041  007835  054B               	dw	1355
  1042  007837  0551               	dw	1361
  1043  007839  0558               	dw	1368
  1044  00783B  055F               	dw	1375
  1045  00783D  0566               	dw	1382
  1046  00783F  056C               	dw	1388
  1047  007841  0573               	dw	1395
  1048  007843  0578               	dw	1400
  1049  007845  0584               	dw	1412
  1050  007847  058E               	dw	1422
  1051  007849  0598               	dw	1432
  1052  00784B  05A1               	dw	1441
  1053  00784D  05AB               	dw	1451
  1054  00784F  05B5               	dw	1461
  1055  007851  05BE               	dw	1470
  1056  007853  05C8               	dw	1480
  1057  007855  05D2               	dw	1490
  1058  007857  05DC               	dw	1500
  1059  007859  05DC               	dw	1500
  1060  00785B  05DC               	dw	1500
  1061  00785D  05DC               	dw	1500
  1062  00785F  05DC               	dw	1500
  1063  007861  05DC               	dw	1500
  1064  007863  05DC               	dw	1500
  1065  007865  05DC               	dw	1500
  1066  007867  05DC               	dw	1500
  1067  007869  05DC               	dw	1500
  1068  00786B  05DC               	dw	1500
  1069  00786D  05DC               	dw	1500
  1070  00786F  05DC               	dw	1500
  1071  007871  05DC               	dw	1500
  1072  007873  05DC               	dw	1500
  1073  007875  05DC               	dw	1500
  1074  007877  05DC               	dw	1500
  1075  007879  05DC               	dw	1500
  1076  00787B  05DC               	dw	1500
  1077  00787D  05DC               	dw	1500
  1078  00787F  05DC               	dw	1500
  1079  007881  05DC               	dw	1500
  1080  007883  05DC               	dw	1500
  1081  007885  05DC               	dw	1500
  1082  007887  05DC               	dw	1500
  1083  007889  05DC               	dw	1500
  1084  00788B  05DC               	dw	1500
  1085  00788D  05DC               	dw	1500
  1086  00788F  05DC               	dw	1500
  1087  007891  05DC               	dw	1500
  1088  007893  05DC               	dw	1500
  1089  007895  05DC               	dw	1500
  1090  007897  05DC               	dw	1500
  1091  007899  05DC               	dw	1500
  1092  00789B  05DC               	dw	1500
  1093  00789D  05DC               	dw	1500
  1094  00789F  05DC               	dw	1500
  1095  0078A1  05DC               	dw	1500
  1096  0078A3  05DC               	dw	1500
  1097  0078A5  05DC               	dw	1500
  1098  0078A7  05DC               	dw	1500
  1099  0078A9  05DC               	dw	1500
  1100  0078AB  05DC               	dw	1500
  1101  0078AD  05DC               	dw	1500
  1102  0078AF  05DC               	dw	1500
  1103  0078B1  05DC               	dw	1500
  1104  0078B3  05DC               	dw	1500
  1105  0078B5  05DC               	dw	1500
  1106  0078B7  05DC               	dw	1500
  1107  0078B9  05DC               	dw	1500
  1108  0078BB  05DC               	dw	1500
  1109  0078BD  05DC               	dw	1500
  1110  0078BF  05DC               	dw	1500
  1111  0078C1  05DC               	dw	1500
  1112  0078C3  05DC               	dw	1500
  1113  0078C5  05DC               	dw	1500
  1114  0078C7  05DC               	dw	1500
  1115  0078C9  05DC               	dw	1500
  1116  0078CB  05DC               	dw	1500
  1117  0078CD  05DC               	dw	1500
  1118  0078CF  05DC               	dw	1500
  1119  0078D1  05DC               	dw	1500
  1120  0078D3  05DC               	dw	1500
  1121  0078D5  05DC               	dw	1500
  1122  0078D7  05DC               	dw	1500
  1123  0078D9  05DC               	dw	1500
  1124  0078DB  05DC               	dw	1500
  1125  0078DD  05DC               	dw	1500
  1126  0078DF  05DC               	dw	1500
  1127  0078E1  05DC               	dw	1500
  1128  0078E3  05DC               	dw	1500
  1129  0078E5  05DC               	dw	1500
  1130  0078E7  05DC               	dw	1500
  1131  0078E9  05DC               	dw	1500
  1132  0078EB  05DC               	dw	1500
  1133  0078ED  05DC               	dw	1500
  1134  0078EF  05DC               	dw	1500
  1135  0078F1  05DC               	dw	1500
  1136  0078F3  05DC               	dw	1500
  1137  0078F5  05DC               	dw	1500
  1138  0078F7  05DC               	dw	1500
  1139  0078F9  05DC               	dw	1500
  1140  0078FB  05DC               	dw	1500
  1141  0078FD  05DC               	dw	1500
  1142  0078FF  05DC               	dw	1500
  1143  007901  05DC               	dw	1500
  1144  007903  05DC               	dw	1500
  1145  007905  05DC               	dw	1500
  1146  007907  05DC               	dw	1500
  1147  007909  05DC               	dw	1500
  1148  00790B  05DC               	dw	1500
  1149  00790D  05DC               	dw	1500
  1150  00790F  05DC               	dw	1500
  1151  007911  05DC               	dw	1500
  1152  007913  05DC               	dw	1500
  1153  007915  05DC               	dw	1500
  1154  007917  05DC               	dw	1500
  1155  007919  05DC               	dw	1500
  1156  00791B  05DC               	dw	1500
  1157  00791D  05DC               	dw	1500
  1158  00791F  05DC               	dw	1500
  1159  007921  05DC               	dw	1500
  1160  007923  05DC               	dw	1500
  1161  007925  05DC               	dw	1500
  1162  007927  05DC               	dw	1500
  1163  007929  05DC               	dw	1500
  1164  00792B  05DC               	dw	1500
  1165  00792D  05DC               	dw	1500
  1166  00792F  05DC               	dw	1500
  1167  007931  05DC               	dw	1500
  1168  007933  05DC               	dw	1500
  1169  007935  05DC               	dw	1500
  1170  007937  05DC               	dw	1500
  1171  007939  05DC               	dw	1500
  1172  00793B  05DC               	dw	1500
  1173  00793D  05DC               	dw	1500
  1174  00793F  05DC               	dw	1500
  1175  007941  05DC               	dw	1500
  1176  007943  05DC               	dw	1500
  1177  007945  05DC               	dw	1500
  1178  007947  05DC               	dw	1500
  1179  007949  05DC               	dw	1500
  1180  00794B  05DC               	dw	1500
  1181  00794D  05DC               	dw	1500
  1182  00794F  05DC               	dw	1500
  1183  007951  05DC               	dw	1500
  1184  007953  05DC               	dw	1500
  1185  007955  05DC               	dw	1500
  1186  007957  05DC               	dw	1500
  1187  007959  05DC               	dw	1500
  1188  00795B  05DC               	dw	1500
  1189  00795D  05DC               	dw	1500
  1190  00795F  05DC               	dw	1500
  1191  007961  05DC               	dw	1500
  1192  007963  05DC               	dw	1500
  1193  007965  05DC               	dw	1500
  1194  007967  05DC               	dw	1500
  1195  007969  05DC               	dw	1500
  1196  00796B  05DC               	dw	1500
  1197  00796D  05DC               	dw	1500
  1198  00796F  05DC               	dw	1500
  1199  007971  05DC               	dw	1500
  1200  007973  05DC               	dw	1500
  1201  007975  05DC               	dw	1500
  1202  007977  05DC               	dw	1500
  1203  007979  05DC               	dw	1500
  1204  00797B  05DC               	dw	1500
  1205  00797D  05DC               	dw	1500
  1206  00797F                     __end_of_table_220:
  1207                           	opt callstack 0
  1208  00797F                     _freq_table:
  1209                           	opt callstack 0
  1210  00797F  0F50               	dw	3920
  1211  007981  001E               	dw	30
  1212  007983  0780               	dw	1920
  1213  007985  001E               	dw	30
  1214  007987  F4D0               	dw	62672
  1215  007989  0017               	dw	23
  1216  00798B  EFF0               	dw	61424
  1217  00798D  0010               	dw	16
  1218  00798F                     __end_of_freq_table:
  1219                           	opt callstack 0
  1220  00798F                     _PIN_POWER_GOOD:
  1221                           	opt callstack 0
  1222  00798F  C1                 	db	low _PIN_POWER_GOOD_DEF
  1223  007990  79                 	db	high _PIN_POWER_GOOD_DEF
  1224  007991                     __end_of_PIN_POWER_GOOD:
  1225                           	opt callstack 0
  1226  007991  B7                 	db	low _PIN_USART_RX_DEF
  1227  007992  79                 	db	high _PIN_USART_RX_DEF
  1228  007993                     __end_of_PIN_USART_RX:
  1229                           	opt callstack 0
  1230  007993  BC                 	db	low _PIN_USART_TX_DEF
  1231  007994  79                 	db	high _PIN_USART_TX_DEF
  1232  007995                     __end_of_PIN_USART_TX:
  1233                           	opt callstack 0
  1234  007995  D0                 	db	low _PIN_LED_ADF_LOCK_DEF
  1235  007996  79                 	db	high _PIN_LED_ADF_LOCK_DEF
  1236  007997                     __end_of_PIN_LED_ADF_LOCK:
  1237                           	opt callstack 0
  1238  007997  D5                 	db	low _PIN_LED_CPU_OK_DEF
  1239  007998  79                 	db	high _PIN_LED_CPU_OK_DEF
  1240  007999                     __end_of_PIN_LED_CPU_OK:
  1241                           	opt callstack 0
  1242  007999  DA                 	db	low _PIN_FSW1_DEF
  1243  00799A  79                 	db	high _PIN_FSW1_DEF
  1244  00799B                     __end_of_PIN_FSW1:
  1245                           	opt callstack 0
  1246  00799B  DF                 	db	low _PIN_FSW0_DEF
  1247  00799C  79                 	db	high _PIN_FSW0_DEF
  1248  00799D                     __end_of_PIN_FSW0:
  1249                           	opt callstack 0
  1250  00799D  F8                 	db	low _PIN_PTT_INPUT_DEF
  1251  00799E  79                 	db	high _PIN_PTT_INPUT_DEF
  1252  00799F                     __end_of_PIN_PTT_INPUT:
  1253                           	opt callstack 0
  1254  00799F  CB                 	db	low _PIN_LED_PTT_ACTIVE_DEF
  1255  0079A0  79                 	db	high _PIN_LED_PTT_ACTIVE_DEF
  1256  0079A1                     __end_of_PIN_LED_PTT_ACTIVE:
  1257                           	opt callstack 0
  1258  0079A1  C6                 	db	low _PIN_PA_ENABLE_DEF
  1259  0079A2  79                 	db	high _PIN_PA_ENABLE_DEF
  1260  0079A3                     __end_of_PIN_PA_ENABLE:
  1261                           	opt callstack 0
  1262  0079A3  FD                 	db	low _PIN_ADF_FREQ_SEL_DEF
  1263  0079A4  79                 	db	high _PIN_ADF_FREQ_SEL_DEF
  1264  0079A5                     __end_of_PIN_ADF_FREQ_SEL:
  1265                           	opt callstack 0
  1266  0079A5  E4                 	db	low _PIN_VOLTAGE_DEF
  1267  0079A6  79                 	db	high _PIN_VOLTAGE_DEF
  1268  0079A7                     __end_of_PIN_VOLTAGE:
  1269                           	opt callstack 0
  1270  0079A7  E9                 	db	low _PIN_RF_R_DEF
  1271  0079A8  79                 	db	high _PIN_RF_R_DEF
  1272  0079A9                     __end_of_PIN_RF_R:
  1273                           	opt callstack 0
  1274  0079A9  EE                 	db	low _PIN_RF_V_DEF
  1275  0079AA  79                 	db	high _PIN_RF_V_DEF
  1276  0079AB                     __end_of_PIN_RF_V:
  1277                           	opt callstack 0
  1278  0079AB  F3                 	db	low _PIN_TEMP_DEF
  1279  0079AC  79                 	db	high _PIN_TEMP_DEF
  1280  0079AD                     __end_of_PIN_TEMP:
  1281                           	opt callstack 0
  1282  0079AD  07                 	db	low _PIN_SIO_DATA_DEF
  1283  0079AE  7A                 	db	high _PIN_SIO_DATA_DEF
  1284  0079AF                     __end_of_PIN_SIO_DATA:
  1285                           	opt callstack 0
  1286  0079AF  02                 	db	low _PIN_SIO_CLK_DEF
  1287  0079B0  7A                 	db	high _PIN_SIO_CLK_DEF
  1288  0079B1                     __end_of_PIN_SIO_CLK:
  1289                           	opt callstack 0
  1290  0079B1  16                 	db	low _PIN_ADF_LOCK_DEF
  1291  0079B2  7A                 	db	high _PIN_ADF_LOCK_DEF
  1292  0079B3                     __end_of_PIN_ADF_LOCK:
  1293                           	opt callstack 0
  1294  0079B3  11                 	db	low _PIN_ADF_CE_DEF
  1295  0079B4  7A                 	db	high _PIN_ADF_CE_DEF
  1296  0079B5                     __end_of_PIN_ADF_CE:
  1297                           	opt callstack 0
  1298  0079B5  0C                 	db	low _PIN_ADF_LE_DEF
  1299  0079B6  7A                 	db	high _PIN_ADF_LE_DEF
  1300  0079B7                     __end_of_PIN_ADF_LE:
  1301                           	opt callstack 0
  1302  0079B7                     _PIN_USART_RX_DEF:
  1303                           	opt callstack 0
  1304  0079B7  82                 	db	130
  1305  0079B8  0F                 	db	15
  1306  0079B9  94                 	db	148
  1307  0079BA  0F                 	db	15
  1308  0079BB  80                 	db	128
  1309  0079BC                     __end_of_PIN_USART_RX_DEF:
  1310                           	opt callstack 0
  1311  0079BC                     _PIN_USART_TX_DEF:
  1312                           	opt callstack 0
  1313  0079BC  82                 	db	130
  1314  0079BD  0F                 	db	15
  1315  0079BE  94                 	db	148
  1316  0079BF  0F                 	db	15
  1317  0079C0  40                 	db	64
  1318  0079C1                     __end_of_PIN_USART_TX_DEF:
  1319                           	opt callstack 0
  1320  0079C1                     _PIN_POWER_GOOD_DEF:
  1321  0079C1  82                 	db	130
  1322  0079C2  0F                 	db	15
  1323  0079C3  94                 	db	148
  1324  0079C4  0F                 	db	15
  1325  0079C5  20                 	db	32
  1326  0079C6                     __end_of_PIN_POWER_GOOD_DEF:
  1327                           	opt callstack 0
  1328  0079C6                     _PIN_PA_ENABLE_DEF:
  1329                           	opt callstack 0
  1330  0079C6  82                 	db	130
  1331  0079C7  0F                 	db	15
  1332  0079C8  94                 	db	148
  1333  0079C9  0F                 	db	15
  1334  0079CA  10                 	db	16
  1335  0079CB                     __end_of_PIN_PA_ENABLE_DEF:
  1336                           	opt callstack 0
  1337  0079CB                     _PIN_LED_PTT_ACTIVE_DEF:
  1338                           	opt callstack 0
  1339  0079CB  82                 	db	130
  1340  0079CC  0F                 	db	15
  1341  0079CD  94                 	db	148
  1342  0079CE  0F                 	db	15
  1343  0079CF  04                 	db	4
  1344  0079D0                     __end_of_PIN_LED_PTT_ACTIVE_DEF:
  1345                           	opt callstack 0
  1346  0079D0                     _PIN_LED_ADF_LOCK_DEF:
  1347                           	opt callstack 0
  1348  0079D0  82                 	db	130
  1349  0079D1  0F                 	db	15
  1350  0079D2  94                 	db	148
  1351  0079D3  0F                 	db	15
  1352  0079D4  02                 	db	2
  1353  0079D5                     __end_of_PIN_LED_ADF_LOCK_DEF:
  1354                           	opt callstack 0
  1355  0079D5                     _PIN_LED_CPU_OK_DEF:
  1356                           	opt callstack 0
  1357  0079D5  82                 	db	130
  1358  0079D6  0F                 	db	15
  1359  0079D7  94                 	db	148
  1360  0079D8  0F                 	db	15
  1361  0079D9  01                 	db	1
  1362  0079DA                     __end_of_PIN_LED_CPU_OK_DEF:
  1363                           	opt callstack 0
  1364  0079DA                     _PIN_FSW1_DEF:
  1365                           	opt callstack 0
  1366  0079DA  81                 	db	129
  1367  0079DB  0F                 	db	15
  1368  0079DC  93                 	db	147
  1369  0079DD  0F                 	db	15
  1370  0079DE  20                 	db	32
  1371  0079DF                     __end_of_PIN_FSW1_DEF:
  1372                           	opt callstack 0
  1373  0079DF                     _PIN_FSW0_DEF:
  1374                           	opt callstack 0
  1375  0079DF  81                 	db	129
  1376  0079E0  0F                 	db	15
  1377  0079E1  93                 	db	147
  1378  0079E2  0F                 	db	15
  1379  0079E3  10                 	db	16
  1380  0079E4                     __end_of_PIN_FSW0_DEF:
  1381                           	opt callstack 0
  1382  0079E4                     _PIN_VOLTAGE_DEF:
  1383                           	opt callstack 0
  1384  0079E4  81                 	db	129
  1385  0079E5  0F                 	db	15
  1386  0079E6  93                 	db	147
  1387  0079E7  0F                 	db	15
  1388  0079E8  08                 	db	8
  1389  0079E9                     __end_of_PIN_VOLTAGE_DEF:
  1390                           	opt callstack 0
  1391  0079E9                     _PIN_RF_R_DEF:
  1392                           	opt callstack 0
  1393  0079E9  81                 	db	129
  1394  0079EA  0F                 	db	15
  1395  0079EB  93                 	db	147
  1396  0079EC  0F                 	db	15
  1397  0079ED  04                 	db	4
  1398  0079EE                     __end_of_PIN_RF_R_DEF:
  1399                           	opt callstack 0
  1400  0079EE                     _PIN_RF_V_DEF:
  1401                           	opt callstack 0
  1402  0079EE  81                 	db	129
  1403  0079EF  0F                 	db	15
  1404  0079F0  93                 	db	147
  1405  0079F1  0F                 	db	15
  1406  0079F2  02                 	db	2
  1407  0079F3                     __end_of_PIN_RF_V_DEF:
  1408                           	opt callstack 0
  1409  0079F3                     _PIN_TEMP_DEF:
  1410                           	opt callstack 0
  1411  0079F3  81                 	db	129
  1412  0079F4  0F                 	db	15
  1413  0079F5  93                 	db	147
  1414  0079F6  0F                 	db	15
  1415  0079F7  01                 	db	1
  1416  0079F8                     __end_of_PIN_TEMP_DEF:
  1417                           	opt callstack 0
  1418  0079F8                     _PIN_PTT_INPUT_DEF:
  1419                           	opt callstack 0
  1420  0079F8  80                 	db	128
  1421  0079F9  0F                 	db	15
  1422  0079FA  92                 	db	146
  1423  0079FB  0F                 	db	15
  1424  0079FC  80                 	db	128
  1425  0079FD                     __end_of_PIN_PTT_INPUT_DEF:
  1426                           	opt callstack 0
  1427  0079FD                     _PIN_ADF_FREQ_SEL_DEF:
  1428                           	opt callstack 0
  1429  0079FD  80                 	db	128
  1430  0079FE  0F                 	db	15
  1431  0079FF  92                 	db	146
  1432  007A00  0F                 	db	15
  1433  007A01  40                 	db	64
  1434  007A02                     __end_of_PIN_ADF_FREQ_SEL_DEF:
  1435                           	opt callstack 0
  1436  007A02                     _PIN_SIO_CLK_DEF:
  1437                           	opt callstack 0
  1438  007A02  80                 	db	128
  1439  007A03  0F                 	db	15
  1440  007A04  92                 	db	146
  1441  007A05  0F                 	db	15
  1442  007A06  10                 	db	16
  1443  007A07                     __end_of_PIN_SIO_CLK_DEF:
  1444                           	opt callstack 0
  1445  007A07                     _PIN_SIO_DATA_DEF:
  1446                           	opt callstack 0
  1447  007A07  80                 	db	128
  1448  007A08  0F                 	db	15
  1449  007A09  92                 	db	146
  1450  007A0A  0F                 	db	15
  1451  007A0B  08                 	db	8
  1452  007A0C                     __end_of_PIN_SIO_DATA_DEF:
  1453                           	opt callstack 0
  1454  007A0C                     _PIN_ADF_LE_DEF:
  1455                           	opt callstack 0
  1456  007A0C  80                 	db	128
  1457  007A0D  0F                 	db	15
  1458  007A0E  92                 	db	146
  1459  007A0F  0F                 	db	15
  1460  007A10  04                 	db	4
  1461  007A11                     __end_of_PIN_ADF_LE_DEF:
  1462                           	opt callstack 0
  1463  007A11                     _PIN_ADF_CE_DEF:
  1464                           	opt callstack 0
  1465  007A11  80                 	db	128
  1466  007A12  0F                 	db	15
  1467  007A13  92                 	db	146
  1468  007A14  0F                 	db	15
  1469  007A15  02                 	db	2
  1470  007A16                     __end_of_PIN_ADF_CE_DEF:
  1471                           	opt callstack 0
  1472  007A16                     _PIN_ADF_LOCK_DEF:
  1473                           	opt callstack 0
  1474  007A16  80                 	db	128
  1475  007A17  0F                 	db	15
  1476  007A18  92                 	db	146
  1477  007A19  0F                 	db	15
  1478  007A1A  01                 	db	1
  1479  007A1B                     __end_of_PIN_ADF_LOCK_DEF:
  1480                           	opt callstack 0
  1481  0000                     _INTCON2bits	set	4081
  1482  0000                     _RCONbits	set	4048
  1483  0000                     _PIE2	set	4000
  1484  0000                     _PIE1	set	3997
  1485  0000                     _OSCCONbits	set	4051
  1486  0000                     _OSCCON	set	4051
  1487  0000                     _OSCTUNE	set	3995
  1488  0000                     _ADRESL	set	4035
  1489  0000                     _ADRESH	set	4036
  1490  0000                     _ADCON0bits	set	4034
  1491  0000                     _ADCON2bits	set	4032
  1492  0000                     _ADCON1bits	set	4033
  1493  0000                     _INTCONbits	set	4082
  1494  0000                     _PIR1bits	set	3998
  1495  0000                     _RCREG	set	4014
  1496  0000                     _TXREG	set	4013
  1497  0000                     _PIE1bits	set	3997
  1498  0000                     _SPBRG	set	4015
  1499  0000                     _SPBRGH	set	4016
  1500  0000                     _BAUDCONbits	set	4024
  1501  0000                     _RCSTAbits	set	4011
  1502  0000                     _TXSTAbits	set	4012
  1503  0000                     _TRISC	set	3988
  1504  0000                     _PORTC	set	3970
  1505  0000                     _PORTA	set	3968
  1506  0000                     _TRISB	set	3987
  1507  0000                     _TRISA	set	3986
  1508  0000                     _PORTB	set	3969
  1509  007A1B                     STR_16:
  1510  007A1B  41                 	db	65	;'A'
  1511  007A1C  44                 	db	68	;'D'
  1512  007A1D  46                 	db	70	;'F'
  1513  007A1E  34                 	db	52	;'4'
  1514  007A1F  33                 	db	51	;'3'
  1515  007A20  35                 	db	53	;'5'
  1516  007A21  31                 	db	49	;'1'
  1517  007A22  20                 	db	32
  1518  007A23  57                 	db	87	;'W'
  1519  007A24  52                 	db	82	;'R'
  1520  007A25  49                 	db	73	;'I'
  1521  007A26  54                 	db	84	;'T'
  1522  007A27  45                 	db	69	;'E'
  1523  007A28  20                 	db	32
  1524  007A29  52                 	db	82	;'R'
  1525  007A2A  45                 	db	69	;'E'
  1526  007A2B  47                 	db	71	;'G'
  1527  007A2C  34                 	db	52	;'4'
  1528  007A2D  3A                 	db	58	;':'
  1529  007A2E  20                 	db	32
  1530  007A2F  30                 	db	48	;'0'
  1531  007A30  78                 	db	120	;'x'
  1532  007A31  25                 	db	37
  1533  007A32  30                 	db	48	;'0'
  1534  007A33  38                 	db	56	;'8'
  1535  007A34  6C                 	db	108	;'l'
  1536  007A35  58                 	db	88	;'X'
  1537  007A36  20                 	db	32
  1538  007A37  28                 	db	40
  1539  007A38  66                 	db	102	;'f'
  1540  007A39  62                 	db	98	;'b'
  1541  007A3A  73                 	db	115	;'s'
  1542  007A3B  65                 	db	101	;'e'
  1543  007A3C  6C                 	db	108	;'l'
  1544  007A3D  3D                 	db	61	;'='
  1545  007A3E  25                 	db	37
  1546  007A3F  69                 	db	105	;'i'
  1547  007A40  2C                 	db	44
  1548  007A41  20                 	db	32
  1549  007A42  64                 	db	100	;'d'
  1550  007A43  69                 	db	105	;'i'
  1551  007A44  76                 	db	118	;'v'
  1552  007A45  73                 	db	115	;'s'
  1553  007A46  65                 	db	101	;'e'
  1554  007A47  6C                 	db	108	;'l'
  1555  007A48  3D                 	db	61	;'='
  1556  007A49  25                 	db	37
  1557  007A4A  69                 	db	105	;'i'
  1558  007A4B  2C                 	db	44
  1559  007A4C  20                 	db	32
  1560  007A4D  62                 	db	98	;'b'
  1561  007A4E  73                 	db	115	;'s'
  1562  007A4F  63                 	db	99	;'c'
  1563  007A50  6C                 	db	108	;'l'
  1564  007A51  6B                 	db	107	;'k'
  1565  007A52  64                 	db	100	;'d'
  1566  007A53  69                 	db	105	;'i'
  1567  007A54  76                 	db	118	;'v'
  1568  007A55  3D                 	db	61	;'='
  1569  007A56  25                 	db	37
  1570  007A57  69                 	db	105	;'i'
  1571  007A58  2C                 	db	44
  1572  007A59  20                 	db	32
  1573  007A5A  76                 	db	118	;'v'
  1574  007A5B  63                 	db	99	;'c'
  1575  007A5C  6F                 	db	111	;'o'
  1576  007A5D  70                 	db	112	;'p'
  1577  007A5E  64                 	db	100	;'d'
  1578  007A5F  3D                 	db	61	;'='
  1579  007A60  25                 	db	37
  1580  007A61  69                 	db	105	;'i'
  1581  007A62  2C                 	db	44
  1582  007A63  20                 	db	32
  1583  007A64  6D                 	db	109	;'m'
  1584  007A65  74                 	db	116	;'t'
  1585  007A66  6C                 	db	108	;'l'
  1586  007A67  64                 	db	100	;'d'
  1587  007A68  3D                 	db	61	;'='
  1588  007A69  25                 	db	37
  1589  007A6A  69                 	db	105	;'i'
  1590  007A6B  2C                 	db	44
  1591  007A6C  20                 	db	32
  1592  007A6D  61                 	db	97	;'a'
  1593  007A6E  75                 	db	117	;'u'
  1594  007A6F  78                 	db	120	;'x'
  1595  007A70  6F                 	db	111	;'o'
  1596  007A71  75                 	db	117	;'u'
  1597  007A72  74                 	db	116	;'t'
  1598  007A73  73                 	db	115	;'s'
  1599  007A74  65                 	db	101	;'e'
  1600  007A75  6C                 	db	108	;'l'
  1601  007A76  3D                 	db	61	;'='
  1602  007A77  25                 	db	37
  1603  007A78  69                 	db	105	;'i'
  1604  007A79  2C                 	db	44
  1605  007A7A  20                 	db	32
  1606  007A7B  61                 	db	97	;'a'
  1607  007A7C  75                 	db	117	;'u'
  1608  007A7D  78                 	db	120	;'x'
  1609  007A7E  6F                 	db	111	;'o'
  1610  007A7F  75                 	db	117	;'u'
  1611  007A80  74                 	db	116	;'t'
  1612  007A81  65                 	db	101	;'e'
  1613  007A82  6E                 	db	110	;'n'
  1614  007A83  61                 	db	97	;'a'
  1615  007A84  3D                 	db	61	;'='
  1616  007A85  25                 	db	37
  1617  007A86  69                 	db	105	;'i'
  1618  007A87  2C                 	db	44
  1619  007A88  20                 	db	32
  1620  007A89  61                 	db	97	;'a'
  1621  007A8A  75                 	db	117	;'u'
  1622  007A8B  78                 	db	120	;'x'
  1623  007A8C  70                 	db	112	;'p'
  1624  007A8D  77                 	db	119	;'w'
  1625  007A8E  72                 	db	114	;'r'
  1626  007A8F  6F                 	db	111	;'o'
  1627  007A90  75                 	db	117	;'u'
  1628  007A91  74                 	db	116	;'t'
  1629  007A92  3D                 	db	61	;'='
  1630  007A93  25                 	db	37
  1631  007A94  69                 	db	105	;'i'
  1632  007A95  2C                 	db	44
  1633  007A96  20                 	db	32
  1634  007A97  72                 	db	114	;'r'
  1635  007A98  66                 	db	102	;'f'
  1636  007A99  6F                 	db	111	;'o'
  1637  007A9A  75                 	db	117	;'u'
  1638  007A9B  74                 	db	116	;'t'
  1639  007A9C  65                 	db	101	;'e'
  1640  007A9D  6E                 	db	110	;'n'
  1641  007A9E  61                 	db	97	;'a'
  1642  007A9F  3D                 	db	61	;'='
  1643  007AA0  25                 	db	37
  1644  007AA1  69                 	db	105	;'i'
  1645  007AA2  20                 	db	32
  1646  007AA3  72                 	db	114	;'r'
  1647  007AA4  66                 	db	102	;'f'
  1648  007AA5  6F                 	db	111	;'o'
  1649  007AA6  75                 	db	117	;'u'
  1650  007AA7  74                 	db	116	;'t'
  1651  007AA8  70                 	db	112	;'p'
  1652  007AA9  77                 	db	119	;'w'
  1653  007AAA  72                 	db	114	;'r'
  1654  007AAB  3D                 	db	61	;'='
  1655  007AAC  25                 	db	37
  1656  007AAD  69                 	db	105	;'i'
  1657  007AAE  20                 	db	32
  1658  007AAF  0D                 	db	13
  1659  007AB0  0A                 	db	10
  1660  007AB1  00                 	db	0
  1661  007AB2                     STR_14:
  1662  007AB2  41                 	db	65	;'A'
  1663  007AB3  44                 	db	68	;'D'
  1664  007AB4  46                 	db	70	;'F'
  1665  007AB5  34                 	db	52	;'4'
  1666  007AB6  33                 	db	51	;'3'
  1667  007AB7  35                 	db	53	;'5'
  1668  007AB8  31                 	db	49	;'1'
  1669  007AB9  20                 	db	32
  1670  007ABA  57                 	db	87	;'W'
  1671  007ABB  52                 	db	82	;'R'
  1672  007ABC  49                 	db	73	;'I'
  1673  007ABD  54                 	db	84	;'T'
  1674  007ABE  45                 	db	69	;'E'
  1675  007ABF  20                 	db	32
  1676  007AC0  52                 	db	82	;'R'
  1677  007AC1  45                 	db	69	;'E'
  1678  007AC2  47                 	db	71	;'G'
  1679  007AC3  32                 	db	50	;'2'
  1680  007AC4  3A                 	db	58	;':'
  1681  007AC5  20                 	db	32
  1682  007AC6  30                 	db	48	;'0'
  1683  007AC7  78                 	db	120	;'x'
  1684  007AC8  25                 	db	37
  1685  007AC9  30                 	db	48	;'0'
  1686  007ACA  38                 	db	56	;'8'
  1687  007ACB  6C                 	db	108	;'l'
  1688  007ACC  58                 	db	88	;'X'
  1689  007ACD  20                 	db	32
  1690  007ACE  28                 	db	40
  1691  007ACF  6C                 	db	108	;'l'
  1692  007AD0  6F                 	db	111	;'o'
  1693  007AD1  77                 	db	119	;'w'
  1694  007AD2  6E                 	db	110	;'n'
  1695  007AD3  6F                 	db	111	;'o'
  1696  007AD4  69                 	db	105	;'i'
  1697  007AD5  73                 	db	115	;'s'
  1698  007AD6  65                 	db	101	;'e'
  1699  007AD7  3D                 	db	61	;'='
  1700  007AD8  25                 	db	37
  1701  007AD9  69                 	db	105	;'i'
  1702  007ADA  20                 	db	32
  1703  007ADB  6D                 	db	109	;'m'
  1704  007ADC  75                 	db	117	;'u'
  1705  007ADD  78                 	db	120	;'x'
  1706  007ADE  6F                 	db	111	;'o'
  1707  007ADF  75                 	db	117	;'u'
  1708  007AE0  74                 	db	116	;'t'
  1709  007AE1  3D                 	db	61	;'='
  1710  007AE2  25                 	db	37
  1711  007AE3  69                 	db	105	;'i'
  1712  007AE4  20                 	db	32
  1713  007AE5  72                 	db	114	;'r'
  1714  007AE6  65                 	db	101	;'e'
  1715  007AE7  66                 	db	102	;'f'
  1716  007AE8  64                 	db	100	;'d'
  1717  007AE9  62                 	db	98	;'b'
  1718  007AEA  6C                 	db	108	;'l'
  1719  007AEB  3D                 	db	61	;'='
  1720  007AEC  25                 	db	37
  1721  007AED  69                 	db	105	;'i'
  1722  007AEE  20                 	db	32
  1723  007AEF  72                 	db	114	;'r'
  1724  007AF0  65                 	db	101	;'e'
  1725  007AF1  66                 	db	102	;'f'
  1726  007AF2  64                 	db	100	;'d'
  1727  007AF3  69                 	db	105	;'i'
  1728  007AF4  76                 	db	118	;'v'
  1729  007AF5  3D                 	db	61	;'='
  1730  007AF6  25                 	db	37
  1731  007AF7  69                 	db	105	;'i'
  1732  007AF8  20                 	db	32
  1733  007AF9  72                 	db	114	;'r'
  1734  007AFA  63                 	db	99	;'c'
  1735  007AFB  6E                 	db	110	;'n'
  1736  007AFC  74                 	db	116	;'t'
  1737  007AFD  3D                 	db	61	;'='
  1738  007AFE  25                 	db	37
  1739  007AFF  69                 	db	105	;'i'
  1740  007B00  20                 	db	32
  1741  007B01  64                 	db	100	;'d'
  1742  007B02  62                 	db	98	;'b'
  1743  007B03  6C                 	db	108	;'l'
  1744  007B04  62                 	db	98	;'b'
  1745  007B05  75                 	db	117	;'u'
  1746  007B06  66                 	db	102	;'f'
  1747  007B07  66                 	db	102	;'f'
  1748  007B08  3D                 	db	61	;'='
  1749  007B09  25                 	db	37
  1750  007B0A  69                 	db	105	;'i'
  1751  007B0B  20                 	db	32
  1752  007B0C  63                 	db	99	;'c'
  1753  007B0D  70                 	db	112	;'p'
  1754  007B0E  63                 	db	99	;'c'
  1755  007B0F  3D                 	db	61	;'='
  1756  007B10  25                 	db	37
  1757  007B11  69                 	db	105	;'i'
  1758  007B12  20                 	db	32
  1759  007B13  6C                 	db	108	;'l'
  1760  007B14  64                 	db	100	;'d'
  1761  007B15  66                 	db	102	;'f'
  1762  007B16  3D                 	db	61	;'='
  1763  007B17  25                 	db	37
  1764  007B18  69                 	db	105	;'i'
  1765  007B19  20                 	db	32
  1766  007B1A  6C                 	db	108	;'l'
  1767  007B1B  64                 	db	100	;'d'
  1768  007B1C  70                 	db	112	;'p'
  1769  007B1D  3D                 	db	61	;'='
  1770  007B1E  25                 	db	37
  1771  007B1F  69                 	db	105	;'i'
  1772  007B20  20                 	db	32
  1773  007B21  70                 	db	112	;'p'
  1774  007B22  64                 	db	100	;'d'
  1775  007B23  70                 	db	112	;'p'
  1776  007B24  6F                 	db	111	;'o'
  1777  007B25  6C                 	db	108	;'l'
  1778  007B26  3D                 	db	61	;'='
  1779  007B27  25                 	db	37
  1780  007B28  69                 	db	105	;'i'
  1781  007B29  20                 	db	32
  1782  007B2A  70                 	db	112	;'p'
  1783  007B2B  64                 	db	100	;'d'
  1784  007B2C  3D                 	db	61	;'='
  1785  007B2D  25                 	db	37
  1786  007B2E  69                 	db	105	;'i'
  1787  007B2F  20                 	db	32
  1788  007B30  63                 	db	99	;'c'
  1789  007B31  70                 	db	112	;'p'
  1790  007B32  74                 	db	116	;'t'
  1791  007B33  73                 	db	115	;'s'
  1792  007B34  3D                 	db	61	;'='
  1793  007B35  25                 	db	37
  1794  007B36  69                 	db	105	;'i'
  1795  007B37  20                 	db	32
  1796  007B38  63                 	db	99	;'c'
  1797  007B39  6E                 	db	110	;'n'
  1798  007B3A  74                 	db	116	;'t'
  1799  007B3B  72                 	db	114	;'r'
  1800  007B3C  65                 	db	101	;'e'
  1801  007B3D  73                 	db	115	;'s'
  1802  007B3E  65                 	db	101	;'e'
  1803  007B3F  74                 	db	116	;'t'
  1804  007B40  3D                 	db	61	;'='
  1805  007B41  25                 	db	37
  1806  007B42  69                 	db	105	;'i'
  1807  007B43  0D                 	db	13
  1808  007B44  0A                 	db	10
  1809  007B45  00                 	db	0
  1810  007B46                     STR_15:
  1811  007B46  41                 	db	65	;'A'
  1812  007B47  44                 	db	68	;'D'
  1813  007B48  46                 	db	70	;'F'
  1814  007B49  34                 	db	52	;'4'
  1815  007B4A  33                 	db	51	;'3'
  1816  007B4B  35                 	db	53	;'5'
  1817  007B4C  31                 	db	49	;'1'
  1818  007B4D  20                 	db	32
  1819  007B4E  57                 	db	87	;'W'
  1820  007B4F  52                 	db	82	;'R'
  1821  007B50  49                 	db	73	;'I'
  1822  007B51  54                 	db	84	;'T'
  1823  007B52  45                 	db	69	;'E'
  1824  007B53  20                 	db	32
  1825  007B54  52                 	db	82	;'R'
  1826  007B55  45                 	db	69	;'E'
  1827  007B56  47                 	db	71	;'G'
  1828  007B57  33                 	db	51	;'3'
  1829  007B58  3A                 	db	58	;':'
  1830  007B59  20                 	db	32
  1831  007B5A  30                 	db	48	;'0'
  1832  007B5B  78                 	db	120	;'x'
  1833  007B5C  25                 	db	37
  1834  007B5D  30                 	db	48	;'0'
  1835  007B5E  38                 	db	56	;'8'
  1836  007B5F  6C                 	db	108	;'l'
  1837  007B60  58                 	db	88	;'X'
  1838  007B61  20                 	db	32
  1839  007B62  28                 	db	40
  1840  007B63  62                 	db	98	;'b'
  1841  007B64  73                 	db	115	;'s'
  1842  007B65  63                 	db	99	;'c'
  1843  007B66  6D                 	db	109	;'m'
  1844  007B67  3D                 	db	61	;'='
  1845  007B68  25                 	db	37
  1846  007B69  69                 	db	105	;'i'
  1847  007B6A  2C                 	db	44
  1848  007B6B  20                 	db	32
  1849  007B6C  61                 	db	97	;'a'
  1850  007B6D  62                 	db	98	;'b'
  1851  007B6E  70                 	db	112	;'p'
  1852  007B6F  3D                 	db	61	;'='
  1853  007B70  25                 	db	37
  1854  007B71  69                 	db	105	;'i'
  1855  007B72  2C                 	db	44
  1856  007B73  20                 	db	32
  1857  007B74  63                 	db	99	;'c'
  1858  007B75  68                 	db	104	;'h'
  1859  007B76  63                 	db	99	;'c'
  1860  007B77  61                 	db	97	;'a'
  1861  007B78  6E                 	db	110	;'n'
  1862  007B79  63                 	db	99	;'c'
  1863  007B7A  65                 	db	101	;'e'
  1864  007B7B  6C                 	db	108	;'l'
  1865  007B7C  3D                 	db	61	;'='
  1866  007B7D  25                 	db	37
  1867  007B7E  69                 	db	105	;'i'
  1868  007B7F  20                 	db	32
  1869  007B80  63                 	db	99	;'c'
  1870  007B81  73                 	db	115	;'s'
  1871  007B82  72                 	db	114	;'r'
  1872  007B83  3D                 	db	61	;'='
  1873  007B84  25                 	db	37
  1874  007B85  69                 	db	105	;'i'
  1875  007B86  20                 	db	32
  1876  007B87  63                 	db	99	;'c'
  1877  007B88  6C                 	db	108	;'l'
  1878  007B89  6B                 	db	107	;'k'
  1879  007B8A  64                 	db	100	;'d'
  1880  007B8B  69                 	db	105	;'i'
  1881  007B8C  76                 	db	118	;'v'
  1882  007B8D  6D                 	db	109	;'m'
  1883  007B8E  6F                 	db	111	;'o'
  1884  007B8F  64                 	db	100	;'d'
  1885  007B90  65                 	db	101	;'e'
  1886  007B91  3D                 	db	61	;'='
  1887  007B92  25                 	db	37
  1888  007B93  69                 	db	105	;'i'
  1889  007B94  20                 	db	32
  1890  007B95  63                 	db	99	;'c'
  1891  007B96  6C                 	db	108	;'l'
  1892  007B97  6B                 	db	107	;'k'
  1893  007B98  64                 	db	100	;'d'
  1894  007B99  69                 	db	105	;'i'
  1895  007B9A  76                 	db	118	;'v'
  1896  007B9B  3D                 	db	61	;'='
  1897  007B9C  25                 	db	37
  1898  007B9D  69                 	db	105	;'i'
  1899  007B9E  0D                 	db	13
  1900  007B9F  0A                 	db	10
  1901  007BA0  00                 	db	0
  1902  007BA1                     STR_6:
  1903  007BA1  41                 	db	65	;'A'
  1904  007BA2  44                 	db	68	;'D'
  1905  007BA3  46                 	db	70	;'F'
  1906  007BA4  34                 	db	52	;'4'
  1907  007BA5  33                 	db	51	;'3'
  1908  007BA6  35                 	db	53	;'5'
  1909  007BA7  31                 	db	49	;'1'
  1910  007BA8  3A                 	db	58	;':'
  1911  007BA9  20                 	db	32
  1912  007BAA  43                 	db	67	;'C'
  1913  007BAB  61                 	db	97	;'a'
  1914  007BAC  6E                 	db	110	;'n'
  1915  007BAD  6E                 	db	110	;'n'
  1916  007BAE  6F                 	db	111	;'o'
  1917  007BAF  74                 	db	116	;'t'
  1918  007BB0  20                 	db	32
  1919  007BB1  72                 	db	114	;'r'
  1920  007BB2  65                 	db	101	;'e'
  1921  007BB3  61                 	db	97	;'a'
  1922  007BB4  63                 	db	99	;'c'
  1923  007BB5  68                 	db	104	;'h'
  1924  007BB6  20                 	db	32
  1925  007BB7  50                 	db	80	;'P'
  1926  007BB8  46                 	db	70	;'F'
  1927  007BB9  44                 	db	68	;'D'
  1928  007BBA  20                 	db	32
  1929  007BBB  6F                 	db	111	;'o'
  1930  007BBC  66                 	db	102	;'f'
  1931  007BBD  20                 	db	32
  1932  007BBE  25                 	db	37
  1933  007BBF  69                 	db	105	;'i'
  1934  007BC0  20                 	db	32
  1935  007BC1  6B                 	db	107	;'k'
  1936  007BC2  48                 	db	72	;'H'
  1937  007BC3  7A                 	db	122	;'z'
  1938  007BC4  20                 	db	32
  1939  007BC5  77                 	db	119	;'w'
  1940  007BC6  69                 	db	105	;'i'
  1941  007BC7  74                 	db	116	;'t'
  1942  007BC8  68                 	db	104	;'h'
  1943  007BC9  20                 	db	32
  1944  007BCA  52                 	db	82	;'R'
  1945  007BCB  45                 	db	69	;'E'
  1946  007BCC  46                 	db	70	;'F'
  1947  007BCD  20                 	db	32
  1948  007BCE  6F                 	db	111	;'o'
  1949  007BCF  66                 	db	102	;'f'
  1950  007BD0  20                 	db	32
  1951  007BD1  25                 	db	37
  1952  007BD2  69                 	db	105	;'i'
  1953  007BD3  20                 	db	32
  1954  007BD4  6B                 	db	107	;'k'
  1955  007BD5  48                 	db	72	;'H'
  1956  007BD6  7A                 	db	122	;'z'
  1957  007BD7  20                 	db	32
  1958  007BD8  28                 	db	40
  1959  007BD9  6E                 	db	110	;'n'
  1960  007BDA  6F                 	db	111	;'o'
  1961  007BDB  74                 	db	116	;'t'
  1962  007BDC  20                 	db	32
  1963  007BDD  64                 	db	100	;'d'
  1964  007BDE  69                 	db	105	;'i'
  1965  007BDF  76                 	db	118	;'v'
  1966  007BE0  69                 	db	105	;'i'
  1967  007BE1  64                 	db	100	;'d'
  1968  007BE2  65                 	db	101	;'e'
  1969  007BE3  61                 	db	97	;'a'
  1970  007BE4  62                 	db	98	;'b'
  1971  007BE5  6C                 	db	108	;'l'
  1972  007BE6  65                 	db	101	;'e'
  1973  007BE7  29                 	db	41
  1974  007BE8  2E                 	db	46
  1975  007BE9  0A                 	db	10
  1976  007BEA  00                 	db	0
  1977  007BEB                     STR_7:
  1978  007BEB  41                 	db	65	;'A'
  1979  007BEC  44                 	db	68	;'D'
  1980  007BED  46                 	db	70	;'F'
  1981  007BEE  34                 	db	52	;'4'
  1982  007BEF  33                 	db	51	;'3'
  1983  007BF0  35                 	db	53	;'5'
  1984  007BF1  31                 	db	49	;'1'
  1985  007BF2  3A                 	db	58	;':'
  1986  007BF3  20                 	db	32
  1987  007BF4  43                 	db	67	;'C'
  1988  007BF5  61                 	db	97	;'a'
  1989  007BF6  6E                 	db	110	;'n'
  1990  007BF7  6E                 	db	110	;'n'
  1991  007BF8  6F                 	db	111	;'o'
  1992  007BF9  74                 	db	116	;'t'
  1993  007BFA  20                 	db	32
  1994  007BFB  72                 	db	114	;'r'
  1995  007BFC  65                 	db	101	;'e'
  1996  007BFD  61                 	db	97	;'a'
  1997  007BFE  63                 	db	99	;'c'
  1998  007BFF  68                 	db	104	;'h'
  1999  007C00  20                 	db	32
  2000  007C01  50                 	db	80	;'P'
  2001  007C02  46                 	db	70	;'F'
  2002  007C03  44                 	db	68	;'D'
  2003  007C04  20                 	db	32
  2004  007C05  6F                 	db	111	;'o'
  2005  007C06  66                 	db	102	;'f'
  2006  007C07  20                 	db	32
  2007  007C08  25                 	db	37
  2008  007C09  69                 	db	105	;'i'
  2009  007C0A  20                 	db	32
  2010  007C0B  6B                 	db	107	;'k'
  2011  007C0C  48                 	db	72	;'H'
  2012  007C0D  7A                 	db	122	;'z'
  2013  007C0E  20                 	db	32
  2014  007C0F  77                 	db	119	;'w'
  2015  007C10  69                 	db	105	;'i'
  2016  007C11  74                 	db	116	;'t'
  2017  007C12  68                 	db	104	;'h'
  2018  007C13  20                 	db	32
  2019  007C14  52                 	db	82	;'R'
  2020  007C15  45                 	db	69	;'E'
  2021  007C16  46                 	db	70	;'F'
  2022  007C17  20                 	db	32
  2023  007C18  6F                 	db	111	;'o'
  2024  007C19  66                 	db	102	;'f'
  2025  007C1A  20                 	db	32
  2026  007C1B  25                 	db	37
  2027  007C1C  69                 	db	105	;'i'
  2028  007C1D  20                 	db	32
  2029  007C1E  6B                 	db	107	;'k'
  2030  007C1F  48                 	db	72	;'H'
  2031  007C20  7A                 	db	122	;'z'
  2032  007C21  20                 	db	32
  2033  007C22  28                 	db	40
  2034  007C23  64                 	db	100	;'d'
  2035  007C24  69                 	db	105	;'i'
  2036  007C25  76                 	db	118	;'v'
  2037  007C26  20                 	db	32
  2038  007C27  74                 	db	116	;'t'
  2039  007C28  6F                 	db	111	;'o'
  2040  007C29  6F                 	db	111	;'o'
  2041  007C2A  20                 	db	32
  2042  007C2B  68                 	db	104	;'h'
  2043  007C2C  69                 	db	105	;'i'
  2044  007C2D  67                 	db	103	;'g'
  2045  007C2E  68                 	db	104	;'h'
  2046  007C2F  29                 	db	41
  2047  007C30  2E                 	db	46
  2048  007C31  0A                 	db	10
  2049  007C32  00                 	db	0
  2050  007C33                     STR_13:
  2051  007C33  41                 	db	65	;'A'
  2052  007C34  44                 	db	68	;'D'
  2053  007C35  46                 	db	70	;'F'
  2054  007C36  34                 	db	52	;'4'
  2055  007C37  33                 	db	51	;'3'
  2056  007C38  35                 	db	53	;'5'
  2057  007C39  31                 	db	49	;'1'
  2058  007C3A  20                 	db	32
  2059  007C3B  57                 	db	87	;'W'
  2060  007C3C  52                 	db	82	;'R'
  2061  007C3D  49                 	db	73	;'I'
  2062  007C3E  54                 	db	84	;'T'
  2063  007C3F  45                 	db	69	;'E'
  2064  007C40  20                 	db	32
  2065  007C41  52                 	db	82	;'R'
  2066  007C42  45                 	db	69	;'E'
  2067  007C43  47                 	db	71	;'G'
  2068  007C44  31                 	db	49	;'1'
  2069  007C45  3A                 	db	58	;':'
  2070  007C46  20                 	db	32
  2071  007C47  30                 	db	48	;'0'
  2072  007C48  78                 	db	120	;'x'
  2073  007C49  25                 	db	37
  2074  007C4A  30                 	db	48	;'0'
  2075  007C4B  38                 	db	56	;'8'
  2076  007C4C  6C                 	db	108	;'l'
  2077  007C4D  58                 	db	88	;'X'
  2078  007C4E  20                 	db	32
  2079  007C4F  28                 	db	40
  2080  007C50  70                 	db	112	;'p'
  2081  007C51  72                 	db	114	;'r'
  2082  007C52  65                 	db	101	;'e'
  2083  007C53  73                 	db	115	;'s'
  2084  007C54  63                 	db	99	;'c'
  2085  007C55  61                 	db	97	;'a'
  2086  007C56  6C                 	db	108	;'l'
  2087  007C57  65                 	db	101	;'e'
  2088  007C58  72                 	db	114	;'r'
  2089  007C59  3D                 	db	61	;'='
  2090  007C5A  25                 	db	37
  2091  007C5B  69                 	db	105	;'i'
  2092  007C5C  20                 	db	32
  2093  007C5D  70                 	db	112	;'p'
  2094  007C5E  68                 	db	104	;'h'
  2095  007C5F  61                 	db	97	;'a'
  2096  007C60  73                 	db	115	;'s'
  2097  007C61  65                 	db	101	;'e'
  2098  007C62  3D                 	db	61	;'='
  2099  007C63  25                 	db	37
  2100  007C64  69                 	db	105	;'i'
  2101  007C65  20                 	db	32
  2102  007C66  6D                 	db	109	;'m'
  2103  007C67  6F                 	db	111	;'o'
  2104  007C68  64                 	db	100	;'d'
  2105  007C69  3D                 	db	61	;'='
  2106  007C6A  25                 	db	37
  2107  007C6B  69                 	db	105	;'i'
  2108  007C6C  29                 	db	41
  2109  007C6D  0D                 	db	13
  2110  007C6E  0A                 	db	10
  2111  007C6F  00                 	db	0
  2112  007C70                     STR_2:
  2113  007C70  41                 	db	65	;'A'
  2114  007C71  44                 	db	68	;'D'
  2115  007C72  46                 	db	70	;'F'
  2116  007C73  34                 	db	52	;'4'
  2117  007C74  33                 	db	51	;'3'
  2118  007C75  35                 	db	53	;'5'
  2119  007C76  31                 	db	49	;'1'
  2120  007C77  3A                 	db	58	;':'
  2121  007C78  20                 	db	32
  2122  007C79  76                 	db	118	;'v'
  2123  007C7A  63                 	db	99	;'c'
  2124  007C7B  6F                 	db	111	;'o'
  2125  007C7C  5F                 	db	95	;'_'
  2126  007C7D  66                 	db	102	;'f'
  2127  007C7E  72                 	db	114	;'r'
  2128  007C7F  65                 	db	101	;'e'
  2129  007C80  71                 	db	113	;'q'
  2130  007C81  3D                 	db	61	;'='
  2131  007C82  25                 	db	37
  2132  007C83  6C                 	db	108	;'l'
  2133  007C84  69                 	db	105	;'i'
  2134  007C85  20                 	db	32
  2135  007C86  3D                 	db	61	;'='
  2136  007C87  3E                 	db	62	;'>'
  2137  007C88  20                 	db	32
  2138  007C89  69                 	db	105	;'i'
  2139  007C8A  6E                 	db	110	;'n'
  2140  007C8B  74                 	db	116	;'t'
  2141  007C8C  65                 	db	101	;'e'
  2142  007C8D  67                 	db	103	;'g'
  2143  007C8E  65                 	db	101	;'e'
  2144  007C8F  72                 	db	114	;'r'
  2145  007C90  3D                 	db	61	;'='
  2146  007C91  25                 	db	37
  2147  007C92  6C                 	db	108	;'l'
  2148  007C93  69                 	db	105	;'i'
  2149  007C94  20                 	db	32
  2150  007C95  72                 	db	114	;'r'
  2151  007C96  65                 	db	101	;'e'
  2152  007C97  6D                 	db	109	;'m'
  2153  007C98  61                 	db	97	;'a'
  2154  007C99  69                 	db	105	;'i'
  2155  007C9A  6E                 	db	110	;'n'
  2156  007C9B  64                 	db	100	;'d'
  2157  007C9C  65                 	db	101	;'e'
  2158  007C9D  72                 	db	114	;'r'
  2159  007C9E  3D                 	db	61	;'='
  2160  007C9F  25                 	db	37
  2161  007CA0  6C                 	db	108	;'l'
  2162  007CA1  69                 	db	105	;'i'
  2163  007CA2  20                 	db	32
  2164  007CA3  70                 	db	112	;'p'
  2165  007CA4  66                 	db	102	;'f'
  2166  007CA5  64                 	db	100	;'d'
  2167  007CA6  3D                 	db	61	;'='
  2168  007CA7  25                 	db	37
  2169  007CA8  6C                 	db	108	;'l'
  2170  007CA9  69                 	db	105	;'i'
  2171  007CAA  0D                 	db	13
  2172  007CAB  0A                 	db	10
  2173  007CAC  00                 	db	0
  2174  007CAD                     STR_8:
  2175  007CAD  41                 	db	65	;'A'
  2176  007CAE  44                 	db	68	;'D'
  2177  007CAF  46                 	db	70	;'F'
  2178  007CB0  34                 	db	52	;'4'
  2179  007CB1  33                 	db	51	;'3'
  2180  007CB2  35                 	db	53	;'5'
  2181  007CB3  31                 	db	49	;'1'
  2182  007CB4  3A                 	db	58	;':'
  2183  007CB5  20                 	db	32
  2184  007CB6  43                 	db	67	;'C'
  2185  007CB7  61                 	db	97	;'a'
  2186  007CB8  6E                 	db	110	;'n'
  2187  007CB9  6E                 	db	110	;'n'
  2188  007CBA  6F                 	db	111	;'o'
  2189  007CBB  74                 	db	116	;'t'
  2190  007CBC  20                 	db	32
  2191  007CBD  75                 	db	117	;'u'
  2192  007CBE  73                 	db	115	;'s'
  2193  007CBF  65                 	db	101	;'e'
  2194  007CC0  20                 	db	32
  2195  007CC1  70                 	db	112	;'p'
  2196  007CC2  66                 	db	102	;'f'
  2197  007CC3  64                 	db	100	;'d'
  2198  007CC4  20                 	db	32
  2199  007CC5  6F                 	db	111	;'o'
  2200  007CC6  66                 	db	102	;'f'
  2201  007CC7  20                 	db	32
  2202  007CC8  25                 	db	37
  2203  007CC9  6C                 	db	108	;'l'
  2204  007CCA  75                 	db	117	;'u'
  2205  007CCB  20                 	db	32
  2206  007CCC  6B                 	db	107	;'k'
  2207  007CCD  48                 	db	72	;'H'
  2208  007CCE  7A                 	db	122	;'z'
  2209  007CCF  20                 	db	32
  2210  007CD0  28                 	db	40
  2211  007CD1  62                 	db	98	;'b'
  2212  007CD2  73                 	db	115	;'s'
  2213  007CD3  63                 	db	99	;'c'
  2214  007CD4  64                 	db	100	;'d'
  2215  007CD5  69                 	db	105	;'i'
  2216  007CD6  76                 	db	118	;'v'
  2217  007CD7  20                 	db	32
  2218  007CD8  74                 	db	116	;'t'
  2219  007CD9  6F                 	db	111	;'o'
  2220  007CDA  6F                 	db	111	;'o'
  2221  007CDB  20                 	db	32
  2222  007CDC  68                 	db	104	;'h'
  2223  007CDD  69                 	db	105	;'i'
  2224  007CDE  67                 	db	103	;'g'
  2225  007CDF  68                 	db	104	;'h'
  2226  007CE0  29                 	db	41
  2227  007CE1  2E                 	db	46
  2228  007CE2  0A                 	db	10
  2229  007CE3  00                 	db	0
  2230  007CE4                     STR_12:
  2231  007CE4  41                 	db	65	;'A'
  2232  007CE5  44                 	db	68	;'D'
  2233  007CE6  46                 	db	70	;'F'
  2234  007CE7  34                 	db	52	;'4'
  2235  007CE8  33                 	db	51	;'3'
  2236  007CE9  35                 	db	53	;'5'
  2237  007CEA  31                 	db	49	;'1'
  2238  007CEB  20                 	db	32
  2239  007CEC  57                 	db	87	;'W'
  2240  007CED  52                 	db	82	;'R'
  2241  007CEE  49                 	db	73	;'I'
  2242  007CEF  54                 	db	84	;'T'
  2243  007CF0  45                 	db	69	;'E'
  2244  007CF1  20                 	db	32
  2245  007CF2  52                 	db	82	;'R'
  2246  007CF3  45                 	db	69	;'E'
  2247  007CF4  47                 	db	71	;'G'
  2248  007CF5  30                 	db	48	;'0'
  2249  007CF6  3A                 	db	58	;':'
  2250  007CF7  20                 	db	32
  2251  007CF8  30                 	db	48	;'0'
  2252  007CF9  78                 	db	120	;'x'
  2253  007CFA  25                 	db	37
  2254  007CFB  30                 	db	48	;'0'
  2255  007CFC  38                 	db	56	;'8'
  2256  007CFD  6C                 	db	108	;'l'
  2257  007CFE  58                 	db	88	;'X'
  2258  007CFF  20                 	db	32
  2259  007D00  28                 	db	40
  2260  007D01  69                 	db	105	;'i'
  2261  007D02  6E                 	db	110	;'n'
  2262  007D03  74                 	db	116	;'t'
  2263  007D04  3D                 	db	61	;'='
  2264  007D05  25                 	db	37
  2265  007D06  69                 	db	105	;'i'
  2266  007D07  20                 	db	32
  2267  007D08  66                 	db	102	;'f'
  2268  007D09  72                 	db	114	;'r'
  2269  007D0A  61                 	db	97	;'a'
  2270  007D0B  63                 	db	99	;'c'
  2271  007D0C  3D                 	db	61	;'='
  2272  007D0D  25                 	db	37
  2273  007D0E  69                 	db	105	;'i'
  2274  007D0F  29                 	db	41
  2275  007D10  0D                 	db	13
  2276  007D11  0A                 	db	10
  2277  007D12  00                 	db	0
  2278  007D13                     STR_17:
  2279  007D13  41                 	db	65	;'A'
  2280  007D14  44                 	db	68	;'D'
  2281  007D15  46                 	db	70	;'F'
  2282  007D16  34                 	db	52	;'4'
  2283  007D17  33                 	db	51	;'3'
  2284  007D18  35                 	db	53	;'5'
  2285  007D19  31                 	db	49	;'1'
  2286  007D1A  20                 	db	32
  2287  007D1B  57                 	db	87	;'W'
  2288  007D1C  52                 	db	82	;'R'
  2289  007D1D  49                 	db	73	;'I'
  2290  007D1E  54                 	db	84	;'T'
  2291  007D1F  45                 	db	69	;'E'
  2292  007D20  20                 	db	32
  2293  007D21  52                 	db	82	;'R'
  2294  007D22  45                 	db	69	;'E'
  2295  007D23  47                 	db	71	;'G'
  2296  007D24  35                 	db	53	;'5'
  2297  007D25  3A                 	db	58	;':'
  2298  007D26  20                 	db	32
  2299  007D27  30                 	db	48	;'0'
  2300  007D28  78                 	db	120	;'x'
  2301  007D29  25                 	db	37
  2302  007D2A  30                 	db	48	;'0'
  2303  007D2B  38                 	db	56	;'8'
  2304  007D2C  6C                 	db	108	;'l'
  2305  007D2D  58                 	db	88	;'X'
  2306  007D2E  20                 	db	32
  2307  007D2F  28                 	db	40
  2308  007D30  6C                 	db	108	;'l'
  2309  007D31  64                 	db	100	;'d'
  2310  007D32  70                 	db	112	;'p'
  2311  007D33  69                 	db	105	;'i'
  2312  007D34  6E                 	db	110	;'n'
  2313  007D35  6D                 	db	109	;'m'
  2314  007D36  6F                 	db	111	;'o'
  2315  007D37  64                 	db	100	;'d'
  2316  007D38  3D                 	db	61	;'='
  2317  007D39  25                 	db	37
  2318  007D3A  69                 	db	105	;'i'
  2319  007D3B  29                 	db	41
  2320  007D3C  0D                 	db	13
  2321  007D3D  0A                 	db	10
  2322  007D3E  00                 	db	0
  2323  007D3F  41                 	db	65	;'A'
  2324  007D40  44                 	db	68	;'D'
  2325  007D41  46                 	db	70	;'F'
  2326  007D42  34                 	db	52	;'4'
  2327  007D43  33                 	db	51	;'3'
  2328  007D44  35                 	db	53	;'5'
  2329  007D45  31                 	db	49	;'1'
  2330  007D46  20                 	db	32
  2331  007D47  52                 	db	82	;'R'
  2332  007D48  45                 	db	69	;'E'
  2333  007D49  2D                 	db	45
  2334  007D4A  49                 	db	73	;'I'
  2335  007D4B  4E                 	db	78	;'N'
  2336  007D4C  49                 	db	73	;'I'
  2337  007D4D  54                 	db	84	;'T'
  2338  007D4E  49                 	db	73	;'I'
  2339  007D4F  41                 	db	65	;'A'
  2340  007D50  4C                 	db	76	;'L'
  2341  007D51  49                 	db	73	;'I'
  2342  007D52  5A                 	db	90	;'Z'
  2343  007D53  45                 	db	69	;'E'
  2344  007D54  2C                 	db	44
  2345  007D55  20                 	db	32
  2346  007D56  75                 	db	117	;'u'
  2347  007D57  6E                 	db	110	;'n'
  2348  007D58  6C                 	db	108	;'l'
  2349  007D59  6F                 	db	111	;'o'
  2350  007D5A  63                 	db	99	;'c'
  2351  007D5B  6B                 	db	107	;'k'
  2352  007D5C  5F                 	db	95	;'_'
  2353  007D5D  63                 	db	99	;'c'
  2354  007D5E  6E                 	db	110	;'n'
  2355  007D5F  74                 	db	116	;'t'
  2356  007D60  3A                 	db	58	;':'
  2357  007D61  25                 	db	37
  2358  007D62  64                 	db	100	;'d'
  2359  007D63  0D                 	db	13
  2360  007D64  0A                 	db	10
  2361  007D65  00                 	db	0
  2362  007D66                     STR_3:
  2363  007D66  41                 	db	65	;'A'
  2364  007D67  44                 	db	68	;'D'
  2365  007D68  46                 	db	70	;'F'
  2366  007D69  34                 	db	52	;'4'
  2367  007D6A  33                 	db	51	;'3'
  2368  007D6B  35                 	db	53	;'5'
  2369  007D6C  31                 	db	49	;'1'
  2370  007D6D  20                 	db	32
  2371  007D6E  73                 	db	115	;'s'
  2372  007D6F  74                 	db	116	;'t'
  2373  007D70  61                 	db	97	;'a'
  2374  007D71  72                 	db	114	;'r'
  2375  007D72  74                 	db	116	;'t'
  2376  007D73  3A                 	db	58	;':'
  2377  007D74  20                 	db	32
  2378  007D75  66                 	db	102	;'f'
  2379  007D76  72                 	db	114	;'r'
  2380  007D77  61                 	db	97	;'a'
  2381  007D78  63                 	db	99	;'c'
  2382  007D79  3D                 	db	61	;'='
  2383  007D7A  25                 	db	37
  2384  007D7B  6C                 	db	108	;'l'
  2385  007D7C  69                 	db	105	;'i'
  2386  007D7D  20                 	db	32
  2387  007D7E  6D                 	db	109	;'m'
  2388  007D7F  6F                 	db	111	;'o'
  2389  007D80  64                 	db	100	;'d'
  2390  007D81  3D                 	db	61	;'='
  2391  007D82  25                 	db	37
  2392  007D83  6C                 	db	108	;'l'
  2393  007D84  69                 	db	105	;'i'
  2394  007D85  0D                 	db	13
  2395  007D86  0A                 	db	10
  2396  007D87  00                 	db	0
  2397  007D88                     STR_1:
  2398  007D88  61                 	db	97	;'a'
  2399  007D89  64                 	db	100	;'d'
  2400  007D8A  66                 	db	102	;'f'
  2401  007D8B  34                 	db	52	;'4'
  2402  007D8C  33                 	db	51	;'3'
  2403  007D8D  35                 	db	53	;'5'
  2404  007D8E  31                 	db	49	;'1'
  2405  007D8F  5F                 	db	95	;'_'
  2406  007D90  73                 	db	115	;'s'
  2407  007D91  65                 	db	101	;'e'
  2408  007D92  74                 	db	116	;'t'
  2409  007D93  5F                 	db	95	;'_'
  2410  007D94  74                 	db	116	;'t'
  2411  007D95  75                 	db	117	;'u'
  2412  007D96  6E                 	db	110	;'n'
  2413  007D97  65                 	db	101	;'e'
  2414  007D98  28                 	db	40
  2415  007D99  25                 	db	37
  2416  007D9A  70                 	db	112	;'p'
  2417  007D9B  2C                 	db	44
  2418  007D9C  20                 	db	32
  2419  007D9D  25                 	db	37
  2420  007D9E  75                 	db	117	;'u'
  2421  007D9F  2C                 	db	44
  2422  007DA0  20                 	db	32
  2423  007DA1  25                 	db	37
  2424  007DA2  75                 	db	117	;'u'
  2425  007DA3  2C                 	db	44
  2426  007DA4  20                 	db	32
  2427  007DA5  25                 	db	37
  2428  007DA6  69                 	db	105	;'i'
  2429  007DA7  29                 	db	41
  2430  007DA8  0A                 	db	10
  2431  007DA9  00                 	db	0
  2432  007DAA                     STR_34:
  2433  007DAA  70                 	db	112	;'p'
  2434  007DAB  77                 	db	119	;'w'
  2435  007DAC  72                 	db	114	;'r'
  2436  007DAD  20                 	db	32
  2437  007DAE  76                 	db	118	;'v'
  2438  007DAF  61                 	db	97	;'a'
  2439  007DB0  6C                 	db	108	;'l'
  2440  007DB1  75                 	db	117	;'u'
  2441  007DB2  65                 	db	101	;'e'
  2442  007DB3  20                 	db	32
  2443  007DB4  25                 	db	37
  2444  007DB5  63                 	db	99	;'c'
  2445  007DB6  20                 	db	32
  2446  007DB7  6E                 	db	110	;'n'
  2447  007DB8  6F                 	db	111	;'o'
  2448  007DB9  74                 	db	116	;'t'
  2449  007DBA  20                 	db	32
  2450  007DBB  69                 	db	105	;'i'
  2451  007DBC  6E                 	db	110	;'n'
  2452  007DBD  20                 	db	32
  2453  007DBE  72                 	db	114	;'r'
  2454  007DBF  61                 	db	97	;'a'
  2455  007DC0  6E                 	db	110	;'n'
  2456  007DC1  67                 	db	103	;'g'
  2457  007DC2  65                 	db	101	;'e'
  2458  007DC3  20                 	db	32
  2459  007DC4  5B                 	db	91	;'['
  2460  007DC5  30                 	db	48	;'0'
  2461  007DC6  2D                 	db	45
  2462  007DC7  33                 	db	51	;'3'
  2463  007DC8  5D                 	db	93	;']'
  2464  007DC9  0A                 	db	10
  2465  007DCA  00                 	db	0
  2466  007DCB                     STR_31:
  2467  007DCB  69                 	db	105	;'i'
  2468  007DCC  70                 	db	112	;'p'
  2469  007DCD  63                 	db	99	;'c'
  2470  007DCE  20                 	db	32
  2471  007DCF  76                 	db	118	;'v'
  2472  007DD0  61                 	db	97	;'a'
  2473  007DD1  6C                 	db	108	;'l'
  2474  007DD2  75                 	db	117	;'u'
  2475  007DD3  65                 	db	101	;'e'
  2476  007DD4  20                 	db	32
  2477  007DD5  25                 	db	37
  2478  007DD6  63                 	db	99	;'c'
  2479  007DD7  20                 	db	32
  2480  007DD8  6E                 	db	110	;'n'
  2481  007DD9  6F                 	db	111	;'o'
  2482  007DDA  74                 	db	116	;'t'
  2483  007DDB  20                 	db	32
  2484  007DDC  69                 	db	105	;'i'
  2485  007DDD  6E                 	db	110	;'n'
  2486  007DDE  20                 	db	32
  2487  007DDF  72                 	db	114	;'r'
  2488  007DE0  61                 	db	97	;'a'
  2489  007DE1  6E                 	db	110	;'n'
  2490  007DE2  67                 	db	103	;'g'
  2491  007DE3  65                 	db	101	;'e'
  2492  007DE4  20                 	db	32
  2493  007DE5  5B                 	db	91	;'['
  2494  007DE6  30                 	db	48	;'0'
  2495  007DE7  2D                 	db	45
  2496  007DE8  46                 	db	70	;'F'
  2497  007DE9  5D                 	db	93	;']'
  2498  007DEA  0A                 	db	10
  2499  007DEB  00                 	db	0
  2500  007DEC                     STR_5:
  2501  007DEC  41                 	db	65	;'A'
  2502  007DED  44                 	db	68	;'D'
  2503  007DEE  46                 	db	70	;'F'
  2504  007DEF  34                 	db	52	;'4'
  2505  007DF0  33                 	db	51	;'3'
  2506  007DF1  35                 	db	53	;'5'
  2507  007DF2  31                 	db	49	;'1'
  2508  007DF3  20                 	db	32
  2509  007DF4  70                 	db	112	;'p'
  2510  007DF5  6F                 	db	111	;'o'
  2511  007DF6  73                 	db	115	;'s'
  2512  007DF7  74                 	db	116	;'t'
  2513  007DF8  3A                 	db	58	;':'
  2514  007DF9  20                 	db	32
  2515  007DFA  66                 	db	102	;'f'
  2516  007DFB  72                 	db	114	;'r'
  2517  007DFC  61                 	db	97	;'a'
  2518  007DFD  63                 	db	99	;'c'
  2519  007DFE  3D                 	db	61	;'='
  2520  007DFF  25                 	db	37
  2521  007E00  6C                 	db	108	;'l'
  2522  007E01  69                 	db	105	;'i'
  2523  007E02  20                 	db	32
  2524  007E03  6D                 	db	109	;'m'
  2525  007E04  6F                 	db	111	;'o'
  2526  007E05  64                 	db	100	;'d'
  2527  007E06  3D                 	db	61	;'='
  2528  007E07  25                 	db	37
  2529  007E08  6C                 	db	108	;'l'
  2530  007E09  69                 	db	105	;'i'
  2531  007E0A  0D                 	db	13
  2532  007E0B  0A                 	db	10
  2533  007E0C  00                 	db	0
  2534  007E0D                     STR_4:
  2535  007E0D  41                 	db	65	;'A'
  2536  007E0E  44                 	db	68	;'D'
  2537  007E0F  46                 	db	70	;'F'
  2538  007E10  34                 	db	52	;'4'
  2539  007E11  33                 	db	51	;'3'
  2540  007E12  35                 	db	53	;'5'
  2541  007E13  31                 	db	49	;'1'
  2542  007E14  20                 	db	32
  2543  007E15  70                 	db	112	;'p'
  2544  007E16  72                 	db	114	;'r'
  2545  007E17  65                 	db	101	;'e'
  2546  007E18  3A                 	db	58	;':'
  2547  007E19  20                 	db	32
  2548  007E1A  66                 	db	102	;'f'
  2549  007E1B  72                 	db	114	;'r'
  2550  007E1C  61                 	db	97	;'a'
  2551  007E1D  63                 	db	99	;'c'
  2552  007E1E  3D                 	db	61	;'='
  2553  007E1F  25                 	db	37
  2554  007E20  6C                 	db	108	;'l'
  2555  007E21  69                 	db	105	;'i'
  2556  007E22  20                 	db	32
  2557  007E23  6D                 	db	109	;'m'
  2558  007E24  6F                 	db	111	;'o'
  2559  007E25  64                 	db	100	;'d'
  2560  007E26  3D                 	db	61	;'='
  2561  007E27  25                 	db	37
  2562  007E28  6C                 	db	108	;'l'
  2563  007E29  69                 	db	105	;'i'
  2564  007E2A  0D                 	db	13
  2565  007E2B  0A                 	db	10
  2566  007E2C  00                 	db	0
  2567  007E2D                     STR_42:
  2568  007E2D  70                 	db	112	;'p'
  2569  007E2E  6F                 	db	111	;'o'
  2570  007E2F  77                 	db	119	;'w'
  2571  007E30  65                 	db	101	;'e'
  2572  007E31  72                 	db	114	;'r'
  2573  007E32  20                 	db	32
  2574  007E33  76                 	db	118	;'v'
  2575  007E34  6F                 	db	111	;'o'
  2576  007E35  6C                 	db	108	;'l'
  2577  007E36  74                 	db	116	;'t'
  2578  007E37  61                 	db	97	;'a'
  2579  007E38  67                 	db	103	;'g'
  2580  007E39  65                 	db	101	;'e'
  2581  007E3A  20                 	db	32
  2582  007E3B  69                 	db	105	;'i'
  2583  007E3C  73                 	db	115	;'s'
  2584  007E3D  20                 	db	32
  2585  007E3E  25                 	db	37
  2586  007E3F  6C                 	db	108	;'l'
  2587  007E40  75                 	db	117	;'u'
  2588  007E41  2E                 	db	46
  2589  007E42  25                 	db	37
  2590  007E43  30                 	db	48	;'0'
  2591  007E44  32                 	db	50	;'2'
  2592  007E45  6C                 	db	108	;'l'
  2593  007E46  75                 	db	117	;'u'
  2594  007E47  56                 	db	86	;'V'
  2595  007E48  0A                 	db	10
  2596  007E49  00                 	db	0
  2597  007E4A  0A                 	db	10
  2598  007E4B  3D                 	db	61	;'='
  2599  007E4C  3D                 	db	61	;'='
  2600  007E4D  3D                 	db	61	;'='
  2601  007E4E  20                 	db	32
  2602  007E4F  41                 	db	65	;'A'
  2603  007E50  44                 	db	68	;'D'
  2604  007E51  46                 	db	70	;'F'
  2605  007E52  34                 	db	52	;'4'
  2606  007E53  33                 	db	51	;'3'
  2607  007E54  35                 	db	53	;'5'
  2608  007E55  31                 	db	49	;'1'
  2609  007E56  20                 	db	32
  2610  007E57  72                 	db	114	;'r'
  2611  007E58  65                 	db	101	;'e'
  2612  007E59  67                 	db	103	;'g'
  2613  007E5A  69                 	db	105	;'i'
  2614  007E5B  73                 	db	115	;'s'
  2615  007E5C  74                 	db	116	;'t'
  2616  007E5D  65                 	db	101	;'e'
  2617  007E5E  72                 	db	114	;'r'
  2618  007E5F  73                 	db	115	;'s'
  2619  007E60  20                 	db	32
  2620  007E61  3D                 	db	61	;'='
  2621  007E62  3D                 	db	61	;'='
  2622  007E63  3D                 	db	61	;'='
  2623  007E64  0A                 	db	10
  2624  007E65  00                 	db	0
  2625  007E66  41                 	db	65	;'A'
  2626  007E67  44                 	db	68	;'D'
  2627  007E68  46                 	db	70	;'F'
  2628  007E69  34                 	db	52	;'4'
  2629  007E6A  33                 	db	51	;'3'
  2630  007E6B  35                 	db	53	;'5'
  2631  007E6C  31                 	db	49	;'1'
  2632  007E6D  20                 	db	32
  2633  007E6E  6E                 	db	110	;'n'
  2634  007E6F  6F                 	db	111	;'o'
  2635  007E70  74                 	db	116	;'t'
  2636  007E71  20                 	db	32
  2637  007E72  69                 	db	105	;'i'
  2638  007E73  6E                 	db	110	;'n'
  2639  007E74  69                 	db	105	;'i'
  2640  007E75  74                 	db	116	;'t'
  2641  007E76  69                 	db	105	;'i'
  2642  007E77  61                 	db	97	;'a'
  2643  007E78  6C                 	db	108	;'l'
  2644  007E79  69                 	db	105	;'i'
  2645  007E7A  7A                 	db	122	;'z'
  2646  007E7B  65                 	db	101	;'e'
  2647  007E7C  64                 	db	100	;'d'
  2648  007E7D  0A                 	db	10
  2649  007E7E  00                 	db	0
  2650  007E7F                     STR_36:
  2651  007E7F  74                 	db	116	;'t'
  2652  007E80  65                 	db	101	;'e'
  2653  007E81  6D                 	db	109	;'m'
  2654  007E82  70                 	db	112	;'p'
  2655  007E83  65                 	db	101	;'e'
  2656  007E84  72                 	db	114	;'r'
  2657  007E85  61                 	db	97	;'a'
  2658  007E86  74                 	db	116	;'t'
  2659  007E87  75                 	db	117	;'u'
  2660  007E88  72                 	db	114	;'r'
  2661  007E89  65                 	db	101	;'e'
  2662  007E8A  20                 	db	32
  2663  007E8B  69                 	db	105	;'i'
  2664  007E8C  73                 	db	115	;'s'
  2665  007E8D  20                 	db	32
  2666  007E8E  25                 	db	37
  2667  007E8F  6C                 	db	108	;'l'
  2668  007E90  69                 	db	105	;'i'
  2669  007E91  2E                 	db	46
  2670  007E92  25                 	db	37
  2671  007E93  6C                 	db	108	;'l'
  2672  007E94  69                 	db	105	;'i'
  2673  007E95  0A                 	db	10
  2674  007E96  00                 	db	0
  2675  007E97                     STR_20:
  2676  007E97  41                 	db	65	;'A'
  2677  007E98  44                 	db	68	;'D'
  2678  007E99  46                 	db	70	;'F'
  2679  007E9A  34                 	db	52	;'4'
  2680  007E9B  33                 	db	51	;'3'
  2681  007E9C  35                 	db	53	;'5'
  2682  007E9D  31                 	db	49	;'1'
  2683  007E9E  20                 	db	32
  2684  007E9F  49                 	db	73	;'I'
  2685  007EA0  4E                 	db	78	;'N'
  2686  007EA1  49                 	db	73	;'I'
  2687  007EA2  54                 	db	84	;'T'
  2688  007EA3  20                 	db	32
  2689  007EA4  28                 	db	40
  2690  007EA5  25                 	db	37
  2691  007EA6  73                 	db	115	;'s'
  2692  007EA7  4D                 	db	77	;'M'
  2693  007EA8  48                 	db	72	;'H'
  2694  007EA9  7A                 	db	122	;'z'
  2695  007EAA  29                 	db	41
  2696  007EAB  0D                 	db	13
  2697  007EAC  0A                 	db	10
  2698  007EAD  00                 	db	0
  2699  007EAE  6E                 	db	110	;'n'
  2700  007EAF  6F                 	db	111	;'o'
  2701  007EB0  74                 	db	116	;'t'
  2702  007EB1  20                 	db	32
  2703  007EB2  69                 	db	105	;'i'
  2704  007EB3  6D                 	db	109	;'m'
  2705  007EB4  70                 	db	112	;'p'
  2706  007EB5  6C                 	db	108	;'l'
  2707  007EB6  65                 	db	101	;'e'
  2708  007EB7  6D                 	db	109	;'m'
  2709  007EB8  65                 	db	101	;'e'
  2710  007EB9  6E                 	db	110	;'n'
  2711  007EBA  74                 	db	116	;'t'
  2712  007EBB  65                 	db	101	;'e'
  2713  007EBC  64                 	db	100	;'d'
  2714  007EBD  20                 	db	32
  2715  007EBE  79                 	db	121	;'y'
  2716  007EBF  65                 	db	101	;'e'
  2717  007EC0  74                 	db	116	;'t'
  2718  007EC1  21                 	db	33
  2719  007EC2  0A                 	db	10
  2720  007EC3  00                 	db	0
  2721  007EC4                     STR_18:
  2722  007EC4  0A                 	db	10
  2723  007EC5  41                 	db	65	;'A'
  2724  007EC6  4D                 	db	77	;'M'
  2725  007EC7  53                 	db	83	;'S'
  2726  007EC8  41                 	db	65	;'A'
  2727  007EC9  54                 	db	84	;'T'
  2728  007ECA  20                 	db	32
  2729  007ECB  44                 	db	68	;'D'
  2730  007ECC  4C                 	db	76	;'L'
  2731  007ECD  20                 	db	32
  2732  007ECE  55                 	db	85	;'U'
  2733  007ECF  50                 	db	80	;'P'
  2734  007ED0  43                 	db	67	;'C'
  2735  007ED1  20                 	db	32
  2736  007ED2  25                 	db	37
  2737  007ED3  73                 	db	115	;'s'
  2738  007ED4  0A                 	db	10
  2739  007ED5  0A                 	db	10
  2740  007ED6  00                 	db	0
  2741  007ED7                     STR_48:
  2742  007ED7  41                 	db	65	;'A'
  2743  007ED8  44                 	db	68	;'D'
  2744  007ED9  46                 	db	70	;'F'
  2745  007EDA  34                 	db	52	;'4'
  2746  007EDB  33                 	db	51	;'3'
  2747  007EDC  35                 	db	53	;'5'
  2748  007EDD  31                 	db	49	;'1'
  2749  007EDE  20                 	db	32
  2750  007EDF  53                 	db	83	;'S'
  2751  007EE0  45                 	db	69	;'E'
  2752  007EE1  54                 	db	84	;'T'
  2753  007EE2  20                 	db	32
  2754  007EE3  4D                 	db	77	;'M'
  2755  007EE4  4F                 	db	79	;'O'
  2756  007EE5  44                 	db	68	;'D'
  2757  007EE6  45                 	db	69	;'E'
  2758  007EE7  0D                 	db	13
  2759  007EE8  0A                 	db	10
  2760  007EE9  00                 	db	0
  2761  007EEA                     STR_23:
  2762  007EEA  41                 	db	65	;'A'
  2763  007EEB  44                 	db	68	;'D'
  2764  007EEC  46                 	db	70	;'F'
  2765  007EED  34                 	db	52	;'4'
  2766  007EEE  33                 	db	51	;'3'
  2767  007EEF  35                 	db	53	;'5'
  2768  007EF0  31                 	db	49	;'1'
  2769  007EF1  20                 	db	32
  2770  007EF2  53                 	db	83	;'S'
  2771  007EF3  45                 	db	69	;'E'
  2772  007EF4  54                 	db	84	;'T'
  2773  007EF5  20                 	db	32
  2774  007EF6  54                 	db	84	;'T'
  2775  007EF7  55                 	db	85	;'U'
  2776  007EF8  4E                 	db	78	;'N'
  2777  007EF9  45                 	db	69	;'E'
  2778  007EFA  0D                 	db	13
  2779  007EFB  0A                 	db	10
  2780  007EFC  00                 	db	0
  2781  007EFD                     STR_47:
  2782  007EFD  41                 	db	65	;'A'
  2783  007EFE  44                 	db	68	;'D'
  2784  007EFF  46                 	db	70	;'F'
  2785  007F00  34                 	db	52	;'4'
  2786  007F01  33                 	db	51	;'3'
  2787  007F02  35                 	db	53	;'5'
  2788  007F03  31                 	db	49	;'1'
  2789  007F04  20                 	db	32
  2790  007F05  53                 	db	83	;'S'
  2791  007F06  45                 	db	69	;'E'
  2792  007F07  54                 	db	84	;'T'
  2793  007F08  20                 	db	32
  2794  007F09  46                 	db	70	;'F'
  2795  007F0A  52                 	db	82	;'R'
  2796  007F0B  45                 	db	69	;'E'
  2797  007F0C  51                 	db	81	;'Q'
  2798  007F0D  0D                 	db	13
  2799  007F0E  0A                 	db	10
  2800  007F0F  00                 	db	0
  2801  007F10                     STR_50:
  2802  007F10  61                 	db	97	;'a'
  2803  007F11  70                 	db	112	;'p'
  2804  007F12  70                 	db	112	;'p'
  2805  007F13  6C                 	db	108	;'l'
  2806  007F14  69                 	db	105	;'i'
  2807  007F15  65                 	db	101	;'e'
  2808  007F16  64                 	db	100	;'d'
  2809  007F17  5F                 	db	95	;'_'
  2810  007F18  63                 	db	99	;'c'
  2811  007F19  6D                 	db	109	;'m'
  2812  007F1A  64                 	db	100	;'d'
  2813  007F1B  3A                 	db	58	;':'
  2814  007F1C  3D                 	db	61	;'='
  2815  007F1D  25                 	db	37
  2816  007F1E  69                 	db	105	;'i'
  2817  007F1F  0D                 	db	13
  2818  007F20  0A                 	db	10
  2819  007F21  00                 	db	0
  2820  007F22                     STR_43:
  2821  007F22  69                 	db	105	;'i'
  2822  007F23  6E                 	db	110	;'n'
  2823  007F24  76                 	db	118	;'v'
  2824  007F25  61                 	db	97	;'a'
  2825  007F26  6C                 	db	108	;'l'
  2826  007F27  69                 	db	105	;'i'
  2827  007F28  64                 	db	100	;'d'
  2828  007F29  20                 	db	32
  2829  007F2A  63                 	db	99	;'c'
  2830  007F2B  6F                 	db	111	;'o'
  2831  007F2C  6D                 	db	109	;'m'
  2832  007F2D  6D                 	db	109	;'m'
  2833  007F2E  61                 	db	97	;'a'
  2834  007F2F  6E                 	db	110	;'n'
  2835  007F30  64                 	db	100	;'d'
  2836  007F31  21                 	db	33
  2837  007F32  0A                 	db	10
  2838  007F33  00                 	db	0
  2839  007F34                     STR_46:
  2840  007F34  68                 	db	104	;'h'
  2841  007F35  61                 	db	97	;'a'
  2842  007F36  6E                 	db	110	;'n'
  2843  007F37  64                 	db	100	;'d'
  2844  007F38  6C                 	db	108	;'l'
  2845  007F39  65                 	db	101	;'e'
  2846  007F3A  5F                 	db	95	;'_'
  2847  007F3B  63                 	db	99	;'c'
  2848  007F3C  6D                 	db	109	;'m'
  2849  007F3D  64                 	db	100	;'d'
  2850  007F3E  28                 	db	40
  2851  007F3F  25                 	db	37
  2852  007F40  69                 	db	105	;'i'
  2853  007F41  29                 	db	41
  2854  007F42  0D                 	db	13
  2855  007F43  0A                 	db	10
  2856  007F44  00                 	db	0
  2857  007F45                     STR_49:
  2858  007F45  6C                 	db	108	;'l'
  2859  007F46  6F                 	db	111	;'o'
  2860  007F47  63                 	db	99	;'c'
  2861  007F48  6B                 	db	107	;'k'
  2862  007F49  20                 	db	32
  2863  007F4A  74                 	db	116	;'t'
  2864  007F4B  69                 	db	105	;'i'
  2865  007F4C  6D                 	db	109	;'m'
  2866  007F4D  65                 	db	101	;'e'
  2867  007F4E  64                 	db	100	;'d'
  2868  007F4F  20                 	db	32
  2869  007F50  6F                 	db	111	;'o'
  2870  007F51  75                 	db	117	;'u'
  2871  007F52  74                 	db	116	;'t'
  2872  007F53  21                 	db	33
  2873  007F54  0A                 	db	10
  2874  007F55  00                 	db	0
  2875  007F56                     STR_33:
  2876  007F56  70                 	db	112	;'p'
  2877  007F57  6F                 	db	111	;'o'
  2878  007F58  75                 	db	117	;'u'
  2879  007F59  74                 	db	116	;'t'
  2880  007F5A  20                 	db	32
  2881  007F5B  73                 	db	115	;'s'
  2882  007F5C  65                 	db	101	;'e'
  2883  007F5D  74                 	db	116	;'t'
  2884  007F5E  20                 	db	32
  2885  007F5F  74                 	db	116	;'t'
  2886  007F60  6F                 	db	111	;'o'
  2887  007F61  20                 	db	32
  2888  007F62  25                 	db	37
  2889  007F63  69                 	db	105	;'i'
  2890  007F64  0A                 	db	10
  2891  007F65  00                 	db	0
  2892  007F66                     STR_40:
  2893  007F66  72                 	db	114	;'r'
  2894  007F67  66                 	db	102	;'f'
  2895  007F68  72                 	db	114	;'r'
  2896  007F69  20                 	db	32
  2897  007F6A  69                 	db	105	;'i'
  2898  007F6B  73                 	db	115	;'s'
  2899  007F6C  20                 	db	32
  2900  007F6D  25                 	db	37
  2901  007F6E  6C                 	db	108	;'l'
  2902  007F6F  69                 	db	105	;'i'
  2903  007F70  20                 	db	32
  2904  007F71  64                 	db	100	;'d'
  2905  007F72  42                 	db	66	;'B'
  2906  007F73  6D                 	db	109	;'m'
  2907  007F74  0A                 	db	10
  2908  007F75  00                 	db	0
  2909  007F76                     STR_38:
  2910  007F76  72                 	db	114	;'r'
  2911  007F77  66                 	db	102	;'f'
  2912  007F78  76                 	db	118	;'v'
  2913  007F79  20                 	db	32
  2914  007F7A  69                 	db	105	;'i'
  2915  007F7B  73                 	db	115	;'s'
  2916  007F7C  20                 	db	32
  2917  007F7D  25                 	db	37
  2918  007F7E  6C                 	db	108	;'l'
  2919  007F7F  69                 	db	105	;'i'
  2920  007F80  20                 	db	32
  2921  007F81  64                 	db	100	;'d'
  2922  007F82  42                 	db	66	;'B'
  2923  007F83  6D                 	db	109	;'m'
  2924  007F84  0A                 	db	10
  2925  007F85  00                 	db	0
  2926  007F86                     STR_26:
  2927  007F86  69                 	db	105	;'i'
  2928  007F87  70                 	db	112	;'p'
  2929  007F88  63                 	db	99	;'c'
  2930  007F89  20                 	db	32
  2931  007F8A  73                 	db	115	;'s'
  2932  007F8B  65                 	db	101	;'e'
  2933  007F8C  74                 	db	116	;'t'
  2934  007F8D  20                 	db	32
  2935  007F8E  74                 	db	116	;'t'
  2936  007F8F  6F                 	db	111	;'o'
  2937  007F90  20                 	db	32
  2938  007F91  25                 	db	37
  2939  007F92  69                 	db	105	;'i'
  2940  007F93  0A                 	db	10
  2941  007F94  00                 	db	0
  2942  007F95                     STR_24:
  2943  007F95  49                 	db	73	;'I'
  2944  007F96  4E                 	db	78	;'N'
  2945  007F97  49                 	db	73	;'I'
  2946  007F98  54                 	db	84	;'T'
  2947  007F99  20                 	db	32
  2948  007F9A  53                 	db	83	;'S'
  2949  007F9B  57                 	db	87	;'W'
  2950  007F9C  49                 	db	73	;'I'
  2951  007F9D  54                 	db	84	;'T'
  2952  007F9E  43                 	db	67	;'C'
  2953  007F9F  48                 	db	72	;'H'
  2954  007FA0  0D                 	db	13
  2955  007FA1  0A                 	db	10
  2956  007FA2  00                 	db	0
  2957  007FA3                     STR_29:
  2958  007FA3  50                 	db	80	;'P'
  2959  007FA4  41                 	db	65	;'A'
  2960  007FA5  20                 	db	32
  2961  007FA6  75                 	db	117	;'u'
  2962  007FA7  6E                 	db	110	;'n'
  2963  007FA8  6D                 	db	109	;'m'
  2964  007FA9  75                 	db	117	;'u'
  2965  007FAA  74                 	db	116	;'t'
  2966  007FAB  65                 	db	101	;'e'
  2967  007FAC  64                 	db	100	;'d'
  2968  007FAD  0A                 	db	10
  2969  007FAE  00                 	db	0
  2970  007FAF                     STR_28:
  2971  007FAF  50                 	db	80	;'P'
  2972  007FB0  41                 	db	65	;'A'
  2973  007FB1  20                 	db	32
  2974  007FB2  6D                 	db	109	;'m'
  2975  007FB3  75                 	db	117	;'u'
  2976  007FB4  74                 	db	116	;'t'
  2977  007FB5  65                 	db	101	;'e'
  2978  007FB6  64                 	db	100	;'d'
  2979  007FB7  0A                 	db	10
  2980  007FB8  00                 	db	0
  2981  007FB9                     STR_19:
  2982  007FB9  7B                 	db	123
  2983  007FBA  6E                 	db	110	;'n'
  2984  007FBB  6F                 	db	111	;'o'
  2985  007FBC  74                 	db	116	;'t'
  2986  007FBD  61                 	db	97	;'a'
  2987  007FBE  67                 	db	103	;'g'
  2988  007FBF  2D                 	db	45
  2989  007FC0  7D                 	db	125
  2990  007FC1  00                 	db	0
  2991  007FC2                     STR_25:
  2992  007FC2  63                 	db	99	;'c'
  2993  007FC3  6D                 	db	109	;'m'
  2994  007FC4  64                 	db	100	;'d'
  2995  007FC5  3A                 	db	58	;':'
  2996  007FC6  20                 	db	32
  2997  007FC7  00                 	db	0
  2998  007FC8                     STR_32:
  2999  007FC8  70                 	db	112	;'p'
  3000  007FC9  6F                 	db	111	;'o'
  3001  007FCA  75                 	db	117	;'u'
  3002  007FCB  74                 	db	116	;'t'
  3003  007FCC  20                 	db	32
  3004  007FCD  00                 	db	0
  3005  007FCE                     STR_41:
  3006  007FCE  70                 	db	112	;'p'
  3007  007FCF  6F                 	db	111	;'o'
  3008  007FD0  77                 	db	119	;'w'
  3009  007FD1  65                 	db	101	;'e'
  3010  007FD2  72                 	db	114	;'r'
  3011  007FD3  00                 	db	0
  3012  007FD4                     STR_30:
  3013  007FD4  69                 	db	105	;'i'
  3014  007FD5  70                 	db	112	;'p'
  3015  007FD6  63                 	db	99	;'c'
  3016  007FD7  20                 	db	32
  3017  007FD8  00                 	db	0
  3018  007FD9                     STR_35:
  3019  007FD9  74                 	db	116	;'t'
  3020  007FDA  65                 	db	101	;'e'
  3021  007FDB  6D                 	db	109	;'m'
  3022  007FDC  70                 	db	112	;'p'
  3023  007FDD  00                 	db	0
  3024  007FDE                     STR_45:
  3025  007FDE  08                 	db	8
  3026  007FDF  20                 	db	32
  3027  007FE0  08                 	db	8
  3028  007FE1  00                 	db	0
  3029  007FE2                     STR_39:
  3030  007FE2  72                 	db	114	;'r'
  3031  007FE3  66                 	db	102	;'f'
  3032  007FE4  72                 	db	114	;'r'
  3033  007FE5  00                 	db	0
  3034  007FE6                     STR_37:
  3035  007FE6  72                 	db	114	;'r'
  3036  007FE7  66                 	db	102	;'f'
  3037  007FE8  76                 	db	118	;'v'
  3038  007FE9  00                 	db	0
  3039  007FEA                     STR_69:
  3040  007FEA  6C                 	db	108	;'l'
  3041  007FEB  58                 	db	88	;'X'
  3042  007FEC  00                 	db	0
  3043  007FED                     STR_51:
  3044  007FED  6C                 	db	108	;'l'
  3045  007FEE  64                 	db	100	;'d'
  3046  007FEF  00                 	db	0
  3047  007FF0                     STR_55:
  3048  007FF0  6C                 	db	108	;'l'
  3049  007FF1  69                 	db	105	;'i'
  3050  007FF2  00                 	db	0
  3051  007FF3                     STR_60:
  3052  007FF3  6C                 	db	108	;'l'
  3053  007FF4  75                 	db	117	;'u'
  3054  007FF5  00                 	db	0
  3055  007FF6                     STR_65:
  3056  007FF6  6C                 	db	108	;'l'
  3057  007FF7  78                 	db	120	;'x'
  3058  007FF8  00                 	db	0
  3059  007FF9                     STR_21:
  3060  007FF9  31                 	db	49	;'1'
  3061  007FFA  30                 	db	48	;'0'
  3062  007FFB  00                 	db	0
  3063  007FFC                     STR_22:
  3064  007FFC  34                 	db	52	;'4'
  3065  007FFD  30                 	db	48	;'0'
  3066  007FFE  00                 	db	0
  3067  0000                     
  3068                           ; #config settings
  3069  007FFF  00                 	db	0	; dummy byte at the end
  3070  0000                     
  3071                           	psect	cinit
  3072  004E06                     __pcinit:
  3073                           	opt callstack 0
  3074  004E06                     start_initialization:
  3075                           	opt callstack 0
  3076  004E06                     __initialization:
  3077                           	opt callstack 0
  3078                           
  3079                           ; Initialize objects allocated to BANK1 (7 bytes)
  3080                           ; load TBLPTR registers with __pidataBANK1
  3081  004E06  0EEF               	movlw	low __pidataBANK1
  3082  004E08  6EF6               	movwf	tblptrl,c
  3083  004E0A  0E58               	movlw	high __pidataBANK1
  3084  004E0C  6EF7               	movwf	tblptrh,c
  3085  004E0E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  3086  004E10  6EF8               	movwf	tblptru,c
  3087  004E12  EE01  F0E7         	lfsr	0,__pdataBANK1
  3088  004E16  EE10 F007          	lfsr	1,7
  3089  004E1A                     copy_data0:
  3090  004E1A  0009               	tblrd		*+
  3091  004E1C  CFF5 FFEE          	movff	tablat,postinc0
  3092  004E20  50E5               	movf	postdec1,w,c
  3093  004E22  50E1               	movf	fsr1l,w,c
  3094  004E24  E1FA               	bnz	copy_data0
  3095                           
  3096                           ; Initialize objects allocated to BANK0 (9 bytes)
  3097                           ; load TBLPTR registers with __pidataBANK0
  3098  004E26  0EE6               	movlw	low __pidataBANK0
  3099  004E28  6EF6               	movwf	tblptrl,c
  3100  004E2A  0E58               	movlw	high __pidataBANK0
  3101  004E2C  6EF7               	movwf	tblptrh,c
  3102  004E2E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  3103  004E30  6EF8               	movwf	tblptru,c
  3104  004E32  EE00  F0E7         	lfsr	0,__pdataBANK0
  3105  004E36  EE10 F009          	lfsr	1,9
  3106  004E3A                     copy_data1:
  3107  004E3A  0009               	tblrd		*+
  3108  004E3C  CFF5 FFEE          	movff	tablat,postinc0
  3109  004E40  50E5               	movf	postdec1,w,c
  3110  004E42  50E1               	movf	fsr1l,w,c
  3111  004E44  E1FA               	bnz	copy_data1
  3112                           
  3113                           ; Initialize objects allocated to COMRAM (1 bytes)
  3114                           ; load TBLPTR registers with __pidataCOMRAM
  3115  004E46  0EF6               	movlw	low __pidataCOMRAM
  3116  004E48  6EF6               	movwf	tblptrl,c
  3117  004E4A  0E58               	movlw	high __pidataCOMRAM
  3118  004E4C  6EF7               	movwf	tblptrh,c
  3119  004E4E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  3120  004E50  6EF8               	movwf	tblptru,c
  3121  004E52  0009               	tblrd		*+	;fetch initializer
  3122  004E54  CFF5 F072          	movff	tablat,__pdataCOMRAM
  3123                           
  3124                           ; Clear objects allocated to BANK1 (231 bytes)
  3125  004E58  EE01  F000         	lfsr	0,__pbssBANK1
  3126  004E5C  0EE7               	movlw	231
  3127  004E5E                     clear_0:
  3128  004E5E  6AEE               	clrf	postinc0,c
  3129  004E60  06E8               	decf	wreg,f,c
  3130  004E62  E1FD               	bnz	clear_0
  3131                           
  3132                           ; Clear objects allocated to BANK0 (7 bytes)
  3133  004E64  EE00  F0F0         	lfsr	0,__pbssBANK0
  3134  004E68  0E07               	movlw	7
  3135  004E6A                     clear_1:
  3136  004E6A  6AEE               	clrf	postinc0,c
  3137  004E6C  06E8               	decf	wreg,f,c
  3138  004E6E  E1FD               	bnz	clear_1
  3139                           
  3140                           ; Clear objects allocated to COMRAM (11 bytes)
  3141  004E70  EE00  F067         	lfsr	0,__pbssCOMRAM
  3142  004E74  0E0B               	movlw	11
  3143  004E76                     clear_2:
  3144  004E76  6AEE               	clrf	postinc0,c
  3145  004E78  06E8               	decf	wreg,f,c
  3146  004E7A  E1FD               	bnz	clear_2
  3147  004E7C                     end_of_initialization:
  3148                           	opt callstack 0
  3149  004E7C                     __end_of__initialization:
  3150                           	opt callstack 0
  3151  004E7C  9073               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  3152  004E7E  9273               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3153  004E80  0E00               	movlw	low (__Lmediumconst shr (0+16))
  3154  004E82  6EF8               	movwf	tblptru,c
  3155  004E84  0100               	movlb	0
  3156  004E86  EFCE  F017         	goto	_main	;jump to C main() function
  3157                           
  3158                           	psect	bssCOMRAM
  3159  000067                     __pbssCOMRAM:
  3160                           	opt callstack 0
  3161  000067                     _width:
  3162                           	opt callstack 0
  3163  000067                     	ds	2
  3164  000069                     _prec:
  3165                           	opt callstack 0
  3166  000069                     	ds	2
  3167  00006B                     _flags:
  3168                           	opt callstack 0
  3169  00006B                     	ds	2
  3170  00006D                     _g_usart_wpos:
  3171                           	opt callstack 0
  3172  00006D                     	ds	2
  3173  00006F                     _g_usart_rpos:
  3174                           	opt callstack 0
  3175  00006F                     	ds	2
  3176  000071                     check_adf4351_lock@unlock_cnt:
  3177                           	opt callstack 0
  3178  000071                     	ds	1
  3179                           
  3180                           	psect	dataCOMRAM
  3181  000072                     __pdataCOMRAM:
  3182                           	opt callstack 0
  3183  000072                     _g_pending_cmd:
  3184                           	opt callstack 0
  3185  000072                     	ds	1
  3186                           
  3187                           	psect	bssBANK0
  3188  0000F0                     __pbssBANK0:
  3189                           	opt callstack 0
  3190  0000F0                     _g_irq_handler_info:
  3191                           	opt callstack 0
  3192  0000F0                     	ds	4
  3193  0000F4                     _g_cmd_buf_pos:
  3194                           	opt callstack 0
  3195  0000F4                     	ds	2
  3196  0000F6                     check_adf4351_lock@last_lock:
  3197                           	opt callstack 0
  3198  0000F6                     	ds	1
  3199                           
  3200                           	psect	dataBANK0
  3201  0000E7                     __pdataBANK0:
  3202                           	opt callstack 0
  3203  0000E7                     _g_ptt_debounce_counter:
  3204                           	opt callstack 0
  3205  0000E7                     	ds	2
  3206  0000E9                     _g_pout:
  3207                           	opt callstack 0
  3208  0000E9                     	ds	2
  3209  0000EB                     _g_ipc:
  3210                           	opt callstack 0
  3211  0000EB                     	ds	2
  3212  0000ED                     _g_cmd_debounce_counter:
  3213                           	opt callstack 0
  3214  0000ED                     	ds	2
  3215  0000EF                     _g_applied_cmd:
  3216                           	opt callstack 0
  3217  0000EF                     	ds	1
  3218                           
  3219                           	psect	bssBANK1
  3220  000100                     __pbssBANK1:
  3221                           	opt callstack 0
  3222  000100                     _g_usart_buf:
  3223                           	opt callstack 0
  3224  000100                     	ds	128
  3225  000180                     _nout:
  3226                           	opt callstack 0
  3227  000180                     	ds	2
  3228  000182                     check_adf4351_lock@timespan2s:
  3229                           	opt callstack 0
  3230  000182                     	ds	2
  3231  000184                     _g_cpu_led_update_cnt:
  3232                           	opt callstack 0
  3233  000184                     	ds	2
  3234  000186                     _g_adf4351:
  3235                           	opt callstack 0
  3236  000186                     	ds	55
  3237  0001BD                     _dbuf:
  3238                           	opt callstack 0
  3239  0001BD                     	ds	32
  3240  0001DD                     _g_cmd_buf:
  3241                           	opt callstack 0
  3242  0001DD                     	ds	10
  3243                           
  3244                           	psect	dataBANK1
  3245  0001E7                     __pdataBANK1:
  3246                           	opt callstack 0
  3247  0001E7                     stoa@F1144:
  3248                           	opt callstack 0
  3249  0001E7                     	ds	7
  3250                           
  3251                           	psect	cstackBANK2
  3252  000200                     __pcstackBANK2:
  3253                           	opt callstack 0
  3254  000200                     check_usart@dbm:
  3255                           	opt callstack 0
  3256                           
  3257                           ; 4 bytes @ 0x0
  3258  000200                     	ds	4
  3259  000204                     check_usart@dbm_2062:
  3260                           	opt callstack 0
  3261                           
  3262                           ; 4 bytes @ 0x4
  3263  000204                     	ds	4
  3264  000208                     _check_usart$2056:
  3265                           	opt callstack 0
  3266                           
  3267                           ; 2 bytes @ 0x8
  3268  000208                     	ds	2
  3269  00020A                     check_usart@power:
  3270                           	opt callstack 0
  3271                           
  3272                           ; 4 bytes @ 0xA
  3273  00020A                     	ds	4
  3274  00020E                     _check_usart$3214:
  3275                           	opt callstack 0
  3276                           
  3277                           ; 4 bytes @ 0xE
  3278  00020E                     	ds	4
  3279  000212                     check_usart@temp:
  3280                           	opt callstack 0
  3281                           
  3282                           ; 2 bytes @ 0x12
  3283  000212                     	ds	2
  3284  000214                     check_usart@c:
  3285                           	opt callstack 0
  3286                           
  3287                           ; 2 bytes @ 0x14
  3288  000214                     	ds	2
  3289                           
  3290                           	psect	cstackBANK0
  3291  000080                     __pcstackBANK0:
  3292                           	opt callstack 0
  3293  000080                     vfpfcnvrt@cp:
  3294                           	opt callstack 0
  3295                           
  3296                           ; 2 bytes @ 0x0
  3297  000080                     	ds	2
  3298  000082                     vfpfcnvrt@done:
  3299                           	opt callstack 0
  3300                           
  3301                           ; 2 bytes @ 0x2
  3302  000082                     	ds	2
  3303  000084                     _vfpfcnvrt$2366:
  3304                           	opt callstack 0
  3305                           
  3306                           ; 2 bytes @ 0x4
  3307  000084                     	ds	2
  3308  000086                     vfpfcnvrt@ll:
  3309                           	opt callstack 0
  3310                           
  3311                           ; 8 bytes @ 0x6
  3312  000086                     	ds	8
  3313  00008E                     vfpfcnvrt@c:
  3314                           	opt callstack 0
  3315                           
  3316                           ; 1 bytes @ 0xE
  3317  00008E                     	ds	1
  3318  00008F                     vfpfcnvrt@llu:
  3319                           	opt callstack 0
  3320                           
  3321                           ; 8 bytes @ 0xF
  3322  00008F                     	ds	8
  3323  000097                     ?_printf:
  3324                           	opt callstack 0
  3325  000097                     printf@fmt:
  3326                           	opt callstack 0
  3327                           
  3328                           ; 2 bytes @ 0x17
  3329  000097                     	ds	34
  3330  0000B9                     printf@ap:
  3331                           	opt callstack 0
  3332                           
  3333                           ; 2 bytes @ 0x39
  3334  0000B9                     	ds	2
  3335  0000BB                     adf4351_calc_counters@ctx:
  3336                           	opt callstack 0
  3337  0000BB                     adf4351_calc_rcnt_block@ctx:
  3338                           	opt callstack 0
  3339  0000BB                     adf4351_write_reg0@ctx:
  3340                           	opt callstack 0
  3341  0000BB                     adf4351_write_reg1@ctx:
  3342                           	opt callstack 0
  3343  0000BB                     adf4351_write_reg2@ctx:
  3344                           	opt callstack 0
  3345  0000BB                     adf4351_write_reg3@ctx:
  3346                           	opt callstack 0
  3347  0000BB                     adf4351_write_reg4@ctx:
  3348                           	opt callstack 0
  3349  0000BB                     adf4351_write_reg5@ctx:
  3350                           	opt callstack 0
  3351                           
  3352                           ; 2 bytes @ 0x3B
  3353  0000BB                     	ds	2
  3354  0000BD                     ??_adf4351_write_reg4:
  3355  0000BD                     ??_adf4351_write_reg2:
  3356  0000BD                     ??_adf4351_write_reg5:
  3357  0000BD                     ??_adf4351_write_reg3:
  3358  0000BD                     ??_adf4351_write_reg1:
  3359  0000BD                     ??_adf4351_write_reg0:
  3360  0000BD                     adf4351_calc_counters@remainder:
  3361                           	opt callstack 0
  3362  0000BD                     adf4351_calc_rcnt_block@bscdiv:
  3363                           	opt callstack 0
  3364                           
  3365                           ; 4 bytes @ 0x3D
  3366  0000BD                     	ds	4
  3367  0000C1                     adf4351_calc_rcnt_block@div:
  3368                           	opt callstack 0
  3369  0000C1                     adf4351_calc_counters@div:
  3370                           	opt callstack 0
  3371                           
  3372                           ; 4 bytes @ 0x41
  3373  0000C1                     	ds	1
  3374  0000C2                     adf4351_write_reg5@data:
  3375                           	opt callstack 0
  3376                           
  3377                           ; 4 bytes @ 0x42
  3378  0000C2                     	ds	1
  3379  0000C3                     adf4351_write_reg0@data:
  3380                           	opt callstack 0
  3381  0000C3                     adf4351_write_reg1@data:
  3382                           	opt callstack 0
  3383  0000C3                     adf4351_write_reg3@data:
  3384                           	opt callstack 0
  3385                           
  3386                           ; 4 bytes @ 0x43
  3387  0000C3                     	ds	2
  3388  0000C5                     adf4351_calc_counters@integer:
  3389                           	opt callstack 0
  3390                           
  3391                           ; 4 bytes @ 0x45
  3392  0000C5                     	ds	2
  3393  0000C7                     adf4351_write_reg4@data:
  3394                           	opt callstack 0
  3395                           
  3396                           ; 4 bytes @ 0x47
  3397  0000C7                     	ds	2
  3398  0000C9                     adf4351_calc_counters@mod:
  3399                           	opt callstack 0
  3400  0000C9                     adf4351_write_reg2@data:
  3401                           	opt callstack 0
  3402                           
  3403                           ; 4 bytes @ 0x49
  3404  0000C9                     	ds	4
  3405  0000CD                     adf4351_set_rfout_enable@ctx:
  3406                           	opt callstack 0
  3407  0000CD                     adf4351_setup@ctx:
  3408                           	opt callstack 0
  3409  0000CD                     adf4351_calc_counters@frac:
  3410                           	opt callstack 0
  3411                           
  3412                           ; 4 bytes @ 0x4D
  3413  0000CD                     	ds	2
  3414  0000CF                     adf4351_set_rfout_enable@enable:
  3415                           	opt callstack 0
  3416  0000CF                     adf4351_set_mode@ctx:
  3417                           	opt callstack 0
  3418  0000CF                     adf4351_set_tune@ctx:
  3419                           	opt callstack 0
  3420                           
  3421                           ; 2 bytes @ 0x4F
  3422  0000CF                     	ds	2
  3423  0000D1                     ??_pa_mute:
  3424  0000D1                     ??_pa_unmute:
  3425  0000D1                     adf4351_set_tune@icp:
  3426                           	opt callstack 0
  3427  0000D1                     adf4351_set_freq@ctx:
  3428                           	opt callstack 0
  3429  0000D1                     adf4351_set_mode@enable:
  3430                           	opt callstack 0
  3431                           
  3432                           ; 2 bytes @ 0x51
  3433  0000D1                     	ds	1
  3434  0000D2                     adf4351_set_tune@pout:
  3435                           	opt callstack 0
  3436                           
  3437                           ; 1 bytes @ 0x52
  3438  0000D2                     	ds	1
  3439  0000D3                     adf4351_set_tune@lownoise:
  3440                           	opt callstack 0
  3441  0000D3                     adf4351_set_freq@freq:
  3442                           	opt callstack 0
  3443                           
  3444                           ; 4 bytes @ 0x53
  3445  0000D3                     	ds	1
  3446  0000D4                     ??_pa_update:
  3447                           
  3448                           ; 1 bytes @ 0x54
  3449  0000D4                     	ds	1
  3450  0000D5                     _adf4351_set_tune$431:
  3451                           	opt callstack 0
  3452                           
  3453                           ; 2 bytes @ 0x55
  3454  0000D5                     	ds	2
  3455  0000D7                     apply_ipc@ipc:
  3456                           	opt callstack 0
  3457                           
  3458                           ; 2 bytes @ 0x57
  3459  0000D7                     	ds	2
  3460  0000D9                     ??_check_usart:
  3461  0000D9                     ??_handle_cmd:
  3462                           
  3463                           ; 1 bytes @ 0x59
  3464  0000D9                     	ds	3
  3465  0000DC                     handle_cmd@timeout:
  3466                           	opt callstack 0
  3467                           
  3468                           ; 2 bytes @ 0x5C
  3469  0000DC                     	ds	2
  3470  0000DE                     handle_cmd@cmd:
  3471                           	opt callstack 0
  3472                           
  3473                           ; 1 bytes @ 0x5E
  3474  0000DE                     	ds	1
  3475  0000DF                     update_switch@cmd:
  3476                           	opt callstack 0
  3477                           
  3478                           ; 1 bytes @ 0x5F
  3479  0000DF                     	ds	1
  3480  0000E0                     ??_main:
  3481                           
  3482                           ; 1 bytes @ 0x60
  3483  0000E0                     	ds	3
  3484  0000E3                     _main$1993:
  3485                           	opt callstack 0
  3486                           
  3487                           ; 2 bytes @ 0x63
  3488  0000E3                     	ds	2
  3489  0000E5                     main@ref:
  3490                           	opt callstack 0
  3491                           
  3492                           ; 2 bytes @ 0x65
  3493  0000E5                     	ds	2
  3494                           
  3495                           	psect	cstackCOMRAM
  3496  000001                     __pcstackCOMRAM:
  3497                           	opt callstack 0
  3498  000001                     usart_rx_irq_handler@udata:
  3499                           	opt callstack 0
  3500                           
  3501                           ; 2 bytes @ 0x0
  3502  000001                     	ds	2
  3503  000003                     ??_usart_rx_irq_handler:
  3504                           
  3505                           ; 1 bytes @ 0x2
  3506  000003                     	ds	2
  3507  000005                     usart_rx_irq_handler@c:
  3508                           	opt callstack 0
  3509                           
  3510                           ; 1 bytes @ 0x4
  3511  000005                     	ds	1
  3512  000006                     usart_rx_irq_handler@wposn:
  3513                           	opt callstack 0
  3514                           
  3515                           ; 2 bytes @ 0x5
  3516  000006                     	ds	2
  3517  000008                     ??_global_irq_handler:
  3518                           
  3519                           ; 1 bytes @ 0x7
  3520  000008                     	ds	4
  3521  00000C                     global_irq_handler@dummy:
  3522                           	opt callstack 0
  3523                           
  3524                           ; 1 bytes @ 0xB
  3525  00000C                     	ds	1
  3526  00000D                     ??_init_gpios:
  3527  00000D                     ??_read_switch:
  3528  00000D                     ?_gpio_to_ch:
  3529                           	opt callstack 0
  3530  00000D                     ?_strncmp:
  3531                           	opt callstack 0
  3532  00000D                     ?_strlen:
  3533                           	opt callstack 0
  3534  00000D                     ?_isupper:
  3535                           	opt callstack 0
  3536  00000D                     ?_isalpha:
  3537                           	opt callstack 0
  3538  00000D                     ?_isdigit:
  3539                           	opt callstack 0
  3540  00000D                     ?_isspace:
  3541                           	opt callstack 0
  3542  00000D                     ?_islower:
  3543                           	opt callstack 0
  3544  00000D                     ?_adf4351_get_lock:
  3545                           	opt callstack 0
  3546  00000D                     ?_usart_tstc:
  3547                           	opt callstack 0
  3548  00000D                     ?_usart_getc:
  3549                           	opt callstack 0
  3550  00000D                     ?___wmul:
  3551                           	opt callstack 0
  3552  00000D                     ?___awdiv:
  3553                           	opt callstack 0
  3554  00000D                     ?___awmod:
  3555                           	opt callstack 0
  3556  00000D                     ?___llmod:
  3557                           	opt callstack 0
  3558  00000D                     ?___aodiv:
  3559                           	opt callstack 0
  3560  00000D                     ?___aomod:
  3561                           	opt callstack 0
  3562  00000D                     ?___lodiv:
  3563                           	opt callstack 0
  3564  00000D                     ?___lomod:
  3565                           	opt callstack 0
  3566  00000D                     usart_putc@c:
  3567                           	opt callstack 0
  3568  00000D                     adf4351_get_lock@ctx:
  3569                           	opt callstack 0
  3570  00000D                     adf4351_default@ctx:
  3571                           	opt callstack 0
  3572  00000D                     adf4351_calc_vco_core_freq@ctx:
  3573                           	opt callstack 0
  3574  00000D                     irq_set_handler@handler:
  3575                           	opt callstack 0
  3576  00000D                     gpio_to_ch@gpio:
  3577                           	opt callstack 0
  3578  00000D                     ___wmul@multiplier:
  3579                           	opt callstack 0
  3580  00000D                     ___awdiv@dividend:
  3581                           	opt callstack 0
  3582  00000D                     ___awmod@dividend:
  3583                           	opt callstack 0
  3584  00000D                     isalpha@c:
  3585                           	opt callstack 0
  3586  00000D                     isdigit@c:
  3587                           	opt callstack 0
  3588  00000D                     isspace@c:
  3589                           	opt callstack 0
  3590  00000D                     isupper@c:
  3591                           	opt callstack 0
  3592  00000D                     memset@dest:
  3593                           	opt callstack 0
  3594  00000D                     strlen@s:
  3595                           	opt callstack 0
  3596  00000D                     strncmp@_l:
  3597                           	opt callstack 0
  3598  00000D                     islower@c:
  3599                           	opt callstack 0
  3600  00000D                     adf4351_write_latch@value:
  3601                           	opt callstack 0
  3602  00000D                     ___llmod@dividend:
  3603                           	opt callstack 0
  3604  00000D                     ___aodiv@dividend:
  3605                           	opt callstack 0
  3606  00000D                     ___aomod@dividend:
  3607                           	opt callstack 0
  3608  00000D                     ___lodiv@dividend:
  3609                           	opt callstack 0
  3610  00000D                     ___lomod@dividend:
  3611                           	opt callstack 0
  3612                           
  3613                           ; 8 bytes @ 0xC
  3614  00000D                     	ds	1
  3615  00000E                     ?_fputc:
  3616                           	opt callstack 0
  3617  00000E                     fputc@c:
  3618                           	opt callstack 0
  3619                           
  3620                           ; 2 bytes @ 0xD
  3621  00000E                     	ds	1
  3622  00000F                     ??_gpio_to_ch:
  3623  00000F                     ??_isupper:
  3624  00000F                     ??_isalpha:
  3625  00000F                     ??_isdigit:
  3626  00000F                     ??_isspace:
  3627  00000F                     ??_islower:
  3628  00000F                     ??_adf4351_get_lock:
  3629  00000F                     ??_usart_getc:
  3630  00000F                     irq_set_handler@udata:
  3631                           	opt callstack 0
  3632  00000F                     ___wmul@multiplicand:
  3633                           	opt callstack 0
  3634  00000F                     ___awdiv@divisor:
  3635                           	opt callstack 0
  3636  00000F                     ___awmod@divisor:
  3637                           	opt callstack 0
  3638  00000F                     memset@c:
  3639                           	opt callstack 0
  3640  00000F                     strlen@a:
  3641                           	opt callstack 0
  3642  00000F                     strncmp@_r:
  3643                           	opt callstack 0
  3644  00000F                     adf4351_calc_vco_core_freq@rf_out_freq:
  3645                           	opt callstack 0
  3646                           
  3647                           ; 4 bytes @ 0xE
  3648  00000F                     	ds	1
  3649  000010                     read_switch@fsw0:
  3650                           	opt callstack 0
  3651  000010                     fputc@fp:
  3652                           	opt callstack 0
  3653                           
  3654                           ; 2 bytes @ 0xF
  3655  000010                     	ds	1
  3656  000011                     ??_adf4351_write_latch:
  3657  000011                     ?_adc_sample:
  3658                           	opt callstack 0
  3659  000011                     irq_set_handler@id:
  3660                           	opt callstack 0
  3661  000011                     read_switch@fsw1:
  3662                           	opt callstack 0
  3663  000011                     ___awdiv@counter:
  3664                           	opt callstack 0
  3665  000011                     ___awmod@counter:
  3666                           	opt callstack 0
  3667  000011                     usart_getc@res:
  3668                           	opt callstack 0
  3669  000011                     adc_cfg_gpio@gpio:
  3670                           	opt callstack 0
  3671  000011                     adc_sample@gpio:
  3672                           	opt callstack 0
  3673  000011                     ___wmul@product:
  3674                           	opt callstack 0
  3675  000011                     memset@n:
  3676                           	opt callstack 0
  3677  000011                     strncmp@n:
  3678                           	opt callstack 0
  3679  000011                     ___llmod@divisor:
  3680                           	opt callstack 0
  3681                           
  3682                           ; 4 bytes @ 0x10
  3683  000011                     	ds	1
  3684  000012                     ??_update_led:
  3685  000012                     ?_stoa:
  3686                           	opt callstack 0
  3687  000012                     ___awdiv@sign:
  3688                           	opt callstack 0
  3689  000012                     ___awmod@sign:
  3690                           	opt callstack 0
  3691  000012                     stoa@fp:
  3692                           	opt callstack 0
  3693  000012                     fputs@s:
  3694                           	opt callstack 0
  3695  000012                     putchar@c:
  3696                           	opt callstack 0
  3697                           
  3698                           ; 2 bytes @ 0x11
  3699  000012                     	ds	1
  3700  000013                     ??_memset:
  3701  000013                     ??_strncmp:
  3702  000013                     ??_adc_cfg_gpio:
  3703  000013                     ??_adc_sample:
  3704  000013                     ?_toupper:
  3705                           	opt callstack 0
  3706  000013                     _isspace$2877:
  3707                           	opt callstack 0
  3708  000013                     ___awdiv@quotient:
  3709                           	opt callstack 0
  3710  000013                     toupper@c:
  3711                           	opt callstack 0
  3712                           
  3713                           ; 2 bytes @ 0x12
  3714  000013                     	ds	1
  3715  000014                     ?_atoi:
  3716                           	opt callstack 0
  3717  000014                     stoa@s:
  3718                           	opt callstack 0
  3719  000014                     atoi@s:
  3720                           	opt callstack 0
  3721  000014                     fputs@fp:
  3722                           	opt callstack 0
  3723  000014                     strncmp@l:
  3724                           	opt callstack 0
  3725                           
  3726                           ; 2 bytes @ 0x13
  3727  000014                     	ds	1
  3728  000015                     ??_toupper:
  3729  000015                     ___llmod@counter:
  3730                           	opt callstack 0
  3731  000015                     adc_sample@ch:
  3732                           	opt callstack 0
  3733  000015                     memset@k:
  3734                           	opt callstack 0
  3735  000015                     adf4351_write_latch@mask:
  3736                           	opt callstack 0
  3737  000015                     ___aodiv@divisor:
  3738                           	opt callstack 0
  3739  000015                     ___aomod@divisor:
  3740                           	opt callstack 0
  3741  000015                     ___lodiv@divisor:
  3742                           	opt callstack 0
  3743  000015                     ___lomod@divisor:
  3744                           	opt callstack 0
  3745                           
  3746                           ; 8 bytes @ 0x14
  3747  000015                     	ds	1
  3748  000016                     ??_atoi:
  3749  000016                     ??_stoa:
  3750  000016                     ?_gcd:
  3751                           	opt callstack 0
  3752  000016                     fputs@c:
  3753                           	opt callstack 0
  3754  000016                     strncmp@r:
  3755                           	opt callstack 0
  3756  000016                     gcd@a:
  3757                           	opt callstack 0
  3758                           
  3759                           ; 4 bytes @ 0x15
  3760  000016                     	ds	1
  3761  000017                     ?_KTY82_222_Adc2Temperature:
  3762                           	opt callstack 0
  3763  000017                     ?___lmul:
  3764                           	opt callstack 0
  3765  000017                     adf4351_calc_vco_core_freq@div:
  3766                           	opt callstack 0
  3767  000017                     KTY82_222_Adc2Temperature@adc_value:
  3768                           	opt callstack 0
  3769  000017                     memset@s:
  3770                           	opt callstack 0
  3771  000017                     fputs@i:
  3772                           	opt callstack 0
  3773  000017                     ___lmul@multiplier:
  3774                           	opt callstack 0
  3775  000017                     stoa@nuls:
  3776                           	opt callstack 0
  3777                           
  3778                           ; 7 bytes @ 0x16
  3779  000017                     	ds	2
  3780  000019                     ?_pad:
  3781                           	opt callstack 0
  3782  000019                     adf4351_init@ctx:
  3783                           	opt callstack 0
  3784  000019                     KTY82_222_Adc2Temperature@res:
  3785                           	opt callstack 0
  3786  000019                     pad@fp:
  3787                           	opt callstack 0
  3788  000019                     _toupper$2949:
  3789                           	opt callstack 0
  3790                           
  3791                           ; 2 bytes @ 0x18
  3792  000019                     	ds	1
  3793  00001A                     atoi@neg:
  3794                           	opt callstack 0
  3795  00001A                     gcd@b:
  3796                           	opt callstack 0
  3797                           
  3798                           ; 4 bytes @ 0x19
  3799  00001A                     	ds	1
  3800  00001B                     pad@buf:
  3801                           	opt callstack 0
  3802  00001B                     adf4351_init@ref:
  3803                           	opt callstack 0
  3804  00001B                     ___lmul@multiplicand:
  3805                           	opt callstack 0
  3806                           
  3807                           ; 4 bytes @ 0x1A
  3808  00001B                     	ds	1
  3809  00001C                     _atoi$2850:
  3810                           	opt callstack 0
  3811                           
  3812                           ; 2 bytes @ 0x1B
  3813  00001C                     	ds	1
  3814  00001D                     ___aodiv@counter:
  3815                           	opt callstack 0
  3816  00001D                     ___aomod@counter:
  3817                           	opt callstack 0
  3818  00001D                     ___lomod@counter:
  3819                           	opt callstack 0
  3820  00001D                     pad@p:
  3821                           	opt callstack 0
  3822  00001D                     ___lodiv@quotient:
  3823                           	opt callstack 0
  3824                           
  3825                           ; 8 bytes @ 0x1C
  3826  00001D                     	ds	1
  3827  00001E                     ___aodiv@sign:
  3828                           	opt callstack 0
  3829  00001E                     ___aomod@sign:
  3830                           	opt callstack 0
  3831  00001E                     stoa@i:
  3832                           	opt callstack 0
  3833  00001E                     _atoi$2852:
  3834                           	opt callstack 0
  3835  00001E                     gcd@c:
  3836                           	opt callstack 0
  3837                           
  3838                           ; 4 bytes @ 0x1D
  3839  00001E                     	ds	1
  3840  00001F                     ??_pad:
  3841  00001F                     ?_abs:
  3842                           	opt callstack 0
  3843  00001F                     abs@a:
  3844                           	opt callstack 0
  3845  00001F                     adf4351_init@pfd:
  3846                           	opt callstack 0
  3847  00001F                     ___lmul@product:
  3848                           	opt callstack 0
  3849  00001F                     ___aodiv@quotient:
  3850                           	opt callstack 0
  3851                           
  3852                           ; 8 bytes @ 0x1E
  3853  00001F                     	ds	1
  3854  000020                     _atoi$2851:
  3855                           	opt callstack 0
  3856  000020                     pad@i:
  3857                           	opt callstack 0
  3858  000020                     stoa@w:
  3859                           	opt callstack 0
  3860                           
  3861                           ; 2 bytes @ 0x1F
  3862  000020                     	ds	1
  3863  000021                     ??_abs:
  3864  000021                     atoi@n:
  3865                           	opt callstack 0
  3866                           
  3867                           ; 2 bytes @ 0x20
  3868  000021                     	ds	1
  3869  000022                     pad@w:
  3870                           	opt callstack 0
  3871  000022                     stoa@cp:
  3872                           	opt callstack 0
  3873                           
  3874                           ; 2 bytes @ 0x21
  3875  000022                     	ds	1
  3876  000023                     ??_adf4351_init:
  3877  000023                     ?___lldiv:
  3878                           	opt callstack 0
  3879  000023                     ___lldiv@dividend:
  3880                           	opt callstack 0
  3881                           
  3882                           ; 4 bytes @ 0x22
  3883  000023                     	ds	1
  3884  000024                     ?_ctoa:
  3885                           	opt callstack 0
  3886  000024                     ?_xtoa:
  3887                           	opt callstack 0
  3888  000024                     ctoa@fp:
  3889                           	opt callstack 0
  3890  000024                     stoa@p:
  3891                           	opt callstack 0
  3892  000024                     xtoa@fp:
  3893                           	opt callstack 0
  3894                           
  3895                           ; 2 bytes @ 0x23
  3896  000024                     	ds	1
  3897  000025                     ___lodiv@counter:
  3898                           	opt callstack 0
  3899                           
  3900                           ; 1 bytes @ 0x24
  3901  000025                     	ds	1
  3902  000026                     ?_utoa:
  3903                           	opt callstack 0
  3904  000026                     ctoa@c:
  3905                           	opt callstack 0
  3906  000026                     stoa@l:
  3907                           	opt callstack 0
  3908  000026                     utoa@fp:
  3909                           	opt callstack 0
  3910  000026                     xtoa@d:
  3911                           	opt callstack 0
  3912                           
  3913                           ; 8 bytes @ 0x25
  3914  000026                     	ds	1
  3915  000027                     ?_dtoa:
  3916                           	opt callstack 0
  3917  000027                     ctoa@w:
  3918                           	opt callstack 0
  3919  000027                     dtoa@fp:
  3920                           	opt callstack 0
  3921  000027                     ___lldiv@divisor:
  3922                           	opt callstack 0
  3923                           
  3924                           ; 4 bytes @ 0x26
  3925  000027                     	ds	1
  3926  000028                     utoa@d:
  3927                           	opt callstack 0
  3928                           
  3929                           ; 8 bytes @ 0x27
  3930  000028                     	ds	1
  3931  000029                     dtoa@d:
  3932                           	opt callstack 0
  3933                           
  3934                           ; 8 bytes @ 0x28
  3935  000029                     	ds	2
  3936  00002B                     ___lldiv@quotient:
  3937                           	opt callstack 0
  3938                           
  3939                           ; 4 bytes @ 0x2A
  3940  00002B                     	ds	3
  3941  00002E                     xtoa@x:
  3942                           	opt callstack 0
  3943                           
  3944                           ; 1 bytes @ 0x2D
  3945  00002E                     	ds	1
  3946  00002F                     ??_xtoa:
  3947  00002F                     ___lldiv@counter:
  3948                           	opt callstack 0
  3949                           
  3950                           ; 1 bytes @ 0x2E
  3951  00002F                     	ds	1
  3952  000030                     ??_utoa:
  3953  000030                     ?_adc_voltage:
  3954                           	opt callstack 0
  3955  000030                     adc_voltage@gpio:
  3956                           	opt callstack 0
  3957  000030                     usart_init@baud:
  3958                           	opt callstack 0
  3959                           
  3960                           ; 4 bytes @ 0x2F
  3961  000030                     	ds	1
  3962  000031                     ??_dtoa:
  3963                           
  3964                           ; 1 bytes @ 0x30
  3965  000031                     	ds	3
  3966  000034                     usart_init@spbrg_value:
  3967                           	opt callstack 0
  3968                           
  3969                           ; 2 bytes @ 0x33
  3970  000034                     	ds	3
  3971  000037                     _xtoa$2351:
  3972                           	opt callstack 0
  3973                           
  3974                           ; 2 bytes @ 0x36
  3975  000037                     	ds	1
  3976  000038                     utoa@p:
  3977                           	opt callstack 0
  3978                           
  3979                           ; 2 bytes @ 0x37
  3980  000038                     	ds	1
  3981  000039                     _dtoa$2324:
  3982                           	opt callstack 0
  3983  000039                     _xtoa$2352:
  3984                           	opt callstack 0
  3985                           
  3986                           ; 2 bytes @ 0x38
  3987  000039                     	ds	1
  3988  00003A                     utoa@w:
  3989                           	opt callstack 0
  3990                           
  3991                           ; 2 bytes @ 0x39
  3992  00003A                     	ds	1
  3993  00003B                     dtoa@p:
  3994                           	opt callstack 0
  3995  00003B                     xtoa@p:
  3996                           	opt callstack 0
  3997                           
  3998                           ; 2 bytes @ 0x3A
  3999  00003B                     	ds	1
  4000  00003C                     utoa@n:
  4001                           	opt callstack 0
  4002                           
  4003                           ; 8 bytes @ 0x3B
  4004  00003C                     	ds	1
  4005  00003D                     dtoa@w:
  4006                           	opt callstack 0
  4007  00003D                     xtoa@w:
  4008                           	opt callstack 0
  4009                           
  4010                           ; 2 bytes @ 0x3C
  4011  00003D                     	ds	2
  4012  00003F                     dtoa@s:
  4013                           	opt callstack 0
  4014  00003F                     xtoa@n:
  4015                           	opt callstack 0
  4016                           
  4017                           ; 8 bytes @ 0x3E
  4018  00003F                     	ds	2
  4019  000041                     dtoa@n:
  4020                           	opt callstack 0
  4021                           
  4022                           ; 8 bytes @ 0x40
  4023  000041                     	ds	3
  4024  000044                     utoa@i:
  4025                           	opt callstack 0
  4026                           
  4027                           ; 2 bytes @ 0x43
  4028  000044                     	ds	3
  4029  000047                     xtoa@i:
  4030                           	opt callstack 0
  4031                           
  4032                           ; 2 bytes @ 0x46
  4033  000047                     	ds	2
  4034  000049                     dtoa@i:
  4035                           	opt callstack 0
  4036  000049                     xtoa@c:
  4037                           	opt callstack 0
  4038                           
  4039                           ; 2 bytes @ 0x48
  4040  000049                     	ds	2
  4041  00004B                     ?_vfpfcnvrt:
  4042                           	opt callstack 0
  4043  00004B                     vfpfcnvrt@fp:
  4044                           	opt callstack 0
  4045                           
  4046                           ; 2 bytes @ 0x4A
  4047  00004B                     	ds	2
  4048  00004D                     vfpfcnvrt@fmt:
  4049                           	opt callstack 0
  4050                           
  4051                           ; 2 bytes @ 0x4C
  4052  00004D                     	ds	2
  4053  00004F                     vfpfcnvrt@ap:
  4054                           	opt callstack 0
  4055                           
  4056                           ; 2 bytes @ 0x4E
  4057  00004F                     	ds	2
  4058  000051                     ??_vfpfcnvrt:
  4059                           
  4060                           ; 1 bytes @ 0x50
  4061  000051                     	ds	14
  4062  00005F                     ?_vfprintf:
  4063                           	opt callstack 0
  4064  00005F                     vfprintf@fp:
  4065                           	opt callstack 0
  4066                           
  4067                           ; 2 bytes @ 0x5E
  4068  00005F                     	ds	2
  4069  000061                     vfprintf@fmt:
  4070                           	opt callstack 0
  4071                           
  4072                           ; 2 bytes @ 0x60
  4073  000061                     	ds	2
  4074  000063                     vfprintf@ap:
  4075                           	opt callstack 0
  4076                           
  4077                           ; 2 bytes @ 0x62
  4078  000063                     	ds	2
  4079  000065                     vfprintf@cfmt:
  4080                           	opt callstack 0
  4081                           
  4082                           ; 2 bytes @ 0x64
  4083  000065                     	ds	2
  4084  000067                     
  4085                           ; 1 bytes @ 0x66
  4086 ;;
  4087 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  4088 ;;
  4089 ;; *************** function _main *****************
  4090 ;; Defined at:
  4091 ;;		line 125 in file "src/main.c"
  4092 ;; Parameters:    Size  Location     Type
  4093 ;;		None
  4094 ;; Auto vars:     Size  Location     Type
  4095 ;;  ref             2  101[BANK0 ] int 
  4096 ;; Return value:  Size  Location     Type
  4097 ;;                  1    wreg      void 
  4098 ;; Registers used:
  4099 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4100 ;; Tracked objects:
  4101 ;;		On entry : 0/0
  4102 ;;		On exit  : 0/0
  4103 ;;		Unchanged: 0/0
  4104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4105 ;;      Params:         0       0       0       0       0       0       0
  4106 ;;      Locals:         0       4       0       0       0       0       0
  4107 ;;      Temps:          0       3       0       0       0       0       0
  4108 ;;      Totals:         0       7       0       0       0       0       0
  4109 ;;Total ram usage:        7 bytes
  4110 ;; Hardware stack levels required when called:   15
  4111 ;; This function calls:
  4112 ;;		_adc_cfg_gpio
  4113 ;;		_adc_init
  4114 ;;		_adf4351_init
  4115 ;;		_adf4351_set_tune
  4116 ;;		_check_usart
  4117 ;;		_init_gpios
  4118 ;;		_init_switch
  4119 ;;		_pa_update
  4120 ;;		_printf
  4121 ;;		_update_led
  4122 ;;		_update_switch
  4123 ;;		_usart_init
  4124 ;; This function is called by:
  4125 ;;		Startup code after reset
  4126 ;; This function uses a non-reentrant model
  4127 ;;
  4128                           
  4129                           	psect	text0
  4130  002F9C                     __ptext0:
  4131                           	opt callstack 0
  4132  002F9C                     _main:
  4133                           	opt callstack 16
  4134  002F9C                     
  4135                           ;src/main.c: 127:     int ref;;src/main.c: 129:     OSCTUNE = 0x80;
  4136  002F9C  0E80               	movlw	128
  4137  002F9E  6E9B               	movwf	155,c	;volatile
  4138                           
  4139                           ;src/main.c: 130:     OSCCON = 0xF2;
  4140  002FA0  0EF2               	movlw	242
  4141  002FA2  6ED3               	movwf	211,c	;volatile
  4142  002FA4                     l415:
  4143  002FA4  A4D3               	btfss	211,2,c	;volatile
  4144  002FA6  EFD7  F017         	goto	u8791
  4145  002FAA  EFD9  F017         	goto	u8790
  4146  002FAE                     u8791:
  4147  002FAE  EFD2  F017         	goto	l415
  4148  002FB2                     u8790:
  4149  002FB2                     
  4150                           ;src/main.c: 136:     PIE1 = 0;
  4151  002FB2  0E00               	movlw	0
  4152  002FB4  6E9D               	movwf	157,c	;volatile
  4153                           
  4154                           ;src/main.c: 137:     PIE2 = 0;
  4155  002FB6  0E00               	movlw	0
  4156  002FB8  6EA0               	movwf	160,c	;volatile
  4157  002FBA                     
  4158                           ;src/main.c: 139:     init_gpios();
  4159  002FBA  EC63  F00A         	call	_init_gpios	;wreg free
  4160  002FBE                     
  4161                           ;src/main.c: 141:     adc_init();
  4162  002FBE  EC61  F02C         	call	_adc_init	;wreg free
  4163  002FC2                     
  4164                           ;src/main.c: 142:     adc_cfg_gpio(PIN_TEMP);
  4165  002FC2  0EF3               	movlw	low _PIN_TEMP_DEF
  4166  002FC4  6E11               	movwf	adc_cfg_gpio@gpio^0,c
  4167  002FC6  0E79               	movlw	high _PIN_TEMP_DEF
  4168  002FC8  6E12               	movwf	(adc_cfg_gpio@gpio+1)^0,c
  4169  002FCA  ECA3  F029         	call	_adc_cfg_gpio	;wreg free
  4170  002FCE                     
  4171                           ;src/main.c: 143:     adc_cfg_gpio(PIN_RF_V);
  4172  002FCE  0EEE               	movlw	low _PIN_RF_V_DEF
  4173  002FD0  6E11               	movwf	adc_cfg_gpio@gpio^0,c
  4174  002FD2  0E79               	movlw	high _PIN_RF_V_DEF
  4175  002FD4  6E12               	movwf	(adc_cfg_gpio@gpio+1)^0,c
  4176  002FD6  ECA3  F029         	call	_adc_cfg_gpio	;wreg free
  4177  002FDA                     
  4178                           ;src/main.c: 144:     adc_cfg_gpio(PIN_RF_R);
  4179  002FDA  0EE9               	movlw	low _PIN_RF_R_DEF
  4180  002FDC  6E11               	movwf	adc_cfg_gpio@gpio^0,c
  4181  002FDE  0E79               	movlw	high _PIN_RF_R_DEF
  4182  002FE0  6E12               	movwf	(adc_cfg_gpio@gpio+1)^0,c
  4183  002FE2  ECA3  F029         	call	_adc_cfg_gpio	;wreg free
  4184  002FE6                     
  4185                           ;src/main.c: 145:     adc_cfg_gpio(PIN_VOLTAGE);
  4186  002FE6  0EE4               	movlw	low _PIN_VOLTAGE_DEF
  4187  002FE8  6E11               	movwf	adc_cfg_gpio@gpio^0,c
  4188  002FEA  0E79               	movlw	high _PIN_VOLTAGE_DEF
  4189  002FEC  6E12               	movwf	(adc_cfg_gpio@gpio+1)^0,c
  4190  002FEE  ECA3  F029         	call	_adc_cfg_gpio	;wreg free
  4191  002FF2                     
  4192                           ;src/main.c: 147:     usart_init(115200);
  4193  002FF2  0E00               	movlw	0
  4194  002FF4  6E30               	movwf	usart_init@baud^0,c
  4195  002FF6  0EC2               	movlw	194
  4196  002FF8  6E31               	movwf	(usart_init@baud+1)^0,c
  4197  002FFA  0E01               	movlw	1
  4198  002FFC  6E32               	movwf	(usart_init@baud+2)^0,c
  4199  002FFE  0E00               	movlw	0
  4200  003000  6E33               	movwf	(usart_init@baud+3)^0,c
  4201  003002  ECDC  F028         	call	_usart_init	;wreg free
  4202  003006                     
  4203                           ;src/main.c: 149:     ref = ((*((PIN_ADF_FREQ_SEL)->pPORT) & (PIN_ADF_FREQ_SEL)->mask) !
      +                          = 0) ? 1 : 0;
  4204  003006  0E01               	movlw	low (_PIN_ADF_FREQ_SEL_DEF+4)
  4205  003008  6EF6               	movwf	tblptrl,c
  4206  00300A  0E7A               	movlw	high (_PIN_ADF_FREQ_SEL_DEF+4)
  4207  00300C  6EF7               	movwf	tblptrh,c
  4208  00300E                     	if	0	;tblptru may be non-zero
  4209  00300E                     	endif
  4210  00300E                     	if	0	;tblptru may be non-zero
  4211  00300E                     	endif
  4212  00300E  0008               	tblrd		*
  4213  003010  CFF5 F0E0          	movff	tablat,??_main
  4214  003014  0EFD               	movlw	low _PIN_ADF_FREQ_SEL_DEF
  4215  003016  6EF6               	movwf	tblptrl,c
  4216  003018                     	if	1	;There is more than 1 active tblptr byte
  4217  003018  0E79               	movlw	high _PIN_ADF_FREQ_SEL_DEF
  4218  00301A  6EF7               	movwf	tblptrh,c
  4219  00301C                     	endif
  4220  00301C                     	if	0	;There are less than 3 active tblptr bytes
  4221  00301C                     	endif
  4222  00301C  0009               	tblrd		*+
  4223  00301E  CFF5 F0E1          	movff	tablat,??_main+1
  4224  003022  0009               	tblrd		*+
  4225  003024  CFF5 F0E2          	movff	tablat,??_main+2
  4226  003028  C0E1  FFD9         	movff	??_main+1,fsr2l
  4227  00302C  C0E2  FFDA         	movff	??_main+2,fsr2h
  4228  003030  50DF               	movf	indf2,w,c
  4229  003032  0100               	movlb	0	; () banked
  4230  003034  15E0               	andwf	??_main& (0+255),w,b
  4231  003036  0900               	iorlw	0
  4232  003038  A4D8               	btfss	status,2,c
  4233  00303A  EF21  F018         	goto	u8801
  4234  00303E  EF24  F018         	goto	u8800
  4235  003042                     u8801:
  4236  003042  0E01               	movlw	1
  4237  003044  EF25  F018         	goto	u8810
  4238  003048                     u8800:
  4239  003048  0E00               	movlw	0
  4240  00304A                     u8810:
  4241  00304A  6FE5               	movwf	main@ref& (0+255),b
  4242  00304C  6BE6               	clrf	(main@ref+1)& (0+255),b
  4243  00304E                     
  4244                           ; BSR set to: 0
  4245                           ;src/main.c: 152:     printf("\nAMSAT DL UPC %s\n\n", "{notag-}");
  4246  00304E  0EC4               	movlw	low STR_18
  4247  003050  6F97               	movwf	printf@fmt& (0+255),b
  4248  003052  0E7E               	movlw	high STR_18
  4249  003054  6F98               	movwf	(printf@fmt+1)& (0+255),b
  4250  003056  0EB9               	movlw	low STR_19
  4251  003058  6F99               	movwf	(?_printf+2)& (0+255),b
  4252  00305A  0E7F               	movlw	high STR_19
  4253  00305C  6F9A               	movwf	(?_printf+3)& (0+255),b
  4254  00305E  ECFF  F02B         	call	_printf	;wreg free
  4255  003062                     
  4256                           ;src/main.c: 154:     printf("ADF4351 INIT (%sMHz)\r\n", (ref)?"10":"40");
  4257  003062  0100               	movlb	0	; () banked
  4258  003064  51E5               	movf	main@ref& (0+255),w,b
  4259  003066  11E6               	iorwf	(main@ref+1)& (0+255),w,b
  4260  003068  A4D8               	btfss	status,2,c
  4261  00306A  EF39  F018         	goto	u8821
  4262  00306E  EF3B  F018         	goto	u8820
  4263  003072                     u8821:
  4264  003072  EF41  F018         	goto	l6821
  4265  003076                     u8820:
  4266  003076                     
  4267                           ; BSR set to: 0
  4268  003076  0EFC               	movlw	low STR_22
  4269  003078  6FE3               	movwf	_main$1993& (0+255),b
  4270  00307A  0E7F               	movlw	high STR_22
  4271  00307C  6FE4               	movwf	(_main$1993+1)& (0+255),b
  4272  00307E  EF45  F018         	goto	l6823
  4273  003082                     l6821:
  4274                           
  4275                           ; BSR set to: 0
  4276  003082  0EF9               	movlw	low STR_21
  4277  003084  6FE3               	movwf	_main$1993& (0+255),b
  4278  003086  0E7F               	movlw	high STR_21
  4279  003088  6FE4               	movwf	(_main$1993+1)& (0+255),b
  4280  00308A                     l6823:
  4281                           
  4282                           ; BSR set to: 0
  4283  00308A  0E97               	movlw	low STR_20
  4284  00308C  6F97               	movwf	printf@fmt& (0+255),b
  4285  00308E  0E7E               	movlw	high STR_20
  4286  003090  6F98               	movwf	(printf@fmt+1)& (0+255),b
  4287  003092  C0E3  F099         	movff	_main$1993,?_printf+2
  4288  003096  C0E4  F09A         	movff	_main$1993+1,?_printf+3
  4289  00309A  ECFF  F02B         	call	_printf	;wreg free
  4290  00309E                     
  4291                           ;src/main.c: 155:     if(ref) {
  4292  00309E  0100               	movlb	0	; () banked
  4293  0030A0  51E5               	movf	main@ref& (0+255),w,b
  4294  0030A2  11E6               	iorwf	(main@ref+1)& (0+255),w,b
  4295  0030A4  B4D8               	btfsc	status,2,c
  4296  0030A6  EF57  F018         	goto	u8831
  4297  0030AA  EF59  F018         	goto	u8830
  4298  0030AE                     u8831:
  4299  0030AE  EF71  F018         	goto	l6829
  4300  0030B2                     u8830:
  4301  0030B2                     
  4302                           ; BSR set to: 0
  4303                           ;src/main.c: 156:         adf4351_init(&g_adf4351, 10000UL, 10000UL);
  4304  0030B2  0E86               	movlw	low _g_adf4351
  4305  0030B4  6E19               	movwf	adf4351_init@ctx^0,c
  4306  0030B6  0E01               	movlw	high _g_adf4351
  4307  0030B8  6E1A               	movwf	(adf4351_init@ctx+1)^0,c
  4308  0030BA  0E10               	movlw	16
  4309  0030BC  6E1B               	movwf	adf4351_init@ref^0,c
  4310  0030BE  0E27               	movlw	39
  4311  0030C0  6E1C               	movwf	(adf4351_init@ref+1)^0,c
  4312  0030C2  0E00               	movlw	0
  4313  0030C4  6E1D               	movwf	(adf4351_init@ref+2)^0,c
  4314  0030C6  0E00               	movlw	0
  4315  0030C8  6E1E               	movwf	(adf4351_init@ref+3)^0,c
  4316  0030CA  0E10               	movlw	16
  4317  0030CC  6E1F               	movwf	adf4351_init@pfd^0,c
  4318  0030CE  0E27               	movlw	39
  4319  0030D0  6E20               	movwf	(adf4351_init@pfd+1)^0,c
  4320  0030D2  0E00               	movlw	0
  4321  0030D4  6E21               	movwf	(adf4351_init@pfd+2)^0,c
  4322  0030D6  0E00               	movlw	0
  4323  0030D8  6E22               	movwf	(adf4351_init@pfd+3)^0,c
  4324  0030DA  EC2D  F022         	call	_adf4351_init	;wreg free
  4325                           
  4326                           ;src/main.c: 157:     } else {
  4327  0030DE  EF87  F018         	goto	l6831
  4328  0030E2                     l6829:
  4329                           
  4330                           ; BSR set to: 0
  4331                           ;src/main.c: 158:         adf4351_init(&g_adf4351, 40000UL, 10000UL);
  4332  0030E2  0E86               	movlw	low _g_adf4351
  4333  0030E4  6E19               	movwf	adf4351_init@ctx^0,c
  4334  0030E6  0E01               	movlw	high _g_adf4351
  4335  0030E8  6E1A               	movwf	(adf4351_init@ctx+1)^0,c
  4336  0030EA  0E40               	movlw	64
  4337  0030EC  6E1B               	movwf	adf4351_init@ref^0,c
  4338  0030EE  0E9C               	movlw	156
  4339  0030F0  6E1C               	movwf	(adf4351_init@ref+1)^0,c
  4340  0030F2  0E00               	movlw	0
  4341  0030F4  6E1D               	movwf	(adf4351_init@ref+2)^0,c
  4342  0030F6  0E00               	movlw	0
  4343  0030F8  6E1E               	movwf	(adf4351_init@ref+3)^0,c
  4344  0030FA  0E10               	movlw	16
  4345  0030FC  6E1F               	movwf	adf4351_init@pfd^0,c
  4346  0030FE  0E27               	movlw	39
  4347  003100  6E20               	movwf	(adf4351_init@pfd+1)^0,c
  4348  003102  0E00               	movlw	0
  4349  003104  6E21               	movwf	(adf4351_init@pfd+2)^0,c
  4350  003106  0E00               	movlw	0
  4351  003108  6E22               	movwf	(adf4351_init@pfd+3)^0,c
  4352  00310A  EC2D  F022         	call	_adf4351_init	;wreg free
  4353  00310E                     l6831:
  4354                           
  4355                           ;src/main.c: 160:     printf("ADF4351 SET TUNE\r\n");
  4356  00310E  0EEA               	movlw	low STR_23
  4357  003110  0100               	movlb	0	; () banked
  4358  003112  6F97               	movwf	printf@fmt& (0+255),b
  4359  003114  0E7E               	movlw	high STR_23
  4360  003116  6F98               	movwf	(printf@fmt+1)& (0+255),b
  4361  003118  ECFF  F02B         	call	_printf	;wreg free
  4362  00311C                     
  4363                           ;src/main.c: 161:     adf4351_set_tune(&g_adf4351, g_ipc, g_pout, 1);
  4364  00311C  0E86               	movlw	low _g_adf4351
  4365  00311E  0100               	movlb	0	; () banked
  4366  003120  6FCF               	movwf	adf4351_set_tune@ctx& (0+255),b
  4367  003122  0E01               	movlw	high _g_adf4351
  4368  003124  6FD0               	movwf	(adf4351_set_tune@ctx+1)& (0+255),b
  4369  003126  C0EB  F0D1         	movff	_g_ipc,adf4351_set_tune@icp
  4370  00312A  C0E9  F0D2         	movff	_g_pout,adf4351_set_tune@pout
  4371  00312E  0E00               	movlw	0
  4372  003130  6FD4               	movwf	(adf4351_set_tune@lownoise+1)& (0+255),b
  4373  003132  0E01               	movlw	1
  4374  003134  6FD3               	movwf	adf4351_set_tune@lownoise& (0+255),b
  4375  003136  ECE0  F024         	call	_adf4351_set_tune	;wreg free
  4376  00313A                     
  4377                           ;src/main.c: 162:     printf("INIT SWITCH\r\n");
  4378  00313A  0E95               	movlw	low STR_24
  4379  00313C  0100               	movlb	0	; () banked
  4380  00313E  6F97               	movwf	printf@fmt& (0+255),b
  4381  003140  0E7F               	movlw	high STR_24
  4382  003142  6F98               	movwf	(printf@fmt+1)& (0+255),b
  4383  003144  ECFF  F02B         	call	_printf	;wreg free
  4384  003148                     
  4385                           ;src/main.c: 163:     init_switch();
  4386  003148  EC6C  F02C         	call	_init_switch	;wreg free
  4387  00314C                     
  4388                           ;src/main.c: 166:     RCONbits.IPEN = 0;
  4389  00314C  9ED0               	bcf	208,7,c	;volatile
  4390  00314E                     
  4391                           ;src/main.c: 168:     INTCONbits.PEIE = 1;
  4392  00314E  8CF2               	bsf	242,6,c	;volatile
  4393  003150                     
  4394                           ;src/main.c: 170:     INTCONbits.GIE = 1;
  4395  003150  8EF2               	bsf	242,7,c	;volatile
  4396  003152                     
  4397                           ;src/main.c: 172:     printf("cmd: ");
  4398  003152  0EC2               	movlw	low STR_25
  4399  003154  0100               	movlb	0	; () banked
  4400  003156  6F97               	movwf	printf@fmt& (0+255),b
  4401  003158  0E7F               	movlw	high STR_25
  4402  00315A  6F98               	movwf	(printf@fmt+1)& (0+255),b
  4403  00315C  ECFF  F02B         	call	_printf	;wreg free
  4404  003160                     l424:
  4405  003160  0004               	clrwdt		;# 
  4406  003162                     
  4407                           ;src/main.c: 178:         check_usart();
  4408  003162  ECDD  F004         	call	_check_usart	;wreg free
  4409  003166                     
  4410                           ;src/main.c: 179:         update_switch();
  4411  003166  EC05  F028         	call	_update_switch	;wreg free
  4412  00316A                     
  4413                           ;src/main.c: 180:         update_led();
  4414  00316A  ECF6  F01E         	call	_update_led	;wreg free
  4415                           
  4416                           ;src/main.c: 181:         pa_update();
  4417  00316E  EC3C  F028         	call	_pa_update	;wreg free
  4418  003172                     
  4419                           ;src/main.c: 182:         _delay((unsigned long)((10)*(8000000/4000.0)));
  4420  003172  0E1A               	movlw	26
  4421  003174  0100               	movlb	0	; () banked
  4422  003176  6FE0               	movwf	??_main& (0+255),b
  4423  003178  0EF8               	movlw	248
  4424  00317A                     u8887:
  4425  00317A  2EE8               	decfsz	wreg,f,c
  4426  00317C  D7FE               	bra	u8887
  4427  00317E  2FE0               	decfsz	??_main& (0+255),f,b
  4428  003180  D7FC               	bra	u8887
  4429  003182  F000               	nop	
  4430                           
  4431                           ;src/main.c: 183:     }
  4432  003184  EFB0  F018         	goto	l424
  4433  003188  EF07  F000         	goto	start
  4434  00318C                     __end_of_main:
  4435                           	opt callstack 0
  4436                           
  4437 ;; *************** function _usart_init *****************
  4438 ;; Defined at:
  4439 ;;		line 12 in file "src/driver/usart.c"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;  baud            4   47[COMRAM] unsigned long 
  4442 ;; Auto vars:     Size  Location     Type
  4443 ;;  spbrg_value     2   51[COMRAM] unsigned short 
  4444 ;; Return value:  Size  Location     Type
  4445 ;;                  1    wreg      void 
  4446 ;; Registers used:
  4447 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4448 ;; Tracked objects:
  4449 ;;		On entry : 0/0
  4450 ;;		On exit  : 0/0
  4451 ;;		Unchanged: 0/0
  4452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4453 ;;      Params:         4       0       0       0       0       0       0
  4454 ;;      Locals:         2       0       0       0       0       0       0
  4455 ;;      Temps:          0       0       0       0       0       0       0
  4456 ;;      Totals:         6       0       0       0       0       0       0
  4457 ;;Total ram usage:        6 bytes
  4458 ;; Hardware stack levels used:    1
  4459 ;; Hardware stack levels required when called:    3
  4460 ;; This function calls:
  4461 ;;		___lldiv
  4462 ;;		_irq_set_handler
  4463 ;; This function is called by:
  4464 ;;		_main
  4465 ;; This function uses a non-reentrant model
  4466 ;;
  4467                           
  4468                           	psect	text1
  4469  0051B8                     __ptext1:
  4470                           	opt callstack 0
  4471  0051B8                     _usart_init:
  4472                           	opt callstack 27
  4473  0051B8                     
  4474                           ;src/driver/usart.c: 12: void usart_init(u32 baud);src/driver/usart.c: 13: {;src/driver/
      +                          usart.c: 14:     irq_set_handler(IRQ_HANDLER_ID_USART, usart_rx_irq_handler, ((void*)0))
      +                          ;
  4475  0051B8  0E8A               	movlw	low _usart_rx_irq_handler
  4476  0051BA  6E0D               	movwf	irq_set_handler@handler^0,c
  4477  0051BC  0E4E               	movlw	high _usart_rx_irq_handler
  4478  0051BE  6E0E               	movwf	(irq_set_handler@handler+1)^0,c
  4479  0051C0  0E00               	movlw	0
  4480  0051C2  6E0F               	movwf	irq_set_handler@udata^0,c
  4481  0051C4  0E00               	movlw	0
  4482  0051C6  6E10               	movwf	(irq_set_handler@udata+1)^0,c
  4483  0051C8  0E00               	movlw	0
  4484  0051CA  EC0A  F02B         	call	_irq_set_handler
  4485  0051CE                     
  4486                           ;src/driver/usart.c: 15:     TXSTAbits.TX9 = 0;
  4487  0051CE  9CAC               	bcf	172,6,c	;volatile
  4488  0051D0                     
  4489                           ;src/driver/usart.c: 16:     TXSTAbits.SENDB = 0;
  4490  0051D0  96AC               	bcf	172,3,c	;volatile
  4491  0051D2                     
  4492                           ;src/driver/usart.c: 17:     TXSTAbits.BRGH = 1;
  4493  0051D2  84AC               	bsf	172,2,c	;volatile
  4494  0051D4                     
  4495                           ;src/driver/usart.c: 18:     TXSTAbits.TXEN = 1;
  4496  0051D4  8AAC               	bsf	172,5,c	;volatile
  4497  0051D6                     
  4498                           ;src/driver/usart.c: 21:     RCSTAbits.RX9 = 0;
  4499  0051D6  9CAB               	bcf	171,6,c	;volatile
  4500  0051D8                     
  4501                           ;src/driver/usart.c: 22:     RCSTAbits.CREN = 1;
  4502  0051D8  88AB               	bsf	171,4,c	;volatile
  4503  0051DA                     
  4504                           ;src/driver/usart.c: 23:     RCSTAbits.ADDEN = 0;
  4505  0051DA  96AB               	bcf	171,3,c	;volatile
  4506  0051DC                     
  4507                           ;src/driver/usart.c: 25:     BAUDCONbits.BRG16 = 1;
  4508  0051DC  86B8               	bsf	184,3,c	;volatile
  4509  0051DE                     
  4510                           ;src/driver/usart.c: 26:     BAUDCONbits.ABDEN = 0;
  4511  0051DE  90B8               	bcf	184,0,c	;volatile
  4512  0051E0                     
  4513                           ;src/driver/usart.c: 28:     u16 spbrg_value = ((8000000/4) / baud) - 1;
  4514  0051E0  0E80               	movlw	128
  4515  0051E2  6E23               	movwf	___lldiv@dividend^0,c
  4516  0051E4  0E84               	movlw	132
  4517  0051E6  6E24               	movwf	(___lldiv@dividend+1)^0,c
  4518  0051E8  0E1E               	movlw	30
  4519  0051EA  6E25               	movwf	(___lldiv@dividend+2)^0,c
  4520  0051EC  0E00               	movlw	0
  4521  0051EE  6E26               	movwf	(___lldiv@dividend+3)^0,c
  4522  0051F0  C030  F027         	movff	usart_init@baud,___lldiv@divisor
  4523  0051F4  C031  F028         	movff	usart_init@baud+1,___lldiv@divisor+1
  4524  0051F8  C032  F029         	movff	usart_init@baud+2,___lldiv@divisor+2
  4525  0051FC  C033  F02A         	movff	usart_init@baud+3,___lldiv@divisor+3
  4526  005200  EC89  F025         	call	___lldiv	;wreg free
  4527  005204  0EFF               	movlw	255
  4528  005206  2423               	addwf	?___lldiv^0,w,c
  4529  005208  6E34               	movwf	usart_init@spbrg_value^0,c
  4530  00520A  0EFF               	movlw	255
  4531  00520C  2024               	addwfc	(?___lldiv+1)^0,w,c
  4532  00520E  6E35               	movwf	(usart_init@spbrg_value+1)^0,c
  4533  005210                     
  4534                           ;src/driver/usart.c: 30:     SPBRGH = (spbrg_value>>8)&0xFF;
  4535  005210  5035               	movf	(usart_init@spbrg_value+1)^0,w,c
  4536  005212  6EB0               	movwf	176,c	;volatile
  4537  005214                     
  4538                           ;src/driver/usart.c: 31:     SPBRG = (spbrg_value>>0)&0xFF;
  4539  005214  C034  FFAF         	movff	usart_init@spbrg_value,4015	;volatile
  4540  005218                     
  4541                           ;src/driver/usart.c: 33:     TXSTAbits.SYNC = 0;
  4542  005218  98AC               	bcf	172,4,c	;volatile
  4543  00521A                     
  4544                           ;src/driver/usart.c: 34:     RCSTAbits.SPEN = 1;
  4545  00521A  8EAB               	bsf	171,7,c	;volatile
  4546  00521C                     
  4547                           ;src/driver/usart.c: 36:     PIE1bits.RCIE = 1;
  4548  00521C  8A9D               	bsf	157,5,c	;volatile
  4549  00521E  0012               	return		;funcret
  4550  005220                     __end_of_usart_init:
  4551                           	opt callstack 0
  4552                           
  4553 ;; *************** function _irq_set_handler *****************
  4554 ;; Defined at:
  4555 ;;		line 9 in file "src/driver/irq.c"
  4556 ;; Parameters:    Size  Location     Type
  4557 ;;  id              1    wreg     enum E2251
  4558 ;;  handler         2   12[COMRAM] PTR FTN(PTR void ,)void 
  4559 ;;		 -> usart_rx_irq_handler(1), 
  4560 ;;  udata           2   14[COMRAM] PTR void 
  4561 ;;		 -> NULL(0), 
  4562 ;; Auto vars:     Size  Location     Type
  4563 ;;  id              1   16[COMRAM] enum E2251
  4564 ;; Return value:  Size  Location     Type
  4565 ;;                  1    wreg      void 
  4566 ;; Registers used:
  4567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4568 ;; Tracked objects:
  4569 ;;		On entry : 0/0
  4570 ;;		On exit  : 0/0
  4571 ;;		Unchanged: 0/0
  4572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4573 ;;      Params:         4       0       0       0       0       0       0
  4574 ;;      Locals:         1       0       0       0       0       0       0
  4575 ;;      Temps:          0       0       0       0       0       0       0
  4576 ;;      Totals:         5       0       0       0       0       0       0
  4577 ;;Total ram usage:        5 bytes
  4578 ;; Hardware stack levels used:    1
  4579 ;; Hardware stack levels required when called:    2
  4580 ;; This function calls:
  4581 ;;		Nothing
  4582 ;; This function is called by:
  4583 ;;		_usart_init
  4584 ;; This function uses a non-reentrant model
  4585 ;;
  4586                           
  4587                           	psect	text2
  4588  005614                     __ptext2:
  4589                           	opt callstack 0
  4590  005614                     _irq_set_handler:
  4591                           	opt callstack 27
  4592                           
  4593                           ;incstack = 0
  4594                           ;irq_set_handler@id stored from wreg
  4595  005614  6E11               	movwf	irq_set_handler@id^0,c
  4596  005616                     
  4597                           ;src/driver/irq.c: 9: void irq_set_handler(IRQ_HANDLER_ID id, irq_handler_func handler, 
      +                          void *udata);src/driver/irq.c: 10: {;src/driver/irq.c: 11:     if(id < IRQ_HANDLER_ID_CN
      +                          T) {
  4598  005616  5011               	movf	irq_set_handler@id^0,w,c
  4599  005618  A4D8               	btfss	status,2,c
  4600  00561A  EF11  F02B         	goto	u5381
  4601  00561E  EF13  F02B         	goto	u5380
  4602  005622                     u5381:
  4603  005622  EF2B  F02B         	goto	l217
  4604  005626                     u5380:
  4605  005626                     
  4606                           ;src/driver/irq.c: 12:         g_irq_handler_info[id].udata = udata;
  4607  005626  5011               	movf	irq_set_handler@id^0,w,c
  4608  005628  0D04               	mullw	4
  4609  00562A  0EF2               	movlw	low (_g_irq_handler_info+2)
  4610  00562C  24F3               	addwf	243,w,c
  4611  00562E  6ED9               	movwf	fsr2l,c
  4612  005630  0E00               	movlw	high (_g_irq_handler_info+2)
  4613  005632  20F4               	addwfc	prodh,w,c
  4614  005634  6EDA               	movwf	fsr2h,c
  4615  005636  C00F  FFDE         	movff	irq_set_handler@udata,postinc2
  4616  00563A  C010  FFDD         	movff	irq_set_handler@udata+1,postdec2
  4617                           
  4618                           ;src/driver/irq.c: 13:         g_irq_handler_info[id].handler = handler;
  4619  00563E  5011               	movf	irq_set_handler@id^0,w,c
  4620  005640  0D04               	mullw	4
  4621  005642  0EF0               	movlw	low _g_irq_handler_info
  4622  005644  24F3               	addwf	243,w,c
  4623  005646  6ED9               	movwf	fsr2l,c
  4624  005648  0E00               	movlw	high _g_irq_handler_info
  4625  00564A  20F4               	addwfc	prodh,w,c
  4626  00564C  6EDA               	movwf	fsr2h,c
  4627  00564E  C00D  FFDE         	movff	irq_set_handler@handler,postinc2
  4628  005652  C00E  FFDD         	movff	irq_set_handler@handler+1,postdec2
  4629  005656                     l217:
  4630  005656  0012               	return		;funcret
  4631  005658                     __end_of_irq_set_handler:
  4632                           	opt callstack 0
  4633                           
  4634 ;; *************** function _update_switch *****************
  4635 ;; Defined at:
  4636 ;;		line 359 in file "src/main.c"
  4637 ;; Parameters:    Size  Location     Type
  4638 ;;		None
  4639 ;; Auto vars:     Size  Location     Type
  4640 ;;  cmd             1   95[BANK0 ] unsigned char 
  4641 ;; Return value:  Size  Location     Type
  4642 ;;                  1    wreg      void 
  4643 ;; Registers used:
  4644 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4645 ;; Tracked objects:
  4646 ;;		On entry : 0/0
  4647 ;;		On exit  : 0/0
  4648 ;;		Unchanged: 0/0
  4649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4650 ;;      Params:         0       0       0       0       0       0       0
  4651 ;;      Locals:         0       1       0       0       0       0       0
  4652 ;;      Temps:          0       0       0       0       0       0       0
  4653 ;;      Totals:         0       1       0       0       0       0       0
  4654 ;;Total ram usage:        1 bytes
  4655 ;; Hardware stack levels used:    1
  4656 ;; Hardware stack levels required when called:   14
  4657 ;; This function calls:
  4658 ;;		_handle_cmd
  4659 ;;		_read_switch
  4660 ;; This function is called by:
  4661 ;;		_main
  4662 ;; This function uses a non-reentrant model
  4663 ;;
  4664                           
  4665                           	psect	text3
  4666  00500A                     __ptext3:
  4667                           	opt callstack 0
  4668  00500A                     _update_switch:
  4669                           	opt callstack 16
  4670  00500A                     
  4671                           ;src/main.c: 361:     u8 cmd = read_switch();
  4672  00500A  EC77  F026         	call	_read_switch	;wreg free
  4673  00500E  0100               	movlb	0	; () banked
  4674  005010  6FDF               	movwf	update_switch@cmd& (0+255),b
  4675  005012                     
  4676                           ; BSR set to: 0
  4677                           ;src/main.c: 364:     if(cmd != g_pending_cmd) {
  4678  005012  5072               	movf	_g_pending_cmd^0,w,c
  4679  005014  19DF               	xorwf	update_switch@cmd& (0+255),w,b
  4680  005016  B4D8               	btfsc	status,2,c
  4681  005018  EF10  F028         	goto	u8731
  4682  00501C  EF12  F028         	goto	u8730
  4683  005020                     u8731:
  4684  005020  EF1B  F028         	goto	l6769
  4685  005024                     u8730:
  4686  005024                     
  4687                           ; BSR set to: 0
  4688                           ;src/main.c: 365:         g_pending_cmd = cmd;
  4689  005024  C0DF  F072         	movff	update_switch@cmd,_g_pending_cmd
  4690  005028                     l6767:
  4691                           
  4692                           ;src/main.c: 366:         g_cmd_debounce_counter = 10;
  4693  005028  0E00               	movlw	0
  4694  00502A  0100               	movlb	0	; () banked
  4695  00502C  6FEE               	movwf	(_g_cmd_debounce_counter+1)& (0+255),b
  4696  00502E  0E0A               	movlw	10
  4697  005030  6FED               	movwf	_g_cmd_debounce_counter& (0+255),b
  4698                           
  4699                           ;src/main.c: 367:     } else {
  4700  005032  EF3B  F028         	goto	l512
  4701  005036                     l6769:
  4702                           
  4703                           ; BSR set to: 0
  4704                           ;src/main.c: 368:         if(g_cmd_debounce_counter > 0) {
  4705  005036  BFEE               	btfsc	(_g_cmd_debounce_counter+1)& (0+255),7,b
  4706  005038  EF26  F028         	goto	u8741
  4707  00503C  51EE               	movf	(_g_cmd_debounce_counter+1)& (0+255),w,b
  4708  00503E  E108               	bnz	u8740
  4709  005040  05ED               	decf	_g_cmd_debounce_counter& (0+255),w,b
  4710  005042  A0D8               	btfss	status,0,c
  4711  005044  EF26  F028         	goto	u8741
  4712  005048  EF28  F028         	goto	u8740
  4713  00504C                     u8741:
  4714  00504C  EF2D  F028         	goto	l6773
  4715  005050                     u8740:
  4716  005050                     
  4717                           ; BSR set to: 0
  4718                           ;src/main.c: 369:             g_cmd_debounce_counter--;
  4719  005050  07ED               	decf	_g_cmd_debounce_counter& (0+255),f,b
  4720  005052  A0D8               	btfss	status,0,c
  4721  005054  07EE               	decf	(_g_cmd_debounce_counter+1)& (0+255),f,b
  4722                           
  4723                           ;src/main.c: 370:         } else if(g_cmd_debounce_counter == 0) {
  4724  005056  EF3B  F028         	goto	l512
  4725  00505A                     l6773:
  4726                           
  4727                           ; BSR set to: 0
  4728  00505A  51ED               	movf	_g_cmd_debounce_counter& (0+255),w,b
  4729  00505C  11EE               	iorwf	(_g_cmd_debounce_counter+1)& (0+255),w,b
  4730  00505E  A4D8               	btfss	status,2,c
  4731  005060  EF34  F028         	goto	u8751
  4732  005064  EF36  F028         	goto	u8750
  4733  005068                     u8751:
  4734  005068  EF3B  F028         	goto	l512
  4735  00506C                     u8750:
  4736  00506C                     
  4737                           ; BSR set to: 0
  4738                           ;src/main.c: 371:             handle_cmd(g_pending_cmd);
  4739  00506C  5072               	movf	_g_pending_cmd^0,w,c
  4740  00506E  ECA8  F019         	call	_handle_cmd
  4741  005072  EF14  F028         	goto	l6767
  4742  005076                     l512:
  4743                           
  4744                           ; BSR set to: 0
  4745  005076  0012               	return		;funcret
  4746  005078                     __end_of_update_switch:
  4747                           	opt callstack 0
  4748                           
  4749 ;; *************** function _update_led *****************
  4750 ;; Defined at:
  4751 ;;		line 377 in file "src/main.c"
  4752 ;; Parameters:    Size  Location     Type
  4753 ;;		None
  4754 ;; Auto vars:     Size  Location     Type
  4755 ;;		None
  4756 ;; Return value:  Size  Location     Type
  4757 ;;                  1    wreg      void 
  4758 ;; Registers used:
  4759 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4760 ;; Tracked objects:
  4761 ;;		On entry : 0/0
  4762 ;;		On exit  : 0/0
  4763 ;;		Unchanged: 0/0
  4764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4765 ;;      Params:         0       0       0       0       0       0       0
  4766 ;;      Locals:         0       0       0       0       0       0       0
  4767 ;;      Temps:          3       0       0       0       0       0       0
  4768 ;;      Totals:         3       0       0       0       0       0       0
  4769 ;;Total ram usage:        3 bytes
  4770 ;; Hardware stack levels used:    1
  4771 ;; Hardware stack levels required when called:    3
  4772 ;; This function calls:
  4773 ;;		_adf4351_get_lock
  4774 ;; This function is called by:
  4775 ;;		_main
  4776 ;; This function uses a non-reentrant model
  4777 ;;
  4778                           
  4779                           	psect	text4
  4780  003DEC                     __ptext4:
  4781                           	opt callstack 0
  4782  003DEC                     _update_led:
  4783                           	opt callstack 27
  4784  003DEC                     
  4785                           ;src/main.c: 380:     if(g_cpu_led_update_cnt++ >= 100) {
  4786  003DEC  0101               	movlb	1	; () banked
  4787  003DEE  5184               	movf	_g_cpu_led_update_cnt& (0+255),w,b
  4788  003DF0  6E12               	movwf	??_update_led^0,c
  4789  003DF2  5185               	movf	(_g_cpu_led_update_cnt+1)& (0+255),w,b
  4790  003DF4  6E13               	movwf	(??_update_led+1)^0,c
  4791  003DF6  4B84               	infsnz	_g_cpu_led_update_cnt& (0+255),f,b
  4792  003DF8  2B85               	incf	(_g_cpu_led_update_cnt+1)& (0+255),f,b
  4793  003DFA  BE13               	btfsc	(??_update_led+1)^0,7,c
  4794  003DFC  EF09  F01F         	goto	u5901
  4795  003E00  5013               	movf	(??_update_led+1)^0,w,c
  4796  003E02  E109               	bnz	u5900
  4797  003E04  0E64               	movlw	100
  4798  003E06  5C12               	subwf	??_update_led^0,w,c
  4799  003E08  A0D8               	btfss	status,0,c
  4800  003E0A  EF09  F01F         	goto	u5901
  4801  003E0E  EF0B  F01F         	goto	u5900
  4802  003E12                     u5901:
  4803  003E12  EF5F  F01F         	goto	l5077
  4804  003E16                     u5900:
  4805  003E16                     
  4806                           ; BSR set to: 1
  4807                           ;src/main.c: 381:         if(((*((PIN_LED_CPU_OK)->pPORT) & (PIN_LED_CPU_OK)->mask) != 0
      +                          )) {
  4808  003E16  0ED9               	movlw	low (_PIN_LED_CPU_OK_DEF+4)
  4809  003E18  6EF6               	movwf	tblptrl,c
  4810  003E1A  0E79               	movlw	high (_PIN_LED_CPU_OK_DEF+4)
  4811  003E1C  6EF7               	movwf	tblptrh,c
  4812  003E1E                     	if	0	;tblptru may be non-zero
  4813  003E1E                     	endif
  4814  003E1E                     	if	0	;tblptru may be non-zero
  4815  003E1E                     	endif
  4816  003E1E  0008               	tblrd		*
  4817  003E20  CFF5 F012          	movff	tablat,??_update_led
  4818  003E24  0ED5               	movlw	low _PIN_LED_CPU_OK_DEF
  4819  003E26  6EF6               	movwf	tblptrl,c
  4820  003E28                     	if	1	;There is more than 1 active tblptr byte
  4821  003E28  0E79               	movlw	high _PIN_LED_CPU_OK_DEF
  4822  003E2A  6EF7               	movwf	tblptrh,c
  4823  003E2C                     	endif
  4824  003E2C                     	if	0	;There are less than 3 active tblptr bytes
  4825  003E2C                     	endif
  4826  003E2C  0009               	tblrd		*+
  4827  003E2E  CFF5 F013          	movff	tablat,??_update_led+1
  4828  003E32  0009               	tblrd		*+
  4829  003E34  CFF5 F014          	movff	tablat,??_update_led+2
  4830  003E38  C013  FFD9         	movff	??_update_led+1,fsr2l
  4831  003E3C  C014  FFDA         	movff	??_update_led+2,fsr2h
  4832  003E40  50DF               	movf	indf2,w,c
  4833  003E42  1412               	andwf	??_update_led^0,w,c
  4834  003E44  0900               	iorlw	0
  4835  003E46  B4D8               	btfsc	status,2,c
  4836  003E48  EF28  F01F         	goto	u5911
  4837  003E4C  EF2A  F01F         	goto	u5910
  4838  003E50                     u5911:
  4839  003E50  EF44  F01F         	goto	l5073
  4840  003E54                     u5910:
  4841  003E54                     
  4842                           ; BSR set to: 1
  4843                           ;src/main.c: 382:             *((PIN_LED_CPU_OK)->pPORT) &= ~(PIN_LED_CPU_OK)->mask;
  4844  003E54  0ED9               	movlw	low (_PIN_LED_CPU_OK_DEF+4)
  4845  003E56  6EF6               	movwf	tblptrl,c
  4846  003E58  0E79               	movlw	high (_PIN_LED_CPU_OK_DEF+4)
  4847  003E5A  6EF7               	movwf	tblptrh,c
  4848  003E5C                     	if	0	;tblptru may be non-zero
  4849  003E5C                     	endif
  4850  003E5C                     	if	0	;tblptru may be non-zero
  4851  003E5C                     	endif
  4852  003E5C  0008               	tblrd		*
  4853  003E5E  50F5               	movf	tablat,w,c
  4854  003E60  0AFF               	xorlw	255
  4855  003E62  6E12               	movwf	??_update_led^0,c
  4856  003E64  0ED5               	movlw	low _PIN_LED_CPU_OK_DEF
  4857  003E66  6EF6               	movwf	tblptrl,c
  4858  003E68                     	if	1	;There is more than 1 active tblptr byte
  4859  003E68  0E79               	movlw	high _PIN_LED_CPU_OK_DEF
  4860  003E6A  6EF7               	movwf	tblptrh,c
  4861  003E6C                     	endif
  4862  003E6C                     	if	0	;There are less than 3 active tblptr bytes
  4863  003E6C                     	endif
  4864  003E6C  0009               	tblrd		*+
  4865  003E6E  CFF5 F013          	movff	tablat,??_update_led+1
  4866  003E72  0009               	tblrd		*+
  4867  003E74  CFF5 F014          	movff	tablat,??_update_led+2
  4868  003E78  C013  FFD9         	movff	??_update_led+1,fsr2l
  4869  003E7C  C014  FFDA         	movff	??_update_led+2,fsr2h
  4870  003E80  5012               	movf	??_update_led^0,w,c
  4871  003E82  16DF               	andwf	indf2,f,c
  4872                           
  4873                           ;src/main.c: 383:         } else {
  4874  003E84  EF5B  F01F         	goto	l5075
  4875  003E88                     l5073:
  4876                           
  4877                           ; BSR set to: 1
  4878                           ;src/main.c: 384:             *((PIN_LED_CPU_OK)->pPORT) |= (PIN_LED_CPU_OK)->mask;
  4879  003E88  0ED9               	movlw	low (_PIN_LED_CPU_OK_DEF+4)
  4880  003E8A  6EF6               	movwf	tblptrl,c
  4881  003E8C  0E79               	movlw	high (_PIN_LED_CPU_OK_DEF+4)
  4882  003E8E  6EF7               	movwf	tblptrh,c
  4883  003E90                     	if	0	;tblptru may be non-zero
  4884  003E90                     	endif
  4885  003E90                     	if	0	;tblptru may be non-zero
  4886  003E90                     	endif
  4887  003E90  0008               	tblrd		*
  4888  003E92  CFF5 F012          	movff	tablat,??_update_led
  4889  003E96  0ED5               	movlw	low _PIN_LED_CPU_OK_DEF
  4890  003E98  6EF6               	movwf	tblptrl,c
  4891  003E9A                     	if	1	;There is more than 1 active tblptr byte
  4892  003E9A  0E79               	movlw	high _PIN_LED_CPU_OK_DEF
  4893  003E9C  6EF7               	movwf	tblptrh,c
  4894  003E9E                     	endif
  4895  003E9E                     	if	0	;There are less than 3 active tblptr bytes
  4896  003E9E                     	endif
  4897  003E9E  0009               	tblrd		*+
  4898  003EA0  CFF5 F013          	movff	tablat,??_update_led+1
  4899  003EA4  0009               	tblrd		*+
  4900  003EA6  CFF5 F014          	movff	tablat,??_update_led+2
  4901  003EAA  C013  FFD9         	movff	??_update_led+1,fsr2l
  4902  003EAE  C014  FFDA         	movff	??_update_led+2,fsr2h
  4903  003EB2  5012               	movf	??_update_led^0,w,c
  4904  003EB4  12DF               	iorwf	indf2,f,c
  4905  003EB6                     l5075:
  4906                           
  4907                           ; BSR set to: 1
  4908                           ;src/main.c: 386:         g_cpu_led_update_cnt = 0;
  4909  003EB6  0E00               	movlw	0
  4910  003EB8  6F85               	movwf	(_g_cpu_led_update_cnt+1)& (0+255),b
  4911  003EBA  0E00               	movlw	0
  4912  003EBC  6F84               	movwf	_g_cpu_led_update_cnt& (0+255),b
  4913  003EBE                     l5077:
  4914                           
  4915                           ; BSR set to: 1
  4916                           ;src/main.c: 389:     if(adf4351_get_lock(&g_adf4351) == 0) {
  4917  003EBE  0E86               	movlw	low _g_adf4351
  4918  003EC0  6E0D               	movwf	adf4351_get_lock@ctx^0,c
  4919  003EC2  0E01               	movlw	high _g_adf4351
  4920  003EC4  6E0E               	movwf	(adf4351_get_lock@ctx+1)^0,c
  4921  003EC6  ECC3  F02A         	call	_adf4351_get_lock	;wreg free
  4922  003ECA  500D               	movf	?_adf4351_get_lock^0,w,c
  4923  003ECC  100E               	iorwf	(?_adf4351_get_lock+1)^0,w,c
  4924  003ECE  A4D8               	btfss	status,2,c
  4925  003ED0  EF6C  F01F         	goto	u5921
  4926  003ED4  EF6E  F01F         	goto	u5920
  4927  003ED8                     u5921:
  4928  003ED8  EF87  F01F         	goto	l5081
  4929  003EDC                     u5920:
  4930  003EDC                     
  4931                           ;src/main.c: 390:         *((PIN_LED_ADF_LOCK)->pPORT) |= (PIN_LED_ADF_LOCK)->mask;
  4932  003EDC  0ED4               	movlw	low (_PIN_LED_ADF_LOCK_DEF+4)
  4933  003EDE  6EF6               	movwf	tblptrl,c
  4934  003EE0  0E79               	movlw	high (_PIN_LED_ADF_LOCK_DEF+4)
  4935  003EE2  6EF7               	movwf	tblptrh,c
  4936  003EE4                     	if	0	;tblptru may be non-zero
  4937  003EE4                     	endif
  4938  003EE4                     	if	0	;tblptru may be non-zero
  4939  003EE4                     	endif
  4940  003EE4  0008               	tblrd		*
  4941  003EE6  CFF5 F012          	movff	tablat,??_update_led
  4942  003EEA  0ED0               	movlw	low _PIN_LED_ADF_LOCK_DEF
  4943  003EEC  6EF6               	movwf	tblptrl,c
  4944  003EEE                     	if	1	;There is more than 1 active tblptr byte
  4945  003EEE  0E79               	movlw	high _PIN_LED_ADF_LOCK_DEF
  4946  003EF0  6EF7               	movwf	tblptrh,c
  4947  003EF2                     	endif
  4948  003EF2                     	if	0	;There are less than 3 active tblptr bytes
  4949  003EF2                     	endif
  4950  003EF2  0009               	tblrd		*+
  4951  003EF4  CFF5 F013          	movff	tablat,??_update_led+1
  4952  003EF8  0009               	tblrd		*+
  4953  003EFA  CFF5 F014          	movff	tablat,??_update_led+2
  4954  003EFE  C013  FFD9         	movff	??_update_led+1,fsr2l
  4955  003F02  C014  FFDA         	movff	??_update_led+2,fsr2h
  4956  003F06  5012               	movf	??_update_led^0,w,c
  4957  003F08  12DF               	iorwf	indf2,f,c
  4958                           
  4959                           ;src/main.c: 391:     } else {
  4960  003F0A  EF9F  F01F         	goto	l520
  4961  003F0E                     l5081:
  4962                           
  4963                           ;src/main.c: 392:         *((PIN_LED_ADF_LOCK)->pPORT) &= ~(PIN_LED_ADF_LOCK)->mask;
  4964  003F0E  0ED4               	movlw	low (_PIN_LED_ADF_LOCK_DEF+4)
  4965  003F10  6EF6               	movwf	tblptrl,c
  4966  003F12  0E79               	movlw	high (_PIN_LED_ADF_LOCK_DEF+4)
  4967  003F14  6EF7               	movwf	tblptrh,c
  4968  003F16                     	if	0	;tblptru may be non-zero
  4969  003F16                     	endif
  4970  003F16                     	if	0	;tblptru may be non-zero
  4971  003F16                     	endif
  4972  003F16  0008               	tblrd		*
  4973  003F18  50F5               	movf	tablat,w,c
  4974  003F1A  0AFF               	xorlw	255
  4975  003F1C  6E12               	movwf	??_update_led^0,c
  4976  003F1E  0ED0               	movlw	low _PIN_LED_ADF_LOCK_DEF
  4977  003F20  6EF6               	movwf	tblptrl,c
  4978  003F22                     	if	1	;There is more than 1 active tblptr byte
  4979  003F22  0E79               	movlw	high _PIN_LED_ADF_LOCK_DEF
  4980  003F24  6EF7               	movwf	tblptrh,c
  4981  003F26                     	endif
  4982  003F26                     	if	0	;There are less than 3 active tblptr bytes
  4983  003F26                     	endif
  4984  003F26  0009               	tblrd		*+
  4985  003F28  CFF5 F013          	movff	tablat,??_update_led+1
  4986  003F2C  0009               	tblrd		*+
  4987  003F2E  CFF5 F014          	movff	tablat,??_update_led+2
  4988  003F32  C013  FFD9         	movff	??_update_led+1,fsr2l
  4989  003F36  C014  FFDA         	movff	??_update_led+2,fsr2h
  4990  003F3A  5012               	movf	??_update_led^0,w,c
  4991  003F3C  16DF               	andwf	indf2,f,c
  4992  003F3E                     l520:
  4993  003F3E  0012               	return		;funcret
  4994  003F40                     __end_of_update_led:
  4995                           	opt callstack 0
  4996                           
  4997 ;; *************** function _pa_update *****************
  4998 ;; Defined at:
  4999 ;;		line 271 in file "src/main.c"
  5000 ;; Parameters:    Size  Location     Type
  5001 ;;		None
  5002 ;; Auto vars:     Size  Location     Type
  5003 ;;		None
  5004 ;; Return value:  Size  Location     Type
  5005 ;;                  1    wreg      void 
  5006 ;; Registers used:
  5007 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5008 ;; Tracked objects:
  5009 ;;		On entry : 0/0
  5010 ;;		On exit  : 0/0
  5011 ;;		Unchanged: 0/0
  5012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5013 ;;      Params:         0       0       0       0       0       0       0
  5014 ;;      Locals:         0       0       0       0       0       0       0
  5015 ;;      Temps:          0       3       0       0       0       0       0
  5016 ;;      Totals:         0       3       0       0       0       0       0
  5017 ;;Total ram usage:        3 bytes
  5018 ;; Hardware stack levels used:    1
  5019 ;; Hardware stack levels required when called:   13
  5020 ;; This function calls:
  5021 ;;		_adf4351_get_lock
  5022 ;;		_pa_mute
  5023 ;;		_pa_unmute
  5024 ;; This function is called by:
  5025 ;;		_main
  5026 ;; This function uses a non-reentrant model
  5027 ;;
  5028                           
  5029                           	psect	text5
  5030  005078                     __ptext5:
  5031                           	opt callstack 0
  5032  005078                     _pa_update:
  5033                           	opt callstack 17
  5034  005078                     
  5035                           ;src/main.c: 273:     if((adf4351_get_lock(&g_adf4351) != 0) && (((*((PIN_PTT_INPUT)->pP
      +                          ORT) & (PIN_PTT_INPUT)->mask) != 0) == 0)) {
  5036  005078  0E86               	movlw	low _g_adf4351
  5037  00507A  6E0D               	movwf	adf4351_get_lock@ctx^0,c
  5038  00507C  0E01               	movlw	high _g_adf4351
  5039  00507E  6E0E               	movwf	(adf4351_get_lock@ctx+1)^0,c
  5040  005080  ECC3  F02A         	call	_adf4351_get_lock	;wreg free
  5041  005084  500D               	movf	?_adf4351_get_lock^0,w,c
  5042  005086  100E               	iorwf	(?_adf4351_get_lock+1)^0,w,c
  5043  005088  B4D8               	btfsc	status,2,c
  5044  00508A  EF49  F028         	goto	u8761
  5045  00508E  EF4B  F028         	goto	u8760
  5046  005092                     u8761:
  5047  005092  EF6F  F028         	goto	l6785
  5048  005096                     u8760:
  5049  005096  0EFC               	movlw	low (_PIN_PTT_INPUT_DEF+4)
  5050  005098  6EF6               	movwf	tblptrl,c
  5051  00509A  0E79               	movlw	high (_PIN_PTT_INPUT_DEF+4)
  5052  00509C  6EF7               	movwf	tblptrh,c
  5053  00509E                     	if	0	;tblptru may be non-zero
  5054  00509E                     	endif
  5055  00509E                     	if	0	;tblptru may be non-zero
  5056  00509E                     	endif
  5057  00509E  0008               	tblrd		*
  5058  0050A0  CFF5 F0D4          	movff	tablat,??_pa_update
  5059  0050A4  0EF8               	movlw	low _PIN_PTT_INPUT_DEF
  5060  0050A6  6EF6               	movwf	tblptrl,c
  5061  0050A8                     	if	1	;There is more than 1 active tblptr byte
  5062  0050A8  0E79               	movlw	high _PIN_PTT_INPUT_DEF
  5063  0050AA  6EF7               	movwf	tblptrh,c
  5064  0050AC                     	endif
  5065  0050AC                     	if	0	;There are less than 3 active tblptr bytes
  5066  0050AC                     	endif
  5067  0050AC  0009               	tblrd		*+
  5068  0050AE  CFF5 F0D5          	movff	tablat,??_pa_update+1
  5069  0050B2  0009               	tblrd		*+
  5070  0050B4  CFF5 F0D6          	movff	tablat,??_pa_update+2
  5071  0050B8  C0D5  FFD9         	movff	??_pa_update+1,fsr2l
  5072  0050BC  C0D6  FFDA         	movff	??_pa_update+2,fsr2h
  5073  0050C0  50DF               	movf	indf2,w,c
  5074  0050C2  0100               	movlb	0	; () banked
  5075  0050C4  15D4               	andwf	??_pa_update& (0+255),w,b
  5076  0050C6  0900               	iorlw	0
  5077  0050C8  A4D8               	btfss	status,2,c
  5078  0050CA  EF69  F028         	goto	u8771
  5079  0050CE  EF6B  F028         	goto	u8770
  5080  0050D2                     u8771:
  5081  0050D2  EF6F  F028         	goto	l6785
  5082  0050D6                     u8770:
  5083  0050D6                     
  5084                           ; BSR set to: 0
  5085                           ;src/main.c: 275:         pa_unmute();
  5086  0050D6  EC99  F022         	call	_pa_unmute	;wreg free
  5087                           
  5088                           ;src/main.c: 276:     } else {
  5089  0050DA  EF71  F028         	goto	l461
  5090  0050DE                     l6785:
  5091                           
  5092                           ;src/main.c: 278:         pa_mute();
  5093  0050DE  ECDB  F025         	call	_pa_mute	;wreg free
  5094  0050E2                     l461:
  5095  0050E2  0012               	return		;funcret
  5096  0050E4                     __end_of_pa_update:
  5097                           	opt callstack 0
  5098                           
  5099 ;; *************** function _pa_unmute *****************
  5100 ;; Defined at:
  5101 ;;		line 253 in file "src/main.c"
  5102 ;; Parameters:    Size  Location     Type
  5103 ;;		None
  5104 ;; Auto vars:     Size  Location     Type
  5105 ;;		None
  5106 ;; Return value:  Size  Location     Type
  5107 ;;                  1    wreg      void 
  5108 ;; Registers used:
  5109 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5110 ;; Tracked objects:
  5111 ;;		On entry : 0/0
  5112 ;;		On exit  : 0/0
  5113 ;;		Unchanged: 0/0
  5114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5115 ;;      Params:         0       0       0       0       0       0       0
  5116 ;;      Locals:         0       0       0       0       0       0       0
  5117 ;;      Temps:          0       3       0       0       0       0       0
  5118 ;;      Totals:         0       3       0       0       0       0       0
  5119 ;;Total ram usage:        3 bytes
  5120 ;; Hardware stack levels used:    1
  5121 ;; Hardware stack levels required when called:   12
  5122 ;; This function calls:
  5123 ;;		_adf4351_set_rfout_enable
  5124 ;;		_printf
  5125 ;; This function is called by:
  5126 ;;		_pa_update
  5127 ;; This function uses a non-reentrant model
  5128 ;;
  5129                           
  5130                           	psect	text6
  5131  004532                     __ptext6:
  5132                           	opt callstack 0
  5133  004532                     _pa_unmute:
  5134                           	opt callstack 17
  5135  004532                     
  5136                           ;src/main.c: 255:     if(g_ptt_debounce_counter > 0) {
  5137  004532  0100               	movlb	0	; () banked
  5138  004534  BFE8               	btfsc	(_g_ptt_debounce_counter+1)& (0+255),7,b
  5139  004536  EFA5  F022         	goto	u8371
  5140  00453A  51E8               	movf	(_g_ptt_debounce_counter+1)& (0+255),w,b
  5141  00453C  E108               	bnz	u8370
  5142  00453E  05E7               	decf	_g_ptt_debounce_counter& (0+255),w,b
  5143  004540  A0D8               	btfss	status,0,c
  5144  004542  EFA5  F022         	goto	u8371
  5145  004546  EFA7  F022         	goto	u8370
  5146  00454A                     u8371:
  5147  00454A  EFAC  F022         	goto	l6497
  5148  00454E                     u8370:
  5149  00454E                     
  5150                           ; BSR set to: 0
  5151                           ;src/main.c: 257:         g_ptt_debounce_counter--;
  5152  00454E  07E7               	decf	_g_ptt_debounce_counter& (0+255),f,b
  5153  004550  A0D8               	btfss	status,0,c
  5154  004552  07E8               	decf	(_g_ptt_debounce_counter+1)& (0+255),f,b
  5155                           
  5156                           ;src/main.c: 258:     } else if(g_ptt_debounce_counter == 0) {
  5157  004554  EF02  F023         	goto	l456
  5158  004558                     l6497:
  5159                           
  5160                           ; BSR set to: 0
  5161  004558  51E7               	movf	_g_ptt_debounce_counter& (0+255),w,b
  5162  00455A  11E8               	iorwf	(_g_ptt_debounce_counter+1)& (0+255),w,b
  5163  00455C  A4D8               	btfss	status,2,c
  5164  00455E  EFB3  F022         	goto	u8381
  5165  004562  EFB5  F022         	goto	u8380
  5166  004566                     u8381:
  5167  004566  EF02  F023         	goto	l456
  5168  00456A                     u8380:
  5169  00456A                     
  5170                           ; BSR set to: 0
  5171                           ;src/main.c: 260:         printf("PA unmuted\n");
  5172  00456A  0EA3               	movlw	low STR_29
  5173  00456C  6F97               	movwf	printf@fmt& (0+255),b
  5174  00456E  0E7F               	movlw	high STR_29
  5175  004570  6F98               	movwf	(printf@fmt+1)& (0+255),b
  5176  004572  ECFF  F02B         	call	_printf	;wreg free
  5177  004576                     
  5178                           ;src/main.c: 261:         g_ptt_debounce_counter--;
  5179  004576  0100               	movlb	0	; () banked
  5180  004578  07E7               	decf	_g_ptt_debounce_counter& (0+255),f,b
  5181  00457A  A0D8               	btfss	status,0,c
  5182  00457C  07E8               	decf	(_g_ptt_debounce_counter+1)& (0+255),f,b
  5183  00457E                     
  5184                           ; BSR set to: 0
  5185                           ;src/main.c: 262:         *((PIN_PA_ENABLE)->pPORT) |= (PIN_PA_ENABLE)->mask;
  5186  00457E  0ECA               	movlw	low (_PIN_PA_ENABLE_DEF+4)
  5187  004580  6EF6               	movwf	tblptrl,c
  5188  004582  0E79               	movlw	high (_PIN_PA_ENABLE_DEF+4)
  5189  004584  6EF7               	movwf	tblptrh,c
  5190  004586                     	if	0	;tblptru may be non-zero
  5191  004586                     	endif
  5192  004586                     	if	0	;tblptru may be non-zero
  5193  004586                     	endif
  5194  004586  0008               	tblrd		*
  5195  004588  CFF5 F0D1          	movff	tablat,??_pa_unmute
  5196  00458C  0EC6               	movlw	low _PIN_PA_ENABLE_DEF
  5197  00458E  6EF6               	movwf	tblptrl,c
  5198  004590                     	if	1	;There is more than 1 active tblptr byte
  5199  004590  0E79               	movlw	high _PIN_PA_ENABLE_DEF
  5200  004592  6EF7               	movwf	tblptrh,c
  5201  004594                     	endif
  5202  004594                     	if	0	;There are less than 3 active tblptr bytes
  5203  004594                     	endif
  5204  004594  0009               	tblrd		*+
  5205  004596  CFF5 F0D2          	movff	tablat,??_pa_unmute+1
  5206  00459A  0009               	tblrd		*+
  5207  00459C  CFF5 F0D3          	movff	tablat,??_pa_unmute+2
  5208  0045A0  C0D2  FFD9         	movff	??_pa_unmute+1,fsr2l
  5209  0045A4  C0D3  FFDA         	movff	??_pa_unmute+2,fsr2h
  5210  0045A8  51D1               	movf	??_pa_unmute& (0+255),w,b
  5211  0045AA  12DF               	iorwf	indf2,f,c
  5212  0045AC                     
  5213                           ; BSR set to: 0
  5214                           ;src/main.c: 263:         *((PIN_LED_PTT_ACTIVE)->pPORT) &= ~(PIN_LED_PTT_ACTIVE)->mask;
  5215  0045AC  0ECF               	movlw	low (_PIN_LED_PTT_ACTIVE_DEF+4)
  5216  0045AE  6EF6               	movwf	tblptrl,c
  5217  0045B0  0E79               	movlw	high (_PIN_LED_PTT_ACTIVE_DEF+4)
  5218  0045B2  6EF7               	movwf	tblptrh,c
  5219  0045B4                     	if	0	;tblptru may be non-zero
  5220  0045B4                     	endif
  5221  0045B4                     	if	0	;tblptru may be non-zero
  5222  0045B4                     	endif
  5223  0045B4  0008               	tblrd		*
  5224  0045B6  50F5               	movf	tablat,w,c
  5225  0045B8  0AFF               	xorlw	255
  5226  0045BA  6FD1               	movwf	??_pa_unmute& (0+255),b
  5227  0045BC  0ECB               	movlw	low _PIN_LED_PTT_ACTIVE_DEF
  5228  0045BE  6EF6               	movwf	tblptrl,c
  5229  0045C0                     	if	1	;There is more than 1 active tblptr byte
  5230  0045C0  0E79               	movlw	high _PIN_LED_PTT_ACTIVE_DEF
  5231  0045C2  6EF7               	movwf	tblptrh,c
  5232  0045C4                     	endif
  5233  0045C4                     	if	0	;There are less than 3 active tblptr bytes
  5234  0045C4                     	endif
  5235  0045C4  0009               	tblrd		*+
  5236  0045C6  CFF5 F0D2          	movff	tablat,??_pa_unmute+1
  5237  0045CA  0009               	tblrd		*+
  5238  0045CC  CFF5 F0D3          	movff	tablat,??_pa_unmute+2
  5239  0045D0  C0D2  FFD9         	movff	??_pa_unmute+1,fsr2l
  5240  0045D4  C0D3  FFDA         	movff	??_pa_unmute+2,fsr2h
  5241  0045D8  51D1               	movf	??_pa_unmute& (0+255),w,b
  5242  0045DA  16DF               	andwf	indf2,f,c
  5243  0045DC                     
  5244                           ; BSR set to: 0
  5245                           ;src/main.c: 264:         _delay((unsigned long)((2)*(8000000/4000.0)));
  5246  0045DC  0E06               	movlw	6
  5247  0045DE  0100               	movlb	0	; () banked
  5248  0045E0  6FD1               	movwf	??_pa_unmute& (0+255),b
  5249  0045E2  0E30               	movlw	48
  5250  0045E4                     u8897:
  5251  0045E4  2EE8               	decfsz	wreg,f,c
  5252  0045E6  D7FE               	bra	u8897
  5253  0045E8  2FD1               	decfsz	??_pa_unmute& (0+255),f,b
  5254  0045EA  D7FC               	bra	u8897
  5255  0045EC  F000               	nop	
  5256  0045EE                     
  5257                           ;src/main.c: 265:         adf4351_set_rfout_enable(&g_adf4351, 1);
  5258  0045EE  0E86               	movlw	low _g_adf4351
  5259  0045F0  0100               	movlb	0	; () banked
  5260  0045F2  6FCD               	movwf	adf4351_set_rfout_enable@ctx& (0+255),b
  5261  0045F4  0E01               	movlw	high _g_adf4351
  5262  0045F6  6FCE               	movwf	(adf4351_set_rfout_enable@ctx+1)& (0+255),b
  5263  0045F8  0E00               	movlw	0
  5264  0045FA  6FD0               	movwf	(adf4351_set_rfout_enable@enable+1)& (0+255),b
  5265  0045FC  0E01               	movlw	1
  5266  0045FE  6FCF               	movwf	adf4351_set_rfout_enable@enable& (0+255),b
  5267  004600  ECFF  F029         	call	_adf4351_set_rfout_enable	;wreg free
  5268  004604                     l456:
  5269  004604  0012               	return		;funcret
  5270  004606                     __end_of_pa_unmute:
  5271                           	opt callstack 0
  5272                           
  5273 ;; *************** function _init_switch *****************
  5274 ;; Defined at:
  5275 ;;		line 353 in file "src/main.c"
  5276 ;; Parameters:    Size  Location     Type
  5277 ;;		None
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;		None
  5280 ;; Return value:  Size  Location     Type
  5281 ;;                  1    wreg      void 
  5282 ;; Registers used:
  5283 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5284 ;; Tracked objects:
  5285 ;;		On entry : 0/0
  5286 ;;		On exit  : 0/0
  5287 ;;		Unchanged: 0/0
  5288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5289 ;;      Params:         0       0       0       0       0       0       0
  5290 ;;      Locals:         0       0       0       0       0       0       0
  5291 ;;      Temps:          0       0       0       0       0       0       0
  5292 ;;      Totals:         0       0       0       0       0       0       0
  5293 ;;Total ram usage:        0 bytes
  5294 ;; Hardware stack levels used:    1
  5295 ;; Hardware stack levels required when called:   14
  5296 ;; This function calls:
  5297 ;;		_handle_cmd
  5298 ;;		_read_switch
  5299 ;; This function is called by:
  5300 ;;		_main
  5301 ;; This function uses a non-reentrant model
  5302 ;;
  5303                           
  5304                           	psect	text7
  5305  0058D8                     __ptext7:
  5306                           	opt callstack 0
  5307  0058D8                     _init_switch:
  5308                           	opt callstack 16
  5309  0058D8                     
  5310                           ;src/main.c: 355:     g_pending_cmd = read_switch();
  5311  0058D8  EC77  F026         	call	_read_switch	;wreg free
  5312  0058DC  6E72               	movwf	_g_pending_cmd^0,c
  5313  0058DE                     
  5314                           ;src/main.c: 356:     handle_cmd(g_pending_cmd);
  5315  0058DE  5072               	movf	_g_pending_cmd^0,w,c
  5316  0058E0  ECA8  F019         	call	_handle_cmd
  5317  0058E4  0012               	return		;funcret
  5318  0058E6                     __end_of_init_switch:
  5319                           	opt callstack 0
  5320                           
  5321 ;; *************** function _read_switch *****************
  5322 ;; Defined at:
  5323 ;;		line 342 in file "src/main.c"
  5324 ;; Parameters:    Size  Location     Type
  5325 ;;		None
  5326 ;; Auto vars:     Size  Location     Type
  5327 ;;  fsw1            1   16[COMRAM] unsigned char 
  5328 ;;  fsw0            1   15[COMRAM] unsigned char 
  5329 ;; Return value:  Size  Location     Type
  5330 ;;                  1    wreg      unsigned char 
  5331 ;; Registers used:
  5332 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  5333 ;; Tracked objects:
  5334 ;;		On entry : 0/0
  5335 ;;		On exit  : 0/0
  5336 ;;		Unchanged: 0/0
  5337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5338 ;;      Params:         0       0       0       0       0       0       0
  5339 ;;      Locals:         2       0       0       0       0       0       0
  5340 ;;      Temps:          3       0       0       0       0       0       0
  5341 ;;      Totals:         5       0       0       0       0       0       0
  5342 ;;Total ram usage:        5 bytes
  5343 ;; Hardware stack levels used:    1
  5344 ;; Hardware stack levels required when called:    2
  5345 ;; This function calls:
  5346 ;;		Nothing
  5347 ;; This function is called by:
  5348 ;;		_init_switch
  5349 ;;		_update_switch
  5350 ;; This function uses a non-reentrant model
  5351 ;;
  5352                           
  5353                           	psect	text8
  5354  004CEE                     __ptext8:
  5355                           	opt callstack 0
  5356  004CEE                     _read_switch:
  5357                           	opt callstack 27
  5358  004CEE                     
  5359                           ;src/main.c: 344:     u8 fsw0, fsw1;;src/main.c: 347:     fsw0 = ((*((PIN_FSW0)->pPORT) 
      +                          & (PIN_FSW0)->mask) != 0)?0:1;
  5360  004CEE  0EE3               	movlw	low (_PIN_FSW0_DEF+4)
  5361  004CF0  6EF6               	movwf	tblptrl,c
  5362  004CF2  0E79               	movlw	high (_PIN_FSW0_DEF+4)
  5363  004CF4  6EF7               	movwf	tblptrh,c
  5364  004CF6                     	if	0	;tblptru may be non-zero
  5365  004CF6                     	endif
  5366  004CF6                     	if	0	;tblptru may be non-zero
  5367  004CF6                     	endif
  5368  004CF6  0008               	tblrd		*
  5369  004CF8  CFF5 F00D          	movff	tablat,??_read_switch
  5370  004CFC  0EDF               	movlw	low _PIN_FSW0_DEF
  5371  004CFE  6EF6               	movwf	tblptrl,c
  5372  004D00                     	if	1	;There is more than 1 active tblptr byte
  5373  004D00  0E79               	movlw	high _PIN_FSW0_DEF
  5374  004D02  6EF7               	movwf	tblptrh,c
  5375  004D04                     	endif
  5376  004D04                     	if	0	;There are less than 3 active tblptr bytes
  5377  004D04                     	endif
  5378  004D04  0009               	tblrd		*+
  5379  004D06  CFF5 F00E          	movff	tablat,??_read_switch+1
  5380  004D0A  0009               	tblrd		*+
  5381  004D0C  CFF5 F00F          	movff	tablat,??_read_switch+2
  5382  004D10  C00E  FFD9         	movff	??_read_switch+1,fsr2l
  5383  004D14  C00F  FFDA         	movff	??_read_switch+2,fsr2h
  5384  004D18  50DF               	movf	indf2,w,c
  5385  004D1A  140D               	andwf	??_read_switch^0,w,c
  5386  004D1C  0900               	iorlw	0
  5387  004D1E  B4D8               	btfsc	status,2,c
  5388  004D20  EF94  F026         	goto	u5451
  5389  004D24  EF97  F026         	goto	u5450
  5390  004D28                     u5451:
  5391  004D28  0E01               	movlw	1
  5392  004D2A  EF98  F026         	goto	u5460
  5393  004D2E                     u5450:
  5394  004D2E  0E00               	movlw	0
  5395  004D30                     u5460:
  5396  004D30  6E10               	movwf	read_switch@fsw0^0,c
  5397                           
  5398                           ;src/main.c: 348:     fsw1 = ((*((PIN_FSW1)->pPORT) & (PIN_FSW1)->mask) != 0)?0:1;
  5399  004D32  0EDE               	movlw	low (_PIN_FSW1_DEF+4)
  5400  004D34  6EF6               	movwf	tblptrl,c
  5401  004D36  0E79               	movlw	high (_PIN_FSW1_DEF+4)
  5402  004D38  6EF7               	movwf	tblptrh,c
  5403  004D3A                     	if	0	;tblptru may be non-zero
  5404  004D3A                     	endif
  5405  004D3A                     	if	0	;tblptru may be non-zero
  5406  004D3A                     	endif
  5407  004D3A  0008               	tblrd		*
  5408  004D3C  CFF5 F00D          	movff	tablat,??_read_switch
  5409  004D40  0EDA               	movlw	low _PIN_FSW1_DEF
  5410  004D42  6EF6               	movwf	tblptrl,c
  5411  004D44                     	if	1	;There is more than 1 active tblptr byte
  5412  004D44  0E79               	movlw	high _PIN_FSW1_DEF
  5413  004D46  6EF7               	movwf	tblptrh,c
  5414  004D48                     	endif
  5415  004D48                     	if	0	;There are less than 3 active tblptr bytes
  5416  004D48                     	endif
  5417  004D48  0009               	tblrd		*+
  5418  004D4A  CFF5 F00E          	movff	tablat,??_read_switch+1
  5419  004D4E  0009               	tblrd		*+
  5420  004D50  CFF5 F00F          	movff	tablat,??_read_switch+2
  5421  004D54  C00E  FFD9         	movff	??_read_switch+1,fsr2l
  5422  004D58  C00F  FFDA         	movff	??_read_switch+2,fsr2h
  5423  004D5C  50DF               	movf	indf2,w,c
  5424  004D5E  140D               	andwf	??_read_switch^0,w,c
  5425  004D60  0900               	iorlw	0
  5426  004D62  B4D8               	btfsc	status,2,c
  5427  004D64  EFB6  F026         	goto	u5471
  5428  004D68  EFB9  F026         	goto	u5470
  5429  004D6C                     u5471:
  5430  004D6C  0E01               	movlw	1
  5431  004D6E  EFBA  F026         	goto	u5480
  5432  004D72                     u5470:
  5433  004D72  0E00               	movlw	0
  5434  004D74                     u5480:
  5435  004D74  6E11               	movwf	read_switch@fsw1^0,c
  5436  004D76                     
  5437                           ;src/main.c: 350:     return (fsw0<<0) | (fsw1<<1);
  5438  004D76  5011               	movf	read_switch@fsw1^0,w,c
  5439  004D78  2411               	addwf	read_switch@fsw1^0,w,c
  5440  004D7A  1010               	iorwf	read_switch@fsw0^0,w,c
  5441  004D7C  0012               	return		;funcret
  5442  004D7E                     __end_of_read_switch:
  5443                           	opt callstack 0
  5444                           
  5445 ;; *************** function _handle_cmd *****************
  5446 ;; Defined at:
  5447 ;;		line 397 in file "src/main.c"
  5448 ;; Parameters:    Size  Location     Type
  5449 ;;  cmd             1    wreg     unsigned char 
  5450 ;; Auto vars:     Size  Location     Type
  5451 ;;  cmd             1   94[BANK0 ] unsigned char 
  5452 ;;  timeout         2   92[BANK0 ] int 
  5453 ;; Return value:  Size  Location     Type
  5454 ;;                  1    wreg      void 
  5455 ;; Registers used:
  5456 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5457 ;; Tracked objects:
  5458 ;;		On entry : 0/0
  5459 ;;		On exit  : 0/0
  5460 ;;		Unchanged: 0/0
  5461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5462 ;;      Params:         0       0       0       0       0       0       0
  5463 ;;      Locals:         0       3       0       0       0       0       0
  5464 ;;      Temps:          0       3       0       0       0       0       0
  5465 ;;      Totals:         0       6       0       0       0       0       0
  5466 ;;Total ram usage:        6 bytes
  5467 ;; Hardware stack levels used:    1
  5468 ;; Hardware stack levels required when called:   13
  5469 ;; This function calls:
  5470 ;;		_adf4351_get_lock
  5471 ;;		_adf4351_set_freq
  5472 ;;		_adf4351_set_mode
  5473 ;;		_pa_mute
  5474 ;;		_printf
  5475 ;; This function is called by:
  5476 ;;		_init_switch
  5477 ;;		_update_switch
  5478 ;; This function uses a non-reentrant model
  5479 ;;
  5480                           
  5481                           	psect	text9
  5482  003350                     __ptext9:
  5483                           	opt callstack 0
  5484  003350                     _handle_cmd:
  5485                           	opt callstack 16
  5486                           
  5487                           ;incstack = 0
  5488                           ;handle_cmd@cmd stored from wreg
  5489  003350  0100               	movlb	0	; () banked
  5490  003352  6FDE               	movwf	handle_cmd@cmd& (0+255),b
  5491  003354                     
  5492                           ;src/main.c: 397: static void handle_cmd(u8 cmd);src/main.c: 398: {;src/main.c: 399:    
      +                           if((cmd != g_applied_cmd) && (cmd < 4)) {
  5493  003354  0100               	movlb	0	; () banked
  5494  003356  51EF               	movf	_g_applied_cmd& (0+255),w,b
  5495  003358  19DE               	xorwf	handle_cmd@cmd& (0+255),w,b
  5496  00335A  B4D8               	btfsc	status,2,c
  5497  00335C  EFB2  F019         	goto	u8391
  5498  003360  EFB4  F019         	goto	u8390
  5499  003364                     u8391:
  5500  003364  EF7C  F01A         	goto	l531
  5501  003368                     u8390:
  5502  003368                     
  5503                           ; BSR set to: 0
  5504  003368  0E04               	movlw	4
  5505  00336A  61DE               	cpfslt	handle_cmd@cmd& (0+255),b
  5506  00336C  EFBA  F019         	goto	u8401
  5507  003370  EFBC  F019         	goto	u8400
  5508  003374                     u8401:
  5509  003374  EF7C  F01A         	goto	l531
  5510  003378                     u8400:
  5511  003378                     
  5512                           ; BSR set to: 0
  5513                           ;src/main.c: 400:         int timeout = 100;
  5514  003378  0E00               	movlw	0
  5515  00337A  6FDD               	movwf	(handle_cmd@timeout+1)& (0+255),b
  5516  00337C  0E64               	movlw	100
  5517  00337E  6FDC               	movwf	handle_cmd@timeout& (0+255),b
  5518  003380                     
  5519                           ; BSR set to: 0
  5520                           ;src/main.c: 402:         pa_mute();
  5521  003380  ECDB  F025         	call	_pa_mute	;wreg free
  5522  003384                     
  5523                           ;src/main.c: 404:         printf("handle_cmd(%i)\r\n",cmd);
  5524  003384  0E34               	movlw	low STR_46
  5525  003386  0100               	movlb	0	; () banked
  5526  003388  6F97               	movwf	printf@fmt& (0+255),b
  5527  00338A  0E7F               	movlw	high STR_46
  5528  00338C  6F98               	movwf	(printf@fmt+1)& (0+255),b
  5529  00338E  C0DE  F099         	movff	handle_cmd@cmd,?_printf+2
  5530  003392  6B9A               	clrf	(?_printf+3)& (0+255),b
  5531  003394  ECFF  F02B         	call	_printf	;wreg free
  5532  003398                     
  5533                           ;src/main.c: 406:         printf("ADF4351 SET FREQ\r\n");
  5534  003398  0EFD               	movlw	low STR_47
  5535  00339A  0100               	movlb	0	; () banked
  5536  00339C  6F97               	movwf	printf@fmt& (0+255),b
  5537  00339E  0E7E               	movlw	high STR_47
  5538  0033A0  6F98               	movwf	(printf@fmt+1)& (0+255),b
  5539  0033A2  ECFF  F02B         	call	_printf	;wreg free
  5540  0033A6                     
  5541                           ;src/main.c: 407:         adf4351_set_freq(&g_adf4351, freq_table[cmd]);
  5542  0033A6  0E86               	movlw	low _g_adf4351
  5543  0033A8  0100               	movlb	0	; () banked
  5544  0033AA  6FD1               	movwf	adf4351_set_freq@ctx& (0+255),b
  5545  0033AC  0E01               	movlw	high _g_adf4351
  5546  0033AE  6FD2               	movwf	(adf4351_set_freq@ctx+1)& (0+255),b
  5547  0033B0  51DE               	movf	handle_cmd@cmd& (0+255),w,b
  5548  0033B2  0D04               	mullw	4
  5549  0033B4  0E7F               	movlw	low _freq_table
  5550  0033B6  24F3               	addwf	243,w,c
  5551  0033B8  6EF6               	movwf	tblptrl,c
  5552  0033BA  0E79               	movlw	high _freq_table
  5553  0033BC  20F4               	addwfc	244,w,c
  5554  0033BE  6EF7               	movwf	tblptrh,c
  5555  0033C0                     	if	0	;There are less than 3 active tblptr bytes
  5556  0033C0                     	endif
  5557  0033C0  0009               	tblrd		*+
  5558  0033C2  CFF5 F0D3          	movff	tablat,adf4351_set_freq@freq
  5559  0033C6  0009               	tblrd		*+
  5560  0033C8  CFF5 F0D4          	movff	tablat,adf4351_set_freq@freq+1
  5561  0033CC  0009               	tblrd		*+
  5562  0033CE  CFF5 F0D5          	movff	tablat,adf4351_set_freq@freq+2
  5563  0033D2  000A               	tblrd		*-
  5564  0033D4  CFF5 F0D6          	movff	tablat,adf4351_set_freq@freq+3
  5565  0033D8  EC87  F027         	call	_adf4351_set_freq	;wreg free
  5566  0033DC                     
  5567                           ;src/main.c: 408:         printf("ADF4351 SET MODE\r\n");
  5568  0033DC  0ED7               	movlw	low STR_48
  5569  0033DE  0100               	movlb	0	; () banked
  5570  0033E0  6F97               	movwf	printf@fmt& (0+255),b
  5571  0033E2  0E7E               	movlw	high STR_48
  5572  0033E4  6F98               	movwf	(printf@fmt+1)& (0+255),b
  5573  0033E6  ECFF  F02B         	call	_printf	;wreg free
  5574  0033EA                     
  5575                           ;src/main.c: 409:         adf4351_set_mode(&g_adf4351, 1);
  5576  0033EA  0E86               	movlw	low _g_adf4351
  5577  0033EC  0100               	movlb	0	; () banked
  5578  0033EE  6FCF               	movwf	adf4351_set_mode@ctx& (0+255),b
  5579  0033F0  0E01               	movlw	high _g_adf4351
  5580  0033F2  6FD0               	movwf	(adf4351_set_mode@ctx+1)& (0+255),b
  5581  0033F4  0E00               	movlw	0
  5582  0033F6  6FD2               	movwf	(adf4351_set_mode@enable+1)& (0+255),b
  5583  0033F8  0E01               	movlw	1
  5584  0033FA  6FD1               	movwf	adf4351_set_mode@enable& (0+255),b
  5585  0033FC  EC29  F026         	call	_adf4351_set_mode	;wreg free
  5586                           
  5587                           ;src/main.c: 411:         while((adf4351_get_lock(&g_adf4351) == 0) && (timeout>0)) {
  5588  003400  EF0E  F01A         	goto	l6537
  5589  003404                     l6533:
  5590                           
  5591                           ; BSR set to: 0
  5592                           ;src/main.c: 412:             timeout--;
  5593  003404  07DC               	decf	handle_cmd@timeout& (0+255),f,b
  5594  003406  A0D8               	btfss	status,0,c
  5595  003408  07DD               	decf	(handle_cmd@timeout+1)& (0+255),f,b
  5596  00340A                     
  5597                           ; BSR set to: 0
  5598                           ;src/main.c: 413:             _delay((unsigned long)((1)*(8000000/4000.0)));
  5599  00340A  0E03               	movlw	3
  5600  00340C  0100               	movlb	0	; () banked
  5601  00340E  6FD9               	movwf	??_handle_cmd& (0+255),b
  5602  003410  0E97               	movlw	151
  5603  003412                     u8907:
  5604  003412  2EE8               	decfsz	wreg,f,c
  5605  003414  D7FE               	bra	u8907
  5606  003416  2FD9               	decfsz	??_handle_cmd& (0+255),f,b
  5607  003418  D7FC               	bra	u8907
  5608  00341A  D000               	nop2	
  5609  00341C                     l6537:
  5610                           
  5611                           ;src/main.c: 411:         while((adf4351_get_lock(&g_adf4351) == 0) && (timeout>0)) {
  5612  00341C  0E86               	movlw	low _g_adf4351
  5613  00341E  6E0D               	movwf	adf4351_get_lock@ctx^0,c
  5614  003420  0E01               	movlw	high _g_adf4351
  5615  003422  6E0E               	movwf	(adf4351_get_lock@ctx+1)^0,c
  5616  003424  ECC3  F02A         	call	_adf4351_get_lock	;wreg free
  5617  003428  500D               	movf	?_adf4351_get_lock^0,w,c
  5618  00342A  100E               	iorwf	(?_adf4351_get_lock+1)^0,w,c
  5619  00342C  A4D8               	btfss	status,2,c
  5620  00342E  EF1B  F01A         	goto	u8411
  5621  003432  EF1D  F01A         	goto	u8410
  5622  003436                     u8411:
  5623  003436  EF2B  F01A         	goto	l6541
  5624  00343A                     u8410:
  5625  00343A  0100               	movlb	0	; () banked
  5626  00343C  BFDD               	btfsc	(handle_cmd@timeout+1)& (0+255),7,b
  5627  00343E  EF2B  F01A         	goto	u8420
  5628  003442  51DD               	movf	(handle_cmd@timeout+1)& (0+255),w,b
  5629  003444  E106               	bnz	u8421
  5630  003446  05DC               	decf	handle_cmd@timeout& (0+255),w,b
  5631  003448  B0D8               	btfsc	status,0,c
  5632  00344A  EF29  F01A         	goto	u8421
  5633  00344E  EF2B  F01A         	goto	u8420
  5634  003452                     u8421:
  5635  003452  EF02  F01A         	goto	l6533
  5636  003456                     u8420:
  5637  003456                     l6541:
  5638                           
  5639                           ;src/main.c: 415:         if(timeout <= 0) {
  5640  003456  0100               	movlb	0	; () banked
  5641  003458  BFDD               	btfsc	(handle_cmd@timeout+1)& (0+255),7,b
  5642  00345A  EF39  F01A         	goto	u8430
  5643  00345E  51DD               	movf	(handle_cmd@timeout+1)& (0+255),w,b
  5644  003460  E106               	bnz	u8431
  5645  003462  05DC               	decf	handle_cmd@timeout& (0+255),w,b
  5646  003464  B0D8               	btfsc	status,0,c
  5647  003466  EF37  F01A         	goto	u8431
  5648  00346A  EF39  F01A         	goto	u8430
  5649  00346E                     u8431:
  5650  00346E  EF59  F01A         	goto	l6547
  5651  003472                     u8430:
  5652  003472                     
  5653                           ; BSR set to: 0
  5654                           ;src/main.c: 416:             printf("lock timed out!\n");
  5655  003472  0E45               	movlw	low STR_49
  5656  003474  6F97               	movwf	printf@fmt& (0+255),b
  5657  003476  0E7F               	movlw	high STR_49
  5658  003478  6F98               	movwf	(printf@fmt+1)& (0+255),b
  5659  00347A  ECFF  F02B         	call	_printf	;wreg free
  5660  00347E                     
  5661                           ;src/main.c: 417:             *((PIN_LED_ADF_LOCK)->pPORT) |= (PIN_LED_ADF_LOCK)->mask;
  5662  00347E  0ED4               	movlw	low (_PIN_LED_ADF_LOCK_DEF+4)
  5663  003480  6EF6               	movwf	tblptrl,c
  5664  003482  0E79               	movlw	high (_PIN_LED_ADF_LOCK_DEF+4)
  5665  003484  6EF7               	movwf	tblptrh,c
  5666  003486                     	if	0	;tblptru may be non-zero
  5667  003486                     	endif
  5668  003486                     	if	0	;tblptru may be non-zero
  5669  003486                     	endif
  5670  003486  0008               	tblrd		*
  5671  003488  CFF5 F0D9          	movff	tablat,??_handle_cmd
  5672  00348C  0ED0               	movlw	low _PIN_LED_ADF_LOCK_DEF
  5673  00348E  6EF6               	movwf	tblptrl,c
  5674  003490                     	if	1	;There is more than 1 active tblptr byte
  5675  003490  0E79               	movlw	high _PIN_LED_ADF_LOCK_DEF
  5676  003492  6EF7               	movwf	tblptrh,c
  5677  003494                     	endif
  5678  003494                     	if	0	;There are less than 3 active tblptr bytes
  5679  003494                     	endif
  5680  003494  0009               	tblrd		*+
  5681  003496  CFF5 F0DA          	movff	tablat,??_handle_cmd+1
  5682  00349A  0009               	tblrd		*+
  5683  00349C  CFF5 F0DB          	movff	tablat,??_handle_cmd+2
  5684  0034A0  C0DA  FFD9         	movff	??_handle_cmd+1,fsr2l
  5685  0034A4  C0DB  FFDA         	movff	??_handle_cmd+2,fsr2h
  5686  0034A8  0100               	movlb	0	; () banked
  5687  0034AA  51D9               	movf	??_handle_cmd& (0+255),w,b
  5688  0034AC  12DF               	iorwf	indf2,f,c
  5689                           
  5690                           ;src/main.c: 418:         } else {
  5691  0034AE  EF71  F01A         	goto	l6549
  5692  0034B2                     l6547:
  5693                           
  5694                           ; BSR set to: 0
  5695                           ;src/main.c: 419:             *((PIN_LED_ADF_LOCK)->pPORT) &= ~(PIN_LED_ADF_LOCK)->mask;
  5696  0034B2  0ED4               	movlw	low (_PIN_LED_ADF_LOCK_DEF+4)
  5697  0034B4  6EF6               	movwf	tblptrl,c
  5698  0034B6  0E79               	movlw	high (_PIN_LED_ADF_LOCK_DEF+4)
  5699  0034B8  6EF7               	movwf	tblptrh,c
  5700  0034BA                     	if	0	;tblptru may be non-zero
  5701  0034BA                     	endif
  5702  0034BA                     	if	0	;tblptru may be non-zero
  5703  0034BA                     	endif
  5704  0034BA  0008               	tblrd		*
  5705  0034BC  50F5               	movf	tablat,w,c
  5706  0034BE  0AFF               	xorlw	255
  5707  0034C0  6FD9               	movwf	??_handle_cmd& (0+255),b
  5708  0034C2  0ED0               	movlw	low _PIN_LED_ADF_LOCK_DEF
  5709  0034C4  6EF6               	movwf	tblptrl,c
  5710  0034C6                     	if	1	;There is more than 1 active tblptr byte
  5711  0034C6  0E79               	movlw	high _PIN_LED_ADF_LOCK_DEF
  5712  0034C8  6EF7               	movwf	tblptrh,c
  5713  0034CA                     	endif
  5714  0034CA                     	if	0	;There are less than 3 active tblptr bytes
  5715  0034CA                     	endif
  5716  0034CA  0009               	tblrd		*+
  5717  0034CC  CFF5 F0DA          	movff	tablat,??_handle_cmd+1
  5718  0034D0  0009               	tblrd		*+
  5719  0034D2  CFF5 F0DB          	movff	tablat,??_handle_cmd+2
  5720  0034D6  C0DA  FFD9         	movff	??_handle_cmd+1,fsr2l
  5721  0034DA  C0DB  FFDA         	movff	??_handle_cmd+2,fsr2h
  5722  0034DE  51D9               	movf	??_handle_cmd& (0+255),w,b
  5723  0034E0  16DF               	andwf	indf2,f,c
  5724  0034E2                     l6549:
  5725                           
  5726                           ; BSR set to: 0
  5727                           ;src/main.c: 421:         g_applied_cmd = cmd;
  5728  0034E2  C0DE  F0EF         	movff	handle_cmd@cmd,_g_applied_cmd
  5729  0034E6                     
  5730                           ; BSR set to: 0
  5731                           ;src/main.c: 423:         printf("applied_cmd:=%i\r\n",cmd);
  5732  0034E6  0E10               	movlw	low STR_50
  5733  0034E8  6F97               	movwf	printf@fmt& (0+255),b
  5734  0034EA  0E7F               	movlw	high STR_50
  5735  0034EC  6F98               	movwf	(printf@fmt+1)& (0+255),b
  5736  0034EE  C0DE  F099         	movff	handle_cmd@cmd,?_printf+2
  5737  0034F2  6B9A               	clrf	(?_printf+3)& (0+255),b
  5738  0034F4  ECFF  F02B         	call	_printf	;wreg free
  5739  0034F8                     l531:
  5740  0034F8  0012               	return		;funcret
  5741  0034FA                     __end_of_handle_cmd:
  5742                           	opt callstack 0
  5743                           
  5744 ;; *************** function _pa_mute *****************
  5745 ;; Defined at:
  5746 ;;		line 238 in file "src/main.c"
  5747 ;; Parameters:    Size  Location     Type
  5748 ;;		None
  5749 ;; Auto vars:     Size  Location     Type
  5750 ;;		None
  5751 ;; Return value:  Size  Location     Type
  5752 ;;                  1    wreg      void 
  5753 ;; Registers used:
  5754 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5755 ;; Tracked objects:
  5756 ;;		On entry : 0/0
  5757 ;;		On exit  : 0/0
  5758 ;;		Unchanged: 0/0
  5759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5760 ;;      Params:         0       0       0       0       0       0       0
  5761 ;;      Locals:         0       0       0       0       0       0       0
  5762 ;;      Temps:          0       3       0       0       0       0       0
  5763 ;;      Totals:         0       3       0       0       0       0       0
  5764 ;;Total ram usage:        3 bytes
  5765 ;; Hardware stack levels used:    1
  5766 ;; Hardware stack levels required when called:   12
  5767 ;; This function calls:
  5768 ;;		_adf4351_set_rfout_enable
  5769 ;;		_printf
  5770 ;; This function is called by:
  5771 ;;		_pa_update
  5772 ;;		_handle_cmd
  5773 ;; This function uses a non-reentrant model
  5774 ;;
  5775                           
  5776                           	psect	text10
  5777  004BB6                     __ptext10:
  5778                           	opt callstack 0
  5779  004BB6                     _pa_mute:
  5780                           	opt callstack 16
  5781  004BB6                     
  5782                           ;src/main.c: 240:     if(g_ptt_debounce_counter < 0) {
  5783  004BB6  0100               	movlb	0	; () banked
  5784  004BB8  BFE8               	btfsc	(_g_ptt_debounce_counter+1)& (0+255),7,b
  5785  004BBA  EFE3  F025         	goto	u8250
  5786  004BBE  EFE1  F025         	goto	u8251
  5787  004BC2                     u8251:
  5788  004BC2  EF24  F026         	goto	l6415
  5789  004BC6                     u8250:
  5790  004BC6                     
  5791                           ; BSR set to: 0
  5792                           ;src/main.c: 242:         printf("PA muted\n");
  5793  004BC6  0EAF               	movlw	low STR_28
  5794  004BC8  6F97               	movwf	printf@fmt& (0+255),b
  5795  004BCA  0E7F               	movlw	high STR_28
  5796  004BCC  6F98               	movwf	(printf@fmt+1)& (0+255),b
  5797  004BCE  ECFF  F02B         	call	_printf	;wreg free
  5798                           
  5799                           ;src/main.c: 243:         adf4351_set_rfout_enable(&g_adf4351, 0);
  5800  004BD2  0E86               	movlw	low _g_adf4351
  5801  004BD4  0100               	movlb	0	; () banked
  5802  004BD6  6FCD               	movwf	adf4351_set_rfout_enable@ctx& (0+255),b
  5803  004BD8  0E01               	movlw	high _g_adf4351
  5804  004BDA  6FCE               	movwf	(adf4351_set_rfout_enable@ctx+1)& (0+255),b
  5805  004BDC  0E00               	movlw	0
  5806  004BDE  6FD0               	movwf	(adf4351_set_rfout_enable@enable+1)& (0+255),b
  5807  004BE0  0E00               	movlw	0
  5808  004BE2  6FCF               	movwf	adf4351_set_rfout_enable@enable& (0+255),b
  5809  004BE4  ECFF  F029         	call	_adf4351_set_rfout_enable	;wreg free
  5810  004BE8                     
  5811                           ;src/main.c: 244:         *((PIN_PA_ENABLE)->pPORT) &= ~(PIN_PA_ENABLE)->mask;
  5812  004BE8  0ECA               	movlw	low (_PIN_PA_ENABLE_DEF+4)
  5813  004BEA  6EF6               	movwf	tblptrl,c
  5814  004BEC  0E79               	movlw	high (_PIN_PA_ENABLE_DEF+4)
  5815  004BEE  6EF7               	movwf	tblptrh,c
  5816  004BF0                     	if	0	;tblptru may be non-zero
  5817  004BF0                     	endif
  5818  004BF0                     	if	0	;tblptru may be non-zero
  5819  004BF0                     	endif
  5820  004BF0  0008               	tblrd		*
  5821  004BF2  50F5               	movf	tablat,w,c
  5822  004BF4  0AFF               	xorlw	255
  5823  004BF6  0100               	movlb	0	; () banked
  5824  004BF8  6FD1               	movwf	??_pa_mute& (0+255),b
  5825  004BFA  0EC6               	movlw	low _PIN_PA_ENABLE_DEF
  5826  004BFC  6EF6               	movwf	tblptrl,c
  5827  004BFE                     	if	1	;There is more than 1 active tblptr byte
  5828  004BFE  0E79               	movlw	high _PIN_PA_ENABLE_DEF
  5829  004C00  6EF7               	movwf	tblptrh,c
  5830  004C02                     	endif
  5831  004C02                     	if	0	;There are less than 3 active tblptr bytes
  5832  004C02                     	endif
  5833  004C02  0009               	tblrd		*+
  5834  004C04  CFF5 F0D2          	movff	tablat,??_pa_mute+1
  5835  004C08  0009               	tblrd		*+
  5836  004C0A  CFF5 F0D3          	movff	tablat,??_pa_mute+2
  5837  004C0E  C0D2  FFD9         	movff	??_pa_mute+1,fsr2l
  5838  004C12  C0D3  FFDA         	movff	??_pa_mute+2,fsr2h
  5839  004C16  51D1               	movf	??_pa_mute& (0+255),w,b
  5840  004C18  16DF               	andwf	indf2,f,c
  5841  004C1A                     
  5842                           ; BSR set to: 0
  5843                           ;src/main.c: 245:         *((PIN_LED_PTT_ACTIVE)->pPORT) |= (PIN_LED_PTT_ACTIVE)->mask;
  5844  004C1A  0ECF               	movlw	low (_PIN_LED_PTT_ACTIVE_DEF+4)
  5845  004C1C  6EF6               	movwf	tblptrl,c
  5846  004C1E  0E79               	movlw	high (_PIN_LED_PTT_ACTIVE_DEF+4)
  5847  004C20  6EF7               	movwf	tblptrh,c
  5848  004C22                     	if	0	;tblptru may be non-zero
  5849  004C22                     	endif
  5850  004C22                     	if	0	;tblptru may be non-zero
  5851  004C22                     	endif
  5852  004C22  0008               	tblrd		*
  5853  004C24  CFF5 F0D1          	movff	tablat,??_pa_mute
  5854  004C28  0ECB               	movlw	low _PIN_LED_PTT_ACTIVE_DEF
  5855  004C2A  6EF6               	movwf	tblptrl,c
  5856  004C2C                     	if	1	;There is more than 1 active tblptr byte
  5857  004C2C  0E79               	movlw	high _PIN_LED_PTT_ACTIVE_DEF
  5858  004C2E  6EF7               	movwf	tblptrh,c
  5859  004C30                     	endif
  5860  004C30                     	if	0	;There are less than 3 active tblptr bytes
  5861  004C30                     	endif
  5862  004C30  0009               	tblrd		*+
  5863  004C32  CFF5 F0D2          	movff	tablat,??_pa_mute+1
  5864  004C36  0009               	tblrd		*+
  5865  004C38  CFF5 F0D3          	movff	tablat,??_pa_mute+2
  5866  004C3C  C0D2  FFD9         	movff	??_pa_mute+1,fsr2l
  5867  004C40  C0D3  FFDA         	movff	??_pa_mute+2,fsr2h
  5868  004C44  51D1               	movf	??_pa_mute& (0+255),w,b
  5869  004C46  12DF               	iorwf	indf2,f,c
  5870  004C48                     l6415:
  5871                           
  5872                           ; BSR set to: 0
  5873                           ;src/main.c: 250:     g_ptt_debounce_counter = 10;
  5874  004C48  0E00               	movlw	0
  5875  004C4A  6FE8               	movwf	(_g_ptt_debounce_counter+1)& (0+255),b
  5876  004C4C  0E0A               	movlw	10
  5877  004C4E  6FE7               	movwf	_g_ptt_debounce_counter& (0+255),b
  5878  004C50                     
  5879                           ; BSR set to: 0
  5880  004C50  0012               	return		;funcret
  5881  004C52                     __end_of_pa_mute:
  5882                           	opt callstack 0
  5883                           
  5884 ;; *************** function _adf4351_set_rfout_enable *****************
  5885 ;; Defined at:
  5886 ;;		line 77 in file "src/driver/adf4351.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;  ctx             2   77[BANK0 ] PTR struct adf4351_ctx
  5889 ;;		 -> g_adf4351(55), 
  5890 ;;  enable          2   79[BANK0 ] int 
  5891 ;; Auto vars:     Size  Location     Type
  5892 ;;		None
  5893 ;; Return value:  Size  Location     Type
  5894 ;;                  1    wreg      void 
  5895 ;; Registers used:
  5896 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5897 ;; Tracked objects:
  5898 ;;		On entry : 0/0
  5899 ;;		On exit  : 0/0
  5900 ;;		Unchanged: 0/0
  5901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5902 ;;      Params:         0       4       0       0       0       0       0
  5903 ;;      Locals:         0       0       0       0       0       0       0
  5904 ;;      Temps:          0       0       0       0       0       0       0
  5905 ;;      Totals:         0       4       0       0       0       0       0
  5906 ;;Total ram usage:        4 bytes
  5907 ;; Hardware stack levels used:    1
  5908 ;; Hardware stack levels required when called:   11
  5909 ;; This function calls:
  5910 ;;		_adf4351_write_reg2
  5911 ;;		_adf4351_write_reg4
  5912 ;; This function is called by:
  5913 ;;		_pa_mute
  5914 ;;		_pa_unmute
  5915 ;; This function uses a non-reentrant model
  5916 ;;
  5917                           
  5918                           	psect	text11
  5919  0053FE                     __ptext11:
  5920                           	opt callstack 0
  5921  0053FE                     _adf4351_set_rfout_enable:
  5922                           	opt callstack 16
  5923  0053FE                     
  5924                           ;src/driver/adf4351.c: 77: void adf4351_set_rfout_enable(adf4351_ctx* ctx, BOOL enable);
      +                          src/driver/adf4351.c: 78: {;src/driver/adf4351.c: 79:     if(enable) {
  5925  0053FE  0100               	movlb	0	; () banked
  5926  005400  51CF               	movf	adf4351_set_rfout_enable@enable& (0+255),w,b
  5927  005402  11D0               	iorwf	(adf4351_set_rfout_enable@enable+1)& (0+255),w,b
  5928  005404  B4D8               	btfsc	status,2,c
  5929  005406  EF07  F02A         	goto	u8041
  5930  00540A  EF09  F02A         	goto	u8040
  5931  00540E                     u8041:
  5932  00540E  EF13  F02A         	goto	l6269
  5933  005412                     u8040:
  5934  005412                     
  5935                           ; BSR set to: 0
  5936                           ;src/driver/adf4351.c: 80:         ctx->reg4.rfoutena = 1;
  5937  005412  EE20 F028          	lfsr	2,40
  5938  005416  51CD               	movf	adf4351_set_rfout_enable@ctx& (0+255),w,b
  5939  005418  26D9               	addwf	fsr2l,f,c
  5940  00541A  51CE               	movf	(adf4351_set_rfout_enable@ctx+1)& (0+255),w,b
  5941  00541C  22DA               	addwfc	fsr2h,f,c
  5942  00541E  0E01               	movlw	1
  5943  005420  6EDF               	movwf	indf2,c
  5944                           
  5945                           ;src/driver/adf4351.c: 81:     } else {
  5946  005422  EF1B  F02A         	goto	l6271
  5947  005426                     l6269:
  5948                           
  5949                           ; BSR set to: 0
  5950                           ;src/driver/adf4351.c: 82:         ctx->reg4.rfoutena = 0;
  5951  005426  EE20 F028          	lfsr	2,40
  5952  00542A  51CD               	movf	adf4351_set_rfout_enable@ctx& (0+255),w,b
  5953  00542C  26D9               	addwf	fsr2l,f,c
  5954  00542E  51CE               	movf	(adf4351_set_rfout_enable@ctx+1)& (0+255),w,b
  5955  005430  22DA               	addwfc	fsr2h,f,c
  5956  005432  0E00               	movlw	0
  5957  005434  6EDF               	movwf	indf2,c
  5958  005436                     l6271:
  5959                           
  5960                           ; BSR set to: 0
  5961                           ;src/driver/adf4351.c: 85:     adf4351_write_reg4(ctx);
  5962  005436  C0CD  F0BB         	movff	adf4351_set_rfout_enable@ctx,adf4351_write_reg4@ctx
  5963  00543A  C0CE  F0BC         	movff	adf4351_set_rfout_enable@ctx+1,adf4351_write_reg4@ctx+1
  5964  00543E  ECA7  F00C         	call	_adf4351_write_reg4	;wreg free
  5965  005442                     
  5966                           ;src/driver/adf4351.c: 86:     adf4351_write_reg2(ctx);
  5967  005442  C0CD  F0BB         	movff	adf4351_set_rfout_enable@ctx,adf4351_write_reg2@ctx
  5968  005446  C0CE  F0BC         	movff	adf4351_set_rfout_enable@ctx+1,adf4351_write_reg2@ctx+1
  5969  00544A  EC09  F008         	call	_adf4351_write_reg2	;wreg free
  5970  00544E  0012               	return		;funcret
  5971  005450                     __end_of_adf4351_set_rfout_enable:
  5972                           	opt callstack 0
  5973                           
  5974 ;; *************** function _adf4351_set_mode *****************
  5975 ;; Defined at:
  5976 ;;		line 90 in file "src/driver/adf4351.c"
  5977 ;; Parameters:    Size  Location     Type
  5978 ;;  ctx             2   79[BANK0 ] PTR struct adf4351_ctx
  5979 ;;		 -> g_adf4351(55), 
  5980 ;;  enable          2   81[BANK0 ] int 
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;		None
  5983 ;; Return value:  Size  Location     Type
  5984 ;;                  1    wreg      void 
  5985 ;; Registers used:
  5986 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5987 ;; Tracked objects:
  5988 ;;		On entry : 0/0
  5989 ;;		On exit  : 0/0
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5992 ;;      Params:         0       4       0       0       0       0       0
  5993 ;;      Locals:         0       0       0       0       0       0       0
  5994 ;;      Temps:          0       2       0       0       0       0       0
  5995 ;;      Totals:         0       6       0       0       0       0       0
  5996 ;;Total ram usage:        6 bytes
  5997 ;; Hardware stack levels used:    1
  5998 ;; Hardware stack levels required when called:   12
  5999 ;; This function calls:
  6000 ;;		_adf4351_setup
  6001 ;;		_adf4351_write_reg2
  6002 ;;		_adf4351_write_reg4
  6003 ;; This function is called by:
  6004 ;;		_handle_cmd
  6005 ;; This function uses a non-reentrant model
  6006 ;;
  6007                           
  6008                           	psect	text12
  6009  004C52                     __ptext12:
  6010                           	opt callstack 0
  6011  004C52                     _adf4351_set_mode:
  6012                           	opt callstack 16
  6013  004C52                     
  6014                           ;src/driver/adf4351.c: 90: void adf4351_set_mode(adf4351_ctx* ctx, BOOL enable);src/driv
      +                          er/adf4351.c: 91: {;src/driver/adf4351.c: 93:  if(!ctx->init) return;
  6015  004C52  C0CF  FFD9         	movff	adf4351_set_mode@ctx,fsr2l
  6016  004C56  C0D0  FFDA         	movff	adf4351_set_mode@ctx+1,fsr2h
  6017  004C5A  50DE               	movf	postinc2,w,c
  6018  004C5C  10DE               	iorwf	postinc2,w,c
  6019  004C5E  A4D8               	btfss	status,2,c
  6020  004C60  EF34  F026         	goto	u8191
  6021  004C64  EF36  F026         	goto	u8190
  6022  004C68                     u8191:
  6023  004C68  EF38  F026         	goto	l6359
  6024  004C6C                     u8190:
  6025  004C6C  EF76  F026         	goto	l62
  6026  004C70                     l6359:
  6027                           
  6028                           ;src/driver/adf4351.c: 96:  if(enable) {
  6029  004C70  0100               	movlb	0	; () banked
  6030  004C72  51D1               	movf	adf4351_set_mode@enable& (0+255),w,b
  6031  004C74  11D2               	iorwf	(adf4351_set_mode@enable+1)& (0+255),w,b
  6032  004C76  B4D8               	btfsc	status,2,c
  6033  004C78  EF40  F026         	goto	u8201
  6034  004C7C  EF42  F026         	goto	u8200
  6035  004C80                     u8201:
  6036  004C80  EF5A  F026         	goto	l6365
  6037  004C84                     u8200:
  6038  004C84                     
  6039                           ; BSR set to: 0
  6040                           ;src/driver/adf4351.c: 97:   ctx->reg4.vcopd = 0;
  6041  004C84  EE20 F023          	lfsr	2,35
  6042  004C88  51CF               	movf	adf4351_set_mode@ctx& (0+255),w,b
  6043  004C8A  26D9               	addwf	fsr2l,f,c
  6044  004C8C  51D0               	movf	(adf4351_set_mode@ctx+1)& (0+255),w,b
  6045  004C8E  22DA               	addwfc	fsr2h,f,c
  6046  004C90  0E00               	movlw	0
  6047  004C92  6EDF               	movwf	indf2,c
  6048                           
  6049                           ;src/driver/adf4351.c: 98:   ctx->reg2.pd = 0;
  6050  004C94  EE20 F016          	lfsr	2,22
  6051  004C98  51CF               	movf	adf4351_set_mode@ctx& (0+255),w,b
  6052  004C9A  26D9               	addwf	fsr2l,f,c
  6053  004C9C  51D0               	movf	(adf4351_set_mode@ctx+1)& (0+255),w,b
  6054  004C9E  22DA               	addwfc	fsr2h,f,c
  6055  004CA0  0E00               	movlw	0
  6056  004CA2  6EDF               	movwf	indf2,c
  6057  004CA4                     
  6058                           ; BSR set to: 0
  6059                           ;src/driver/adf4351.c: 101:   adf4351_setup(ctx);
  6060  004CA4  C0CF  F0CD         	movff	adf4351_set_mode@ctx,adf4351_setup@ctx
  6061  004CA8  C0D0  F0CE         	movff	adf4351_set_mode@ctx+1,adf4351_setup@ctx+1
  6062  004CAC  EC9E  F02A         	call	_adf4351_setup	;wreg free
  6063                           
  6064                           ;src/driver/adf4351.c: 102:  } else {
  6065  004CB0  EF76  F026         	goto	l62
  6066  004CB4                     l6365:
  6067                           
  6068                           ; BSR set to: 0
  6069                           ;src/driver/adf4351.c: 103:   ctx->reg4.vcopd = 1;
  6070  004CB4  EE20 F023          	lfsr	2,35
  6071  004CB8  51CF               	movf	adf4351_set_mode@ctx& (0+255),w,b
  6072  004CBA  26D9               	addwf	fsr2l,f,c
  6073  004CBC  51D0               	movf	(adf4351_set_mode@ctx+1)& (0+255),w,b
  6074  004CBE  22DA               	addwfc	fsr2h,f,c
  6075  004CC0  0E01               	movlw	1
  6076  004CC2  6EDF               	movwf	indf2,c
  6077                           
  6078                           ;src/driver/adf4351.c: 104:   ctx->reg2.pd = 1;
  6079  004CC4  EE20 F016          	lfsr	2,22
  6080  004CC8  51CF               	movf	adf4351_set_mode@ctx& (0+255),w,b
  6081  004CCA  26D9               	addwf	fsr2l,f,c
  6082  004CCC  51D0               	movf	(adf4351_set_mode@ctx+1)& (0+255),w,b
  6083  004CCE  22DA               	addwfc	fsr2h,f,c
  6084  004CD0  0E01               	movlw	1
  6085  004CD2  6EDF               	movwf	indf2,c
  6086  004CD4                     
  6087                           ; BSR set to: 0
  6088                           ;src/driver/adf4351.c: 107:   adf4351_write_reg4(ctx);
  6089  004CD4  C0CF  F0BB         	movff	adf4351_set_mode@ctx,adf4351_write_reg4@ctx
  6090  004CD8  C0D0  F0BC         	movff	adf4351_set_mode@ctx+1,adf4351_write_reg4@ctx+1
  6091  004CDC  ECA7  F00C         	call	_adf4351_write_reg4	;wreg free
  6092  004CE0                     
  6093                           ;src/driver/adf4351.c: 108:   adf4351_write_reg2(ctx);
  6094  004CE0  C0CF  F0BB         	movff	adf4351_set_mode@ctx,adf4351_write_reg2@ctx
  6095  004CE4  C0D0  F0BC         	movff	adf4351_set_mode@ctx+1,adf4351_write_reg2@ctx+1
  6096  004CE8  EC09  F008         	call	_adf4351_write_reg2	;wreg free
  6097  004CEC                     l62:
  6098  004CEC  0012               	return		;funcret
  6099  004CEE                     __end_of_adf4351_set_mode:
  6100                           	opt callstack 0
  6101                           
  6102 ;; *************** function _adf4351_set_freq *****************
  6103 ;; Defined at:
  6104 ;;		line 55 in file "src/driver/adf4351.c"
  6105 ;; Parameters:    Size  Location     Type
  6106 ;;  ctx             2   81[BANK0 ] PTR struct adf4351_ctx
  6107 ;;		 -> g_adf4351(55), 
  6108 ;;  freq            4   83[BANK0 ] unsigned long 
  6109 ;; Auto vars:     Size  Location     Type
  6110 ;;		None
  6111 ;; Return value:  Size  Location     Type
  6112 ;;                  2   81[BANK0 ] int 
  6113 ;; Registers used:
  6114 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6115 ;; Tracked objects:
  6116 ;;		On entry : 0/0
  6117 ;;		On exit  : 0/0
  6118 ;;		Unchanged: 0/0
  6119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6120 ;;      Params:         0       6       0       0       0       0       0
  6121 ;;      Locals:         0       0       0       0       0       0       0
  6122 ;;      Temps:          0       2       0       0       0       0       0
  6123 ;;      Totals:         0       8       0       0       0       0       0
  6124 ;;Total ram usage:        8 bytes
  6125 ;; Hardware stack levels used:    1
  6126 ;; Hardware stack levels required when called:   12
  6127 ;; This function calls:
  6128 ;;		_adf4351_calc_counters
  6129 ;;		_adf4351_calc_rcnt_block
  6130 ;;		_adf4351_calc_vco_core_freq
  6131 ;;		_adf4351_setup
  6132 ;; This function is called by:
  6133 ;;		_handle_cmd
  6134 ;; This function uses a non-reentrant model
  6135 ;;
  6136                           
  6137                           	psect	text13
  6138  004F0E                     __ptext13:
  6139                           	opt callstack 0
  6140  004F0E                     _adf4351_set_freq:
  6141                           	opt callstack 16
  6142  004F0E                     
  6143                           ;src/driver/adf4351.c: 55: int adf4351_set_freq(adf4351_ctx* ctx, u32 freq);src/driver/a
      +                          df4351.c: 56: {;src/driver/adf4351.c: 58:  if(!ctx->init) return -3;
  6144  004F0E  C0D1  FFD9         	movff	adf4351_set_freq@ctx,fsr2l
  6145  004F12  C0D2  FFDA         	movff	adf4351_set_freq@ctx+1,fsr2h
  6146  004F16  50DE               	movf	postinc2,w,c
  6147  004F18  10DE               	iorwf	postinc2,w,c
  6148  004F1A  A4D8               	btfss	status,2,c
  6149  004F1C  EF92  F027         	goto	u8171
  6150  004F20  EF94  F027         	goto	u8170
  6151  004F24                     u8171:
  6152  004F24  EF96  F027         	goto	l6343
  6153  004F28                     u8170:
  6154  004F28  EFC5  F027         	goto	l49
  6155  004F2C                     l6343:
  6156                           
  6157                           ;src/driver/adf4351.c: 60:  adf4351_calc_vco_core_freq(ctx, freq);
  6158  004F2C  C0D1  F00D         	movff	adf4351_set_freq@ctx,adf4351_calc_vco_core_freq@ctx
  6159  004F30  C0D2  F00E         	movff	adf4351_set_freq@ctx+1,adf4351_calc_vco_core_freq@ctx+1
  6160  004F34  C0D3  F00F         	movff	adf4351_set_freq@freq,adf4351_calc_vco_core_freq@rf_out_freq
  6161  004F38  C0D4  F010         	movff	adf4351_set_freq@freq+1,adf4351_calc_vco_core_freq@rf_out_freq+1
  6162  004F3C  C0D5  F011         	movff	adf4351_set_freq@freq+2,adf4351_calc_vco_core_freq@rf_out_freq+2
  6163  004F40  C0D6  F012         	movff	adf4351_set_freq@freq+3,adf4351_calc_vco_core_freq@rf_out_freq+3
  6164  004F44  ECA0  F01F         	call	_adf4351_calc_vco_core_freq	;wreg free
  6165  004F48                     
  6166                           ;src/driver/adf4351.c: 61:  adf4351_calc_rcnt_block(ctx);
  6167  004F48  C0D1  F0BB         	movff	adf4351_set_freq@ctx,adf4351_calc_rcnt_block@ctx
  6168  004F4C  C0D2  F0BC         	movff	adf4351_set_freq@ctx+1,adf4351_calc_rcnt_block@ctx+1
  6169  004F50  EC2D  F010         	call	_adf4351_calc_rcnt_block	;wreg free
  6170  004F54                     
  6171                           ;src/driver/adf4351.c: 62:  adf4351_calc_counters(ctx);
  6172  004F54  C0D1  F0BB         	movff	adf4351_set_freq@ctx,adf4351_calc_counters@ctx
  6173  004F58  C0D2  F0BC         	movff	adf4351_set_freq@ctx+1,adf4351_calc_counters@ctx+1
  6174  004F5C  EC80  F00E         	call	_adf4351_calc_counters	;wreg free
  6175  004F60                     
  6176                           ;src/driver/adf4351.c: 64:  if(ctx->reg4.vcopd == 0) {
  6177  004F60  0100               	movlb	0	; () banked
  6178  004F62  EE20 F023          	lfsr	2,35
  6179  004F66  51D1               	movf	adf4351_set_freq@ctx& (0+255),w,b
  6180  004F68  26D9               	addwf	fsr2l,f,c
  6181  004F6A  51D2               	movf	(adf4351_set_freq@ctx+1)& (0+255),w,b
  6182  004F6C  22DA               	addwfc	fsr2h,f,c
  6183  004F6E  50DF               	movf	indf2,w,c
  6184  004F70  A4D8               	btfss	status,2,c
  6185  004F72  EFBD  F027         	goto	u8181
  6186  004F76  EFBF  F027         	goto	u8180
  6187  004F7A                     u8181:
  6188  004F7A  EFC5  F027         	goto	l49
  6189  004F7E                     u8180:
  6190  004F7E                     
  6191                           ; BSR set to: 0
  6192                           ;src/driver/adf4351.c: 65:   adf4351_setup(ctx);
  6193  004F7E  C0D1  F0CD         	movff	adf4351_set_freq@ctx,adf4351_setup@ctx
  6194  004F82  C0D2  F0CE         	movff	adf4351_set_freq@ctx+1,adf4351_setup@ctx+1
  6195  004F86  EC9E  F02A         	call	_adf4351_setup	;wreg free
  6196  004F8A                     l49:
  6197  004F8A  0012               	return		;funcret
  6198  004F8C                     __end_of_adf4351_set_freq:
  6199                           	opt callstack 0
  6200                           
  6201 ;; *************** function _adf4351_calc_vco_core_freq *****************
  6202 ;; Defined at:
  6203 ;;		line 245 in file "src/driver/adf4351.c"
  6204 ;; Parameters:    Size  Location     Type
  6205 ;;  ctx             2   12[COMRAM] PTR struct adf4351_ctx
  6206 ;;		 -> g_adf4351(55), 
  6207 ;;  rf_out_freq     4   14[COMRAM] unsigned long 
  6208 ;; Auto vars:     Size  Location     Type
  6209 ;;  div             2   22[COMRAM] int 
  6210 ;; Return value:  Size  Location     Type
  6211 ;;                  2   12[COMRAM] int 
  6212 ;; Registers used:
  6213 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6214 ;; Tracked objects:
  6215 ;;		On entry : 0/0
  6216 ;;		On exit  : 0/0
  6217 ;;		Unchanged: 0/0
  6218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6219 ;;      Params:         6       0       0       0       0       0       0
  6220 ;;      Locals:         2       0       0       0       0       0       0
  6221 ;;      Temps:          4       0       0       0       0       0       0
  6222 ;;      Totals:        12       0       0       0       0       0       0
  6223 ;;Total ram usage:       12 bytes
  6224 ;; Hardware stack levels used:    1
  6225 ;; Hardware stack levels required when called:    2
  6226 ;; This function calls:
  6227 ;;		Nothing
  6228 ;; This function is called by:
  6229 ;;		_adf4351_set_freq
  6230 ;; This function uses a non-reentrant model
  6231 ;;
  6232                           
  6233                           	psect	text14
  6234  003F40                     __ptext14:
  6235                           	opt callstack 0
  6236  003F40                     _adf4351_calc_vco_core_freq:
  6237                           	opt callstack 25
  6238  003F40                     
  6239                           ;src/driver/adf4351.c: 245: static int adf4351_calc_vco_core_freq(adf4351_ctx* ctx, u32 
      +                          rf_out_freq);src/driver/adf4351.c: 246: {;src/driver/adf4351.c: 247:  int div = 0;
  6240  003F40  0E00               	movlw	0
  6241  003F42  6E18               	movwf	(adf4351_calc_vco_core_freq@div+1)^0,c
  6242  003F44  0E00               	movlw	0
  6243  003F46  6E17               	movwf	adf4351_calc_vco_core_freq@div^0,c
  6244  003F48                     
  6245                           ;src/driver/adf4351.c: 249:  if (rf_out_freq > 4400000)
  6246  003F48  5012               	movf	(adf4351_calc_vco_core_freq@rf_out_freq+3)^0,w,c
  6247  003F4A  E10D               	bnz	u4890
  6248  003F4C  0E81               	movlw	129
  6249  003F4E  5C0F               	subwf	adf4351_calc_vco_core_freq@rf_out_freq^0,w,c
  6250  003F50  0E23               	movlw	35
  6251  003F52  5810               	subwfb	(adf4351_calc_vco_core_freq@rf_out_freq+1)^0,w,c
  6252  003F54  0E43               	movlw	67
  6253  003F56  5811               	subwfb	(adf4351_calc_vco_core_freq@rf_out_freq+2)^0,w,c
  6254  003F58  A0D8               	btfss	status,0,c
  6255  003F5A  EFB1  F01F         	goto	u4891
  6256  003F5E  EFB3  F01F         	goto	u4890
  6257  003F62                     u4891:
  6258  003F62  EFBC  F01F         	goto	l4367
  6259  003F66                     u4890:
  6260  003F66  EF2D  F020         	goto	l102
  6261  003F6A                     l4365:
  6262                           
  6263                           ;src/driver/adf4351.c: 253:   rf_out_freq *= 2;
  6264  003F6A  90D8               	bcf	status,0,c
  6265  003F6C  360F               	rlcf	adf4351_calc_vco_core_freq@rf_out_freq^0,f,c
  6266  003F6E  3610               	rlcf	(adf4351_calc_vco_core_freq@rf_out_freq+1)^0,f,c
  6267  003F70  3611               	rlcf	(adf4351_calc_vco_core_freq@rf_out_freq+2)^0,f,c
  6268  003F72  3612               	rlcf	(adf4351_calc_vco_core_freq@rf_out_freq+3)^0,f,c
  6269                           
  6270                           ;src/driver/adf4351.c: 254:   div += 1;
  6271  003F74  4A17               	infsnz	adf4351_calc_vco_core_freq@div^0,f,c
  6272  003F76  2A18               	incf	(adf4351_calc_vco_core_freq@div+1)^0,f,c
  6273  003F78                     l4367:
  6274                           
  6275                           ;src/driver/adf4351.c: 252:  while ((rf_out_freq <= 2200000) && (div <= 4)) {
  6276  003F78  5012               	movf	(adf4351_calc_vco_core_freq@rf_out_freq+3)^0,w,c
  6277  003F7A  E10B               	bnz	u4901
  6278  003F7C  0EC1               	movlw	193
  6279  003F7E  5C0F               	subwf	adf4351_calc_vco_core_freq@rf_out_freq^0,w,c
  6280  003F80  0E91               	movlw	145
  6281  003F82  5810               	subwfb	(adf4351_calc_vco_core_freq@rf_out_freq+1)^0,w,c
  6282  003F84  0E21               	movlw	33
  6283  003F86  5811               	subwfb	(adf4351_calc_vco_core_freq@rf_out_freq+2)^0,w,c
  6284  003F88  B0D8               	btfsc	status,0,c
  6285  003F8A  EFC9  F01F         	goto	u4901
  6286  003F8E  EFCB  F01F         	goto	u4900
  6287  003F92                     u4901:
  6288  003F92  EFD9  F01F         	goto	l4371
  6289  003F96                     u4900:
  6290  003F96  BE18               	btfsc	(adf4351_calc_vco_core_freq@div+1)^0,7,c
  6291  003F98  EFD7  F01F         	goto	u4911
  6292  003F9C  5018               	movf	(adf4351_calc_vco_core_freq@div+1)^0,w,c
  6293  003F9E  E109               	bnz	u4910
  6294  003FA0  0E05               	movlw	5
  6295  003FA2  5C17               	subwf	adf4351_calc_vco_core_freq@div^0,w,c
  6296  003FA4  A0D8               	btfss	status,0,c
  6297  003FA6  EFD7  F01F         	goto	u4911
  6298  003FAA  EFD9  F01F         	goto	u4910
  6299  003FAE                     u4911:
  6300  003FAE  EFB5  F01F         	goto	l4365
  6301  003FB2                     u4910:
  6302  003FB2                     l4371:
  6303                           
  6304                           ;src/driver/adf4351.c: 257:  if ((rf_out_freq <= 2200000) || (div > 4)) {
  6305  003FB2  5012               	movf	(adf4351_calc_vco_core_freq@rf_out_freq+3)^0,w,c
  6306  003FB4  E10D               	bnz	u4920
  6307  003FB6  0EC1               	movlw	193
  6308  003FB8  5C0F               	subwf	adf4351_calc_vco_core_freq@rf_out_freq^0,w,c
  6309  003FBA  0E91               	movlw	145
  6310  003FBC  5810               	subwfb	(adf4351_calc_vco_core_freq@rf_out_freq+1)^0,w,c
  6311  003FBE  0E21               	movlw	33
  6312  003FC0  5811               	subwfb	(adf4351_calc_vco_core_freq@rf_out_freq+2)^0,w,c
  6313  003FC2  A0D8               	btfss	status,0,c
  6314  003FC4  EFE6  F01F         	goto	u4921
  6315  003FC8  EFE8  F01F         	goto	u4920
  6316  003FCC                     u4921:
  6317  003FCC  EF2D  F020         	goto	l102
  6318  003FD0                     u4920:
  6319  003FD0  BE18               	btfsc	(adf4351_calc_vco_core_freq@div+1)^0,7,c
  6320  003FD2  EFF4  F01F         	goto	u4931
  6321  003FD6  5018               	movf	(adf4351_calc_vco_core_freq@div+1)^0,w,c
  6322  003FD8  E109               	bnz	u4930
  6323  003FDA  0E05               	movlw	5
  6324  003FDC  5C17               	subwf	adf4351_calc_vco_core_freq@div^0,w,c
  6325  003FDE  A0D8               	btfss	status,0,c
  6326  003FE0  EFF4  F01F         	goto	u4931
  6327  003FE4  EFF6  F01F         	goto	u4930
  6328  003FE8                     u4931:
  6329  003FE8  EFF8  F01F         	goto	l4375
  6330  003FEC                     u4930:
  6331  003FEC  EF2D  F020         	goto	l102
  6332  003FF0                     l4375:
  6333                           
  6334                           ;src/driver/adf4351.c: 261:  ctx->vco_freq = rf_out_freq;
  6335  003FF0  EE20 F033          	lfsr	2,51
  6336  003FF4  500D               	movf	adf4351_calc_vco_core_freq@ctx^0,w,c
  6337  003FF6  26D9               	addwf	fsr2l,f,c
  6338  003FF8  500E               	movf	(adf4351_calc_vco_core_freq@ctx+1)^0,w,c
  6339  003FFA  22DA               	addwfc	fsr2h,f,c
  6340  003FFC  C00F  FFDE         	movff	adf4351_calc_vco_core_freq@rf_out_freq,postinc2
  6341  004000  C010  FFDE         	movff	adf4351_calc_vco_core_freq@rf_out_freq+1,postinc2
  6342  004004  C011  FFDE         	movff	adf4351_calc_vco_core_freq@rf_out_freq+2,postinc2
  6343  004008  C012  FFDE         	movff	adf4351_calc_vco_core_freq@rf_out_freq+3,postinc2
  6344  00400C                     
  6345                           ;src/driver/adf4351.c: 262:     ctx->reg1.prescaler = (ctx->vco_freq>3600000)?1:0;
  6346  00400C  EE20 F006          	lfsr	2,6
  6347  004010  500D               	movf	adf4351_calc_vco_core_freq@ctx^0,w,c
  6348  004012  26D9               	addwf	fsr2l,f,c
  6349  004014  500E               	movf	(adf4351_calc_vco_core_freq@ctx+1)^0,w,c
  6350  004016  22DA               	addwfc	fsr2h,f,c
  6351  004018  EE10 F033          	lfsr	1,51
  6352  00401C  500D               	movf	adf4351_calc_vco_core_freq@ctx^0,w,c
  6353  00401E  26E1               	addwf	fsr1l,f,c
  6354  004020  500E               	movf	(adf4351_calc_vco_core_freq@ctx+1)^0,w,c
  6355  004022  22E2               	addwfc	fsr1h,f,c
  6356  004024  0E03               	movlw	3
  6357  004026  50E3               	movf	plusw1,w,c
  6358  004028  E10B               	bnz	u4941
  6359  00402A  0E81               	movlw	129
  6360  00402C  5CE6               	subwf	postinc1,w,c
  6361  00402E  0EEE               	movlw	238
  6362  004030  58E6               	subwfb	postinc1,w,c
  6363  004032  0E36               	movlw	54
  6364  004034  58E6               	subwfb	postinc1,w,c
  6365  004036  B0D8               	btfsc	status,0,c
  6366  004038  EF20  F020         	goto	u4941
  6367  00403C  EF23  F020         	goto	u4940
  6368  004040                     u4941:
  6369  004040  0E01               	movlw	1
  6370  004042  EF24  F020         	goto	u4950
  6371  004046                     u4940:
  6372  004046  0E00               	movlw	0
  6373  004048                     u4950:
  6374  004048  6EDF               	movwf	indf2,c
  6375  00404A                     
  6376                           ;src/driver/adf4351.c: 263:  ctx->reg4.divsel = div;
  6377  00404A  EE20 F021          	lfsr	2,33
  6378  00404E  500D               	movf	adf4351_calc_vco_core_freq@ctx^0,w,c
  6379  004050  26D9               	addwf	fsr2l,f,c
  6380  004052  500E               	movf	(adf4351_calc_vco_core_freq@ctx+1)^0,w,c
  6381  004054  22DA               	addwfc	fsr2h,f,c
  6382  004056  C017  FFDF         	movff	adf4351_calc_vco_core_freq@div,indf2
  6383  00405A                     l102:
  6384  00405A  0012               	return		;funcret
  6385  00405C                     __end_of_adf4351_calc_vco_core_freq:
  6386                           	opt callstack 0
  6387                           
  6388 ;; *************** function _adf4351_calc_rcnt_block *****************
  6389 ;; Defined at:
  6390 ;;		line 200 in file "src/driver/adf4351.c"
  6391 ;; Parameters:    Size  Location     Type
  6392 ;;  ctx             2   59[BANK0 ] PTR struct adf4351_ctx
  6393 ;;		 -> g_adf4351(55), 
  6394 ;; Auto vars:     Size  Location     Type
  6395 ;;  bscdiv          4   61[BANK0 ] unsigned long 
  6396 ;;  div             2   65[BANK0 ] int 
  6397 ;; Return value:  Size  Location     Type
  6398 ;;                  2   59[BANK0 ] int 
  6399 ;; Registers used:
  6400 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6401 ;; Tracked objects:
  6402 ;;		On entry : 0/0
  6403 ;;		On exit  : 0/0
  6404 ;;		Unchanged: 0/0
  6405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6406 ;;      Params:         0       2       0       0       0       0       0
  6407 ;;      Locals:         0       6       0       0       0       0       0
  6408 ;;      Temps:          0       0       0       0       0       0       0
  6409 ;;      Totals:         0       8       0       0       0       0       0
  6410 ;;Total ram usage:        8 bytes
  6411 ;; Hardware stack levels used:    1
  6412 ;; Hardware stack levels required when called:   10
  6413 ;; This function calls:
  6414 ;;		___awdiv
  6415 ;;		___lldiv
  6416 ;;		___llmod
  6417 ;;		_printf
  6418 ;; This function is called by:
  6419 ;;		_adf4351_set_freq
  6420 ;; This function uses a non-reentrant model
  6421 ;;
  6422                           
  6423                           	psect	text15
  6424  00205A                     __ptext15:
  6425                           	opt callstack 0
  6426  00205A                     _adf4351_calc_rcnt_block:
  6427                           	opt callstack 17
  6428  00205A                     
  6429                           ;src/driver/adf4351.c: 200: static int adf4351_calc_rcnt_block(adf4351_ctx* ctx);src/dri
      +                          ver/adf4351.c: 201: {;src/driver/adf4351.c: 202:  int div;;src/driver/adf4351.c: 203:   
      +                            u32 bscdiv;;src/driver/adf4351.c: 207:  div = ctx->ref / ctx->pfd;
  6430  00205A  0100               	movlb	0	; () banked
  6431  00205C  EE20 F02B          	lfsr	2,43
  6432  002060  51BB               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  6433  002062  26D9               	addwf	fsr2l,f,c
  6434  002064  51BC               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  6435  002066  22DA               	addwfc	fsr2h,f,c
  6436  002068  CFDE F023          	movff	postinc2,___lldiv@dividend
  6437  00206C  CFDE F024          	movff	postinc2,___lldiv@dividend+1
  6438  002070  CFDE F025          	movff	postinc2,___lldiv@dividend+2
  6439  002074  CFDE F026          	movff	postinc2,___lldiv@dividend+3
  6440  002078  EE20 F02F          	lfsr	2,47
  6441  00207C  51BB               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  6442  00207E  26D9               	addwf	fsr2l,f,c
  6443  002080  51BC               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  6444  002082  22DA               	addwfc	fsr2h,f,c
  6445  002084  CFDE F027          	movff	postinc2,___lldiv@divisor
  6446  002088  CFDE F028          	movff	postinc2,___lldiv@divisor+1
  6447  00208C  CFDE F029          	movff	postinc2,___lldiv@divisor+2
  6448  002090  CFDE F02A          	movff	postinc2,___lldiv@divisor+3
  6449  002094  EC89  F025         	call	___lldiv	;wreg free
  6450  002098  C023  F0C1         	movff	?___lldiv,adf4351_calc_rcnt_block@div
  6451  00209C  C024  F0C2         	movff	?___lldiv+1,adf4351_calc_rcnt_block@div+1
  6452                           
  6453                           ;src/driver/adf4351.c: 209:  if (ctx->ref % ctx->pfd) {
  6454  0020A0  0100               	movlb	0	; () banked
  6455  0020A2  EE20 F02B          	lfsr	2,43
  6456  0020A6  51BB               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  6457  0020A8  26D9               	addwf	fsr2l,f,c
  6458  0020AA  51BC               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  6459  0020AC  22DA               	addwfc	fsr2h,f,c
  6460  0020AE  CFDE F00D          	movff	postinc2,___llmod@dividend
  6461  0020B2  CFDE F00E          	movff	postinc2,___llmod@dividend+1
  6462  0020B6  CFDE F00F          	movff	postinc2,___llmod@dividend+2
  6463  0020BA  CFDE F010          	movff	postinc2,___llmod@dividend+3
  6464  0020BE  EE20 F02F          	lfsr	2,47
  6465  0020C2  51BB               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  6466  0020C4  26D9               	addwf	fsr2l,f,c
  6467  0020C6  51BC               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  6468  0020C8  22DA               	addwfc	fsr2h,f,c
  6469  0020CA  CFDE F011          	movff	postinc2,___llmod@divisor
  6470  0020CE  CFDE F012          	movff	postinc2,___llmod@divisor+1
  6471  0020D2  CFDE F013          	movff	postinc2,___llmod@divisor+2
  6472  0020D6  CFDE F014          	movff	postinc2,___llmod@divisor+3
  6473  0020DA  ECBF  F026         	call	___llmod	;wreg free
  6474  0020DE  500D               	movf	?___llmod^0,w,c
  6475  0020E0  100E               	iorwf	(?___llmod+1)^0,w,c
  6476  0020E2  100F               	iorwf	(?___llmod+2)^0,w,c
  6477  0020E4  1010               	iorwf	(?___llmod+3)^0,w,c
  6478  0020E6  B4D8               	btfsc	status,2,c
  6479  0020E8  EF78  F010         	goto	u7931
  6480  0020EC  EF7A  F010         	goto	u7930
  6481  0020F0                     u7931:
  6482  0020F0  EF9F  F010         	goto	l6197
  6483  0020F4                     u7930:
  6484  0020F4                     
  6485                           ;src/driver/adf4351.c: 210:   printf("ADF4351: Cannot reach PFD of %i kHz with REF of %i
      +                           kHz (not divideable).\n", ctx->pfd, ctx->ref);
  6486  0020F4  0EA1               	movlw	low STR_6
  6487  0020F6  0100               	movlb	0	; () banked
  6488  0020F8  6F97               	movwf	printf@fmt& (0+255),b
  6489  0020FA  0E7B               	movlw	high STR_6
  6490  0020FC  6F98               	movwf	(printf@fmt+1)& (0+255),b
  6491  0020FE  EE20 F02F          	lfsr	2,47
  6492  002102  51BB               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  6493  002104  26D9               	addwf	fsr2l,f,c
  6494  002106  51BC               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  6495  002108  22DA               	addwfc	fsr2h,f,c
  6496  00210A  CFDE F099          	movff	postinc2,?_printf+2
  6497  00210E  CFDE F09A          	movff	postinc2,?_printf+3
  6498  002112  CFDE F09B          	movff	postinc2,?_printf+4
  6499  002116  CFDE F09C          	movff	postinc2,?_printf+5
  6500  00211A  EE20 F02B          	lfsr	2,43
  6501  00211E  51BB               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  6502  002120  26D9               	addwf	fsr2l,f,c
  6503  002122  51BC               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  6504  002124  22DA               	addwfc	fsr2h,f,c
  6505  002126  CFDE F09D          	movff	postinc2,?_printf+6
  6506  00212A  CFDE F09E          	movff	postinc2,?_printf+7
  6507  00212E  CFDE F09F          	movff	postinc2,?_printf+8
  6508  002132  CFDE F0A0          	movff	postinc2,?_printf+9
  6509  002136  ECFF  F02B         	call	_printf	;wreg free
  6510  00213A  EF9E  F011         	goto	l93
  6511  00213E                     l6197:
  6512                           
  6513                           ;src/driver/adf4351.c: 214:  if (div >= 1024) {
  6514  00213E  0100               	movlb	0	; () banked
  6515  002140  BFC2               	btfsc	(adf4351_calc_rcnt_block@div+1)& (0+255),7,b
  6516  002142  EFAA  F010         	goto	u7941
  6517  002146  0E04               	movlw	4
  6518  002148  5DC2               	subwf	(adf4351_calc_rcnt_block@div+1)& (0+255),w,b
  6519  00214A  A0D8               	btfss	status,0,c
  6520  00214C  EFAA  F010         	goto	u7941
  6521  002150  EFAC  F010         	goto	u7940
  6522  002154                     u7941:
  6523  002154  EFD0  F010         	goto	l94
  6524  002158                     u7940:
  6525  002158                     
  6526                           ; BSR set to: 0
  6527                           ;src/driver/adf4351.c: 215:   printf("ADF4351: Cannot reach PFD of %i kHz with REF of %i
      +                           kHz (div too high).\n", ctx->pfd, ctx->ref);
  6528  002158  0EEB               	movlw	low STR_7
  6529  00215A  6F97               	movwf	printf@fmt& (0+255),b
  6530  00215C  0E7B               	movlw	high STR_7
  6531  00215E  6F98               	movwf	(printf@fmt+1)& (0+255),b
  6532  002160  EE20 F02F          	lfsr	2,47
  6533  002164  51BB               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  6534  002166  26D9               	addwf	fsr2l,f,c
  6535  002168  51BC               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  6536  00216A  22DA               	addwfc	fsr2h,f,c
  6537  00216C  CFDE F099          	movff	postinc2,?_printf+2
  6538  002170  CFDE F09A          	movff	postinc2,?_printf+3
  6539  002174  CFDE F09B          	movff	postinc2,?_printf+4
  6540  002178  CFDE F09C          	movff	postinc2,?_printf+5
  6541  00217C  EE20 F02B          	lfsr	2,43
  6542  002180  51BB               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  6543  002182  26D9               	addwf	fsr2l,f,c
  6544  002184  51BC               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  6545  002186  22DA               	addwfc	fsr2h,f,c
  6546  002188  CFDE F09D          	movff	postinc2,?_printf+6
  6547  00218C  CFDE F09E          	movff	postinc2,?_printf+7
  6548  002190  CFDE F09F          	movff	postinc2,?_printf+8
  6549  002194  CFDE F0A0          	movff	postinc2,?_printf+9
  6550  002198  ECFF  F02B         	call	_printf	;wreg free
  6551  00219C  EF9E  F011         	goto	l93
  6552  0021A0                     l94:
  6553                           
  6554                           ; BSR set to: 0
  6555                           ;src/driver/adf4351.c: 220:  if((div%2)==0) {
  6556  0021A0  B1C1               	btfsc	adf4351_calc_rcnt_block@div& (0+255),0,b
  6557  0021A2  EFD5  F010         	goto	u7951
  6558  0021A6  EFD7  F010         	goto	u7950
  6559  0021AA                     u7951:
  6560  0021AA  EFF6  F010         	goto	l6207
  6561  0021AE                     u7950:
  6562  0021AE                     
  6563                           ; BSR set to: 0
  6564                           ;src/driver/adf4351.c: 221:   ctx->reg2.rcnt = div/2;
  6565  0021AE  C0C1  F00D         	movff	adf4351_calc_rcnt_block@div,___awdiv@dividend
  6566  0021B2  C0C2  F00E         	movff	adf4351_calc_rcnt_block@div+1,___awdiv@dividend+1
  6567  0021B6  0E00               	movlw	0
  6568  0021B8  6E10               	movwf	(___awdiv@divisor+1)^0,c
  6569  0021BA  0E02               	movlw	2
  6570  0021BC  6E0F               	movwf	___awdiv@divisor^0,c
  6571  0021BE  EC6B  F023         	call	___awdiv	;wreg free
  6572  0021C2  0100               	movlb	0	; () banked
  6573  0021C4  EE20 F00F          	lfsr	2,15
  6574  0021C8  51BB               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  6575  0021CA  26D9               	addwf	fsr2l,f,c
  6576  0021CC  51BC               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  6577  0021CE  22DA               	addwfc	fsr2h,f,c
  6578  0021D0  C00D  FFDE         	movff	?___awdiv,postinc2
  6579  0021D4  C00E  FFDD         	movff	?___awdiv+1,postdec2
  6580  0021D8                     
  6581                           ; BSR set to: 0
  6582                           ;src/driver/adf4351.c: 222:   ctx->reg2.refdiv = 1;
  6583  0021D8  EE20 F00E          	lfsr	2,14
  6584  0021DC  51BB               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  6585  0021DE  26D9               	addwf	fsr2l,f,c
  6586  0021E0  51BC               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  6587  0021E2  22DA               	addwfc	fsr2h,f,c
  6588  0021E4  0E01               	movlw	1
  6589  0021E6  6EDF               	movwf	indf2,c
  6590                           
  6591                           ;src/driver/adf4351.c: 223:  } else {
  6592  0021E8  EF08  F011         	goto	l96
  6593  0021EC                     l6207:
  6594                           
  6595                           ; BSR set to: 0
  6596                           ;src/driver/adf4351.c: 224:   ctx->reg2.rcnt = div;
  6597  0021EC  EE20 F00F          	lfsr	2,15
  6598  0021F0  51BB               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  6599  0021F2  26D9               	addwf	fsr2l,f,c
  6600  0021F4  51BC               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  6601  0021F6  22DA               	addwfc	fsr2h,f,c
  6602  0021F8  C0C1  FFDE         	movff	adf4351_calc_rcnt_block@div,postinc2
  6603  0021FC  C0C2  FFDD         	movff	adf4351_calc_rcnt_block@div+1,postdec2
  6604                           
  6605                           ;src/driver/adf4351.c: 225:   ctx->reg2.refdiv = 0;
  6606  002200  EE20 F00E          	lfsr	2,14
  6607  002204  51BB               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  6608  002206  26D9               	addwf	fsr2l,f,c
  6609  002208  51BC               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  6610  00220A  22DA               	addwfc	fsr2h,f,c
  6611  00220C  0E00               	movlw	0
  6612  00220E  6EDF               	movwf	indf2,c
  6613  002210                     l96:
  6614                           
  6615                           ; BSR set to: 0
  6616                           ;src/driver/adf4351.c: 227:  ctx->reg3.bscm = 0;
  6617  002210  EE20 F019          	lfsr	2,25
  6618  002214  51BB               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  6619  002216  26D9               	addwf	fsr2l,f,c
  6620  002218  51BC               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  6621  00221A  22DA               	addwfc	fsr2h,f,c
  6622  00221C  0E00               	movlw	0
  6623  00221E  6EDF               	movwf	indf2,c
  6624  002220                     
  6625                           ; BSR set to: 0
  6626                           ;src/driver/adf4351.c: 228:  bscdiv = ((ctx->pfd-1) / 125) + 1;
  6627  002220  EE20 F02F          	lfsr	2,47
  6628  002224  51BB               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  6629  002226  26D9               	addwf	fsr2l,f,c
  6630  002228  51BC               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  6631  00222A  22DA               	addwfc	fsr2h,f,c
  6632  00222C  0EFF               	movlw	255
  6633  00222E  24DE               	addwf	postinc2,w,c
  6634  002230  6E23               	movwf	___lldiv@dividend^0,c
  6635  002232  0EFF               	movlw	255
  6636  002234  20DE               	addwfc	postinc2,w,c
  6637  002236  6E24               	movwf	(___lldiv@dividend+1)^0,c
  6638  002238  0EFF               	movlw	255
  6639  00223A  20DE               	addwfc	postinc2,w,c
  6640  00223C  6E25               	movwf	(___lldiv@dividend+2)^0,c
  6641  00223E  0EFF               	movlw	255
  6642  002240  20DE               	addwfc	postinc2,w,c
  6643  002242  6E26               	movwf	(___lldiv@dividend+3)^0,c
  6644  002244  0E7D               	movlw	125
  6645  002246  6E27               	movwf	___lldiv@divisor^0,c
  6646  002248  0E00               	movlw	0
  6647  00224A  6E28               	movwf	(___lldiv@divisor+1)^0,c
  6648  00224C  0E00               	movlw	0
  6649  00224E  6E29               	movwf	(___lldiv@divisor+2)^0,c
  6650  002250  0E00               	movlw	0
  6651  002252  6E2A               	movwf	(___lldiv@divisor+3)^0,c
  6652  002254  EC89  F025         	call	___lldiv	;wreg free
  6653  002258  0E01               	movlw	1
  6654  00225A  2423               	addwf	?___lldiv^0,w,c
  6655  00225C  0100               	movlb	0	; () banked
  6656  00225E  6FBD               	movwf	adf4351_calc_rcnt_block@bscdiv& (0+255),b
  6657  002260  0E00               	movlw	0
  6658  002262  2024               	addwfc	(?___lldiv+1)^0,w,c
  6659  002264  6FBE               	movwf	(adf4351_calc_rcnt_block@bscdiv+1)& (0+255),b
  6660  002266  0E00               	movlw	0
  6661  002268  2025               	addwfc	(?___lldiv+2)^0,w,c
  6662  00226A  6FBF               	movwf	(adf4351_calc_rcnt_block@bscdiv+2)& (0+255),b
  6663  00226C  0E00               	movlw	0
  6664  00226E  2026               	addwfc	(?___lldiv+3)^0,w,c
  6665  002270  6FC0               	movwf	(adf4351_calc_rcnt_block@bscdiv+3)& (0+255),b
  6666  002272                     
  6667                           ; BSR set to: 0
  6668                           ;src/driver/adf4351.c: 230:  if (bscdiv > 255) {
  6669  002272  51C0               	movf	(adf4351_calc_rcnt_block@bscdiv+3)& (0+255),w,b
  6670  002274  11BF               	iorwf	(adf4351_calc_rcnt_block@bscdiv+2)& (0+255),w,b
  6671  002276  E108               	bnz	u7960
  6672  002278  05BE               	decf	(adf4351_calc_rcnt_block@bscdiv+1)& (0+255),w,b
  6673  00227A  A0D8               	btfss	status,0,c
  6674  00227C  EF42  F011         	goto	u7961
  6675  002280  EF44  F011         	goto	u7960
  6676  002284                     u7961:
  6677  002284  EF75  F011         	goto	l6217
  6678  002288                     u7960:
  6679  002288                     
  6680                           ; BSR set to: 0
  6681                           ;src/driver/adf4351.c: 231:   ctx->reg3.bscm = 1;
  6682  002288  EE20 F019          	lfsr	2,25
  6683  00228C  51BB               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  6684  00228E  26D9               	addwf	fsr2l,f,c
  6685  002290  51BC               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  6686  002292  22DA               	addwfc	fsr2h,f,c
  6687  002294  0E01               	movlw	1
  6688  002296  6EDF               	movwf	indf2,c
  6689  002298                     
  6690                           ; BSR set to: 0
  6691                           ;src/driver/adf4351.c: 232:   bscdiv = ((ctx->pfd-1) / 250) + 1;
  6692  002298  EE20 F02F          	lfsr	2,47
  6693  00229C  51BB               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  6694  00229E  26D9               	addwf	fsr2l,f,c
  6695  0022A0  51BC               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  6696  0022A2  22DA               	addwfc	fsr2h,f,c
  6697  0022A4  0EFF               	movlw	255
  6698  0022A6  24DE               	addwf	postinc2,w,c
  6699  0022A8  6E23               	movwf	___lldiv@dividend^0,c
  6700  0022AA  0EFF               	movlw	255
  6701  0022AC  20DE               	addwfc	postinc2,w,c
  6702  0022AE  6E24               	movwf	(___lldiv@dividend+1)^0,c
  6703  0022B0  0EFF               	movlw	255
  6704  0022B2  20DE               	addwfc	postinc2,w,c
  6705  0022B4  6E25               	movwf	(___lldiv@dividend+2)^0,c
  6706  0022B6  0EFF               	movlw	255
  6707  0022B8  20DE               	addwfc	postinc2,w,c
  6708  0022BA  6E26               	movwf	(___lldiv@dividend+3)^0,c
  6709  0022BC  0EFA               	movlw	250
  6710  0022BE  6E27               	movwf	___lldiv@divisor^0,c
  6711  0022C0  0E00               	movlw	0
  6712  0022C2  6E28               	movwf	(___lldiv@divisor+1)^0,c
  6713  0022C4  0E00               	movlw	0
  6714  0022C6  6E29               	movwf	(___lldiv@divisor+2)^0,c
  6715  0022C8  0E00               	movlw	0
  6716  0022CA  6E2A               	movwf	(___lldiv@divisor+3)^0,c
  6717  0022CC  EC89  F025         	call	___lldiv	;wreg free
  6718  0022D0  0E01               	movlw	1
  6719  0022D2  2423               	addwf	?___lldiv^0,w,c
  6720  0022D4  0100               	movlb	0	; () banked
  6721  0022D6  6FBD               	movwf	adf4351_calc_rcnt_block@bscdiv& (0+255),b
  6722  0022D8  0E00               	movlw	0
  6723  0022DA  2024               	addwfc	(?___lldiv+1)^0,w,c
  6724  0022DC  6FBE               	movwf	(adf4351_calc_rcnt_block@bscdiv+1)& (0+255),b
  6725  0022DE  0E00               	movlw	0
  6726  0022E0  2025               	addwfc	(?___lldiv+2)^0,w,c
  6727  0022E2  6FBF               	movwf	(adf4351_calc_rcnt_block@bscdiv+2)& (0+255),b
  6728  0022E4  0E00               	movlw	0
  6729  0022E6  2026               	addwfc	(?___lldiv+3)^0,w,c
  6730  0022E8  6FC0               	movwf	(adf4351_calc_rcnt_block@bscdiv+3)& (0+255),b
  6731  0022EA                     l6217:
  6732                           
  6733                           ; BSR set to: 0
  6734                           ;src/driver/adf4351.c: 235:  if (bscdiv > 255) {
  6735  0022EA  51C0               	movf	(adf4351_calc_rcnt_block@bscdiv+3)& (0+255),w,b
  6736  0022EC  11BF               	iorwf	(adf4351_calc_rcnt_block@bscdiv+2)& (0+255),w,b
  6737  0022EE  E108               	bnz	u7970
  6738  0022F0  05BE               	decf	(adf4351_calc_rcnt_block@bscdiv+1)& (0+255),w,b
  6739  0022F2  A0D8               	btfss	status,0,c
  6740  0022F4  EF7E  F011         	goto	u7971
  6741  0022F8  EF80  F011         	goto	u7970
  6742  0022FC                     u7971:
  6743  0022FC  EF96  F011         	goto	l6223
  6744  002300                     u7970:
  6745  002300                     
  6746                           ; BSR set to: 0
  6747                           ;src/driver/adf4351.c: 236:   printf("ADF4351: Cannot use pfd of %lu kHz (bscdiv too hig
      +                          h).\n", ctx->pfd);
  6748  002300  0EAD               	movlw	low STR_8
  6749  002302  6F97               	movwf	printf@fmt& (0+255),b
  6750  002304  0E7C               	movlw	high STR_8
  6751  002306  6F98               	movwf	(printf@fmt+1)& (0+255),b
  6752  002308  EE20 F02F          	lfsr	2,47
  6753  00230C  51BB               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  6754  00230E  26D9               	addwf	fsr2l,f,c
  6755  002310  51BC               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  6756  002312  22DA               	addwfc	fsr2h,f,c
  6757  002314  CFDE F099          	movff	postinc2,?_printf+2
  6758  002318  CFDE F09A          	movff	postinc2,?_printf+3
  6759  00231C  CFDE F09B          	movff	postinc2,?_printf+4
  6760  002320  CFDE F09C          	movff	postinc2,?_printf+5
  6761  002324  ECFF  F02B         	call	_printf	;wreg free
  6762  002328  EF9E  F011         	goto	l93
  6763  00232C                     l6223:
  6764                           
  6765                           ; BSR set to: 0
  6766                           ;src/driver/adf4351.c: 240:     ctx->reg4.bsclkdiv = bscdiv;
  6767  00232C  EE20 F022          	lfsr	2,34
  6768  002330  51BB               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  6769  002332  26D9               	addwf	fsr2l,f,c
  6770  002334  51BC               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  6771  002336  22DA               	addwfc	fsr2h,f,c
  6772  002338  C0BD  FFDF         	movff	adf4351_calc_rcnt_block@bscdiv,indf2
  6773  00233C                     l93:
  6774  00233C  0012               	return		;funcret
  6775  00233E                     __end_of_adf4351_calc_rcnt_block:
  6776                           	opt callstack 0
  6777                           
  6778 ;; *************** function _adf4351_calc_counters *****************
  6779 ;; Defined at:
  6780 ;;		line 153 in file "src/driver/adf4351.c"
  6781 ;; Parameters:    Size  Location     Type
  6782 ;;  ctx             2   59[BANK0 ] PTR struct adf4351_ctx
  6783 ;;		 -> g_adf4351(55), 
  6784 ;; Auto vars:     Size  Location     Type
  6785 ;;  div             4   65[BANK0 ] unsigned long 
  6786 ;;  frac            4   77[BANK0 ] unsigned long 
  6787 ;;  mod             4   73[BANK0 ] unsigned long 
  6788 ;;  integer         4   69[BANK0 ] unsigned long 
  6789 ;;  remainder       4   61[BANK0 ] unsigned long 
  6790 ;; Return value:  Size  Location     Type
  6791 ;;                  2   59[BANK0 ] int 
  6792 ;; Registers used:
  6793 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6794 ;; Tracked objects:
  6795 ;;		On entry : 0/0
  6796 ;;		On exit  : 0/0
  6797 ;;		Unchanged: 0/0
  6798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6799 ;;      Params:         0       2       0       0       0       0       0
  6800 ;;      Locals:         0      20       0       0       0       0       0
  6801 ;;      Temps:          0       0       0       0       0       0       0
  6802 ;;      Totals:         0      22       0       0       0       0       0
  6803 ;;Total ram usage:       22 bytes
  6804 ;; Hardware stack levels used:    1
  6805 ;; Hardware stack levels required when called:   10
  6806 ;; This function calls:
  6807 ;;		___lldiv
  6808 ;;		___llmod
  6809 ;;		_gcd
  6810 ;;		_printf
  6811 ;; This function is called by:
  6812 ;;		_adf4351_set_freq
  6813 ;; This function uses a non-reentrant model
  6814 ;;
  6815                           
  6816                           	psect	text16
  6817  001D00                     __ptext16:
  6818                           	opt callstack 0
  6819  001D00                     _adf4351_calc_counters:
  6820                           	opt callstack 17
  6821  001D00                     
  6822                           ;src/driver/adf4351.c: 153: static int adf4351_calc_counters(adf4351_ctx* ctx);src/drive
      +                          r/adf4351.c: 154: {;src/driver/adf4351.c: 155:  u32 integer, frac, mod, remainder;;src/d
      +                          river/adf4351.c: 158:  integer = ctx->vco_freq / ctx->pfd;
  6823  001D00  0100               	movlb	0	; () banked
  6824  001D02  EE20 F033          	lfsr	2,51
  6825  001D06  51BB               	movf	adf4351_calc_counters@ctx& (0+255),w,b
  6826  001D08  26D9               	addwf	fsr2l,f,c
  6827  001D0A  51BC               	movf	(adf4351_calc_counters@ctx+1)& (0+255),w,b
  6828  001D0C  22DA               	addwfc	fsr2h,f,c
  6829  001D0E  CFDE F023          	movff	postinc2,___lldiv@dividend
  6830  001D12  CFDE F024          	movff	postinc2,___lldiv@dividend+1
  6831  001D16  CFDE F025          	movff	postinc2,___lldiv@dividend+2
  6832  001D1A  CFDE F026          	movff	postinc2,___lldiv@dividend+3
  6833  001D1E  EE20 F02F          	lfsr	2,47
  6834  001D22  51BB               	movf	adf4351_calc_counters@ctx& (0+255),w,b
  6835  001D24  26D9               	addwf	fsr2l,f,c
  6836  001D26  51BC               	movf	(adf4351_calc_counters@ctx+1)& (0+255),w,b
  6837  001D28  22DA               	addwfc	fsr2h,f,c
  6838  001D2A  CFDE F027          	movff	postinc2,___lldiv@divisor
  6839  001D2E  CFDE F028          	movff	postinc2,___lldiv@divisor+1
  6840  001D32  CFDE F029          	movff	postinc2,___lldiv@divisor+2
  6841  001D36  CFDE F02A          	movff	postinc2,___lldiv@divisor+3
  6842  001D3A  EC89  F025         	call	___lldiv	;wreg free
  6843  001D3E  C023  F0C5         	movff	?___lldiv,adf4351_calc_counters@integer
  6844  001D42  C024  F0C6         	movff	?___lldiv+1,adf4351_calc_counters@integer+1
  6845  001D46  C025  F0C7         	movff	?___lldiv+2,adf4351_calc_counters@integer+2
  6846  001D4A  C026  F0C8         	movff	?___lldiv+3,adf4351_calc_counters@integer+3
  6847                           
  6848                           ;src/driver/adf4351.c: 159:  remainder = ctx->vco_freq % ctx->pfd;
  6849  001D4E  0100               	movlb	0	; () banked
  6850  001D50  EE20 F033          	lfsr	2,51
  6851  001D54  51BB               	movf	adf4351_calc_counters@ctx& (0+255),w,b
  6852  001D56  26D9               	addwf	fsr2l,f,c
  6853  001D58  51BC               	movf	(adf4351_calc_counters@ctx+1)& (0+255),w,b
  6854  001D5A  22DA               	addwfc	fsr2h,f,c
  6855  001D5C  CFDE F00D          	movff	postinc2,___llmod@dividend
  6856  001D60  CFDE F00E          	movff	postinc2,___llmod@dividend+1
  6857  001D64  CFDE F00F          	movff	postinc2,___llmod@dividend+2
  6858  001D68  CFDE F010          	movff	postinc2,___llmod@dividend+3
  6859  001D6C  EE20 F02F          	lfsr	2,47
  6860  001D70  51BB               	movf	adf4351_calc_counters@ctx& (0+255),w,b
  6861  001D72  26D9               	addwf	fsr2l,f,c
  6862  001D74  51BC               	movf	(adf4351_calc_counters@ctx+1)& (0+255),w,b
  6863  001D76  22DA               	addwfc	fsr2h,f,c
  6864  001D78  CFDE F011          	movff	postinc2,___llmod@divisor
  6865  001D7C  CFDE F012          	movff	postinc2,___llmod@divisor+1
  6866  001D80  CFDE F013          	movff	postinc2,___llmod@divisor+2
  6867  001D84  CFDE F014          	movff	postinc2,___llmod@divisor+3
  6868  001D88  ECBF  F026         	call	___llmod	;wreg free
  6869  001D8C  C00D  F0BD         	movff	?___llmod,adf4351_calc_counters@remainder
  6870  001D90  C00E  F0BE         	movff	?___llmod+1,adf4351_calc_counters@remainder+1
  6871  001D94  C00F  F0BF         	movff	?___llmod+2,adf4351_calc_counters@remainder+2
  6872  001D98  C010  F0C0         	movff	?___llmod+3,adf4351_calc_counters@remainder+3
  6873  001D9C                     
  6874                           ;src/driver/adf4351.c: 161:     printf("ADF4351: vco_freq=%li => integer=%li remainder=%
      +                          li pfd=%li\r\n", ctx->vco_freq, integer, remainder, ctx->pfd);
  6875  001D9C  0E70               	movlw	low STR_2
  6876  001D9E  0100               	movlb	0	; () banked
  6877  001DA0  6F97               	movwf	printf@fmt& (0+255),b
  6878  001DA2  0E7C               	movlw	high STR_2
  6879  001DA4  6F98               	movwf	(printf@fmt+1)& (0+255),b
  6880  001DA6  EE20 F033          	lfsr	2,51
  6881  001DAA  51BB               	movf	adf4351_calc_counters@ctx& (0+255),w,b
  6882  001DAC  26D9               	addwf	fsr2l,f,c
  6883  001DAE  51BC               	movf	(adf4351_calc_counters@ctx+1)& (0+255),w,b
  6884  001DB0  22DA               	addwfc	fsr2h,f,c
  6885  001DB2  CFDE F099          	movff	postinc2,?_printf+2
  6886  001DB6  CFDE F09A          	movff	postinc2,?_printf+3
  6887  001DBA  CFDE F09B          	movff	postinc2,?_printf+4
  6888  001DBE  CFDE F09C          	movff	postinc2,?_printf+5
  6889  001DC2  C0C5  F09D         	movff	adf4351_calc_counters@integer,?_printf+6
  6890  001DC6  C0C6  F09E         	movff	adf4351_calc_counters@integer+1,?_printf+7
  6891  001DCA  C0C7  F09F         	movff	adf4351_calc_counters@integer+2,?_printf+8
  6892  001DCE  C0C8  F0A0         	movff	adf4351_calc_counters@integer+3,?_printf+9
  6893  001DD2  C0BD  F0A1         	movff	adf4351_calc_counters@remainder,?_printf+10
  6894  001DD6  C0BE  F0A2         	movff	adf4351_calc_counters@remainder+1,?_printf+11
  6895  001DDA  C0BF  F0A3         	movff	adf4351_calc_counters@remainder+2,?_printf+12
  6896  001DDE  C0C0  F0A4         	movff	adf4351_calc_counters@remainder+3,?_printf+13
  6897  001DE2  EE20 F02F          	lfsr	2,47
  6898  001DE6  51BB               	movf	adf4351_calc_counters@ctx& (0+255),w,b
  6899  001DE8  26D9               	addwf	fsr2l,f,c
  6900  001DEA  51BC               	movf	(adf4351_calc_counters@ctx+1)& (0+255),w,b
  6901  001DEC  22DA               	addwfc	fsr2h,f,c
  6902  001DEE  CFDE F0A5          	movff	postinc2,?_printf+14
  6903  001DF2  CFDE F0A6          	movff	postinc2,?_printf+15
  6904  001DF6  CFDE F0A7          	movff	postinc2,?_printf+16
  6905  001DFA  CFDE F0A8          	movff	postinc2,?_printf+17
  6906  001DFE  ECFF  F02B         	call	_printf	;wreg free
  6907  001E02                     
  6908                           ;src/driver/adf4351.c: 164:  if ((integer < 23) || (integer > 65535))
  6909  001E02  0100               	movlb	0	; () banked
  6910  001E04  51C8               	movf	(adf4351_calc_counters@integer+3)& (0+255),w,b
  6911  001E06  11C7               	iorwf	(adf4351_calc_counters@integer+2)& (0+255),w,b
  6912  001E08  11C6               	iorwf	(adf4351_calc_counters@integer+1)& (0+255),w,b
  6913  001E0A  E109               	bnz	u7980
  6914  001E0C  0E17               	movlw	23
  6915  001E0E  5DC5               	subwf	adf4351_calc_counters@integer& (0+255),w,b
  6916  001E10  A0D8               	btfss	status,0,c
  6917  001E12  EF0D  F00F         	goto	u7981
  6918  001E16  EF0F  F00F         	goto	u7980
  6919  001E1A                     u7981:
  6920  001E1A  EF2C  F010         	goto	l84
  6921  001E1E                     u7980:
  6922  001E1E                     
  6923                           ; BSR set to: 0
  6924  001E1E  51C8               	movf	(adf4351_calc_counters@integer+3)& (0+255),w,b
  6925  001E20  E108               	bnz	u7990
  6926  001E22  05C7               	decf	(adf4351_calc_counters@integer+2)& (0+255),w,b
  6927  001E24  A0D8               	btfss	status,0,c
  6928  001E26  EF17  F00F         	goto	u7991
  6929  001E2A  EF19  F00F         	goto	u7990
  6930  001E2E                     u7991:
  6931  001E2E  EF1B  F00F         	goto	l81
  6932  001E32                     u7990:
  6933  001E32  EF2C  F010         	goto	l84
  6934  001E36                     l81:
  6935                           
  6936                           ; BSR set to: 0
  6937                           ;src/driver/adf4351.c: 167:  frac = remainder;
  6938  001E36  C0BD  F0CD         	movff	adf4351_calc_counters@remainder,adf4351_calc_counters@frac
  6939  001E3A  C0BE  F0CE         	movff	adf4351_calc_counters@remainder+1,adf4351_calc_counters@frac+1
  6940  001E3E  C0BF  F0CF         	movff	adf4351_calc_counters@remainder+2,adf4351_calc_counters@frac+2
  6941  001E42  C0C0  F0D0         	movff	adf4351_calc_counters@remainder+3,adf4351_calc_counters@frac+3
  6942  001E46                     
  6943                           ; BSR set to: 0
  6944                           ;src/driver/adf4351.c: 168:  mod = ctx->pfd;
  6945  001E46  EE20 F02F          	lfsr	2,47
  6946  001E4A  51BB               	movf	adf4351_calc_counters@ctx& (0+255),w,b
  6947  001E4C  26D9               	addwf	fsr2l,f,c
  6948  001E4E  51BC               	movf	(adf4351_calc_counters@ctx+1)& (0+255),w,b
  6949  001E50  22DA               	addwfc	fsr2h,f,c
  6950  001E52  CFDE F0C9          	movff	postinc2,adf4351_calc_counters@mod
  6951  001E56  CFDE F0CA          	movff	postinc2,adf4351_calc_counters@mod+1
  6952  001E5A  CFDE F0CB          	movff	postinc2,adf4351_calc_counters@mod+2
  6953  001E5E  CFDE F0CC          	movff	postinc2,adf4351_calc_counters@mod+3
  6954  001E62                     
  6955                           ; BSR set to: 0
  6956                           ;src/driver/adf4351.c: 170:     printf("ADF4351 start: frac=%li mod=%li\r\n", frac, mod)
      +                          ;
  6957  001E62  0E66               	movlw	low STR_3
  6958  001E64  6F97               	movwf	printf@fmt& (0+255),b
  6959  001E66  0E7D               	movlw	high STR_3
  6960  001E68  6F98               	movwf	(printf@fmt+1)& (0+255),b
  6961  001E6A  C0CD  F099         	movff	adf4351_calc_counters@frac,?_printf+2
  6962  001E6E  C0CE  F09A         	movff	adf4351_calc_counters@frac+1,?_printf+3
  6963  001E72  C0CF  F09B         	movff	adf4351_calc_counters@frac+2,?_printf+4
  6964  001E76  C0D0  F09C         	movff	adf4351_calc_counters@frac+3,?_printf+5
  6965  001E7A  C0C9  F09D         	movff	adf4351_calc_counters@mod,?_printf+6
  6966  001E7E  C0CA  F09E         	movff	adf4351_calc_counters@mod+1,?_printf+7
  6967  001E82  C0CB  F09F         	movff	adf4351_calc_counters@mod+2,?_printf+8
  6968  001E86  C0CC  F0A0         	movff	adf4351_calc_counters@mod+3,?_printf+9
  6969  001E8A  ECFF  F02B         	call	_printf	;wreg free
  6970                           
  6971                           ;src/driver/adf4351.c: 172:  while (mod >= 4096) {
  6972  001E8E  EF53  F00F         	goto	l6241
  6973  001E92                     l6239:
  6974                           
  6975                           ; BSR set to: 0
  6976                           ;src/driver/adf4351.c: 173:   frac /= 2;
  6977  001E92  90D8               	bcf	status,0,c
  6978  001E94  33D0               	rrcf	(adf4351_calc_counters@frac+3)& (0+255),f,b
  6979  001E96  33CF               	rrcf	(adf4351_calc_counters@frac+2)& (0+255),f,b
  6980  001E98  33CE               	rrcf	(adf4351_calc_counters@frac+1)& (0+255),f,b
  6981  001E9A  33CD               	rrcf	adf4351_calc_counters@frac& (0+255),f,b
  6982                           
  6983                           ;src/driver/adf4351.c: 174:   mod /= 2;
  6984  001E9C  90D8               	bcf	status,0,c
  6985  001E9E  33CC               	rrcf	(adf4351_calc_counters@mod+3)& (0+255),f,b
  6986  001EA0  33CB               	rrcf	(adf4351_calc_counters@mod+2)& (0+255),f,b
  6987  001EA2  33CA               	rrcf	(adf4351_calc_counters@mod+1)& (0+255),f,b
  6988  001EA4  33C9               	rrcf	adf4351_calc_counters@mod& (0+255),f,b
  6989  001EA6                     l6241:
  6990                           
  6991                           ;src/driver/adf4351.c: 172:  while (mod >= 4096) {
  6992  001EA6  0100               	movlb	0	; () banked
  6993  001EA8  51CC               	movf	(adf4351_calc_counters@mod+3)& (0+255),w,b
  6994  001EAA  11CB               	iorwf	(adf4351_calc_counters@mod+2)& (0+255),w,b
  6995  001EAC  E107               	bnz	u8001
  6996  001EAE  0E10               	movlw	16
  6997  001EB0  5DCA               	subwf	(adf4351_calc_counters@mod+1)& (0+255),w,b
  6998  001EB2  B0D8               	btfsc	status,0,c
  6999  001EB4  EF5E  F00F         	goto	u8001
  7000  001EB8  EF60  F00F         	goto	u8000
  7001  001EBC                     u8001:
  7002  001EBC  EF49  F00F         	goto	l6239
  7003  001EC0                     u8000:
  7004  001EC0                     
  7005                           ; BSR set to: 0
  7006                           ;src/driver/adf4351.c: 177:     printf("ADF4351 pre: frac=%li mod=%li\r\n", frac, mod);
  7007  001EC0  0E0D               	movlw	low STR_4
  7008  001EC2  6F97               	movwf	printf@fmt& (0+255),b
  7009  001EC4  0E7E               	movlw	high STR_4
  7010  001EC6  6F98               	movwf	(printf@fmt+1)& (0+255),b
  7011  001EC8  C0CD  F099         	movff	adf4351_calc_counters@frac,?_printf+2
  7012  001ECC  C0CE  F09A         	movff	adf4351_calc_counters@frac+1,?_printf+3
  7013  001ED0  C0CF  F09B         	movff	adf4351_calc_counters@frac+2,?_printf+4
  7014  001ED4  C0D0  F09C         	movff	adf4351_calc_counters@frac+3,?_printf+5
  7015  001ED8  C0C9  F09D         	movff	adf4351_calc_counters@mod,?_printf+6
  7016  001EDC  C0CA  F09E         	movff	adf4351_calc_counters@mod+1,?_printf+7
  7017  001EE0  C0CB  F09F         	movff	adf4351_calc_counters@mod+2,?_printf+8
  7018  001EE4  C0CC  F0A0         	movff	adf4351_calc_counters@mod+3,?_printf+9
  7019  001EE8  ECFF  F02B         	call	_printf	;wreg free
  7020  001EEC                     
  7021                           ;src/driver/adf4351.c: 179:  if(frac) {
  7022  001EEC  0100               	movlb	0	; () banked
  7023  001EEE  51CD               	movf	adf4351_calc_counters@frac& (0+255),w,b
  7024  001EF0  11CE               	iorwf	(adf4351_calc_counters@frac+1)& (0+255),w,b
  7025  001EF2  11CF               	iorwf	(adf4351_calc_counters@frac+2)& (0+255),w,b
  7026  001EF4  11D0               	iorwf	(adf4351_calc_counters@frac+3)& (0+255),w,b
  7027  001EF6  B4D8               	btfsc	status,2,c
  7028  001EF8  EF80  F00F         	goto	u8011
  7029  001EFC  EF82  F00F         	goto	u8010
  7030  001F00                     u8011:
  7031  001F00  EFD2  F00F         	goto	l6249
  7032  001F04                     u8010:
  7033  001F04                     
  7034                           ; BSR set to: 0
  7035                           ;src/driver/adf4351.c: 181:   u32 div = gcd(mod, frac);
  7036  001F04  C0C9  F016         	movff	adf4351_calc_counters@mod,gcd@a
  7037  001F08  C0CA  F017         	movff	adf4351_calc_counters@mod+1,gcd@a+1
  7038  001F0C  C0CB  F018         	movff	adf4351_calc_counters@mod+2,gcd@a+2
  7039  001F10  C0CC  F019         	movff	adf4351_calc_counters@mod+3,gcd@a+3
  7040  001F14  C0CD  F01A         	movff	adf4351_calc_counters@frac,gcd@b
  7041  001F18  C0CE  F01B         	movff	adf4351_calc_counters@frac+1,gcd@b+1
  7042  001F1C  C0CF  F01C         	movff	adf4351_calc_counters@frac+2,gcd@b+2
  7043  001F20  C0D0  F01D         	movff	adf4351_calc_counters@frac+3,gcd@b+3
  7044  001F24  ECBA  F021         	call	_gcd	;wreg free
  7045  001F28  C016  F0C1         	movff	?_gcd,adf4351_calc_counters@div
  7046  001F2C  C017  F0C2         	movff	?_gcd+1,adf4351_calc_counters@div+1
  7047  001F30  C018  F0C3         	movff	?_gcd+2,adf4351_calc_counters@div+2
  7048  001F34  C019  F0C4         	movff	?_gcd+3,adf4351_calc_counters@div+3
  7049                           
  7050                           ;src/driver/adf4351.c: 182:   frac /= div;
  7051  001F38  C0CD  F023         	movff	adf4351_calc_counters@frac,___lldiv@dividend
  7052  001F3C  C0CE  F024         	movff	adf4351_calc_counters@frac+1,___lldiv@dividend+1
  7053  001F40  C0CF  F025         	movff	adf4351_calc_counters@frac+2,___lldiv@dividend+2
  7054  001F44  C0D0  F026         	movff	adf4351_calc_counters@frac+3,___lldiv@dividend+3
  7055  001F48  C0C1  F027         	movff	adf4351_calc_counters@div,___lldiv@divisor
  7056  001F4C  C0C2  F028         	movff	adf4351_calc_counters@div+1,___lldiv@divisor+1
  7057  001F50  C0C3  F029         	movff	adf4351_calc_counters@div+2,___lldiv@divisor+2
  7058  001F54  C0C4  F02A         	movff	adf4351_calc_counters@div+3,___lldiv@divisor+3
  7059  001F58  EC89  F025         	call	___lldiv	;wreg free
  7060  001F5C  C023  F0CD         	movff	?___lldiv,adf4351_calc_counters@frac
  7061  001F60  C024  F0CE         	movff	?___lldiv+1,adf4351_calc_counters@frac+1
  7062  001F64  C025  F0CF         	movff	?___lldiv+2,adf4351_calc_counters@frac+2
  7063  001F68  C026  F0D0         	movff	?___lldiv+3,adf4351_calc_counters@frac+3
  7064                           
  7065                           ;src/driver/adf4351.c: 183:   mod /= div;
  7066  001F6C  C0C9  F023         	movff	adf4351_calc_counters@mod,___lldiv@dividend
  7067  001F70  C0CA  F024         	movff	adf4351_calc_counters@mod+1,___lldiv@dividend+1
  7068  001F74  C0CB  F025         	movff	adf4351_calc_counters@mod+2,___lldiv@dividend+2
  7069  001F78  C0CC  F026         	movff	adf4351_calc_counters@mod+3,___lldiv@dividend+3
  7070  001F7C  C0C1  F027         	movff	adf4351_calc_counters@div,___lldiv@divisor
  7071  001F80  C0C2  F028         	movff	adf4351_calc_counters@div+1,___lldiv@divisor+1
  7072  001F84  C0C3  F029         	movff	adf4351_calc_counters@div+2,___lldiv@divisor+2
  7073  001F88  C0C4  F02A         	movff	adf4351_calc_counters@div+3,___lldiv@divisor+3
  7074  001F8C  EC89  F025         	call	___lldiv	;wreg free
  7075  001F90  C023  F0C9         	movff	?___lldiv,adf4351_calc_counters@mod
  7076  001F94  C024  F0CA         	movff	?___lldiv+1,adf4351_calc_counters@mod+1
  7077  001F98  C025  F0CB         	movff	?___lldiv+2,adf4351_calc_counters@mod+2
  7078  001F9C  C026  F0CC         	movff	?___lldiv+3,adf4351_calc_counters@mod+3
  7079                           
  7080                           ;src/driver/adf4351.c: 184:  } else {
  7081  001FA0  EFE2  F00F         	goto	l6251
  7082  001FA4                     l6249:
  7083                           
  7084                           ; BSR set to: 0
  7085                           ;src/driver/adf4351.c: 186:   frac = 0;
  7086  001FA4  0E00               	movlw	0
  7087  001FA6  6FCD               	movwf	adf4351_calc_counters@frac& (0+255),b
  7088  001FA8  0E00               	movlw	0
  7089  001FAA  6FCE               	movwf	(adf4351_calc_counters@frac+1)& (0+255),b
  7090  001FAC  0E00               	movlw	0
  7091  001FAE  6FCF               	movwf	(adf4351_calc_counters@frac+2)& (0+255),b
  7092  001FB0  0E00               	movlw	0
  7093  001FB2  6FD0               	movwf	(adf4351_calc_counters@frac+3)& (0+255),b
  7094                           
  7095                           ;src/driver/adf4351.c: 187:   mod = 2;
  7096  001FB4  0E02               	movlw	2
  7097  001FB6  6FC9               	movwf	adf4351_calc_counters@mod& (0+255),b
  7098  001FB8  0E00               	movlw	0
  7099  001FBA  6FCA               	movwf	(adf4351_calc_counters@mod+1)& (0+255),b
  7100  001FBC  0E00               	movlw	0
  7101  001FBE  6FCB               	movwf	(adf4351_calc_counters@mod+2)& (0+255),b
  7102  001FC0  0E00               	movlw	0
  7103  001FC2  6FCC               	movwf	(adf4351_calc_counters@mod+3)& (0+255),b
  7104  001FC4                     l6251:
  7105                           
  7106                           ;src/driver/adf4351.c: 190:     printf("ADF4351 post: frac=%li mod=%li\r\n", frac, mod);
  7107  001FC4  0EEC               	movlw	low STR_5
  7108  001FC6  0100               	movlb	0	; () banked
  7109  001FC8  6F97               	movwf	printf@fmt& (0+255),b
  7110  001FCA  0E7D               	movlw	high STR_5
  7111  001FCC  6F98               	movwf	(printf@fmt+1)& (0+255),b
  7112  001FCE  C0CD  F099         	movff	adf4351_calc_counters@frac,?_printf+2
  7113  001FD2  C0CE  F09A         	movff	adf4351_calc_counters@frac+1,?_printf+3
  7114  001FD6  C0CF  F09B         	movff	adf4351_calc_counters@frac+2,?_printf+4
  7115  001FDA  C0D0  F09C         	movff	adf4351_calc_counters@frac+3,?_printf+5
  7116  001FDE  C0C9  F09D         	movff	adf4351_calc_counters@mod,?_printf+6
  7117  001FE2  C0CA  F09E         	movff	adf4351_calc_counters@mod+1,?_printf+7
  7118  001FE6  C0CB  F09F         	movff	adf4351_calc_counters@mod+2,?_printf+8
  7119  001FEA  C0CC  F0A0         	movff	adf4351_calc_counters@mod+3,?_printf+9
  7120  001FEE  ECFF  F02B         	call	_printf	;wreg free
  7121  001FF2                     
  7122                           ;src/driver/adf4351.c: 192:  ctx->reg0.integer = integer;
  7123  001FF2  0100               	movlb	0	; () banked
  7124  001FF4  EE20 F002          	lfsr	2,2
  7125  001FF8  51BB               	movf	adf4351_calc_counters@ctx& (0+255),w,b
  7126  001FFA  26D9               	addwf	fsr2l,f,c
  7127  001FFC  51BC               	movf	(adf4351_calc_counters@ctx+1)& (0+255),w,b
  7128  001FFE  22DA               	addwfc	fsr2h,f,c
  7129  002000  C0C5  FFDE         	movff	adf4351_calc_counters@integer,postinc2
  7130  002004  C0C6  FFDD         	movff	adf4351_calc_counters@integer+1,postdec2
  7131  002008                     
  7132                           ; BSR set to: 0
  7133                           ;src/driver/adf4351.c: 193:  ctx->reg0.frac = frac;
  7134  002008  EE20 F004          	lfsr	2,4
  7135  00200C  51BB               	movf	adf4351_calc_counters@ctx& (0+255),w,b
  7136  00200E  26D9               	addwf	fsr2l,f,c
  7137  002010  51BC               	movf	(adf4351_calc_counters@ctx+1)& (0+255),w,b
  7138  002012  22DA               	addwfc	fsr2h,f,c
  7139  002014  C0CD  FFDE         	movff	adf4351_calc_counters@frac,postinc2
  7140  002018  C0CE  FFDD         	movff	adf4351_calc_counters@frac+1,postdec2
  7141  00201C                     
  7142                           ; BSR set to: 0
  7143                           ;src/driver/adf4351.c: 194:     ctx->reg1.mod = mod;
  7144  00201C  EE20 F009          	lfsr	2,9
  7145  002020  51BB               	movf	adf4351_calc_counters@ctx& (0+255),w,b
  7146  002022  26D9               	addwf	fsr2l,f,c
  7147  002024  51BC               	movf	(adf4351_calc_counters@ctx+1)& (0+255),w,b
  7148  002026  22DA               	addwfc	fsr2h,f,c
  7149  002028  C0C9  FFDE         	movff	adf4351_calc_counters@mod,postinc2
  7150  00202C  C0CA  FFDD         	movff	adf4351_calc_counters@mod+1,postdec2
  7151  002030                     
  7152                           ; BSR set to: 0
  7153                           ;src/driver/adf4351.c: 195:     ctx->reg2.ldf = frac?0:1;
  7154  002030  EE20 F013          	lfsr	2,19
  7155  002034  51BB               	movf	adf4351_calc_counters@ctx& (0+255),w,b
  7156  002036  26D9               	addwf	fsr2l,f,c
  7157  002038  51BC               	movf	(adf4351_calc_counters@ctx+1)& (0+255),w,b
  7158  00203A  22DA               	addwfc	fsr2h,f,c
  7159  00203C  51CD               	movf	adf4351_calc_counters@frac& (0+255),w,b
  7160  00203E  11CE               	iorwf	(adf4351_calc_counters@frac+1)& (0+255),w,b
  7161  002040  11CF               	iorwf	(adf4351_calc_counters@frac+2)& (0+255),w,b
  7162  002042  11D0               	iorwf	(adf4351_calc_counters@frac+3)& (0+255),w,b
  7163  002044  B4D8               	btfsc	status,2,c
  7164  002046  EF27  F010         	goto	u8021
  7165  00204A  EF2A  F010         	goto	u8020
  7166  00204E                     u8021:
  7167  00204E  0E01               	movlw	1
  7168  002050  EF2B  F010         	goto	u8030
  7169  002054                     u8020:
  7170  002054  0E00               	movlw	0
  7171  002056                     u8030:
  7172  002056  6EDF               	movwf	indf2,c
  7173  002058                     l84:
  7174                           
  7175                           ; BSR set to: 0
  7176  002058  0012               	return		;funcret
  7177  00205A                     __end_of_adf4351_calc_counters:
  7178                           	opt callstack 0
  7179                           
  7180 ;; *************** function _gcd *****************
  7181 ;; Defined at:
  7182 ;;		line 387 in file "src/driver/adf4351.c"
  7183 ;; Parameters:    Size  Location     Type
  7184 ;;  a               4   21[COMRAM] unsigned long 
  7185 ;;  b               4   25[COMRAM] unsigned long 
  7186 ;; Auto vars:     Size  Location     Type
  7187 ;;  c               4   29[COMRAM] unsigned long 
  7188 ;; Return value:  Size  Location     Type
  7189 ;;                  4   21[COMRAM] unsigned long 
  7190 ;; Registers used:
  7191 ;;		wreg, status,2, status,0, cstack
  7192 ;; Tracked objects:
  7193 ;;		On entry : 0/0
  7194 ;;		On exit  : 0/0
  7195 ;;		Unchanged: 0/0
  7196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7197 ;;      Params:         8       0       0       0       0       0       0
  7198 ;;      Locals:         4       0       0       0       0       0       0
  7199 ;;      Temps:          0       0       0       0       0       0       0
  7200 ;;      Totals:        12       0       0       0       0       0       0
  7201 ;;Total ram usage:       12 bytes
  7202 ;; Hardware stack levels used:    1
  7203 ;; Hardware stack levels required when called:    3
  7204 ;; This function calls:
  7205 ;;		___llmod
  7206 ;; This function is called by:
  7207 ;;		_adf4351_calc_counters
  7208 ;; This function uses a non-reentrant model
  7209 ;;
  7210                           
  7211                           	psect	text17
  7212  004374                     __ptext17:
  7213                           	opt callstack 0
  7214  004374                     _gcd:
  7215                           	opt callstack 23
  7216  004374                     
  7217                           ;src/driver/adf4351.c: 387: static __attribute__((inline)) u32 gcd(u32 a, u32 b);src/dri
      +                          ver/adf4351.c: 388: {;src/driver/adf4351.c: 389:     while((a%b) != 0) {
  7218  004374  EF07  F022         	goto	l141
  7219  004378                     l142:
  7220                           
  7221                           ;src/driver/adf4351.c: 390:         u32 c = a;
  7222  004378  C016  F01E         	movff	gcd@a,gcd@c
  7223  00437C  C017  F01F         	movff	gcd@a+1,gcd@c+1
  7224  004380  C018  F020         	movff	gcd@a+2,gcd@c+2
  7225  004384  C019  F021         	movff	gcd@a+3,gcd@c+3
  7226  004388                     
  7227                           ;src/driver/adf4351.c: 392:         if(a < b) {
  7228  004388  501A               	movf	gcd@b^0,w,c
  7229  00438A  5C16               	subwf	gcd@a^0,w,c
  7230  00438C  501B               	movf	(gcd@b+1)^0,w,c
  7231  00438E  5817               	subwfb	(gcd@a+1)^0,w,c
  7232  004390  501C               	movf	(gcd@b+2)^0,w,c
  7233  004392  5818               	subwfb	(gcd@a+2)^0,w,c
  7234  004394  501D               	movf	(gcd@b+3)^0,w,c
  7235  004396  5819               	subwfb	(gcd@a+3)^0,w,c
  7236  004398  B0D8               	btfsc	status,0,c
  7237  00439A  EFD1  F021         	goto	u7821
  7238  00439E  EFD3  F021         	goto	u7820
  7239  0043A2                     u7821:
  7240  0043A2  EFE5  F021         	goto	l143
  7241  0043A6                     u7820:
  7242  0043A6                     
  7243                           ;src/driver/adf4351.c: 393:             a = b;
  7244  0043A6  C01A  F016         	movff	gcd@b,gcd@a
  7245  0043AA  C01B  F017         	movff	gcd@b+1,gcd@a+1
  7246  0043AE  C01C  F018         	movff	gcd@b+2,gcd@a+2
  7247  0043B2  C01D  F019         	movff	gcd@b+3,gcd@a+3
  7248                           
  7249                           ;src/driver/adf4351.c: 394:             b = c;
  7250  0043B6  C01E  F01A         	movff	gcd@c,gcd@b
  7251  0043BA  C01F  F01B         	movff	gcd@c+1,gcd@b+1
  7252  0043BE  C020  F01C         	movff	gcd@c+2,gcd@b+2
  7253  0043C2  C021  F01D         	movff	gcd@c+3,gcd@b+3
  7254                           
  7255                           ;src/driver/adf4351.c: 395:         } else {
  7256  0043C6  EF07  F022         	goto	l141
  7257  0043CA                     l143:
  7258                           
  7259                           ;src/driver/adf4351.c: 396:             a = b;
  7260  0043CA  C01A  F016         	movff	gcd@b,gcd@a
  7261  0043CE  C01B  F017         	movff	gcd@b+1,gcd@a+1
  7262  0043D2  C01C  F018         	movff	gcd@b+2,gcd@a+2
  7263  0043D6  C01D  F019         	movff	gcd@b+3,gcd@a+3
  7264  0043DA                     
  7265                           ;src/driver/adf4351.c: 397:             b = c%b;
  7266  0043DA  C01E  F00D         	movff	gcd@c,___llmod@dividend
  7267  0043DE  C01F  F00E         	movff	gcd@c+1,___llmod@dividend+1
  7268  0043E2  C020  F00F         	movff	gcd@c+2,___llmod@dividend+2
  7269  0043E6  C021  F010         	movff	gcd@c+3,___llmod@dividend+3
  7270  0043EA  C01A  F011         	movff	gcd@b,___llmod@divisor
  7271  0043EE  C01B  F012         	movff	gcd@b+1,___llmod@divisor+1
  7272  0043F2  C01C  F013         	movff	gcd@b+2,___llmod@divisor+2
  7273  0043F6  C01D  F014         	movff	gcd@b+3,___llmod@divisor+3
  7274  0043FA  ECBF  F026         	call	___llmod	;wreg free
  7275  0043FE  C00D  F01A         	movff	?___llmod,gcd@b
  7276  004402  C00E  F01B         	movff	?___llmod+1,gcd@b+1
  7277  004406  C00F  F01C         	movff	?___llmod+2,gcd@b+2
  7278  00440A  C010  F01D         	movff	?___llmod+3,gcd@b+3
  7279  00440E                     l141:
  7280                           
  7281                           ;src/driver/adf4351.c: 389:     while((a%b) != 0) {
  7282  00440E  C016  F00D         	movff	gcd@a,___llmod@dividend
  7283  004412  C017  F00E         	movff	gcd@a+1,___llmod@dividend+1
  7284  004416  C018  F00F         	movff	gcd@a+2,___llmod@dividend+2
  7285  00441A  C019  F010         	movff	gcd@a+3,___llmod@dividend+3
  7286  00441E  C01A  F011         	movff	gcd@b,___llmod@divisor
  7287  004422  C01B  F012         	movff	gcd@b+1,___llmod@divisor+1
  7288  004426  C01C  F013         	movff	gcd@b+2,___llmod@divisor+2
  7289  00442A  C01D  F014         	movff	gcd@b+3,___llmod@divisor+3
  7290  00442E  ECBF  F026         	call	___llmod	;wreg free
  7291  004432  500D               	movf	?___llmod^0,w,c
  7292  004434  100E               	iorwf	(?___llmod+1)^0,w,c
  7293  004436  100F               	iorwf	(?___llmod+2)^0,w,c
  7294  004438  1010               	iorwf	(?___llmod+3)^0,w,c
  7295  00443A  A4D8               	btfss	status,2,c
  7296  00443C  EF22  F022         	goto	u7831
  7297  004440  EF24  F022         	goto	u7830
  7298  004444                     u7831:
  7299  004444  EFBC  F021         	goto	l142
  7300  004448                     u7830:
  7301  004448                     
  7302                           ;src/driver/adf4351.c: 401:     return b;
  7303  004448  C01A  F016         	movff	gcd@b,?_gcd
  7304  00444C  C01B  F017         	movff	gcd@b+1,?_gcd+1
  7305  004450  C01C  F018         	movff	gcd@b+2,?_gcd+2
  7306  004454  C01D  F019         	movff	gcd@b+3,?_gcd+3
  7307  004458  0012               	return		;funcret
  7308  00445A                     __end_of_gcd:
  7309                           	opt callstack 0
  7310                           
  7311 ;; *************** function _adf4351_get_lock *****************
  7312 ;; Defined at:
  7313 ;;		line 72 in file "src/driver/adf4351.c"
  7314 ;; Parameters:    Size  Location     Type
  7315 ;;  ctx             2   12[COMRAM] PTR struct adf4351_ctx
  7316 ;;		 -> g_adf4351(55), 
  7317 ;; Auto vars:     Size  Location     Type
  7318 ;;		None
  7319 ;; Return value:  Size  Location     Type
  7320 ;;                  2   12[COMRAM] int 
  7321 ;; Registers used:
  7322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7323 ;; Tracked objects:
  7324 ;;		On entry : 0/0
  7325 ;;		On exit  : 0/0
  7326 ;;		Unchanged: 0/0
  7327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7328 ;;      Params:         2       0       0       0       0       0       0
  7329 ;;      Locals:         0       0       0       0       0       0       0
  7330 ;;      Temps:          3       0       0       0       0       0       0
  7331 ;;      Totals:         5       0       0       0       0       0       0
  7332 ;;Total ram usage:        5 bytes
  7333 ;; Hardware stack levels used:    1
  7334 ;; Hardware stack levels required when called:    2
  7335 ;; This function calls:
  7336 ;;		Nothing
  7337 ;; This function is called by:
  7338 ;;		_pa_update
  7339 ;;		_update_led
  7340 ;;		_handle_cmd
  7341 ;;		_check_adf4351_lock
  7342 ;; This function uses a non-reentrant model
  7343 ;;
  7344                           
  7345                           	psect	text18
  7346  005586                     __ptext18:
  7347                           	opt callstack 0
  7348  005586                     _adf4351_get_lock:
  7349                           	opt callstack 26
  7350  005586                     
  7351                           ;src/driver/adf4351.c: 72: BOOL adf4351_get_lock(adf4351_ctx* ctx);src/driver/adf4351.c:
      +                           73: {;src/driver/adf4351.c: 74:  return (((*((PIN_ADF_LOCK)->pPORT) & (PIN_ADF_LOCK)->m
      +                          ask) != 0)==0)?0:1;
  7352  005586  0E1A               	movlw	low (_PIN_ADF_LOCK_DEF+4)
  7353  005588  6EF6               	movwf	tblptrl,c
  7354  00558A  0E7A               	movlw	high (_PIN_ADF_LOCK_DEF+4)
  7355  00558C  6EF7               	movwf	tblptrh,c
  7356  00558E                     	if	0	;tblptru may be non-zero
  7357  00558E                     	endif
  7358  00558E                     	if	0	;tblptru may be non-zero
  7359  00558E                     	endif
  7360  00558E  0008               	tblrd		*
  7361  005590  CFF5 F00F          	movff	tablat,??_adf4351_get_lock
  7362  005594  0E16               	movlw	low _PIN_ADF_LOCK_DEF
  7363  005596  6EF6               	movwf	tblptrl,c
  7364  005598                     	if	1	;There is more than 1 active tblptr byte
  7365  005598  0E7A               	movlw	high _PIN_ADF_LOCK_DEF
  7366  00559A  6EF7               	movwf	tblptrh,c
  7367  00559C                     	endif
  7368  00559C                     	if	0	;There are less than 3 active tblptr bytes
  7369  00559C                     	endif
  7370  00559C  0009               	tblrd		*+
  7371  00559E  CFF5 F010          	movff	tablat,??_adf4351_get_lock+1
  7372  0055A2  0009               	tblrd		*+
  7373  0055A4  CFF5 F011          	movff	tablat,??_adf4351_get_lock+2
  7374  0055A8  C010  FFD9         	movff	??_adf4351_get_lock+1,fsr2l
  7375  0055AC  C011  FFDA         	movff	??_adf4351_get_lock+2,fsr2h
  7376  0055B0  50DF               	movf	indf2,w,c
  7377  0055B2  140F               	andwf	??_adf4351_get_lock^0,w,c
  7378  0055B4  0900               	iorlw	0
  7379  0055B6  A4D8               	btfss	status,2,c
  7380  0055B8  EFE0  F02A         	goto	u5221
  7381  0055BC  EFE3  F02A         	goto	u5220
  7382  0055C0                     u5221:
  7383  0055C0  0E01               	movlw	1
  7384  0055C2  EFE4  F02A         	goto	u5230
  7385  0055C6                     u5220:
  7386  0055C6  0E00               	movlw	0
  7387  0055C8                     u5230:
  7388  0055C8  6E0D               	movwf	?_adf4351_get_lock^0,c
  7389  0055CA  6A0E               	clrf	(?_adf4351_get_lock+1)^0,c
  7390  0055CC  0012               	return		;funcret
  7391  0055CE                     __end_of_adf4351_get_lock:
  7392                           	opt callstack 0
  7393                           
  7394 ;; *************** function _init_gpios *****************
  7395 ;; Defined at:
  7396 ;;		line 428 in file "src/main.c"
  7397 ;; Parameters:    Size  Location     Type
  7398 ;;		None
  7399 ;; Auto vars:     Size  Location     Type
  7400 ;;		None
  7401 ;; Return value:  Size  Location     Type
  7402 ;;                  1    wreg      void 
  7403 ;; Registers used:
  7404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7405 ;; Tracked objects:
  7406 ;;		On entry : 0/0
  7407 ;;		On exit  : 0/0
  7408 ;;		Unchanged: 0/0
  7409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7410 ;;      Params:         0       0       0       0       0       0       0
  7411 ;;      Locals:         0       0       0       0       0       0       0
  7412 ;;      Temps:          3       0       0       0       0       0       0
  7413 ;;      Totals:         3       0       0       0       0       0       0
  7414 ;;Total ram usage:        3 bytes
  7415 ;; Hardware stack levels used:    1
  7416 ;; Hardware stack levels required when called:    2
  7417 ;; This function calls:
  7418 ;;		Nothing
  7419 ;; This function is called by:
  7420 ;;		_main
  7421 ;; This function uses a non-reentrant model
  7422 ;;
  7423                           
  7424                           	psect	text19
  7425  0014C6                     __ptext19:
  7426                           	opt callstack 0
  7427  0014C6                     _init_gpios:
  7428                           	opt callstack 28
  7429  0014C6                     
  7430                           ;src/main.c: 430:     ADCON1bits.PCFG = 0xF;
  7431  0014C6  0E0F               	movlw	15
  7432  0014C8  12C1               	iorwf	193,f,c	;volatile
  7433  0014CA                     
  7434                           ;src/main.c: 436:     *((PIN_ADF_LOCK)->pTRIS) |= (PIN_ADF_LOCK)->mask;
  7435  0014CA  0E1A               	movlw	low (_PIN_ADF_LOCK_DEF+4)
  7436  0014CC  6EF6               	movwf	tblptrl,c
  7437  0014CE  0E7A               	movlw	high (_PIN_ADF_LOCK_DEF+4)
  7438  0014D0  6EF7               	movwf	tblptrh,c
  7439  0014D2                     	if	0	;tblptru may be non-zero
  7440  0014D2                     	endif
  7441  0014D2                     	if	0	;tblptru may be non-zero
  7442  0014D2                     	endif
  7443  0014D2  0008               	tblrd		*
  7444  0014D4  CFF5 F00D          	movff	tablat,??_init_gpios
  7445  0014D8  0E18               	movlw	low (_PIN_ADF_LOCK_DEF+2)
  7446  0014DA  6EF6               	movwf	tblptrl,c
  7447  0014DC  0E7A               	movlw	high (_PIN_ADF_LOCK_DEF+2)
  7448  0014DE  6EF7               	movwf	tblptrh,c
  7449  0014E0                     	if	0	;tblptru may be non-zero
  7450  0014E0                     	endif
  7451  0014E0                     	if	0	;tblptru may be non-zero
  7452  0014E0                     	endif
  7453  0014E0  0009               	tblrd		*+
  7454  0014E2  CFF5 FFD9          	movff	tablat,fsr2l
  7455  0014E6  0009               	tblrd		*+
  7456  0014E8  CFF5 FFDA          	movff	tablat,fsr2h
  7457  0014EC  500D               	movf	??_init_gpios^0,w,c
  7458  0014EE  12DF               	iorwf	indf2,f,c
  7459  0014F0                     
  7460                           ;src/main.c: 439:     *((PIN_ADF_CE)->pPORT) &= ~(PIN_ADF_CE)->mask;
  7461  0014F0  0E15               	movlw	low (_PIN_ADF_CE_DEF+4)
  7462  0014F2  6EF6               	movwf	tblptrl,c
  7463  0014F4  0E7A               	movlw	high (_PIN_ADF_CE_DEF+4)
  7464  0014F6  6EF7               	movwf	tblptrh,c
  7465  0014F8                     	if	0	;tblptru may be non-zero
  7466  0014F8                     	endif
  7467  0014F8                     	if	0	;tblptru may be non-zero
  7468  0014F8                     	endif
  7469  0014F8  0008               	tblrd		*
  7470  0014FA  50F5               	movf	tablat,w,c
  7471  0014FC  0AFF               	xorlw	255
  7472  0014FE  6E0D               	movwf	??_init_gpios^0,c
  7473  001500  0E11               	movlw	low _PIN_ADF_CE_DEF
  7474  001502  6EF6               	movwf	tblptrl,c
  7475  001504                     	if	1	;There is more than 1 active tblptr byte
  7476  001504  0E7A               	movlw	high _PIN_ADF_CE_DEF
  7477  001506  6EF7               	movwf	tblptrh,c
  7478  001508                     	endif
  7479  001508                     	if	0	;There are less than 3 active tblptr bytes
  7480  001508                     	endif
  7481  001508  0009               	tblrd		*+
  7482  00150A  CFF5 F00E          	movff	tablat,??_init_gpios+1
  7483  00150E  0009               	tblrd		*+
  7484  001510  CFF5 F00F          	movff	tablat,??_init_gpios+2
  7485  001514  C00E  FFD9         	movff	??_init_gpios+1,fsr2l
  7486  001518  C00F  FFDA         	movff	??_init_gpios+2,fsr2h
  7487  00151C  500D               	movf	??_init_gpios^0,w,c
  7488  00151E  16DF               	andwf	indf2,f,c
  7489  001520                     
  7490                           ;src/main.c: 440:     *((PIN_ADF_CE)->pTRIS) &= ~(PIN_ADF_CE)->mask;
  7491  001520  0E15               	movlw	low (_PIN_ADF_CE_DEF+4)
  7492  001522  6EF6               	movwf	tblptrl,c
  7493  001524  0E7A               	movlw	high (_PIN_ADF_CE_DEF+4)
  7494  001526  6EF7               	movwf	tblptrh,c
  7495  001528                     	if	0	;tblptru may be non-zero
  7496  001528                     	endif
  7497  001528                     	if	0	;tblptru may be non-zero
  7498  001528                     	endif
  7499  001528  0008               	tblrd		*
  7500  00152A  50F5               	movf	tablat,w,c
  7501  00152C  0AFF               	xorlw	255
  7502  00152E  6E0D               	movwf	??_init_gpios^0,c
  7503  001530  0E13               	movlw	low (_PIN_ADF_CE_DEF+2)
  7504  001532  6EF6               	movwf	tblptrl,c
  7505  001534  0E7A               	movlw	high (_PIN_ADF_CE_DEF+2)
  7506  001536  6EF7               	movwf	tblptrh,c
  7507  001538                     	if	0	;tblptru may be non-zero
  7508  001538                     	endif
  7509  001538                     	if	0	;tblptru may be non-zero
  7510  001538                     	endif
  7511  001538  0009               	tblrd		*+
  7512  00153A  CFF5 FFD9          	movff	tablat,fsr2l
  7513  00153E  0009               	tblrd		*+
  7514  001540  CFF5 FFDA          	movff	tablat,fsr2h
  7515  001544  500D               	movf	??_init_gpios^0,w,c
  7516  001546  16DF               	andwf	indf2,f,c
  7517  001548                     
  7518                           ;src/main.c: 443:     *((PIN_ADF_LE)->pPORT) &= ~(PIN_ADF_LE)->mask;
  7519  001548  0E10               	movlw	low (_PIN_ADF_LE_DEF+4)
  7520  00154A  6EF6               	movwf	tblptrl,c
  7521  00154C  0E7A               	movlw	high (_PIN_ADF_LE_DEF+4)
  7522  00154E  6EF7               	movwf	tblptrh,c
  7523  001550                     	if	0	;tblptru may be non-zero
  7524  001550                     	endif
  7525  001550                     	if	0	;tblptru may be non-zero
  7526  001550                     	endif
  7527  001550  0008               	tblrd		*
  7528  001552  50F5               	movf	tablat,w,c
  7529  001554  0AFF               	xorlw	255
  7530  001556  6E0D               	movwf	??_init_gpios^0,c
  7531  001558  0E0C               	movlw	low _PIN_ADF_LE_DEF
  7532  00155A  6EF6               	movwf	tblptrl,c
  7533  00155C                     	if	1	;There is more than 1 active tblptr byte
  7534  00155C  0E7A               	movlw	high _PIN_ADF_LE_DEF
  7535  00155E  6EF7               	movwf	tblptrh,c
  7536  001560                     	endif
  7537  001560                     	if	0	;There are less than 3 active tblptr bytes
  7538  001560                     	endif
  7539  001560  0009               	tblrd		*+
  7540  001562  CFF5 F00E          	movff	tablat,??_init_gpios+1
  7541  001566  0009               	tblrd		*+
  7542  001568  CFF5 F00F          	movff	tablat,??_init_gpios+2
  7543  00156C  C00E  FFD9         	movff	??_init_gpios+1,fsr2l
  7544  001570  C00F  FFDA         	movff	??_init_gpios+2,fsr2h
  7545  001574  500D               	movf	??_init_gpios^0,w,c
  7546  001576  16DF               	andwf	indf2,f,c
  7547  001578                     
  7548                           ;src/main.c: 444:     *((PIN_ADF_LE)->pTRIS) &= ~(PIN_ADF_LE)->mask;
  7549  001578  0E10               	movlw	low (_PIN_ADF_LE_DEF+4)
  7550  00157A  6EF6               	movwf	tblptrl,c
  7551  00157C  0E7A               	movlw	high (_PIN_ADF_LE_DEF+4)
  7552  00157E  6EF7               	movwf	tblptrh,c
  7553  001580                     	if	0	;tblptru may be non-zero
  7554  001580                     	endif
  7555  001580                     	if	0	;tblptru may be non-zero
  7556  001580                     	endif
  7557  001580  0008               	tblrd		*
  7558  001582  50F5               	movf	tablat,w,c
  7559  001584  0AFF               	xorlw	255
  7560  001586  6E0D               	movwf	??_init_gpios^0,c
  7561  001588  0E0E               	movlw	low (_PIN_ADF_LE_DEF+2)
  7562  00158A  6EF6               	movwf	tblptrl,c
  7563  00158C  0E7A               	movlw	high (_PIN_ADF_LE_DEF+2)
  7564  00158E  6EF7               	movwf	tblptrh,c
  7565  001590                     	if	0	;tblptru may be non-zero
  7566  001590                     	endif
  7567  001590                     	if	0	;tblptru may be non-zero
  7568  001590                     	endif
  7569  001590  0009               	tblrd		*+
  7570  001592  CFF5 FFD9          	movff	tablat,fsr2l
  7571  001596  0009               	tblrd		*+
  7572  001598  CFF5 FFDA          	movff	tablat,fsr2h
  7573  00159C  500D               	movf	??_init_gpios^0,w,c
  7574  00159E  16DF               	andwf	indf2,f,c
  7575  0015A0                     
  7576                           ;src/main.c: 447:     *((PIN_SIO_DATA)->pPORT) &= ~(PIN_SIO_DATA)->mask;
  7577  0015A0  0E0B               	movlw	low (_PIN_SIO_DATA_DEF+4)
  7578  0015A2  6EF6               	movwf	tblptrl,c
  7579  0015A4  0E7A               	movlw	high (_PIN_SIO_DATA_DEF+4)
  7580  0015A6  6EF7               	movwf	tblptrh,c
  7581  0015A8                     	if	0	;tblptru may be non-zero
  7582  0015A8                     	endif
  7583  0015A8                     	if	0	;tblptru may be non-zero
  7584  0015A8                     	endif
  7585  0015A8  0008               	tblrd		*
  7586  0015AA  50F5               	movf	tablat,w,c
  7587  0015AC  0AFF               	xorlw	255
  7588  0015AE  6E0D               	movwf	??_init_gpios^0,c
  7589  0015B0  0E07               	movlw	low _PIN_SIO_DATA_DEF
  7590  0015B2  6EF6               	movwf	tblptrl,c
  7591  0015B4                     	if	1	;There is more than 1 active tblptr byte
  7592  0015B4  0E7A               	movlw	high _PIN_SIO_DATA_DEF
  7593  0015B6  6EF7               	movwf	tblptrh,c
  7594  0015B8                     	endif
  7595  0015B8                     	if	0	;There are less than 3 active tblptr bytes
  7596  0015B8                     	endif
  7597  0015B8  0009               	tblrd		*+
  7598  0015BA  CFF5 F00E          	movff	tablat,??_init_gpios+1
  7599  0015BE  0009               	tblrd		*+
  7600  0015C0  CFF5 F00F          	movff	tablat,??_init_gpios+2
  7601  0015C4  C00E  FFD9         	movff	??_init_gpios+1,fsr2l
  7602  0015C8  C00F  FFDA         	movff	??_init_gpios+2,fsr2h
  7603  0015CC  500D               	movf	??_init_gpios^0,w,c
  7604  0015CE  16DF               	andwf	indf2,f,c
  7605  0015D0                     
  7606                           ;src/main.c: 448:     *((PIN_SIO_DATA)->pTRIS) &= ~(PIN_SIO_DATA)->mask;
  7607  0015D0  0E0B               	movlw	low (_PIN_SIO_DATA_DEF+4)
  7608  0015D2  6EF6               	movwf	tblptrl,c
  7609  0015D4  0E7A               	movlw	high (_PIN_SIO_DATA_DEF+4)
  7610  0015D6  6EF7               	movwf	tblptrh,c
  7611  0015D8                     	if	0	;tblptru may be non-zero
  7612  0015D8                     	endif
  7613  0015D8                     	if	0	;tblptru may be non-zero
  7614  0015D8                     	endif
  7615  0015D8  0008               	tblrd		*
  7616  0015DA  50F5               	movf	tablat,w,c
  7617  0015DC  0AFF               	xorlw	255
  7618  0015DE  6E0D               	movwf	??_init_gpios^0,c
  7619  0015E0  0E09               	movlw	low (_PIN_SIO_DATA_DEF+2)
  7620  0015E2  6EF6               	movwf	tblptrl,c
  7621  0015E4  0E7A               	movlw	high (_PIN_SIO_DATA_DEF+2)
  7622  0015E6  6EF7               	movwf	tblptrh,c
  7623  0015E8                     	if	0	;tblptru may be non-zero
  7624  0015E8                     	endif
  7625  0015E8                     	if	0	;tblptru may be non-zero
  7626  0015E8                     	endif
  7627  0015E8  0009               	tblrd		*+
  7628  0015EA  CFF5 FFD9          	movff	tablat,fsr2l
  7629  0015EE  0009               	tblrd		*+
  7630  0015F0  CFF5 FFDA          	movff	tablat,fsr2h
  7631  0015F4  500D               	movf	??_init_gpios^0,w,c
  7632  0015F6  16DF               	andwf	indf2,f,c
  7633  0015F8                     
  7634                           ;src/main.c: 451:     *((PIN_SIO_CLK)->pPORT) &= ~(PIN_SIO_CLK)->mask;
  7635  0015F8  0E06               	movlw	low (_PIN_SIO_CLK_DEF+4)
  7636  0015FA  6EF6               	movwf	tblptrl,c
  7637  0015FC  0E7A               	movlw	high (_PIN_SIO_CLK_DEF+4)
  7638  0015FE  6EF7               	movwf	tblptrh,c
  7639  001600                     	if	0	;tblptru may be non-zero
  7640  001600                     	endif
  7641  001600                     	if	0	;tblptru may be non-zero
  7642  001600                     	endif
  7643  001600  0008               	tblrd		*
  7644  001602  50F5               	movf	tablat,w,c
  7645  001604  0AFF               	xorlw	255
  7646  001606  6E0D               	movwf	??_init_gpios^0,c
  7647  001608  0E02               	movlw	low _PIN_SIO_CLK_DEF
  7648  00160A  6EF6               	movwf	tblptrl,c
  7649  00160C                     	if	1	;There is more than 1 active tblptr byte
  7650  00160C  0E7A               	movlw	high _PIN_SIO_CLK_DEF
  7651  00160E  6EF7               	movwf	tblptrh,c
  7652  001610                     	endif
  7653  001610                     	if	0	;There are less than 3 active tblptr bytes
  7654  001610                     	endif
  7655  001610  0009               	tblrd		*+
  7656  001612  CFF5 F00E          	movff	tablat,??_init_gpios+1
  7657  001616  0009               	tblrd		*+
  7658  001618  CFF5 F00F          	movff	tablat,??_init_gpios+2
  7659  00161C  C00E  FFD9         	movff	??_init_gpios+1,fsr2l
  7660  001620  C00F  FFDA         	movff	??_init_gpios+2,fsr2h
  7661  001624  500D               	movf	??_init_gpios^0,w,c
  7662  001626  16DF               	andwf	indf2,f,c
  7663  001628                     
  7664                           ;src/main.c: 452:     *((PIN_SIO_CLK)->pTRIS) &= ~(PIN_SIO_CLK)->mask;
  7665  001628  0E06               	movlw	low (_PIN_SIO_CLK_DEF+4)
  7666  00162A  6EF6               	movwf	tblptrl,c
  7667  00162C  0E7A               	movlw	high (_PIN_SIO_CLK_DEF+4)
  7668  00162E  6EF7               	movwf	tblptrh,c
  7669  001630                     	if	0	;tblptru may be non-zero
  7670  001630                     	endif
  7671  001630                     	if	0	;tblptru may be non-zero
  7672  001630                     	endif
  7673  001630  0008               	tblrd		*
  7674  001632  50F5               	movf	tablat,w,c
  7675  001634  0AFF               	xorlw	255
  7676  001636  6E0D               	movwf	??_init_gpios^0,c
  7677  001638  0E04               	movlw	low (_PIN_SIO_CLK_DEF+2)
  7678  00163A  6EF6               	movwf	tblptrl,c
  7679  00163C  0E7A               	movlw	high (_PIN_SIO_CLK_DEF+2)
  7680  00163E  6EF7               	movwf	tblptrh,c
  7681  001640                     	if	0	;tblptru may be non-zero
  7682  001640                     	endif
  7683  001640                     	if	0	;tblptru may be non-zero
  7684  001640                     	endif
  7685  001640  0009               	tblrd		*+
  7686  001642  CFF5 FFD9          	movff	tablat,fsr2l
  7687  001646  0009               	tblrd		*+
  7688  001648  CFF5 FFDA          	movff	tablat,fsr2h
  7689  00164C  500D               	movf	??_init_gpios^0,w,c
  7690  00164E  16DF               	andwf	indf2,f,c
  7691  001650                     
  7692                           ;src/main.c: 455:     *((PIN_ADF_FREQ_SEL)->pTRIS) |= (PIN_ADF_FREQ_SEL)->mask;
  7693  001650  0E01               	movlw	low (_PIN_ADF_FREQ_SEL_DEF+4)
  7694  001652  6EF6               	movwf	tblptrl,c
  7695  001654  0E7A               	movlw	high (_PIN_ADF_FREQ_SEL_DEF+4)
  7696  001656  6EF7               	movwf	tblptrh,c
  7697  001658                     	if	0	;tblptru may be non-zero
  7698  001658                     	endif
  7699  001658                     	if	0	;tblptru may be non-zero
  7700  001658                     	endif
  7701  001658  0008               	tblrd		*
  7702  00165A  CFF5 F00D          	movff	tablat,??_init_gpios
  7703  00165E  0EFF               	movlw	low (_PIN_ADF_FREQ_SEL_DEF+2)
  7704  001660  6EF6               	movwf	tblptrl,c
  7705  001662  0E79               	movlw	high (_PIN_ADF_FREQ_SEL_DEF+2)
  7706  001664  6EF7               	movwf	tblptrh,c
  7707  001666                     	if	0	;tblptru may be non-zero
  7708  001666                     	endif
  7709  001666                     	if	0	;tblptru may be non-zero
  7710  001666                     	endif
  7711  001666  0009               	tblrd		*+
  7712  001668  CFF5 FFD9          	movff	tablat,fsr2l
  7713  00166C  0009               	tblrd		*+
  7714  00166E  CFF5 FFDA          	movff	tablat,fsr2h
  7715  001672  500D               	movf	??_init_gpios^0,w,c
  7716  001674  12DF               	iorwf	indf2,f,c
  7717  001676                     
  7718                           ;src/main.c: 456:     *((PIN_ADF_FREQ_SEL)->pPORT) |= (PIN_ADF_FREQ_SEL)->mask;
  7719  001676  0E01               	movlw	low (_PIN_ADF_FREQ_SEL_DEF+4)
  7720  001678  6EF6               	movwf	tblptrl,c
  7721  00167A  0E7A               	movlw	high (_PIN_ADF_FREQ_SEL_DEF+4)
  7722  00167C  6EF7               	movwf	tblptrh,c
  7723  00167E                     	if	0	;tblptru may be non-zero
  7724  00167E                     	endif
  7725  00167E                     	if	0	;tblptru may be non-zero
  7726  00167E                     	endif
  7727  00167E  0008               	tblrd		*
  7728  001680  CFF5 F00D          	movff	tablat,??_init_gpios
  7729  001684  0EFD               	movlw	low _PIN_ADF_FREQ_SEL_DEF
  7730  001686  6EF6               	movwf	tblptrl,c
  7731  001688                     	if	1	;There is more than 1 active tblptr byte
  7732  001688  0E79               	movlw	high _PIN_ADF_FREQ_SEL_DEF
  7733  00168A  6EF7               	movwf	tblptrh,c
  7734  00168C                     	endif
  7735  00168C                     	if	0	;There are less than 3 active tblptr bytes
  7736  00168C                     	endif
  7737  00168C  0009               	tblrd		*+
  7738  00168E  CFF5 F00E          	movff	tablat,??_init_gpios+1
  7739  001692  0009               	tblrd		*+
  7740  001694  CFF5 F00F          	movff	tablat,??_init_gpios+2
  7741  001698  C00E  FFD9         	movff	??_init_gpios+1,fsr2l
  7742  00169C  C00F  FFDA         	movff	??_init_gpios+2,fsr2h
  7743  0016A0  500D               	movf	??_init_gpios^0,w,c
  7744  0016A2  12DF               	iorwf	indf2,f,c
  7745  0016A4                     
  7746                           ;src/main.c: 459:     *((PIN_PTT_INPUT)->pTRIS) |= (PIN_PTT_INPUT)->mask;
  7747  0016A4  0EFC               	movlw	low (_PIN_PTT_INPUT_DEF+4)
  7748  0016A6  6EF6               	movwf	tblptrl,c
  7749  0016A8  0E79               	movlw	high (_PIN_PTT_INPUT_DEF+4)
  7750  0016AA  6EF7               	movwf	tblptrh,c
  7751  0016AC                     	if	0	;tblptru may be non-zero
  7752  0016AC                     	endif
  7753  0016AC                     	if	0	;tblptru may be non-zero
  7754  0016AC                     	endif
  7755  0016AC  0008               	tblrd		*
  7756  0016AE  CFF5 F00D          	movff	tablat,??_init_gpios
  7757  0016B2  0EFA               	movlw	low (_PIN_PTT_INPUT_DEF+2)
  7758  0016B4  6EF6               	movwf	tblptrl,c
  7759  0016B6  0E79               	movlw	high (_PIN_PTT_INPUT_DEF+2)
  7760  0016B8  6EF7               	movwf	tblptrh,c
  7761  0016BA                     	if	0	;tblptru may be non-zero
  7762  0016BA                     	endif
  7763  0016BA                     	if	0	;tblptru may be non-zero
  7764  0016BA                     	endif
  7765  0016BA  0009               	tblrd		*+
  7766  0016BC  CFF5 FFD9          	movff	tablat,fsr2l
  7767  0016C0  0009               	tblrd		*+
  7768  0016C2  CFF5 FFDA          	movff	tablat,fsr2h
  7769  0016C6  500D               	movf	??_init_gpios^0,w,c
  7770  0016C8  12DF               	iorwf	indf2,f,c
  7771  0016CA                     
  7772                           ;src/main.c: 460:     *((PIN_PTT_INPUT)->pPORT) |= (PIN_PTT_INPUT)->mask;
  7773  0016CA  0EFC               	movlw	low (_PIN_PTT_INPUT_DEF+4)
  7774  0016CC  6EF6               	movwf	tblptrl,c
  7775  0016CE  0E79               	movlw	high (_PIN_PTT_INPUT_DEF+4)
  7776  0016D0  6EF7               	movwf	tblptrh,c
  7777  0016D2                     	if	0	;tblptru may be non-zero
  7778  0016D2                     	endif
  7779  0016D2                     	if	0	;tblptru may be non-zero
  7780  0016D2                     	endif
  7781  0016D2  0008               	tblrd		*
  7782  0016D4  CFF5 F00D          	movff	tablat,??_init_gpios
  7783  0016D8  0EF8               	movlw	low _PIN_PTT_INPUT_DEF
  7784  0016DA  6EF6               	movwf	tblptrl,c
  7785  0016DC                     	if	1	;There is more than 1 active tblptr byte
  7786  0016DC  0E79               	movlw	high _PIN_PTT_INPUT_DEF
  7787  0016DE  6EF7               	movwf	tblptrh,c
  7788  0016E0                     	endif
  7789  0016E0                     	if	0	;There are less than 3 active tblptr bytes
  7790  0016E0                     	endif
  7791  0016E0  0009               	tblrd		*+
  7792  0016E2  CFF5 F00E          	movff	tablat,??_init_gpios+1
  7793  0016E6  0009               	tblrd		*+
  7794  0016E8  CFF5 F00F          	movff	tablat,??_init_gpios+2
  7795  0016EC  C00E  FFD9         	movff	??_init_gpios+1,fsr2l
  7796  0016F0  C00F  FFDA         	movff	??_init_gpios+2,fsr2h
  7797  0016F4  500D               	movf	??_init_gpios^0,w,c
  7798  0016F6  12DF               	iorwf	indf2,f,c
  7799  0016F8                     
  7800                           ;src/main.c: 465:     INTCON2bits.nRBPU = 0;
  7801  0016F8  9EF1               	bcf	241,7,c	;volatile
  7802  0016FA                     
  7803                           ;src/main.c: 468:     *((PIN_FSW0)->pTRIS) |= (PIN_FSW0)->mask;
  7804  0016FA  0EE3               	movlw	low (_PIN_FSW0_DEF+4)
  7805  0016FC  6EF6               	movwf	tblptrl,c
  7806  0016FE  0E79               	movlw	high (_PIN_FSW0_DEF+4)
  7807  001700  6EF7               	movwf	tblptrh,c
  7808  001702                     	if	0	;tblptru may be non-zero
  7809  001702                     	endif
  7810  001702                     	if	0	;tblptru may be non-zero
  7811  001702                     	endif
  7812  001702  0008               	tblrd		*
  7813  001704  CFF5 F00D          	movff	tablat,??_init_gpios
  7814  001708  0EE1               	movlw	low (_PIN_FSW0_DEF+2)
  7815  00170A  6EF6               	movwf	tblptrl,c
  7816  00170C  0E79               	movlw	high (_PIN_FSW0_DEF+2)
  7817  00170E  6EF7               	movwf	tblptrh,c
  7818  001710                     	if	0	;tblptru may be non-zero
  7819  001710                     	endif
  7820  001710                     	if	0	;tblptru may be non-zero
  7821  001710                     	endif
  7822  001710  0009               	tblrd		*+
  7823  001712  CFF5 FFD9          	movff	tablat,fsr2l
  7824  001716  0009               	tblrd		*+
  7825  001718  CFF5 FFDA          	movff	tablat,fsr2h
  7826  00171C  500D               	movf	??_init_gpios^0,w,c
  7827  00171E  12DF               	iorwf	indf2,f,c
  7828  001720                     
  7829                           ;src/main.c: 469:     *((PIN_FSW0)->pPORT) |= (PIN_FSW0)->mask;
  7830  001720  0EE3               	movlw	low (_PIN_FSW0_DEF+4)
  7831  001722  6EF6               	movwf	tblptrl,c
  7832  001724  0E79               	movlw	high (_PIN_FSW0_DEF+4)
  7833  001726  6EF7               	movwf	tblptrh,c
  7834  001728                     	if	0	;tblptru may be non-zero
  7835  001728                     	endif
  7836  001728                     	if	0	;tblptru may be non-zero
  7837  001728                     	endif
  7838  001728  0008               	tblrd		*
  7839  00172A  CFF5 F00D          	movff	tablat,??_init_gpios
  7840  00172E  0EDF               	movlw	low _PIN_FSW0_DEF
  7841  001730  6EF6               	movwf	tblptrl,c
  7842  001732                     	if	1	;There is more than 1 active tblptr byte
  7843  001732  0E79               	movlw	high _PIN_FSW0_DEF
  7844  001734  6EF7               	movwf	tblptrh,c
  7845  001736                     	endif
  7846  001736                     	if	0	;There are less than 3 active tblptr bytes
  7847  001736                     	endif
  7848  001736  0009               	tblrd		*+
  7849  001738  CFF5 F00E          	movff	tablat,??_init_gpios+1
  7850  00173C  0009               	tblrd		*+
  7851  00173E  CFF5 F00F          	movff	tablat,??_init_gpios+2
  7852  001742  C00E  FFD9         	movff	??_init_gpios+1,fsr2l
  7853  001746  C00F  FFDA         	movff	??_init_gpios+2,fsr2h
  7854  00174A  500D               	movf	??_init_gpios^0,w,c
  7855  00174C  12DF               	iorwf	indf2,f,c
  7856  00174E                     
  7857                           ;src/main.c: 472:     *((PIN_FSW1)->pTRIS) |= (PIN_FSW1)->mask;
  7858  00174E  0EDE               	movlw	low (_PIN_FSW1_DEF+4)
  7859  001750  6EF6               	movwf	tblptrl,c
  7860  001752  0E79               	movlw	high (_PIN_FSW1_DEF+4)
  7861  001754  6EF7               	movwf	tblptrh,c
  7862  001756                     	if	0	;tblptru may be non-zero
  7863  001756                     	endif
  7864  001756                     	if	0	;tblptru may be non-zero
  7865  001756                     	endif
  7866  001756  0008               	tblrd		*
  7867  001758  CFF5 F00D          	movff	tablat,??_init_gpios
  7868  00175C  0EDC               	movlw	low (_PIN_FSW1_DEF+2)
  7869  00175E  6EF6               	movwf	tblptrl,c
  7870  001760  0E79               	movlw	high (_PIN_FSW1_DEF+2)
  7871  001762  6EF7               	movwf	tblptrh,c
  7872  001764                     	if	0	;tblptru may be non-zero
  7873  001764                     	endif
  7874  001764                     	if	0	;tblptru may be non-zero
  7875  001764                     	endif
  7876  001764  0009               	tblrd		*+
  7877  001766  CFF5 FFD9          	movff	tablat,fsr2l
  7878  00176A  0009               	tblrd		*+
  7879  00176C  CFF5 FFDA          	movff	tablat,fsr2h
  7880  001770  500D               	movf	??_init_gpios^0,w,c
  7881  001772  12DF               	iorwf	indf2,f,c
  7882  001774                     
  7883                           ;src/main.c: 473:     *((PIN_FSW1)->pPORT) |= (PIN_FSW1)->mask;
  7884  001774  0EDE               	movlw	low (_PIN_FSW1_DEF+4)
  7885  001776  6EF6               	movwf	tblptrl,c
  7886  001778  0E79               	movlw	high (_PIN_FSW1_DEF+4)
  7887  00177A  6EF7               	movwf	tblptrh,c
  7888  00177C                     	if	0	;tblptru may be non-zero
  7889  00177C                     	endif
  7890  00177C                     	if	0	;tblptru may be non-zero
  7891  00177C                     	endif
  7892  00177C  0008               	tblrd		*
  7893  00177E  CFF5 F00D          	movff	tablat,??_init_gpios
  7894  001782  0EDA               	movlw	low _PIN_FSW1_DEF
  7895  001784  6EF6               	movwf	tblptrl,c
  7896  001786                     	if	1	;There is more than 1 active tblptr byte
  7897  001786  0E79               	movlw	high _PIN_FSW1_DEF
  7898  001788  6EF7               	movwf	tblptrh,c
  7899  00178A                     	endif
  7900  00178A                     	if	0	;There are less than 3 active tblptr bytes
  7901  00178A                     	endif
  7902  00178A  0009               	tblrd		*+
  7903  00178C  CFF5 F00E          	movff	tablat,??_init_gpios+1
  7904  001790  0009               	tblrd		*+
  7905  001792  CFF5 F00F          	movff	tablat,??_init_gpios+2
  7906  001796  C00E  FFD9         	movff	??_init_gpios+1,fsr2l
  7907  00179A  C00F  FFDA         	movff	??_init_gpios+2,fsr2h
  7908  00179E  500D               	movf	??_init_gpios^0,w,c
  7909  0017A0  12DF               	iorwf	indf2,f,c
  7910  0017A2                     
  7911                           ;src/main.c: 479:     *((PIN_LED_CPU_OK)->pPORT) &= ~(PIN_LED_CPU_OK)->mask;
  7912  0017A2  0ED9               	movlw	low (_PIN_LED_CPU_OK_DEF+4)
  7913  0017A4  6EF6               	movwf	tblptrl,c
  7914  0017A6  0E79               	movlw	high (_PIN_LED_CPU_OK_DEF+4)
  7915  0017A8  6EF7               	movwf	tblptrh,c
  7916  0017AA                     	if	0	;tblptru may be non-zero
  7917  0017AA                     	endif
  7918  0017AA                     	if	0	;tblptru may be non-zero
  7919  0017AA                     	endif
  7920  0017AA  0008               	tblrd		*
  7921  0017AC  50F5               	movf	tablat,w,c
  7922  0017AE  0AFF               	xorlw	255
  7923  0017B0  6E0D               	movwf	??_init_gpios^0,c
  7924  0017B2  0ED5               	movlw	low _PIN_LED_CPU_OK_DEF
  7925  0017B4  6EF6               	movwf	tblptrl,c
  7926  0017B6                     	if	1	;There is more than 1 active tblptr byte
  7927  0017B6  0E79               	movlw	high _PIN_LED_CPU_OK_DEF
  7928  0017B8  6EF7               	movwf	tblptrh,c
  7929  0017BA                     	endif
  7930  0017BA                     	if	0	;There are less than 3 active tblptr bytes
  7931  0017BA                     	endif
  7932  0017BA  0009               	tblrd		*+
  7933  0017BC  CFF5 F00E          	movff	tablat,??_init_gpios+1
  7934  0017C0  0009               	tblrd		*+
  7935  0017C2  CFF5 F00F          	movff	tablat,??_init_gpios+2
  7936  0017C6  C00E  FFD9         	movff	??_init_gpios+1,fsr2l
  7937  0017CA  C00F  FFDA         	movff	??_init_gpios+2,fsr2h
  7938  0017CE  500D               	movf	??_init_gpios^0,w,c
  7939  0017D0  16DF               	andwf	indf2,f,c
  7940  0017D2                     
  7941                           ;src/main.c: 480:     *((PIN_LED_CPU_OK)->pTRIS) &= ~(PIN_LED_CPU_OK)->mask;
  7942  0017D2  0ED9               	movlw	low (_PIN_LED_CPU_OK_DEF+4)
  7943  0017D4  6EF6               	movwf	tblptrl,c
  7944  0017D6  0E79               	movlw	high (_PIN_LED_CPU_OK_DEF+4)
  7945  0017D8  6EF7               	movwf	tblptrh,c
  7946  0017DA                     	if	0	;tblptru may be non-zero
  7947  0017DA                     	endif
  7948  0017DA                     	if	0	;tblptru may be non-zero
  7949  0017DA                     	endif
  7950  0017DA  0008               	tblrd		*
  7951  0017DC  50F5               	movf	tablat,w,c
  7952  0017DE  0AFF               	xorlw	255
  7953  0017E0  6E0D               	movwf	??_init_gpios^0,c
  7954  0017E2  0ED7               	movlw	low (_PIN_LED_CPU_OK_DEF+2)
  7955  0017E4  6EF6               	movwf	tblptrl,c
  7956  0017E6  0E79               	movlw	high (_PIN_LED_CPU_OK_DEF+2)
  7957  0017E8  6EF7               	movwf	tblptrh,c
  7958  0017EA                     	if	0	;tblptru may be non-zero
  7959  0017EA                     	endif
  7960  0017EA                     	if	0	;tblptru may be non-zero
  7961  0017EA                     	endif
  7962  0017EA  0009               	tblrd		*+
  7963  0017EC  CFF5 FFD9          	movff	tablat,fsr2l
  7964  0017F0  0009               	tblrd		*+
  7965  0017F2  CFF5 FFDA          	movff	tablat,fsr2h
  7966  0017F6  500D               	movf	??_init_gpios^0,w,c
  7967  0017F8  16DF               	andwf	indf2,f,c
  7968  0017FA                     
  7969                           ;src/main.c: 483:     *((PIN_LED_ADF_LOCK)->pPORT) &= ~(PIN_LED_ADF_LOCK)->mask;
  7970  0017FA  0ED4               	movlw	low (_PIN_LED_ADF_LOCK_DEF+4)
  7971  0017FC  6EF6               	movwf	tblptrl,c
  7972  0017FE  0E79               	movlw	high (_PIN_LED_ADF_LOCK_DEF+4)
  7973  001800  6EF7               	movwf	tblptrh,c
  7974  001802                     	if	0	;tblptru may be non-zero
  7975  001802                     	endif
  7976  001802                     	if	0	;tblptru may be non-zero
  7977  001802                     	endif
  7978  001802  0008               	tblrd		*
  7979  001804  50F5               	movf	tablat,w,c
  7980  001806  0AFF               	xorlw	255
  7981  001808  6E0D               	movwf	??_init_gpios^0,c
  7982  00180A  0ED0               	movlw	low _PIN_LED_ADF_LOCK_DEF
  7983  00180C  6EF6               	movwf	tblptrl,c
  7984  00180E                     	if	1	;There is more than 1 active tblptr byte
  7985  00180E  0E79               	movlw	high _PIN_LED_ADF_LOCK_DEF
  7986  001810  6EF7               	movwf	tblptrh,c
  7987  001812                     	endif
  7988  001812                     	if	0	;There are less than 3 active tblptr bytes
  7989  001812                     	endif
  7990  001812  0009               	tblrd		*+
  7991  001814  CFF5 F00E          	movff	tablat,??_init_gpios+1
  7992  001818  0009               	tblrd		*+
  7993  00181A  CFF5 F00F          	movff	tablat,??_init_gpios+2
  7994  00181E  C00E  FFD9         	movff	??_init_gpios+1,fsr2l
  7995  001822  C00F  FFDA         	movff	??_init_gpios+2,fsr2h
  7996  001826  500D               	movf	??_init_gpios^0,w,c
  7997  001828  16DF               	andwf	indf2,f,c
  7998  00182A                     
  7999                           ;src/main.c: 484:     *((PIN_LED_ADF_LOCK)->pTRIS) &= ~(PIN_LED_ADF_LOCK)->mask;
  8000  00182A  0ED4               	movlw	low (_PIN_LED_ADF_LOCK_DEF+4)
  8001  00182C  6EF6               	movwf	tblptrl,c
  8002  00182E  0E79               	movlw	high (_PIN_LED_ADF_LOCK_DEF+4)
  8003  001830  6EF7               	movwf	tblptrh,c
  8004  001832                     	if	0	;tblptru may be non-zero
  8005  001832                     	endif
  8006  001832                     	if	0	;tblptru may be non-zero
  8007  001832                     	endif
  8008  001832  0008               	tblrd		*
  8009  001834  50F5               	movf	tablat,w,c
  8010  001836  0AFF               	xorlw	255
  8011  001838  6E0D               	movwf	??_init_gpios^0,c
  8012  00183A  0ED2               	movlw	low (_PIN_LED_ADF_LOCK_DEF+2)
  8013  00183C  6EF6               	movwf	tblptrl,c
  8014  00183E  0E79               	movlw	high (_PIN_LED_ADF_LOCK_DEF+2)
  8015  001840  6EF7               	movwf	tblptrh,c
  8016  001842                     	if	0	;tblptru may be non-zero
  8017  001842                     	endif
  8018  001842                     	if	0	;tblptru may be non-zero
  8019  001842                     	endif
  8020  001842  0009               	tblrd		*+
  8021  001844  CFF5 FFD9          	movff	tablat,fsr2l
  8022  001848  0009               	tblrd		*+
  8023  00184A  CFF5 FFDA          	movff	tablat,fsr2h
  8024  00184E  500D               	movf	??_init_gpios^0,w,c
  8025  001850  16DF               	andwf	indf2,f,c
  8026  001852                     
  8027                           ;src/main.c: 487:     *((PIN_PA_ENABLE)->pPORT) &= ~(PIN_PA_ENABLE)->mask;
  8028  001852  0ECA               	movlw	low (_PIN_PA_ENABLE_DEF+4)
  8029  001854  6EF6               	movwf	tblptrl,c
  8030  001856  0E79               	movlw	high (_PIN_PA_ENABLE_DEF+4)
  8031  001858  6EF7               	movwf	tblptrh,c
  8032  00185A                     	if	0	;tblptru may be non-zero
  8033  00185A                     	endif
  8034  00185A                     	if	0	;tblptru may be non-zero
  8035  00185A                     	endif
  8036  00185A  0008               	tblrd		*
  8037  00185C  50F5               	movf	tablat,w,c
  8038  00185E  0AFF               	xorlw	255
  8039  001860  6E0D               	movwf	??_init_gpios^0,c
  8040  001862  0EC6               	movlw	low _PIN_PA_ENABLE_DEF
  8041  001864  6EF6               	movwf	tblptrl,c
  8042  001866                     	if	1	;There is more than 1 active tblptr byte
  8043  001866  0E79               	movlw	high _PIN_PA_ENABLE_DEF
  8044  001868  6EF7               	movwf	tblptrh,c
  8045  00186A                     	endif
  8046  00186A                     	if	0	;There are less than 3 active tblptr bytes
  8047  00186A                     	endif
  8048  00186A  0009               	tblrd		*+
  8049  00186C  CFF5 F00E          	movff	tablat,??_init_gpios+1
  8050  001870  0009               	tblrd		*+
  8051  001872  CFF5 F00F          	movff	tablat,??_init_gpios+2
  8052  001876  C00E  FFD9         	movff	??_init_gpios+1,fsr2l
  8053  00187A  C00F  FFDA         	movff	??_init_gpios+2,fsr2h
  8054  00187E  500D               	movf	??_init_gpios^0,w,c
  8055  001880  16DF               	andwf	indf2,f,c
  8056  001882                     
  8057                           ;src/main.c: 488:     *((PIN_PA_ENABLE)->pTRIS) &= ~(PIN_PA_ENABLE)->mask;
  8058  001882  0ECA               	movlw	low (_PIN_PA_ENABLE_DEF+4)
  8059  001884  6EF6               	movwf	tblptrl,c
  8060  001886  0E79               	movlw	high (_PIN_PA_ENABLE_DEF+4)
  8061  001888  6EF7               	movwf	tblptrh,c
  8062  00188A                     	if	0	;tblptru may be non-zero
  8063  00188A                     	endif
  8064  00188A                     	if	0	;tblptru may be non-zero
  8065  00188A                     	endif
  8066  00188A  0008               	tblrd		*
  8067  00188C  50F5               	movf	tablat,w,c
  8068  00188E  0AFF               	xorlw	255
  8069  001890  6E0D               	movwf	??_init_gpios^0,c
  8070  001892  0EC8               	movlw	low (_PIN_PA_ENABLE_DEF+2)
  8071  001894  6EF6               	movwf	tblptrl,c
  8072  001896  0E79               	movlw	high (_PIN_PA_ENABLE_DEF+2)
  8073  001898  6EF7               	movwf	tblptrh,c
  8074  00189A                     	if	0	;tblptru may be non-zero
  8075  00189A                     	endif
  8076  00189A                     	if	0	;tblptru may be non-zero
  8077  00189A                     	endif
  8078  00189A  0009               	tblrd		*+
  8079  00189C  CFF5 FFD9          	movff	tablat,fsr2l
  8080  0018A0  0009               	tblrd		*+
  8081  0018A2  CFF5 FFDA          	movff	tablat,fsr2h
  8082  0018A6  500D               	movf	??_init_gpios^0,w,c
  8083  0018A8  16DF               	andwf	indf2,f,c
  8084  0018AA                     
  8085                           ;src/main.c: 491:     *((PIN_LED_PTT_ACTIVE)->pPORT) |= (PIN_LED_PTT_ACTIVE)->mask;
  8086  0018AA  0ECF               	movlw	low (_PIN_LED_PTT_ACTIVE_DEF+4)
  8087  0018AC  6EF6               	movwf	tblptrl,c
  8088  0018AE  0E79               	movlw	high (_PIN_LED_PTT_ACTIVE_DEF+4)
  8089  0018B0  6EF7               	movwf	tblptrh,c
  8090  0018B2                     	if	0	;tblptru may be non-zero
  8091  0018B2                     	endif
  8092  0018B2                     	if	0	;tblptru may be non-zero
  8093  0018B2                     	endif
  8094  0018B2  0008               	tblrd		*
  8095  0018B4  CFF5 F00D          	movff	tablat,??_init_gpios
  8096  0018B8  0ECB               	movlw	low _PIN_LED_PTT_ACTIVE_DEF
  8097  0018BA  6EF6               	movwf	tblptrl,c
  8098  0018BC                     	if	1	;There is more than 1 active tblptr byte
  8099  0018BC  0E79               	movlw	high _PIN_LED_PTT_ACTIVE_DEF
  8100  0018BE  6EF7               	movwf	tblptrh,c
  8101  0018C0                     	endif
  8102  0018C0                     	if	0	;There are less than 3 active tblptr bytes
  8103  0018C0                     	endif
  8104  0018C0  0009               	tblrd		*+
  8105  0018C2  CFF5 F00E          	movff	tablat,??_init_gpios+1
  8106  0018C6  0009               	tblrd		*+
  8107  0018C8  CFF5 F00F          	movff	tablat,??_init_gpios+2
  8108  0018CC  C00E  FFD9         	movff	??_init_gpios+1,fsr2l
  8109  0018D0  C00F  FFDA         	movff	??_init_gpios+2,fsr2h
  8110  0018D4  500D               	movf	??_init_gpios^0,w,c
  8111  0018D6  12DF               	iorwf	indf2,f,c
  8112  0018D8                     
  8113                           ;src/main.c: 492:     *((PIN_LED_PTT_ACTIVE)->pTRIS) &= ~(PIN_LED_PTT_ACTIVE)->mask;
  8114  0018D8  0ECF               	movlw	low (_PIN_LED_PTT_ACTIVE_DEF+4)
  8115  0018DA  6EF6               	movwf	tblptrl,c
  8116  0018DC  0E79               	movlw	high (_PIN_LED_PTT_ACTIVE_DEF+4)
  8117  0018DE  6EF7               	movwf	tblptrh,c
  8118  0018E0                     	if	0	;tblptru may be non-zero
  8119  0018E0                     	endif
  8120  0018E0                     	if	0	;tblptru may be non-zero
  8121  0018E0                     	endif
  8122  0018E0  0008               	tblrd		*
  8123  0018E2  50F5               	movf	tablat,w,c
  8124  0018E4  0AFF               	xorlw	255
  8125  0018E6  6E0D               	movwf	??_init_gpios^0,c
  8126  0018E8  0ECD               	movlw	low (_PIN_LED_PTT_ACTIVE_DEF+2)
  8127  0018EA  6EF6               	movwf	tblptrl,c
  8128  0018EC  0E79               	movlw	high (_PIN_LED_PTT_ACTIVE_DEF+2)
  8129  0018EE  6EF7               	movwf	tblptrh,c
  8130  0018F0                     	if	0	;tblptru may be non-zero
  8131  0018F0                     	endif
  8132  0018F0                     	if	0	;tblptru may be non-zero
  8133  0018F0                     	endif
  8134  0018F0  0009               	tblrd		*+
  8135  0018F2  CFF5 FFD9          	movff	tablat,fsr2l
  8136  0018F6  0009               	tblrd		*+
  8137  0018F8  CFF5 FFDA          	movff	tablat,fsr2h
  8138  0018FC  500D               	movf	??_init_gpios^0,w,c
  8139  0018FE  16DF               	andwf	indf2,f,c
  8140  001900                     
  8141                           ;src/main.c: 495:     *((PIN_USART_TX)->pTRIS) |= (PIN_USART_TX)->mask;
  8142  001900  0EC0               	movlw	low (_PIN_USART_TX_DEF+4)
  8143  001902  6EF6               	movwf	tblptrl,c
  8144  001904  0E79               	movlw	high (_PIN_USART_TX_DEF+4)
  8145  001906  6EF7               	movwf	tblptrh,c
  8146  001908                     	if	0	;tblptru may be non-zero
  8147  001908                     	endif
  8148  001908                     	if	0	;tblptru may be non-zero
  8149  001908                     	endif
  8150  001908  0008               	tblrd		*
  8151  00190A  CFF5 F00D          	movff	tablat,??_init_gpios
  8152  00190E  0EBE               	movlw	low (_PIN_USART_TX_DEF+2)
  8153  001910  6EF6               	movwf	tblptrl,c
  8154  001912  0E79               	movlw	high (_PIN_USART_TX_DEF+2)
  8155  001914  6EF7               	movwf	tblptrh,c
  8156  001916                     	if	0	;tblptru may be non-zero
  8157  001916                     	endif
  8158  001916                     	if	0	;tblptru may be non-zero
  8159  001916                     	endif
  8160  001916  0009               	tblrd		*+
  8161  001918  CFF5 FFD9          	movff	tablat,fsr2l
  8162  00191C  0009               	tblrd		*+
  8163  00191E  CFF5 FFDA          	movff	tablat,fsr2h
  8164  001922  500D               	movf	??_init_gpios^0,w,c
  8165  001924  12DF               	iorwf	indf2,f,c
  8166  001926                     
  8167                           ;src/main.c: 498:     *((PIN_USART_RX)->pTRIS) |= (PIN_USART_RX)->mask;
  8168  001926  0EBB               	movlw	low (_PIN_USART_RX_DEF+4)
  8169  001928  6EF6               	movwf	tblptrl,c
  8170  00192A  0E79               	movlw	high (_PIN_USART_RX_DEF+4)
  8171  00192C  6EF7               	movwf	tblptrh,c
  8172  00192E                     	if	0	;tblptru may be non-zero
  8173  00192E                     	endif
  8174  00192E                     	if	0	;tblptru may be non-zero
  8175  00192E                     	endif
  8176  00192E  0008               	tblrd		*
  8177  001930  CFF5 F00D          	movff	tablat,??_init_gpios
  8178  001934  0EB9               	movlw	low (_PIN_USART_RX_DEF+2)
  8179  001936  6EF6               	movwf	tblptrl,c
  8180  001938  0E79               	movlw	high (_PIN_USART_RX_DEF+2)
  8181  00193A  6EF7               	movwf	tblptrh,c
  8182  00193C                     	if	0	;tblptru may be non-zero
  8183  00193C                     	endif
  8184  00193C                     	if	0	;tblptru may be non-zero
  8185  00193C                     	endif
  8186  00193C  0009               	tblrd		*+
  8187  00193E  CFF5 FFD9          	movff	tablat,fsr2l
  8188  001942  0009               	tblrd		*+
  8189  001944  CFF5 FFDA          	movff	tablat,fsr2h
  8190  001948  500D               	movf	??_init_gpios^0,w,c
  8191  00194A  12DF               	iorwf	indf2,f,c
  8192  00194C  0012               	return		;funcret
  8193  00194E                     __end_of_init_gpios:
  8194                           	opt callstack 0
  8195                           
  8196 ;; *************** function _check_usart *****************
  8197 ;; Defined at:
  8198 ;;		line 282 in file "src/main.c"
  8199 ;; Parameters:    Size  Location     Type
  8200 ;;		None
  8201 ;; Auto vars:     Size  Location     Type
  8202 ;;  power           4   10[BANK2 ] unsigned long 
  8203 ;;  dbm             4    4[BANK2 ] long 
  8204 ;;  dbm             4    0[BANK2 ] long 
  8205 ;;  temp            2   18[BANK2 ] short 
  8206 ;;  c               2   20[BANK2 ] int 
  8207 ;; Return value:  Size  Location     Type
  8208 ;;                  1    wreg      void 
  8209 ;; Registers used:
  8210 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8211 ;; Tracked objects:
  8212 ;;		On entry : 0/0
  8213 ;;		On exit  : 0/0
  8214 ;;		Unchanged: 0/0
  8215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8216 ;;      Params:         0       0       0       0       0       0       0
  8217 ;;      Locals:         0       0       0      22       0       0       0
  8218 ;;      Temps:          0       4       0       0       0       0       0
  8219 ;;      Totals:         0       4       0      22       0       0       0
  8220 ;;Total ram usage:       26 bytes
  8221 ;; Hardware stack levels used:    1
  8222 ;; Hardware stack levels required when called:   14
  8223 ;; This function calls:
  8224 ;;		_KTY82_222_Adc2Temperature
  8225 ;;		___awdiv
  8226 ;;		___awmod
  8227 ;;		___lldiv
  8228 ;;		___llmod
  8229 ;;		_adc_sample
  8230 ;;		_adc_voltage
  8231 ;;		_adf4351_set_tune
  8232 ;;		_apply_ipc
  8233 ;;		_memset
  8234 ;;		_printf
  8235 ;;		_putchar
  8236 ;;		_strncmp
  8237 ;;		_usart_getc
  8238 ;;		_usart_tstc
  8239 ;; This function is called by:
  8240 ;;		_main
  8241 ;; This function uses a non-reentrant model
  8242 ;;
  8243                           
  8244                           	psect	text20
  8245  0009BA                     __ptext20:
  8246                           	opt callstack 0
  8247  0009BA                     _check_usart:
  8248                           	opt callstack 16
  8249  0009BA                     
  8250                           ;src/main.c: 284:     if(usart_tstc()) {
  8251  0009BA  EC3A  F02C         	call	_usart_tstc	;wreg free
  8252  0009BE  500D               	movf	?_usart_tstc^0,w,c
  8253  0009C0  100E               	iorwf	(?_usart_tstc+1)^0,w,c
  8254  0009C2  B4D8               	btfsc	status,2,c
  8255  0009C4  EFE6  F004         	goto	u8511
  8256  0009C8  EFE8  F004         	goto	u8510
  8257  0009CC                     u8511:
  8258  0009CC  EF08  F008         	goto	l498
  8259  0009D0                     u8510:
  8260  0009D0                     
  8261                           ;src/main.c: 285:         int c = usart_getc();
  8262  0009D0  EC78  F02A         	call	_usart_getc	;wreg free
  8263  0009D4  C00D  F214         	movff	?_usart_getc,check_usart@c
  8264  0009D8  C00E  F215         	movff	?_usart_getc+1,check_usart@c+1
  8265  0009DC                     
  8266                           ;src/main.c: 286:         if((c == 13) || (g_cmd_buf_pos >= sizeof(g_cmd_buf))) {
  8267  0009DC  0E0D               	movlw	13
  8268  0009DE  0102               	movlb	2	; () banked
  8269  0009E0  1914               	xorwf	check_usart@c& (0+255),w,b
  8270  0009E2  1115               	iorwf	(check_usart@c+1)& (0+255),w,b
  8271  0009E4  B4D8               	btfsc	status,2,c
  8272  0009E6  EFF7  F004         	goto	u8521
  8273  0009EA  EFF9  F004         	goto	u8520
  8274  0009EE                     u8521:
  8275  0009EE  EF05  F005         	goto	l6657
  8276  0009F2                     u8520:
  8277  0009F2                     
  8278                           ; BSR set to: 2
  8279  0009F2  0100               	movlb	0	; () banked
  8280  0009F4  51F5               	movf	(_g_cmd_buf_pos+1)& (0+255),w,b
  8281  0009F6  E109               	bnz	u8530
  8282  0009F8  0E0A               	movlw	10
  8283  0009FA  5DF4               	subwf	_g_cmd_buf_pos& (0+255),w,b
  8284  0009FC  A0D8               	btfss	status,0,c
  8285  0009FE  EF03  F005         	goto	u8531
  8286  000A02  EF05  F005         	goto	u8530
  8287  000A06                     u8531:
  8288  000A06  EFA4  F007         	goto	l6739
  8289  000A0A                     u8530:
  8290  000A0A                     l6657:
  8291                           
  8292                           ;src/main.c: 287:             putchar('\n');
  8293  000A0A  0E00               	movlw	0
  8294  000A0C  6E13               	movwf	(putchar@c+1)^0,c
  8295  000A0E  0E0A               	movlw	10
  8296  000A10  6E12               	movwf	putchar@c^0,c
  8297  000A12  EC4B  F02C         	call	_putchar	;wreg free
  8298  000A16                     
  8299                           ;src/main.c: 288:             if(strncmp(g_cmd_buf, "ipc ", 4) == 0) {
  8300  000A16  0EDD               	movlw	low _g_cmd_buf
  8301  000A18  6E0D               	movwf	strncmp@_l^0,c
  8302  000A1A  0E01               	movlw	high _g_cmd_buf
  8303  000A1C  6E0E               	movwf	(strncmp@_l+1)^0,c
  8304  000A1E  0ED4               	movlw	low STR_30
  8305  000A20  6E0F               	movwf	strncmp@_r^0,c
  8306  000A22  0E7F               	movlw	high STR_30
  8307  000A24  6E10               	movwf	(strncmp@_r+1)^0,c
  8308  000A26  0E00               	movlw	0
  8309  000A28  6E12               	movwf	(strncmp@n+1)^0,c
  8310  000A2A  0E04               	movlw	4
  8311  000A2C  6E11               	movwf	strncmp@n^0,c
  8312  000A2E  EC2E  F020         	call	_strncmp	;wreg free
  8313  000A32  500D               	movf	?_strncmp^0,w,c
  8314  000A34  100E               	iorwf	(?_strncmp+1)^0,w,c
  8315  000A36  A4D8               	btfss	status,2,c
  8316  000A38  EF20  F005         	goto	u8541
  8317  000A3C  EF22  F005         	goto	u8540
  8318  000A40                     u8541:
  8319  000A40  EF80  F005         	goto	l6681
  8320  000A44                     u8540:
  8321  000A44                     
  8322                           ;src/main.c: 289:                 if((g_cmd_buf[4] >= '0') && (g_cmd_buf[4] <= '9')) {
  8323  000A44  0E2F               	movlw	47
  8324  000A46  0101               	movlb	1	; () banked
  8325  000A48  65E1               	cpfsgt	(_g_cmd_buf+4)& (0+255),b
  8326  000A4A  EF29  F005         	goto	u8551
  8327  000A4E  EF2B  F005         	goto	u8550
  8328  000A52                     u8551:
  8329  000A52  EF3E  F005         	goto	l6667
  8330  000A56                     u8550:
  8331  000A56                     
  8332                           ; BSR set to: 1
  8333  000A56  0E3A               	movlw	58
  8334  000A58  61E1               	cpfslt	(_g_cmd_buf+4)& (0+255),b
  8335  000A5A  EF31  F005         	goto	u8561
  8336  000A5E  EF33  F005         	goto	u8560
  8337  000A62                     u8561:
  8338  000A62  EF3E  F005         	goto	l6667
  8339  000A66                     u8560:
  8340  000A66                     
  8341                           ; BSR set to: 1
  8342                           ;src/main.c: 290:                     apply_ipc(g_cmd_buf[4] - '0');
  8343  000A66  0ED0               	movlw	208
  8344  000A68  25E1               	addwf	(_g_cmd_buf+4)& (0+255),w,b
  8345  000A6A  0100               	movlb	0	; () banked
  8346  000A6C  6FD7               	movwf	apply_ipc@ipc& (0+255),b
  8347  000A6E  6BD8               	clrf	(apply_ipc@ipc+1)& (0+255),b
  8348  000A70  0EFF               	movlw	255
  8349  000A72  23D8               	addwfc	(apply_ipc@ipc+1)& (0+255),f,b
  8350  000A74  EC6E  F02B         	call	_apply_ipc	;wreg free
  8351                           
  8352                           ;src/main.c: 291:                 } else if((g_cmd_buf[4] >= 'a') && (g_cmd_buf[4] <= 'f
      +                          ')) {
  8353  000A78  EF89  F007         	goto	l6733
  8354  000A7C                     l6667:
  8355                           
  8356                           ; BSR set to: 1
  8357  000A7C  0E60               	movlw	96
  8358  000A7E  65E1               	cpfsgt	(_g_cmd_buf+4)& (0+255),b
  8359  000A80  EF44  F005         	goto	u8571
  8360  000A84  EF46  F005         	goto	u8570
  8361  000A88                     u8571:
  8362  000A88  EF59  F005         	goto	l6673
  8363  000A8C                     u8570:
  8364  000A8C                     
  8365                           ; BSR set to: 1
  8366  000A8C  0E67               	movlw	103
  8367  000A8E  61E1               	cpfslt	(_g_cmd_buf+4)& (0+255),b
  8368  000A90  EF4C  F005         	goto	u8581
  8369  000A94  EF4E  F005         	goto	u8580
  8370  000A98                     u8581:
  8371  000A98  EF59  F005         	goto	l6673
  8372  000A9C                     u8580:
  8373  000A9C                     
  8374                           ; BSR set to: 1
  8375                           ;src/main.c: 292:                     apply_ipc(g_cmd_buf[4] - 87);
  8376  000A9C  0EA9               	movlw	169
  8377  000A9E  25E1               	addwf	(_g_cmd_buf+4)& (0+255),w,b
  8378  000AA0  0100               	movlb	0	; () banked
  8379  000AA2  6FD7               	movwf	apply_ipc@ipc& (0+255),b
  8380  000AA4  6BD8               	clrf	(apply_ipc@ipc+1)& (0+255),b
  8381  000AA6  0EFF               	movlw	255
  8382  000AA8  23D8               	addwfc	(apply_ipc@ipc+1)& (0+255),f,b
  8383  000AAA  EC6E  F02B         	call	_apply_ipc	;wreg free
  8384                           
  8385                           ;src/main.c: 293:                 } else if((g_cmd_buf[4] >= 'A') && (g_cmd_buf[4] <= 'F
      +                          ')) {
  8386  000AAE  EF89  F007         	goto	l6733
  8387  000AB2                     l6673:
  8388                           
  8389                           ; BSR set to: 1
  8390  000AB2  0E40               	movlw	64
  8391  000AB4  65E1               	cpfsgt	(_g_cmd_buf+4)& (0+255),b
  8392  000AB6  EF5F  F005         	goto	u8591
  8393  000ABA  EF61  F005         	goto	u8590
  8394  000ABE                     u8591:
  8395  000ABE  EF74  F005         	goto	l6679
  8396  000AC2                     u8590:
  8397  000AC2                     
  8398                           ; BSR set to: 1
  8399  000AC2  0E47               	movlw	71
  8400  000AC4  61E1               	cpfslt	(_g_cmd_buf+4)& (0+255),b
  8401  000AC6  EF67  F005         	goto	u8601
  8402  000ACA  EF69  F005         	goto	u8600
  8403  000ACE                     u8601:
  8404  000ACE  EF74  F005         	goto	l6679
  8405  000AD2                     u8600:
  8406  000AD2                     
  8407                           ; BSR set to: 1
  8408                           ;src/main.c: 294:                     apply_ipc(g_cmd_buf[4] - 55);
  8409  000AD2  0EC9               	movlw	201
  8410  000AD4  25E1               	addwf	(_g_cmd_buf+4)& (0+255),w,b
  8411  000AD6  0100               	movlb	0	; () banked
  8412  000AD8  6FD7               	movwf	apply_ipc@ipc& (0+255),b
  8413  000ADA  6BD8               	clrf	(apply_ipc@ipc+1)& (0+255),b
  8414  000ADC  0EFF               	movlw	255
  8415  000ADE  23D8               	addwfc	(apply_ipc@ipc+1)& (0+255),f,b
  8416  000AE0  EC6E  F02B         	call	_apply_ipc	;wreg free
  8417                           
  8418                           ;src/main.c: 295:                 } else {
  8419  000AE4  EF89  F007         	goto	l6733
  8420  000AE8                     l6679:
  8421                           
  8422                           ; BSR set to: 1
  8423                           ;src/main.c: 296:                     printf("ipc value %c not in range [0-F]\n", g_cmd_
      +                          buf[4]);
  8424  000AE8  0ECB               	movlw	low STR_31
  8425  000AEA  0100               	movlb	0	; () banked
  8426  000AEC  6F97               	movwf	printf@fmt& (0+255),b
  8427  000AEE  0E7D               	movlw	high STR_31
  8428  000AF0  6F98               	movwf	(printf@fmt+1)& (0+255),b
  8429  000AF2  C1E1  F099         	movff	_g_cmd_buf+4,?_printf+2
  8430  000AF6  6B9A               	clrf	(?_printf+3)& (0+255),b
  8431  000AF8  ECFF  F02B         	call	_printf	;wreg free
  8432  000AFC  EF89  F007         	goto	l6733
  8433  000B00                     l6681:
  8434  000B00  0EDD               	movlw	low _g_cmd_buf
  8435  000B02  6E0D               	movwf	strncmp@_l^0,c
  8436  000B04  0E01               	movlw	high _g_cmd_buf
  8437  000B06  6E0E               	movwf	(strncmp@_l+1)^0,c
  8438  000B08  0EC8               	movlw	low STR_32
  8439  000B0A  6E0F               	movwf	strncmp@_r^0,c
  8440  000B0C  0E7F               	movlw	high STR_32
  8441  000B0E  6E10               	movwf	(strncmp@_r+1)^0,c
  8442  000B10  0E00               	movlw	0
  8443  000B12  6E12               	movwf	(strncmp@n+1)^0,c
  8444  000B14  0E05               	movlw	5
  8445  000B16  6E11               	movwf	strncmp@n^0,c
  8446  000B18  EC2E  F020         	call	_strncmp	;wreg free
  8447  000B1C  500D               	movf	?_strncmp^0,w,c
  8448  000B1E  100E               	iorwf	(?_strncmp+1)^0,w,c
  8449  000B20  A4D8               	btfss	status,2,c
  8450  000B22  EF95  F005         	goto	u8611
  8451  000B26  EF97  F005         	goto	u8610
  8452  000B2A                     u8611:
  8453  000B2A  EFD6  F005         	goto	l6695
  8454  000B2E                     u8610:
  8455  000B2E                     
  8456                           ;src/main.c: 299:                 if((g_cmd_buf[5] >= '0') && (g_cmd_buf[5] <= '3')) {
  8457  000B2E  0E2F               	movlw	47
  8458  000B30  0101               	movlb	1	; () banked
  8459  000B32  65E2               	cpfsgt	(_g_cmd_buf+5)& (0+255),b
  8460  000B34  EF9E  F005         	goto	u8621
  8461  000B38  EFA0  F005         	goto	u8620
  8462  000B3C                     u8621:
  8463  000B3C  EFCA  F005         	goto	l6693
  8464  000B40                     u8620:
  8465  000B40                     
  8466                           ; BSR set to: 1
  8467  000B40  0E34               	movlw	52
  8468  000B42  61E2               	cpfslt	(_g_cmd_buf+5)& (0+255),b
  8469  000B44  EFA6  F005         	goto	u8631
  8470  000B48  EFA8  F005         	goto	u8630
  8471  000B4C                     u8631:
  8472  000B4C  EFCA  F005         	goto	l6693
  8473  000B50                     u8630:
  8474  000B50                     
  8475                           ; BSR set to: 1
  8476                           ;src/main.c: 300:                     g_pout = g_cmd_buf[5] - '0';
  8477  000B50  0ED0               	movlw	208
  8478  000B52  25E2               	addwf	(_g_cmd_buf+5)& (0+255),w,b
  8479  000B54  0100               	movlb	0	; () banked
  8480  000B56  6FE9               	movwf	_g_pout& (0+255),b
  8481  000B58  6BEA               	clrf	(_g_pout+1)& (0+255),b
  8482  000B5A  0EFF               	movlw	255
  8483  000B5C  23EA               	addwfc	(_g_pout+1)& (0+255),f,b
  8484  000B5E                     
  8485                           ; BSR set to: 0
  8486                           ;src/main.c: 301:                     adf4351_set_tune(&g_adf4351, g_ipc, g_pout, 1);
  8487  000B5E  0E86               	movlw	low _g_adf4351
  8488  000B60  6FCF               	movwf	adf4351_set_tune@ctx& (0+255),b
  8489  000B62  0E01               	movlw	high _g_adf4351
  8490  000B64  6FD0               	movwf	(adf4351_set_tune@ctx+1)& (0+255),b
  8491  000B66  C0EB  F0D1         	movff	_g_ipc,adf4351_set_tune@icp
  8492  000B6A  C0E9  F0D2         	movff	_g_pout,adf4351_set_tune@pout
  8493  000B6E  0E00               	movlw	0
  8494  000B70  6FD4               	movwf	(adf4351_set_tune@lownoise+1)& (0+255),b
  8495  000B72  0E01               	movlw	1
  8496  000B74  6FD3               	movwf	adf4351_set_tune@lownoise& (0+255),b
  8497  000B76  ECE0  F024         	call	_adf4351_set_tune	;wreg free
  8498  000B7A                     
  8499                           ;src/main.c: 302:                     printf("pout set to %i\n", g_pout);
  8500  000B7A  0E56               	movlw	low STR_33
  8501  000B7C  0100               	movlb	0	; () banked
  8502  000B7E  6F97               	movwf	printf@fmt& (0+255),b
  8503  000B80  0E7F               	movlw	high STR_33
  8504  000B82  6F98               	movwf	(printf@fmt+1)& (0+255),b
  8505  000B84  C0E9  F099         	movff	_g_pout,?_printf+2
  8506  000B88  C0EA  F09A         	movff	_g_pout+1,?_printf+3
  8507  000B8C  ECFF  F02B         	call	_printf	;wreg free
  8508                           
  8509                           ;src/main.c: 303:                 } else {
  8510  000B90  EF89  F007         	goto	l6733
  8511  000B94                     l6693:
  8512                           
  8513                           ; BSR set to: 1
  8514                           ;src/main.c: 304:                     printf("pwr value %c not in range [0-3]\n", g_cmd_
      +                          buf[5]);
  8515  000B94  0EAA               	movlw	low STR_34
  8516  000B96  0100               	movlb	0	; () banked
  8517  000B98  6F97               	movwf	printf@fmt& (0+255),b
  8518  000B9A  0E7D               	movlw	high STR_34
  8519  000B9C  6F98               	movwf	(printf@fmt+1)& (0+255),b
  8520  000B9E  C1E2  F099         	movff	_g_cmd_buf+5,?_printf+2
  8521  000BA2  6B9A               	clrf	(?_printf+3)& (0+255),b
  8522  000BA4  ECFF  F02B         	call	_printf	;wreg free
  8523  000BA8  EF89  F007         	goto	l6733
  8524  000BAC                     l6695:
  8525  000BAC  0EDD               	movlw	low _g_cmd_buf
  8526  000BAE  6E0D               	movwf	strncmp@_l^0,c
  8527  000BB0  0E01               	movlw	high _g_cmd_buf
  8528  000BB2  6E0E               	movwf	(strncmp@_l+1)^0,c
  8529  000BB4  0ED9               	movlw	low STR_35
  8530  000BB6  6E0F               	movwf	strncmp@_r^0,c
  8531  000BB8  0E7F               	movlw	high STR_35
  8532  000BBA  6E10               	movwf	(strncmp@_r+1)^0,c
  8533  000BBC  0E00               	movlw	0
  8534  000BBE  6E12               	movwf	(strncmp@n+1)^0,c
  8535  000BC0  0E05               	movlw	5
  8536  000BC2  6E11               	movwf	strncmp@n^0,c
  8537  000BC4  EC2E  F020         	call	_strncmp	;wreg free
  8538  000BC8  500D               	movf	?_strncmp^0,w,c
  8539  000BCA  100E               	iorwf	(?_strncmp+1)^0,w,c
  8540  000BCC  A4D8               	btfss	status,2,c
  8541  000BCE  EFEB  F005         	goto	u8641
  8542  000BD2  EFED  F005         	goto	u8640
  8543  000BD6                     u8641:
  8544  000BD6  EF47  F006         	goto	l6707
  8545  000BDA                     u8640:
  8546  000BDA                     
  8547                           ;src/main.c: 307:                 s16 temp = KTY82_222_Adc2Temperature(adc_sample(PIN_TE
      +                          MP));
  8548  000BDA  0EF3               	movlw	low _PIN_TEMP_DEF
  8549  000BDC  6E11               	movwf	adc_sample@gpio^0,c
  8550  000BDE  0E79               	movlw	high _PIN_TEMP_DEF
  8551  000BE0  6E12               	movwf	(adc_sample@gpio+1)^0,c
  8552  000BE2  EC10  F029         	call	_adc_sample	;wreg free
  8553  000BE6  C011  F017         	movff	?_adc_sample,KTY82_222_Adc2Temperature@adc_value
  8554  000BEA  C012  F018         	movff	?_adc_sample+1,KTY82_222_Adc2Temperature@adc_value+1
  8555  000BEE  ECE7  F02A         	call	_KTY82_222_Adc2Temperature	;wreg free
  8556  000BF2  C017  F212         	movff	?_KTY82_222_Adc2Temperature,check_usart@temp
  8557  000BF6  C018  F213         	movff	?_KTY82_222_Adc2Temperature+1,check_usart@temp+1
  8558  000BFA                     
  8559                           ;src/main.c: 308:                 printf("temperature is %li.%li\n", temp/10, (temp<0)?-
      +                          temp%10:temp%10);
  8560  000BFA  0102               	movlb	2	; () banked
  8561  000BFC  BF13               	btfsc	(check_usart@temp+1)& (0+255),7,b
  8562  000BFE  EF03  F006         	goto	u8651
  8563  000C02  EF05  F006         	goto	u8650
  8564  000C06                     u8651:
  8565  000C06  EF15  F006         	goto	l6703
  8566  000C0A                     u8650:
  8567  000C0A                     
  8568                           ; BSR set to: 2
  8569  000C0A  C212  F00D         	movff	check_usart@temp,___awmod@dividend
  8570  000C0E  C213  F00E         	movff	check_usart@temp+1,___awmod@dividend+1
  8571  000C12  0E00               	movlw	0
  8572  000C14  6E10               	movwf	(___awmod@divisor+1)^0,c
  8573  000C16  0E0A               	movlw	10
  8574  000C18  6E0F               	movwf	___awmod@divisor^0,c
  8575  000C1A  EC88  F024         	call	___awmod	;wreg free
  8576  000C1E  C00D  F208         	movff	?___awmod,_check_usart$2056
  8577  000C22  C00E  F209         	movff	?___awmod+1,_check_usart$2056+1
  8578  000C26  EF2C  F006         	goto	l6705
  8579  000C2A                     l6703:
  8580                           
  8581                           ; BSR set to: 2
  8582  000C2A  C212  F0D9         	movff	check_usart@temp,??_check_usart
  8583  000C2E  C213  F0DA         	movff	check_usart@temp+1,??_check_usart+1
  8584  000C32  0100               	movlb	0	; () banked
  8585  000C34  1FD9               	comf	??_check_usart& (0+255),f,b
  8586  000C36  1FDA               	comf	(??_check_usart+1)& (0+255),f,b
  8587  000C38  4BD9               	infsnz	??_check_usart& (0+255),f,b
  8588  000C3A  2BDA               	incf	(??_check_usart+1)& (0+255),f,b
  8589  000C3C  C0D9  F00D         	movff	??_check_usart,___awmod@dividend
  8590  000C40  C0DA  F00E         	movff	??_check_usart+1,___awmod@dividend+1
  8591  000C44  0E00               	movlw	0
  8592  000C46  6E10               	movwf	(___awmod@divisor+1)^0,c
  8593  000C48  0E0A               	movlw	10
  8594  000C4A  6E0F               	movwf	___awmod@divisor^0,c
  8595  000C4C  EC88  F024         	call	___awmod	;wreg free
  8596  000C50  C00D  F208         	movff	?___awmod,_check_usart$2056
  8597  000C54  C00E  F209         	movff	?___awmod+1,_check_usart$2056+1
  8598  000C58                     l6705:
  8599  000C58  0E7F               	movlw	low STR_36
  8600  000C5A  0100               	movlb	0	; () banked
  8601  000C5C  6F97               	movwf	printf@fmt& (0+255),b
  8602  000C5E  0E7E               	movlw	high STR_36
  8603  000C60  6F98               	movwf	(printf@fmt+1)& (0+255),b
  8604  000C62  C212  F00D         	movff	check_usart@temp,___awdiv@dividend
  8605  000C66  C213  F00E         	movff	check_usart@temp+1,___awdiv@dividend+1
  8606  000C6A  0E00               	movlw	0
  8607  000C6C  6E10               	movwf	(___awdiv@divisor+1)^0,c
  8608  000C6E  0E0A               	movlw	10
  8609  000C70  6E0F               	movwf	___awdiv@divisor^0,c
  8610  000C72  EC6B  F023         	call	___awdiv	;wreg free
  8611  000C76  C00D  F099         	movff	?___awdiv,?_printf+2
  8612  000C7A  C00E  F09A         	movff	?___awdiv+1,?_printf+3
  8613  000C7E  C208  F09B         	movff	_check_usart$2056,?_printf+4
  8614  000C82  C209  F09C         	movff	_check_usart$2056+1,?_printf+5
  8615  000C86  ECFF  F02B         	call	_printf	;wreg free
  8616                           
  8617                           ;src/main.c: 309:             } else if(strncmp(g_cmd_buf, "rfv", 4) == 0) {
  8618  000C8A  EF89  F007         	goto	l6733
  8619  000C8E                     l6707:
  8620  000C8E  0EDD               	movlw	low _g_cmd_buf
  8621  000C90  6E0D               	movwf	strncmp@_l^0,c
  8622  000C92  0E01               	movlw	high _g_cmd_buf
  8623  000C94  6E0E               	movwf	(strncmp@_l+1)^0,c
  8624  000C96  0EE6               	movlw	low STR_37
  8625  000C98  6E0F               	movwf	strncmp@_r^0,c
  8626  000C9A  0E7F               	movlw	high STR_37
  8627  000C9C  6E10               	movwf	(strncmp@_r+1)^0,c
  8628  000C9E  0E00               	movlw	0
  8629  000CA0  6E12               	movwf	(strncmp@n+1)^0,c
  8630  000CA2  0E04               	movlw	4
  8631  000CA4  6E11               	movwf	strncmp@n^0,c
  8632  000CA6  EC2E  F020         	call	_strncmp	;wreg free
  8633  000CAA  500D               	movf	?_strncmp^0,w,c
  8634  000CAC  100E               	iorwf	(?_strncmp+1)^0,w,c
  8635  000CAE  A4D8               	btfss	status,2,c
  8636  000CB0  EF5C  F006         	goto	u8661
  8637  000CB4  EF5E  F006         	goto	u8660
  8638  000CB8                     u8661:
  8639  000CB8  EF9C  F006         	goto	l6715
  8640  000CBC                     u8660:
  8641  000CBC                     
  8642                           ;src/main.c: 310:                 s32 dbm = (s32)(adc_voltage(PIN_RF_V)/40000) - 80;
  8643  000CBC  0EEE               	movlw	low _PIN_RF_V_DEF
  8644  000CBE  6E30               	movwf	adc_voltage@gpio^0,c
  8645  000CC0  0E79               	movlw	high _PIN_RF_V_DEF
  8646  000CC2  6E31               	movwf	(adc_voltage@gpio+1)^0,c
  8647  000CC4  EC72  F028         	call	_adc_voltage	;wreg free
  8648  000CC8  C030  F20E         	movff	?_adc_voltage,_check_usart$3214
  8649  000CCC  C031  F20F         	movff	?_adc_voltage+1,_check_usart$3214+1
  8650  000CD0  C032  F210         	movff	?_adc_voltage+2,_check_usart$3214+2
  8651  000CD4  C033  F211         	movff	?_adc_voltage+3,_check_usart$3214+3
  8652  000CD8                     
  8653                           ;src/main.c: 310:                 s32 dbm = (s32)(adc_voltage(PIN_RF_V)/40000) - 80;
  8654  000CD8  C20E  F023         	movff	_check_usart$3214,___lldiv@dividend
  8655  000CDC  C20F  F024         	movff	_check_usart$3214+1,___lldiv@dividend+1
  8656  000CE0  C210  F025         	movff	_check_usart$3214+2,___lldiv@dividend+2
  8657  000CE4  C211  F026         	movff	_check_usart$3214+3,___lldiv@dividend+3
  8658  000CE8  0E40               	movlw	64
  8659  000CEA  6E27               	movwf	___lldiv@divisor^0,c
  8660  000CEC  0E9C               	movlw	156
  8661  000CEE  6E28               	movwf	(___lldiv@divisor+1)^0,c
  8662  000CF0  0E00               	movlw	0
  8663  000CF2  6E29               	movwf	(___lldiv@divisor+2)^0,c
  8664  000CF4  0E00               	movlw	0
  8665  000CF6  6E2A               	movwf	(___lldiv@divisor+3)^0,c
  8666  000CF8  EC89  F025         	call	___lldiv	;wreg free
  8667  000CFC  0EB0               	movlw	176
  8668  000CFE  2423               	addwf	?___lldiv^0,w,c
  8669  000D00  0102               	movlb	2	; () banked
  8670  000D02  6F00               	movwf	check_usart@dbm& (0+255),b
  8671  000D04  0EFF               	movlw	255
  8672  000D06  2024               	addwfc	(?___lldiv+1)^0,w,c
  8673  000D08  6F01               	movwf	(check_usart@dbm+1)& (0+255),b
  8674  000D0A  0EFF               	movlw	255
  8675  000D0C  2025               	addwfc	(?___lldiv+2)^0,w,c
  8676  000D0E  6F02               	movwf	(check_usart@dbm+2)& (0+255),b
  8677  000D10  0EFF               	movlw	255
  8678  000D12  2026               	addwfc	(?___lldiv+3)^0,w,c
  8679  000D14  6F03               	movwf	(check_usart@dbm+3)& (0+255),b
  8680  000D16                     
  8681                           ; BSR set to: 2
  8682                           ;src/main.c: 311:                 printf("rfv is %li dBm\n", dbm);
  8683  000D16  0E76               	movlw	low STR_38
  8684  000D18  0100               	movlb	0	; () banked
  8685  000D1A  6F97               	movwf	printf@fmt& (0+255),b
  8686  000D1C  0E7F               	movlw	high STR_38
  8687  000D1E  6F98               	movwf	(printf@fmt+1)& (0+255),b
  8688  000D20  C200  F099         	movff	check_usart@dbm,?_printf+2
  8689  000D24  C201  F09A         	movff	check_usart@dbm+1,?_printf+3
  8690  000D28  C202  F09B         	movff	check_usart@dbm+2,?_printf+4
  8691  000D2C  C203  F09C         	movff	check_usart@dbm+3,?_printf+5
  8692  000D30  ECFF  F02B         	call	_printf	;wreg free
  8693                           
  8694                           ;src/main.c: 312:             } else if(strncmp(g_cmd_buf, "rfr", 4) == 0) {
  8695  000D34  EF89  F007         	goto	l6733
  8696  000D38                     l6715:
  8697  000D38  0EDD               	movlw	low _g_cmd_buf
  8698  000D3A  6E0D               	movwf	strncmp@_l^0,c
  8699  000D3C  0E01               	movlw	high _g_cmd_buf
  8700  000D3E  6E0E               	movwf	(strncmp@_l+1)^0,c
  8701  000D40  0EE2               	movlw	low STR_39
  8702  000D42  6E0F               	movwf	strncmp@_r^0,c
  8703  000D44  0E7F               	movlw	high STR_39
  8704  000D46  6E10               	movwf	(strncmp@_r+1)^0,c
  8705  000D48  0E00               	movlw	0
  8706  000D4A  6E12               	movwf	(strncmp@n+1)^0,c
  8707  000D4C  0E04               	movlw	4
  8708  000D4E  6E11               	movwf	strncmp@n^0,c
  8709  000D50  EC2E  F020         	call	_strncmp	;wreg free
  8710  000D54  500D               	movf	?_strncmp^0,w,c
  8711  000D56  100E               	iorwf	(?_strncmp+1)^0,w,c
  8712  000D58  A4D8               	btfss	status,2,c
  8713  000D5A  EFB1  F006         	goto	u8671
  8714  000D5E  EFB3  F006         	goto	u8670
  8715  000D62                     u8671:
  8716  000D62  EFF1  F006         	goto	l6723
  8717  000D66                     u8670:
  8718  000D66                     
  8719                           ;src/main.c: 313:                 s32 dbm = (s32)(adc_voltage(PIN_RF_R)/40000) - 80;
  8720  000D66  0EE9               	movlw	low _PIN_RF_R_DEF
  8721  000D68  6E30               	movwf	adc_voltage@gpio^0,c
  8722  000D6A  0E79               	movlw	high _PIN_RF_R_DEF
  8723  000D6C  6E31               	movwf	(adc_voltage@gpio+1)^0,c
  8724  000D6E  EC72  F028         	call	_adc_voltage	;wreg free
  8725  000D72  C030  F20E         	movff	?_adc_voltage,_check_usart$3214
  8726  000D76  C031  F20F         	movff	?_adc_voltage+1,_check_usart$3214+1
  8727  000D7A  C032  F210         	movff	?_adc_voltage+2,_check_usart$3214+2
  8728  000D7E  C033  F211         	movff	?_adc_voltage+3,_check_usart$3214+3
  8729  000D82                     
  8730                           ;src/main.c: 313:                 s32 dbm = (s32)(adc_voltage(PIN_RF_R)/40000) - 80;
  8731  000D82  C20E  F023         	movff	_check_usart$3214,___lldiv@dividend
  8732  000D86  C20F  F024         	movff	_check_usart$3214+1,___lldiv@dividend+1
  8733  000D8A  C210  F025         	movff	_check_usart$3214+2,___lldiv@dividend+2
  8734  000D8E  C211  F026         	movff	_check_usart$3214+3,___lldiv@dividend+3
  8735  000D92  0E40               	movlw	64
  8736  000D94  6E27               	movwf	___lldiv@divisor^0,c
  8737  000D96  0E9C               	movlw	156
  8738  000D98  6E28               	movwf	(___lldiv@divisor+1)^0,c
  8739  000D9A  0E00               	movlw	0
  8740  000D9C  6E29               	movwf	(___lldiv@divisor+2)^0,c
  8741  000D9E  0E00               	movlw	0
  8742  000DA0  6E2A               	movwf	(___lldiv@divisor+3)^0,c
  8743  000DA2  EC89  F025         	call	___lldiv	;wreg free
  8744  000DA6  0EB0               	movlw	176
  8745  000DA8  2423               	addwf	?___lldiv^0,w,c
  8746  000DAA  0102               	movlb	2	; () banked
  8747  000DAC  6F04               	movwf	check_usart@dbm_2062& (0+255),b
  8748  000DAE  0EFF               	movlw	255
  8749  000DB0  2024               	addwfc	(?___lldiv+1)^0,w,c
  8750  000DB2  6F05               	movwf	(check_usart@dbm_2062+1)& (0+255),b
  8751  000DB4  0EFF               	movlw	255
  8752  000DB6  2025               	addwfc	(?___lldiv+2)^0,w,c
  8753  000DB8  6F06               	movwf	(check_usart@dbm_2062+2)& (0+255),b
  8754  000DBA  0EFF               	movlw	255
  8755  000DBC  2026               	addwfc	(?___lldiv+3)^0,w,c
  8756  000DBE  6F07               	movwf	(check_usart@dbm_2062+3)& (0+255),b
  8757  000DC0                     
  8758                           ; BSR set to: 2
  8759                           ;src/main.c: 314:                 printf("rfr is %li dBm\n", dbm);
  8760  000DC0  0E66               	movlw	low STR_40
  8761  000DC2  0100               	movlb	0	; () banked
  8762  000DC4  6F97               	movwf	printf@fmt& (0+255),b
  8763  000DC6  0E7F               	movlw	high STR_40
  8764  000DC8  6F98               	movwf	(printf@fmt+1)& (0+255),b
  8765  000DCA  C204  F099         	movff	check_usart@dbm_2062,?_printf+2
  8766  000DCE  C205  F09A         	movff	check_usart@dbm_2062+1,?_printf+3
  8767  000DD2  C206  F09B         	movff	check_usart@dbm_2062+2,?_printf+4
  8768  000DD6  C207  F09C         	movff	check_usart@dbm_2062+3,?_printf+5
  8769  000DDA  ECFF  F02B         	call	_printf	;wreg free
  8770                           
  8771                           ;src/main.c: 315:             } else if(strncmp(g_cmd_buf, "power", 6) == 0) {
  8772  000DDE  EF89  F007         	goto	l6733
  8773  000DE2                     l6723:
  8774  000DE2  0EDD               	movlw	low _g_cmd_buf
  8775  000DE4  6E0D               	movwf	strncmp@_l^0,c
  8776  000DE6  0E01               	movlw	high _g_cmd_buf
  8777  000DE8  6E0E               	movwf	(strncmp@_l+1)^0,c
  8778  000DEA  0ECE               	movlw	low STR_41
  8779  000DEC  6E0F               	movwf	strncmp@_r^0,c
  8780  000DEE  0E7F               	movlw	high STR_41
  8781  000DF0  6E10               	movwf	(strncmp@_r+1)^0,c
  8782  000DF2  0E00               	movlw	0
  8783  000DF4  6E12               	movwf	(strncmp@n+1)^0,c
  8784  000DF6  0E06               	movlw	6
  8785  000DF8  6E11               	movwf	strncmp@n^0,c
  8786  000DFA  EC2E  F020         	call	_strncmp	;wreg free
  8787  000DFE  500D               	movf	?_strncmp^0,w,c
  8788  000E00  100E               	iorwf	(?_strncmp+1)^0,w,c
  8789  000E02  A4D8               	btfss	status,2,c
  8790  000E04  EF06  F007         	goto	u8681
  8791  000E08  EF08  F007         	goto	u8680
  8792  000E0C                     u8681:
  8793  000E0C  EF82  F007         	goto	l6731
  8794  000E10                     u8680:
  8795  000E10                     
  8796                           ;src/main.c: 316:                 u32 power = ((adc_voltage(PIN_VOLTAGE) * 2)+5000)/1000
      +                          0;
  8797  000E10  0EE4               	movlw	low _PIN_VOLTAGE_DEF
  8798  000E12  6E30               	movwf	adc_voltage@gpio^0,c
  8799  000E14  0E79               	movlw	high _PIN_VOLTAGE_DEF
  8800  000E16  6E31               	movwf	(adc_voltage@gpio+1)^0,c
  8801  000E18  EC72  F028         	call	_adc_voltage	;wreg free
  8802  000E1C  90D8               	bcf	status,0,c
  8803  000E1E  3430               	rlcf	?_adc_voltage^0,w,c
  8804  000E20  0100               	movlb	0	; () banked
  8805  000E22  6FD9               	movwf	??_check_usart& (0+255),b
  8806  000E24  3431               	rlcf	(?_adc_voltage+1)^0,w,c
  8807  000E26  6FDA               	movwf	(??_check_usart+1)& (0+255),b
  8808  000E28  3432               	rlcf	(?_adc_voltage+2)^0,w,c
  8809  000E2A  6FDB               	movwf	(??_check_usart+2)& (0+255),b
  8810  000E2C  3433               	rlcf	(?_adc_voltage+3)^0,w,c
  8811  000E2E  6FDC               	movwf	(??_check_usart+3)& (0+255),b
  8812  000E30  0E88               	movlw	136
  8813  000E32  25D9               	addwf	??_check_usart& (0+255),w,b
  8814  000E34  0102               	movlb	2	; () banked
  8815  000E36  6F0E               	movwf	_check_usart$3214& (0+255),b
  8816  000E38  0E13               	movlw	19
  8817  000E3A  0100               	movlb	0	; () banked
  8818  000E3C  21DA               	addwfc	(??_check_usart+1)& (0+255),w,b
  8819  000E3E  0102               	movlb	2	; () banked
  8820  000E40  6F0F               	movwf	(_check_usart$3214+1)& (0+255),b
  8821  000E42  0E00               	movlw	0
  8822  000E44  0100               	movlb	0	; () banked
  8823  000E46  21DB               	addwfc	(??_check_usart+2)& (0+255),w,b
  8824  000E48  0102               	movlb	2	; () banked
  8825  000E4A  6F10               	movwf	(_check_usart$3214+2)& (0+255),b
  8826  000E4C  0E00               	movlw	0
  8827  000E4E  0100               	movlb	0	; () banked
  8828  000E50  21DC               	addwfc	(??_check_usart+3)& (0+255),w,b
  8829  000E52  0102               	movlb	2	; () banked
  8830  000E54  6F11               	movwf	(_check_usart$3214+3)& (0+255),b
  8831  000E56                     
  8832                           ; BSR set to: 2
  8833                           ;src/main.c: 316:                 u32 power = ((adc_voltage(PIN_VOLTAGE) * 2)+5000)/1000
      +                          0;
  8834  000E56  C20E  F023         	movff	_check_usart$3214,___lldiv@dividend
  8835  000E5A  C20F  F024         	movff	_check_usart$3214+1,___lldiv@dividend+1
  8836  000E5E  C210  F025         	movff	_check_usart$3214+2,___lldiv@dividend+2
  8837  000E62  C211  F026         	movff	_check_usart$3214+3,___lldiv@dividend+3
  8838  000E66  0E10               	movlw	16
  8839  000E68  6E27               	movwf	___lldiv@divisor^0,c
  8840  000E6A  0E27               	movlw	39
  8841  000E6C  6E28               	movwf	(___lldiv@divisor+1)^0,c
  8842  000E6E  0E00               	movlw	0
  8843  000E70  6E29               	movwf	(___lldiv@divisor+2)^0,c
  8844  000E72  0E00               	movlw	0
  8845  000E74  6E2A               	movwf	(___lldiv@divisor+3)^0,c
  8846  000E76  EC89  F025         	call	___lldiv	;wreg free
  8847  000E7A  C023  F20A         	movff	?___lldiv,check_usart@power
  8848  000E7E  C024  F20B         	movff	?___lldiv+1,check_usart@power+1
  8849  000E82  C025  F20C         	movff	?___lldiv+2,check_usart@power+2
  8850  000E86  C026  F20D         	movff	?___lldiv+3,check_usart@power+3
  8851  000E8A                     
  8852                           ;src/main.c: 317:                 printf("power voltage is %lu.%02luV\n", power/100, pow
      +                          er%100);
  8853  000E8A  0E2D               	movlw	low STR_42
  8854  000E8C  0100               	movlb	0	; () banked
  8855  000E8E  6F97               	movwf	printf@fmt& (0+255),b
  8856  000E90  0E7E               	movlw	high STR_42
  8857  000E92  6F98               	movwf	(printf@fmt+1)& (0+255),b
  8858  000E94  C20A  F023         	movff	check_usart@power,___lldiv@dividend
  8859  000E98  C20B  F024         	movff	check_usart@power+1,___lldiv@dividend+1
  8860  000E9C  C20C  F025         	movff	check_usart@power+2,___lldiv@dividend+2
  8861  000EA0  C20D  F026         	movff	check_usart@power+3,___lldiv@dividend+3
  8862  000EA4  0E64               	movlw	100
  8863  000EA6  6E27               	movwf	___lldiv@divisor^0,c
  8864  000EA8  0E00               	movlw	0
  8865  000EAA  6E28               	movwf	(___lldiv@divisor+1)^0,c
  8866  000EAC  0E00               	movlw	0
  8867  000EAE  6E29               	movwf	(___lldiv@divisor+2)^0,c
  8868  000EB0  0E00               	movlw	0
  8869  000EB2  6E2A               	movwf	(___lldiv@divisor+3)^0,c
  8870  000EB4  EC89  F025         	call	___lldiv	;wreg free
  8871  000EB8  C023  F099         	movff	?___lldiv,?_printf+2
  8872  000EBC  C024  F09A         	movff	?___lldiv+1,?_printf+3
  8873  000EC0  C025  F09B         	movff	?___lldiv+2,?_printf+4
  8874  000EC4  C026  F09C         	movff	?___lldiv+3,?_printf+5
  8875  000EC8  C20A  F00D         	movff	check_usart@power,___llmod@dividend
  8876  000ECC  C20B  F00E         	movff	check_usart@power+1,___llmod@dividend+1
  8877  000ED0  C20C  F00F         	movff	check_usart@power+2,___llmod@dividend+2
  8878  000ED4  C20D  F010         	movff	check_usart@power+3,___llmod@dividend+3
  8879  000ED8  0E64               	movlw	100
  8880  000EDA  6E11               	movwf	___llmod@divisor^0,c
  8881  000EDC  0E00               	movlw	0
  8882  000EDE  6E12               	movwf	(___llmod@divisor+1)^0,c
  8883  000EE0  0E00               	movlw	0
  8884  000EE2  6E13               	movwf	(___llmod@divisor+2)^0,c
  8885  000EE4  0E00               	movlw	0
  8886  000EE6  6E14               	movwf	(___llmod@divisor+3)^0,c
  8887  000EE8  ECBF  F026         	call	___llmod	;wreg free
  8888  000EEC  C00D  F09D         	movff	?___llmod,?_printf+6
  8889  000EF0  C00E  F09E         	movff	?___llmod+1,?_printf+7
  8890  000EF4  C00F  F09F         	movff	?___llmod+2,?_printf+8
  8891  000EF8  C010  F0A0         	movff	?___llmod+3,?_printf+9
  8892  000EFC  ECFF  F02B         	call	_printf	;wreg free
  8893                           
  8894                           ;src/main.c: 318:             } else {
  8895  000F00  EF89  F007         	goto	l6733
  8896  000F04                     l6731:
  8897                           
  8898                           ;src/main.c: 319:                 printf("invalid command!\n");
  8899  000F04  0E22               	movlw	low STR_43
  8900  000F06  0100               	movlb	0	; () banked
  8901  000F08  6F97               	movwf	printf@fmt& (0+255),b
  8902  000F0A  0E7F               	movlw	high STR_43
  8903  000F0C  6F98               	movwf	(printf@fmt+1)& (0+255),b
  8904  000F0E  ECFF  F02B         	call	_printf	;wreg free
  8905  000F12                     l6733:
  8906                           
  8907                           ;src/main.c: 322:             memset(g_cmd_buf, 0, g_cmd_buf_pos);
  8908  000F12  0EDD               	movlw	low _g_cmd_buf
  8909  000F14  6E0D               	movwf	memset@dest^0,c
  8910  000F16  0E01               	movlw	high _g_cmd_buf
  8911  000F18  6E0E               	movwf	(memset@dest+1)^0,c
  8912  000F1A  0E00               	movlw	0
  8913  000F1C  6E10               	movwf	(memset@c+1)^0,c
  8914  000F1E  0E00               	movlw	0
  8915  000F20  6E0F               	movwf	memset@c^0,c
  8916  000F22  C0F4  F011         	movff	_g_cmd_buf_pos,memset@n
  8917  000F26  C0F5  F012         	movff	_g_cmd_buf_pos+1,memset@n+1
  8918  000F2A  ECD5  F01C         	call	_memset	;wreg free
  8919  000F2E                     
  8920                           ;src/main.c: 323:             g_cmd_buf_pos = 0;
  8921  000F2E  0E00               	movlw	0
  8922  000F30  0100               	movlb	0	; () banked
  8923  000F32  6FF5               	movwf	(_g_cmd_buf_pos+1)& (0+255),b
  8924  000F34  0E00               	movlw	0
  8925  000F36  6FF4               	movwf	_g_cmd_buf_pos& (0+255),b
  8926  000F38                     
  8927                           ; BSR set to: 0
  8928                           ;src/main.c: 324:             printf("cmd: ");
  8929  000F38  0EC2               	movlw	low STR_25
  8930  000F3A  6F97               	movwf	printf@fmt& (0+255),b
  8931  000F3C  0E7F               	movlw	high STR_25
  8932  000F3E  6F98               	movwf	(printf@fmt+1)& (0+255),b
  8933  000F40  ECFF  F02B         	call	_printf	;wreg free
  8934                           
  8935                           ;src/main.c: 325:         } else if(c == 8) {
  8936  000F44  EF08  F008         	goto	l498
  8937  000F48                     l6739:
  8938                           
  8939                           ; BSR set to: 0
  8940  000F48  0E08               	movlw	8
  8941  000F4A  0102               	movlb	2	; () banked
  8942  000F4C  1914               	xorwf	check_usart@c& (0+255),w,b
  8943  000F4E  1115               	iorwf	(check_usart@c+1)& (0+255),w,b
  8944  000F50  A4D8               	btfss	status,2,c
  8945  000F52  EFAD  F007         	goto	u8691
  8946  000F56  EFAF  F007         	goto	u8690
  8947  000F5A                     u8691:
  8948  000F5A  EFD0  F007         	goto	l6749
  8949  000F5E                     u8690:
  8950  000F5E                     
  8951                           ; BSR set to: 2
  8952                           ;src/main.c: 326:    if(g_cmd_buf_pos > 0) {
  8953  000F5E  0100               	movlb	0	; () banked
  8954  000F60  BFF5               	btfsc	(_g_cmd_buf_pos+1)& (0+255),7,b
  8955  000F62  EFBB  F007         	goto	u8701
  8956  000F66  51F5               	movf	(_g_cmd_buf_pos+1)& (0+255),w,b
  8957  000F68  E108               	bnz	u8700
  8958  000F6A  05F4               	decf	_g_cmd_buf_pos& (0+255),w,b
  8959  000F6C  A0D8               	btfss	status,0,c
  8960  000F6E  EFBB  F007         	goto	u8701
  8961  000F72  EFBD  F007         	goto	u8700
  8962  000F76                     u8701:
  8963  000F76  EF08  F008         	goto	l492
  8964  000F7A                     u8700:
  8965  000F7A                     
  8966                           ; BSR set to: 0
  8967                           ;src/main.c: 327:     g_cmd_buf_pos--;
  8968  000F7A  07F4               	decf	_g_cmd_buf_pos& (0+255),f,b
  8969  000F7C  A0D8               	btfss	status,0,c
  8970  000F7E  07F5               	decf	(_g_cmd_buf_pos+1)& (0+255),f,b
  8971  000F80                     
  8972                           ; BSR set to: 0
  8973                           ;src/main.c: 328:     g_cmd_buf[g_cmd_buf_pos] = 0;
  8974  000F80  0EDD               	movlw	low _g_cmd_buf
  8975  000F82  25F4               	addwf	_g_cmd_buf_pos& (0+255),w,b
  8976  000F84  6ED9               	movwf	fsr2l,c
  8977  000F86  0E01               	movlw	high _g_cmd_buf
  8978  000F88  21F5               	addwfc	(_g_cmd_buf_pos+1)& (0+255),w,b
  8979  000F8A  6EDA               	movwf	fsr2h,c
  8980  000F8C  0E00               	movlw	0
  8981  000F8E  6EDF               	movwf	indf2,c
  8982  000F90                     
  8983                           ; BSR set to: 0
  8984                           ;src/main.c: 329:     printf("\b \b");
  8985  000F90  0EDE               	movlw	low STR_45
  8986  000F92  6F97               	movwf	printf@fmt& (0+255),b
  8987  000F94  0E7F               	movlw	high STR_45
  8988  000F96  6F98               	movwf	(printf@fmt+1)& (0+255),b
  8989  000F98  ECFF  F02B         	call	_printf	;wreg free
  8990  000F9C  EF08  F008         	goto	l498
  8991  000FA0                     l6749:
  8992                           
  8993                           ; BSR set to: 2
  8994                           ;src/main.c: 332:             g_cmd_buf[g_cmd_buf_pos++] = c;
  8995  000FA0  0EDD               	movlw	low _g_cmd_buf
  8996  000FA2  0100               	movlb	0	; () banked
  8997  000FA4  25F4               	addwf	_g_cmd_buf_pos& (0+255),w,b
  8998  000FA6  6ED9               	movwf	fsr2l,c
  8999  000FA8  0E01               	movlw	high _g_cmd_buf
  9000  000FAA  21F5               	addwfc	(_g_cmd_buf_pos+1)& (0+255),w,b
  9001  000FAC  6EDA               	movwf	fsr2h,c
  9002  000FAE  C214  FFDF         	movff	check_usart@c,indf2
  9003  000FB2                     
  9004                           ; BSR set to: 0
  9005  000FB2  4BF4               	infsnz	_g_cmd_buf_pos& (0+255),f,b
  9006  000FB4  2BF5               	incf	(_g_cmd_buf_pos+1)& (0+255),f,b
  9007  000FB6                     
  9008                           ; BSR set to: 0
  9009                           ;src/main.c: 333:             if((c > 31) && (c < 128)) {
  9010  000FB6  0102               	movlb	2	; () banked
  9011  000FB8  BF15               	btfsc	(check_usart@c+1)& (0+255),7,b
  9012  000FBA  EFE8  F007         	goto	u8711
  9013  000FBE  5115               	movf	(check_usart@c+1)& (0+255),w,b
  9014  000FC0  E109               	bnz	u8710
  9015  000FC2  0E20               	movlw	32
  9016  000FC4  5D14               	subwf	check_usart@c& (0+255),w,b
  9017  000FC6  A0D8               	btfss	status,0,c
  9018  000FC8  EFE8  F007         	goto	u8711
  9019  000FCC  EFEA  F007         	goto	u8710
  9020  000FD0                     u8711:
  9021  000FD0  EF00  F008         	goto	l6759
  9022  000FD4                     u8710:
  9023  000FD4                     
  9024                           ; BSR set to: 2
  9025  000FD4  BF15               	btfsc	(check_usart@c+1)& (0+255),7,b
  9026  000FD6  EFF8  F007         	goto	u8720
  9027  000FDA  5115               	movf	(check_usart@c+1)& (0+255),w,b
  9028  000FDC  E107               	bnz	u8721
  9029  000FDE  0E80               	movlw	128
  9030  000FE0  5D14               	subwf	check_usart@c& (0+255),w,b
  9031  000FE2  B0D8               	btfsc	status,0,c
  9032  000FE4  EFF6  F007         	goto	u8721
  9033  000FE8  EFF8  F007         	goto	u8720
  9034  000FEC                     u8721:
  9035  000FEC  EF00  F008         	goto	l6759
  9036  000FF0                     u8720:
  9037  000FF0                     
  9038                           ; BSR set to: 2
  9039                           ;src/main.c: 334:                 putchar(c);
  9040  000FF0  C214  F012         	movff	check_usart@c,putchar@c
  9041  000FF4  C215  F013         	movff	check_usart@c+1,putchar@c+1
  9042  000FF8  EC4B  F02C         	call	_putchar	;wreg free
  9043                           
  9044                           ;src/main.c: 335:             } else {
  9045  000FFC  EF08  F008         	goto	l498
  9046  001000                     l6759:
  9047                           
  9048                           ; BSR set to: 2
  9049                           ;src/main.c: 336:                 putchar('.');
  9050  001000  0E00               	movlw	0
  9051  001002  6E13               	movwf	(putchar@c+1)^0,c
  9052  001004  0E2E               	movlw	46
  9053  001006  6E12               	movwf	putchar@c^0,c
  9054  001008  EC4B  F02C         	call	_putchar	;wreg free
  9055  00100C  EF08  F008         	goto	l498
  9056  001010                     l492:
  9057  001010                     l498:
  9058  001010  0012               	return		;funcret
  9059  001012                     __end_of_check_usart:
  9060                           	opt callstack 0
  9061                           
  9062 ;; *************** function _usart_tstc *****************
  9063 ;; Defined at:
  9064 ;;		line 50 in file "src/driver/usart.c"
  9065 ;; Parameters:    Size  Location     Type
  9066 ;;		None
  9067 ;; Auto vars:     Size  Location     Type
  9068 ;;		None
  9069 ;; Return value:  Size  Location     Type
  9070 ;;                  2   12[COMRAM] int 
  9071 ;; Registers used:
  9072 ;;		wreg, status,2, status,0
  9073 ;; Tracked objects:
  9074 ;;		On entry : 0/0
  9075 ;;		On exit  : 0/0
  9076 ;;		Unchanged: 0/0
  9077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9078 ;;      Params:         2       0       0       0       0       0       0
  9079 ;;      Locals:         0       0       0       0       0       0       0
  9080 ;;      Temps:          0       0       0       0       0       0       0
  9081 ;;      Totals:         2       0       0       0       0       0       0
  9082 ;;Total ram usage:        2 bytes
  9083 ;; Hardware stack levels used:    1
  9084 ;; Hardware stack levels required when called:    2
  9085 ;; This function calls:
  9086 ;;		Nothing
  9087 ;; This function is called by:
  9088 ;;		_check_usart
  9089 ;; This function uses a non-reentrant model
  9090 ;;
  9091                           
  9092                           	psect	text21
  9093  005874                     __ptext21:
  9094                           	opt callstack 0
  9095  005874                     _usart_tstc:
  9096                           	opt callstack 27
  9097  005874                     
  9098                           ;src/driver/usart.c: 52:  return (g_usart_wpos != g_usart_rpos);
  9099  005874  506F               	movf	_g_usart_rpos^0,w,c	;volatile
  9100  005876  186D               	xorwf	_g_usart_wpos^0,w,c	;volatile
  9101  005878  E107               	bnz	u8331
  9102  00587A  5070               	movf	(_g_usart_rpos+1)^0,w,c	;volatile
  9103  00587C  186E               	xorwf	(_g_usart_wpos+1)^0,w,c	;volatile
  9104  00587E  A4D8               	btfss	status,2,c
  9105  005880  EF44  F02C         	goto	u8331
  9106  005884  EF47  F02C         	goto	u8330
  9107  005888                     u8331:
  9108  005888  0E01               	movlw	1
  9109  00588A  EF48  F02C         	goto	u8340
  9110  00588E                     u8330:
  9111  00588E  0E00               	movlw	0
  9112  005890                     u8340:
  9113  005890  6E0D               	movwf	?_usart_tstc^0,c
  9114  005892  6A0E               	clrf	(?_usart_tstc+1)^0,c
  9115  005894  0012               	return		;funcret
  9116  005896                     __end_of_usart_tstc:
  9117                           	opt callstack 0
  9118                           
  9119 ;; *************** function _usart_getc *****************
  9120 ;; Defined at:
  9121 ;;		line 56 in file "src/driver/usart.c"
  9122 ;; Parameters:    Size  Location     Type
  9123 ;;		None
  9124 ;; Auto vars:     Size  Location     Type
  9125 ;;  res             2   16[COMRAM] int 
  9126 ;; Return value:  Size  Location     Type
  9127 ;;                  2   12[COMRAM] int 
  9128 ;; Registers used:
  9129 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9130 ;; Tracked objects:
  9131 ;;		On entry : 0/0
  9132 ;;		On exit  : 0/0
  9133 ;;		Unchanged: 0/0
  9134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9135 ;;      Params:         2       0       0       0       0       0       0
  9136 ;;      Locals:         2       0       0       0       0       0       0
  9137 ;;      Temps:          2       0       0       0       0       0       0
  9138 ;;      Totals:         6       0       0       0       0       0       0
  9139 ;;Total ram usage:        6 bytes
  9140 ;; Hardware stack levels used:    1
  9141 ;; Hardware stack levels required when called:    2
  9142 ;; This function calls:
  9143 ;;		Nothing
  9144 ;; This function is called by:
  9145 ;;		_check_usart
  9146 ;; This function uses a non-reentrant model
  9147 ;;
  9148                           
  9149                           	psect	text22
  9150  0054F0                     __ptext22:
  9151                           	opt callstack 0
  9152  0054F0                     _usart_getc:
  9153                           	opt callstack 27
  9154  0054F0                     l6465:
  9155  0054F0  506F               	movf	_g_usart_rpos^0,w,c	;volatile
  9156  0054F2  186D               	xorwf	_g_usart_wpos^0,w,c	;volatile
  9157  0054F4  E109               	bnz	u8350
  9158  0054F6  5070               	movf	(_g_usart_rpos+1)^0,w,c	;volatile
  9159  0054F8  186E               	xorwf	(_g_usart_wpos+1)^0,w,c	;volatile
  9160  0054FA  B4D8               	btfsc	status,2,c
  9161  0054FC  EF82  F02A         	goto	u8351
  9162  005500  EF84  F02A         	goto	u8350
  9163  005504                     u8351:
  9164  005504  EF78  F02A         	goto	l6465
  9165  005508                     u8350:
  9166  005508                     
  9167                           ;src/driver/usart.c: 64:  res = g_usart_buf[g_usart_rpos];
  9168  005508  0E00               	movlw	low _g_usart_buf
  9169  00550A  246F               	addwf	_g_usart_rpos^0,w,c	;volatile
  9170  00550C  6ED9               	movwf	fsr2l,c
  9171  00550E  0E01               	movlw	high _g_usart_buf
  9172  005510  2070               	addwfc	(_g_usart_rpos+1)^0,w,c	;volatile
  9173  005512  6EDA               	movwf	fsr2h,c
  9174  005514  50DF               	movf	indf2,w,c
  9175  005516  6E0F               	movwf	??_usart_getc^0,c
  9176  005518  500F               	movf	??_usart_getc^0,w,c
  9177  00551A  6E11               	movwf	usart_getc@res^0,c
  9178  00551C  6A12               	clrf	(usart_getc@res+1)^0,c
  9179  00551E                     
  9180                           ;src/driver/usart.c: 65:  g_usart_rpos = (g_usart_rpos+1) % sizeof(g_usart_buf);
  9181  00551E  0E01               	movlw	1
  9182  005520  246F               	addwf	_g_usart_rpos^0,w,c	;volatile
  9183  005522  6E0F               	movwf	??_usart_getc^0,c
  9184  005524  0E00               	movlw	0
  9185  005526  2070               	addwfc	(_g_usart_rpos+1)^0,w,c	;volatile
  9186  005528  6E10               	movwf	(??_usart_getc+1)^0,c
  9187  00552A  0E7F               	movlw	127
  9188  00552C  140F               	andwf	??_usart_getc^0,w,c
  9189  00552E  6E6F               	movwf	_g_usart_rpos^0,c	;volatile
  9190  005530  6A70               	clrf	(_g_usart_rpos+1)^0,c	;volatile
  9191  005532                     
  9192                           ;src/driver/usart.c: 68:  return res;
  9193  005532  C011  F00D         	movff	usart_getc@res,?_usart_getc
  9194  005536  C012  F00E         	movff	usart_getc@res+1,?_usart_getc+1
  9195  00553A  0012               	return		;funcret
  9196  00553C                     __end_of_usart_getc:
  9197                           	opt callstack 0
  9198                           
  9199 ;; *************** function _putchar *****************
  9200 ;; Defined at:
  9201 ;;		line 4 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/putchar.c"
  9202 ;; Parameters:    Size  Location     Type
  9203 ;;  c               2   17[COMRAM] int 
  9204 ;; Auto vars:     Size  Location     Type
  9205 ;;		None
  9206 ;; Return value:  Size  Location     Type
  9207 ;;                  2   17[COMRAM] int 
  9208 ;; Registers used:
  9209 ;;		wreg, status,2, status,0, cstack
  9210 ;; Tracked objects:
  9211 ;;		On entry : 0/0
  9212 ;;		On exit  : 0/0
  9213 ;;		Unchanged: 0/0
  9214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9215 ;;      Params:         2       0       0       0       0       0       0
  9216 ;;      Locals:         0       0       0       0       0       0       0
  9217 ;;      Temps:          0       0       0       0       0       0       0
  9218 ;;      Totals:         2       0       0       0       0       0       0
  9219 ;;Total ram usage:        2 bytes
  9220 ;; Hardware stack levels used:    1
  9221 ;; Hardware stack levels required when called:    4
  9222 ;; This function calls:
  9223 ;;		_fputc
  9224 ;; This function is called by:
  9225 ;;		_check_usart
  9226 ;; This function uses a non-reentrant model
  9227 ;;
  9228                           
  9229                           	psect	text23
  9230  005896                     __ptext23:
  9231                           	opt callstack 0
  9232  005896                     _putchar:
  9233                           	opt callstack 25
  9234  005896                     
  9235                           ;	Return value of _putchar is never used
  9236  005896  C012  F00E         	movff	putchar@c,fputc@c
  9237  00589A  C013  F00F         	movff	putchar@c+1,fputc@c+1
  9238  00589E  0E00               	movlw	0
  9239  0058A0  6E10               	movwf	fputc@fp^0,c
  9240  0058A2  0E00               	movlw	0
  9241  0058A4  6E11               	movwf	(fputc@fp+1)^0,c
  9242  0058A6  EC13  F02C         	call	_fputc	;wreg free
  9243  0058AA  0012               	return		;funcret
  9244  0058AC                     __end_of_putchar:
  9245                           	opt callstack 0
  9246                           
  9247 ;; *************** function _apply_ipc *****************
  9248 ;; Defined at:
  9249 ;;		line 189 in file "src/main.c"
  9250 ;; Parameters:    Size  Location     Type
  9251 ;;  ipc             2   87[BANK0 ] int 
  9252 ;; Auto vars:     Size  Location     Type
  9253 ;;		None
  9254 ;; Return value:  Size  Location     Type
  9255 ;;                  1    wreg      void 
  9256 ;; Registers used:
  9257 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9258 ;; Tracked objects:
  9259 ;;		On entry : 0/0
  9260 ;;		On exit  : 0/0
  9261 ;;		Unchanged: 0/0
  9262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9263 ;;      Params:         0       2       0       0       0       0       0
  9264 ;;      Locals:         0       0       0       0       0       0       0
  9265 ;;      Temps:          0       0       0       0       0       0       0
  9266 ;;      Totals:         0       2       0       0       0       0       0
  9267 ;;Total ram usage:        2 bytes
  9268 ;; Hardware stack levels used:    1
  9269 ;; Hardware stack levels required when called:   13
  9270 ;; This function calls:
  9271 ;;		_adf4351_set_tune
  9272 ;;		_printf
  9273 ;; This function is called by:
  9274 ;;		_check_usart
  9275 ;; This function uses a non-reentrant model
  9276 ;;
  9277                           
  9278                           	psect	text24
  9279  0056DC                     __ptext24:
  9280                           	opt callstack 0
  9281  0056DC                     _apply_ipc:
  9282                           	opt callstack 16
  9283  0056DC                     
  9284                           ;src/main.c: 189: static void apply_ipc(int ipc);src/main.c: 190: {;src/main.c: 191:    
      +                           g_ipc = ipc;
  9285  0056DC  C0D7  F0EB         	movff	apply_ipc@ipc,_g_ipc
  9286  0056E0  C0D8  F0EC         	movff	apply_ipc@ipc+1,_g_ipc+1
  9287  0056E4                     
  9288                           ;src/main.c: 192:     adf4351_set_tune(&g_adf4351, g_ipc, g_pout, 1);
  9289  0056E4  0E86               	movlw	low _g_adf4351
  9290  0056E6  0100               	movlb	0	; () banked
  9291  0056E8  6FCF               	movwf	adf4351_set_tune@ctx& (0+255),b
  9292  0056EA  0E01               	movlw	high _g_adf4351
  9293  0056EC  6FD0               	movwf	(adf4351_set_tune@ctx+1)& (0+255),b
  9294  0056EE  C0EB  F0D1         	movff	_g_ipc,adf4351_set_tune@icp
  9295  0056F2  C0E9  F0D2         	movff	_g_pout,adf4351_set_tune@pout
  9296  0056F6  0E00               	movlw	0
  9297  0056F8  6FD4               	movwf	(adf4351_set_tune@lownoise+1)& (0+255),b
  9298  0056FA  0E01               	movlw	1
  9299  0056FC  6FD3               	movwf	adf4351_set_tune@lownoise& (0+255),b
  9300  0056FE  ECE0  F024         	call	_adf4351_set_tune	;wreg free
  9301                           
  9302                           ;src/main.c: 193:     printf("ipc set to %i\n", g_ipc);
  9303  005702  0E86               	movlw	low STR_26
  9304  005704  0100               	movlb	0	; () banked
  9305  005706  6F97               	movwf	printf@fmt& (0+255),b
  9306  005708  0E7F               	movlw	high STR_26
  9307  00570A  6F98               	movwf	(printf@fmt+1)& (0+255),b
  9308  00570C  C0EB  F099         	movff	_g_ipc,?_printf+2
  9309  005710  C0EC  F09A         	movff	_g_ipc+1,?_printf+3
  9310  005714  ECFF  F02B         	call	_printf	;wreg free
  9311  005718  0012               	return		;funcret
  9312  00571A                     __end_of_apply_ipc:
  9313                           	opt callstack 0
  9314                           
  9315 ;; *************** function _adf4351_set_tune *****************
  9316 ;; Defined at:
  9317 ;;		line 113 in file "src/driver/adf4351.c"
  9318 ;; Parameters:    Size  Location     Type
  9319 ;;  ctx             2   79[BANK0 ] PTR struct adf4351_ctx
  9320 ;;		 -> g_adf4351(55), 
  9321 ;;  icp             1   81[BANK0 ] unsigned char 
  9322 ;;  pout            1   82[BANK0 ] unsigned char 
  9323 ;;  lownoise        2   83[BANK0 ] int 
  9324 ;; Auto vars:     Size  Location     Type
  9325 ;;		None
  9326 ;; Return value:  Size  Location     Type
  9327 ;;                  1    wreg      void 
  9328 ;; Registers used:
  9329 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9330 ;; Tracked objects:
  9331 ;;		On entry : 0/0
  9332 ;;		On exit  : 0/0
  9333 ;;		Unchanged: 0/0
  9334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9335 ;;      Params:         0       6       0       0       0       0       0
  9336 ;;      Locals:         0       2       0       0       0       0       0
  9337 ;;      Temps:          0       0       0       0       0       0       0
  9338 ;;      Totals:         0       8       0       0       0       0       0
  9339 ;;Total ram usage:        8 bytes
  9340 ;; Hardware stack levels used:    1
  9341 ;; Hardware stack levels required when called:   12
  9342 ;; This function calls:
  9343 ;;		_adf4351_setup
  9344 ;;		_printf
  9345 ;; This function is called by:
  9346 ;;		_main
  9347 ;;		_apply_ipc
  9348 ;;		_check_usart
  9349 ;;		_check_adf4351_lock
  9350 ;; This function uses a non-reentrant model
  9351 ;;
  9352                           
  9353                           	psect	text25
  9354  0049C0                     __ptext25:
  9355                           	opt callstack 0
  9356  0049C0                     _adf4351_set_tune:
  9357                           	opt callstack 16
  9358  0049C0                     
  9359                           ;src/driver/adf4351.c: 113: void adf4351_set_tune(adf4351_ctx* ctx, u8 icp, u8 pout, BOO
      +                          L lownoise);src/driver/adf4351.c: 114: {;src/driver/adf4351.c: 115:  printf("adf4351_set
      +                          _tune(%p, %u, %u, %i)\n", ctx, icp, pout, lownoise);
  9360  0049C0  0E88               	movlw	low STR_1
  9361  0049C2  0100               	movlb	0	; () banked
  9362  0049C4  6F97               	movwf	printf@fmt& (0+255),b
  9363  0049C6  0E7D               	movlw	high STR_1
  9364  0049C8  6F98               	movwf	(printf@fmt+1)& (0+255),b
  9365  0049CA  C0CF  F099         	movff	adf4351_set_tune@ctx,?_printf+2
  9366  0049CE  C0D0  F09A         	movff	adf4351_set_tune@ctx+1,?_printf+3
  9367  0049D2  C0D1  F09B         	movff	adf4351_set_tune@icp,?_printf+4
  9368  0049D6  6B9C               	clrf	(?_printf+5)& (0+255),b
  9369  0049D8  C0D2  F09D         	movff	adf4351_set_tune@pout,?_printf+6
  9370  0049DC  6B9E               	clrf	(?_printf+7)& (0+255),b
  9371  0049DE  C0D3  F09F         	movff	adf4351_set_tune@lownoise,?_printf+8
  9372  0049E2  C0D4  F0A0         	movff	adf4351_set_tune@lownoise+1,?_printf+9
  9373  0049E6  ECFF  F02B         	call	_printf	;wreg free
  9374  0049EA                     
  9375                           ;src/driver/adf4351.c: 118:     ctx->reg2.lownoise = lownoise?0:3;
  9376  0049EA  0100               	movlb	0	; () banked
  9377  0049EC  51D3               	movf	adf4351_set_tune@lownoise& (0+255),w,b
  9378  0049EE  11D4               	iorwf	(adf4351_set_tune@lownoise+1)& (0+255),w,b
  9379  0049F0  A4D8               	btfss	status,2,c
  9380  0049F2  EFFD  F024         	goto	u8211
  9381  0049F6  EFFF  F024         	goto	u8210
  9382  0049FA                     u8211:
  9383  0049FA  EF05  F025         	goto	l6377
  9384  0049FE                     u8210:
  9385  0049FE                     
  9386                           ; BSR set to: 0
  9387  0049FE  0E00               	movlw	0
  9388  004A00  6FD6               	movwf	(_adf4351_set_tune$431+1)& (0+255),b
  9389  004A02  0E03               	movlw	3
  9390  004A04  6FD5               	movwf	_adf4351_set_tune$431& (0+255),b
  9391  004A06  EF09  F025         	goto	l6379
  9392  004A0A                     l6377:
  9393                           
  9394                           ; BSR set to: 0
  9395  004A0A  0E00               	movlw	0
  9396  004A0C  6FD6               	movwf	(_adf4351_set_tune$431+1)& (0+255),b
  9397  004A0E  0E00               	movlw	0
  9398  004A10  6FD5               	movwf	_adf4351_set_tune$431& (0+255),b
  9399  004A12                     l6379:
  9400                           
  9401                           ; BSR set to: 0
  9402  004A12  EE20 F00B          	lfsr	2,11
  9403  004A16  51CF               	movf	adf4351_set_tune@ctx& (0+255),w,b
  9404  004A18  26D9               	addwf	fsr2l,f,c
  9405  004A1A  51D0               	movf	(adf4351_set_tune@ctx+1)& (0+255),w,b
  9406  004A1C  22DA               	addwfc	fsr2h,f,c
  9407  004A1E  C0D5  FFDF         	movff	_adf4351_set_tune$431,indf2
  9408  004A22                     
  9409                           ; BSR set to: 0
  9410                           ;src/driver/adf4351.c: 119:     ctx->reg2.cpc = icp;
  9411  004A22  EE20 F012          	lfsr	2,18
  9412  004A26  51CF               	movf	adf4351_set_tune@ctx& (0+255),w,b
  9413  004A28  26D9               	addwf	fsr2l,f,c
  9414  004A2A  51D0               	movf	(adf4351_set_tune@ctx+1)& (0+255),w,b
  9415  004A2C  22DA               	addwfc	fsr2h,f,c
  9416  004A2E  C0D1  FFDF         	movff	adf4351_set_tune@icp,indf2
  9417  004A32                     
  9418                           ; BSR set to: 0
  9419                           ;src/driver/adf4351.c: 120:     ctx->reg4.rfoutpwr = pout;
  9420  004A32  EE20 F029          	lfsr	2,41
  9421  004A36  51CF               	movf	adf4351_set_tune@ctx& (0+255),w,b
  9422  004A38  26D9               	addwf	fsr2l,f,c
  9423  004A3A  51D0               	movf	(adf4351_set_tune@ctx+1)& (0+255),w,b
  9424  004A3C  22DA               	addwfc	fsr2h,f,c
  9425  004A3E  C0D2  FFDF         	movff	adf4351_set_tune@pout,indf2
  9426  004A42                     
  9427                           ; BSR set to: 0
  9428                           ;src/driver/adf4351.c: 122:     if(ctx->reg4.vcopd == 0) {
  9429  004A42  EE20 F023          	lfsr	2,35
  9430  004A46  51CF               	movf	adf4351_set_tune@ctx& (0+255),w,b
  9431  004A48  26D9               	addwf	fsr2l,f,c
  9432  004A4A  51D0               	movf	(adf4351_set_tune@ctx+1)& (0+255),w,b
  9433  004A4C  22DA               	addwfc	fsr2h,f,c
  9434  004A4E  50DF               	movf	indf2,w,c
  9435  004A50  A4D8               	btfss	status,2,c
  9436  004A52  EF2D  F025         	goto	u8221
  9437  004A56  EF2F  F025         	goto	u8220
  9438  004A5A                     u8221:
  9439  004A5A  EF35  F025         	goto	l72
  9440  004A5E                     u8220:
  9441  004A5E                     
  9442                           ; BSR set to: 0
  9443                           ;src/driver/adf4351.c: 123:         adf4351_setup(ctx);
  9444  004A5E  C0CF  F0CD         	movff	adf4351_set_tune@ctx,adf4351_setup@ctx
  9445  004A62  C0D0  F0CE         	movff	adf4351_set_tune@ctx+1,adf4351_setup@ctx+1
  9446  004A66  EC9E  F02A         	call	_adf4351_setup	;wreg free
  9447  004A6A                     l72:
  9448  004A6A  0012               	return		;funcret
  9449  004A6C                     __end_of_adf4351_set_tune:
  9450                           	opt callstack 0
  9451                           
  9452 ;; *************** function _adf4351_setup *****************
  9453 ;; Defined at:
  9454 ;;		line 142 in file "src/driver/adf4351.c"
  9455 ;; Parameters:    Size  Location     Type
  9456 ;;  ctx             2   77[BANK0 ] PTR struct adf4351_ctx
  9457 ;;		 -> g_adf4351(55), 
  9458 ;; Auto vars:     Size  Location     Type
  9459 ;;		None
  9460 ;; Return value:  Size  Location     Type
  9461 ;;                  1    wreg      void 
  9462 ;; Registers used:
  9463 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9464 ;; Tracked objects:
  9465 ;;		On entry : 0/0
  9466 ;;		On exit  : 0/0
  9467 ;;		Unchanged: 0/0
  9468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9469 ;;      Params:         0       2       0       0       0       0       0
  9470 ;;      Locals:         0       0       0       0       0       0       0
  9471 ;;      Temps:          0       0       0       0       0       0       0
  9472 ;;      Totals:         0       2       0       0       0       0       0
  9473 ;;Total ram usage:        2 bytes
  9474 ;; Hardware stack levels used:    1
  9475 ;; Hardware stack levels required when called:   11
  9476 ;; This function calls:
  9477 ;;		_adf4351_write_reg0
  9478 ;;		_adf4351_write_reg1
  9479 ;;		_adf4351_write_reg2
  9480 ;;		_adf4351_write_reg3
  9481 ;;		_adf4351_write_reg4
  9482 ;;		_adf4351_write_reg5
  9483 ;; This function is called by:
  9484 ;;		_adf4351_set_freq
  9485 ;;		_adf4351_set_mode
  9486 ;;		_adf4351_set_tune
  9487 ;; This function uses a non-reentrant model
  9488 ;;
  9489                           
  9490                           	psect	text26
  9491  00553C                     __ptext26:
  9492                           	opt callstack 0
  9493  00553C                     _adf4351_setup:
  9494                           	opt callstack 16
  9495  00553C                     
  9496                           ;src/driver/adf4351.c: 142: static void adf4351_setup(adf4351_ctx* ctx);src/driver/adf43
      +                          51.c: 143: {;src/driver/adf4351.c: 144:     adf4351_write_reg5(ctx);
  9497  00553C  C0CD  F0BB         	movff	adf4351_setup@ctx,adf4351_write_reg5@ctx
  9498  005540  C0CE  F0BC         	movff	adf4351_setup@ctx+1,adf4351_write_reg5@ctx+1
  9499  005544  EC2E  F024         	call	_adf4351_write_reg5	;wreg free
  9500                           
  9501                           ;src/driver/adf4351.c: 145:     adf4351_write_reg4(ctx);
  9502  005548  C0CD  F0BB         	movff	adf4351_setup@ctx,adf4351_write_reg4@ctx
  9503  00554C  C0CE  F0BC         	movff	adf4351_setup@ctx+1,adf4351_write_reg4@ctx+1
  9504  005550  ECA7  F00C         	call	_adf4351_write_reg4	;wreg free
  9505                           
  9506                           ;src/driver/adf4351.c: 146:     adf4351_write_reg3(ctx);
  9507  005554  C0CD  F0BB         	movff	adf4351_setup@ctx,adf4351_write_reg3@ctx
  9508  005558  C0CE  F0BC         	movff	adf4351_setup@ctx+1,adf4351_write_reg3@ctx+1
  9509  00555C  EC78  F014         	call	_adf4351_write_reg3	;wreg free
  9510                           
  9511                           ;src/driver/adf4351.c: 147:     adf4351_write_reg2(ctx);
  9512  005560  C0CD  F0BB         	movff	adf4351_setup@ctx,adf4351_write_reg2@ctx
  9513  005564  C0CE  F0BC         	movff	adf4351_setup@ctx+1,adf4351_write_reg2@ctx+1
  9514  005568  EC09  F008         	call	_adf4351_write_reg2	;wreg free
  9515                           
  9516                           ;src/driver/adf4351.c: 148:     adf4351_write_reg1(ctx);
  9517  00556C  C0CD  F0BB         	movff	adf4351_setup@ctx,adf4351_write_reg1@ctx
  9518  005570  C0CE  F0BC         	movff	adf4351_setup@ctx+1,adf4351_write_reg1@ctx+1
  9519  005574  EC90  F01D         	call	_adf4351_write_reg1	;wreg free
  9520                           
  9521                           ;src/driver/adf4351.c: 149:     adf4351_write_reg0(ctx);
  9522  005578  C0CD  F0BB         	movff	adf4351_setup@ctx,adf4351_write_reg0@ctx
  9523  00557C  C0CE  F0BC         	movff	adf4351_setup@ctx+1,adf4351_write_reg0@ctx+1
  9524  005580  ECBB  F020         	call	_adf4351_write_reg0	;wreg free
  9525  005584  0012               	return		;funcret
  9526  005586                     __end_of_adf4351_setup:
  9527                           	opt callstack 0
  9528                           
  9529 ;; *************** function _adf4351_write_reg5 *****************
  9530 ;; Defined at:
  9531 ;;		line 375 in file "src/driver/adf4351.c"
  9532 ;; Parameters:    Size  Location     Type
  9533 ;;  ctx             2   59[BANK0 ] PTR struct adf4351_ctx
  9534 ;;		 -> g_adf4351(55), 
  9535 ;; Auto vars:     Size  Location     Type
  9536 ;;  data            4   66[BANK0 ] unsigned long 
  9537 ;; Return value:  Size  Location     Type
  9538 ;;                  1    wreg      void 
  9539 ;; Registers used:
  9540 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9541 ;; Tracked objects:
  9542 ;;		On entry : 0/0
  9543 ;;		On exit  : 0/0
  9544 ;;		Unchanged: 0/0
  9545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9546 ;;      Params:         0       2       0       0       0       0       0
  9547 ;;      Locals:         0       4       0       0       0       0       0
  9548 ;;      Temps:          0       5       0       0       0       0       0
  9549 ;;      Totals:         0      11       0       0       0       0       0
  9550 ;;Total ram usage:       11 bytes
  9551 ;; Hardware stack levels used:    1
  9552 ;; Hardware stack levels required when called:   10
  9553 ;; This function calls:
  9554 ;;		_adf4351_write_latch
  9555 ;;		_printf
  9556 ;; This function is called by:
  9557 ;;		_adf4351_setup
  9558 ;; This function uses a non-reentrant model
  9559 ;;
  9560                           
  9561                           	psect	text27
  9562  00485C                     __ptext27:
  9563                           	opt callstack 0
  9564  00485C                     _adf4351_write_reg5:
  9565                           	opt callstack 16
  9566  00485C                     
  9567                           ;src/driver/adf4351.c: 375: static void adf4351_write_reg5(adf4351_ctx* ctx);src/driver/
      +                          adf4351.c: 376: {;src/driver/adf4351.c: 377:     if(ctx->init) {
  9568  00485C  C0BB  FFD9         	movff	adf4351_write_reg5@ctx,fsr2l
  9569  004860  C0BC  FFDA         	movff	adf4351_write_reg5@ctx+1,fsr2h
  9570  004864  50DE               	movf	postinc2,w,c
  9571  004866  10DE               	iorwf	postinc2,w,c
  9572  004868  B4D8               	btfsc	status,2,c
  9573  00486A  EF39  F024         	goto	u7661
  9574  00486E  EF3B  F024         	goto	u7660
  9575  004872                     u7661:
  9576  004872  EF87  F024         	goto	l138
  9577  004876                     u7660:
  9578  004876                     
  9579                           ;src/driver/adf4351.c: 378:         u32 data = 5;
  9580  004876  0E05               	movlw	5
  9581  004878  0100               	movlb	0	; () banked
  9582  00487A  6FC2               	movwf	adf4351_write_reg5@data& (0+255),b
  9583  00487C  0E00               	movlw	0
  9584  00487E  6FC3               	movwf	(adf4351_write_reg5@data+1)& (0+255),b
  9585  004880  0E00               	movlw	0
  9586  004882  6FC4               	movwf	(adf4351_write_reg5@data+2)& (0+255),b
  9587  004884  0E00               	movlw	0
  9588  004886  6FC5               	movwf	(adf4351_write_reg5@data+3)& (0+255),b
  9589  004888                     
  9590                           ; BSR set to: 0
  9591                           ;src/driver/adf4351.c: 380:         data |= (((u32)ctx->reg5.ldpinmod&0x0003)<<22);
  9592  004888  EE20 F02A          	lfsr	2,42
  9593  00488C  51BB               	movf	adf4351_write_reg5@ctx& (0+255),w,b
  9594  00488E  26D9               	addwf	fsr2l,f,c
  9595  004890  51BC               	movf	(adf4351_write_reg5@ctx+1)& (0+255),w,b
  9596  004892  22DA               	addwfc	fsr2h,f,c
  9597  004894  50DF               	movf	indf2,w,c
  9598  004896  6FBD               	movwf	??_adf4351_write_reg5& (0+255),b
  9599  004898  0E03               	movlw	3
  9600  00489A  17BD               	andwf	??_adf4351_write_reg5& (0+255),f,b
  9601  00489C  C0BD  F0BE         	movff	??_adf4351_write_reg5,??_adf4351_write_reg5+1
  9602  0048A0  6BBF               	clrf	(??_adf4351_write_reg5+2)& (0+255),b
  9603  0048A2  6BC0               	clrf	(??_adf4351_write_reg5+3)& (0+255),b
  9604  0048A4  6BC1               	clrf	(??_adf4351_write_reg5+4)& (0+255),b
  9605  0048A6  0E16               	movlw	22
  9606  0048A8                     u7675:
  9607  0048A8  90D8               	bcf	status,0,c
  9608  0048AA  37BE               	rlcf	(??_adf4351_write_reg5+1)& (0+255),f,b
  9609  0048AC  37BF               	rlcf	(??_adf4351_write_reg5+2)& (0+255),f,b
  9610  0048AE  37C0               	rlcf	(??_adf4351_write_reg5+3)& (0+255),f,b
  9611  0048B0  37C1               	rlcf	(??_adf4351_write_reg5+4)& (0+255),f,b
  9612  0048B2  2EE8               	decfsz	wreg,f,c
  9613  0048B4  EF54  F024         	goto	u7675
  9614  0048B8  51BE               	movf	(??_adf4351_write_reg5+1)& (0+255),w,b
  9615  0048BA  13C2               	iorwf	adf4351_write_reg5@data& (0+255),f,b
  9616  0048BC  51BF               	movf	(??_adf4351_write_reg5+2)& (0+255),w,b
  9617  0048BE  13C3               	iorwf	(adf4351_write_reg5@data+1)& (0+255),f,b
  9618  0048C0  51C0               	movf	(??_adf4351_write_reg5+3)& (0+255),w,b
  9619  0048C2  13C4               	iorwf	(adf4351_write_reg5@data+2)& (0+255),f,b
  9620  0048C4  51C1               	movf	(??_adf4351_write_reg5+4)& (0+255),w,b
  9621  0048C6  13C5               	iorwf	(adf4351_write_reg5@data+3)& (0+255),f,b
  9622  0048C8                     
  9623                           ; BSR set to: 0
  9624                           ;src/driver/adf4351.c: 382:         printf("ADF4351 WRITE REG5: 0x%08lX (ldpinmod=%i)\r\
      +                          n", data, ctx->reg5.ldpinmod);
  9625  0048C8  0E13               	movlw	low STR_17
  9626  0048CA  6F97               	movwf	printf@fmt& (0+255),b
  9627  0048CC  0E7D               	movlw	high STR_17
  9628  0048CE  6F98               	movwf	(printf@fmt+1)& (0+255),b
  9629  0048D0  C0C2  F099         	movff	adf4351_write_reg5@data,?_printf+2
  9630  0048D4  C0C3  F09A         	movff	adf4351_write_reg5@data+1,?_printf+3
  9631  0048D8  C0C4  F09B         	movff	adf4351_write_reg5@data+2,?_printf+4
  9632  0048DC  C0C5  F09C         	movff	adf4351_write_reg5@data+3,?_printf+5
  9633  0048E0  EE20 F02A          	lfsr	2,42
  9634  0048E4  51BB               	movf	adf4351_write_reg5@ctx& (0+255),w,b
  9635  0048E6  26D9               	addwf	fsr2l,f,c
  9636  0048E8  51BC               	movf	(adf4351_write_reg5@ctx+1)& (0+255),w,b
  9637  0048EA  22DA               	addwfc	fsr2h,f,c
  9638  0048EC  50DF               	movf	indf2,w,c
  9639  0048EE  6FBD               	movwf	??_adf4351_write_reg5& (0+255),b
  9640  0048F0  51BD               	movf	??_adf4351_write_reg5& (0+255),w,b
  9641  0048F2  6F9D               	movwf	(?_printf+6)& (0+255),b
  9642  0048F4  6B9E               	clrf	(?_printf+7)& (0+255),b
  9643  0048F6  ECFF  F02B         	call	_printf	;wreg free
  9644  0048FA                     
  9645                           ;src/driver/adf4351.c: 383:         adf4351_write_latch(data);
  9646  0048FA  C0C2  F00D         	movff	adf4351_write_reg5@data,adf4351_write_latch@value
  9647  0048FE  C0C3  F00E         	movff	adf4351_write_reg5@data+1,adf4351_write_latch@value+1
  9648  004902  C0C4  F00F         	movff	adf4351_write_reg5@data+2,adf4351_write_latch@value+2
  9649  004906  C0C5  F010         	movff	adf4351_write_reg5@data+3,adf4351_write_latch@value+3
  9650  00490A  ECC6  F018         	call	_adf4351_write_latch	;wreg free
  9651  00490E                     l138:
  9652  00490E  0012               	return		;funcret
  9653  004910                     __end_of_adf4351_write_reg5:
  9654                           	opt callstack 0
  9655                           
  9656 ;; *************** function _adf4351_write_reg4 *****************
  9657 ;; Defined at:
  9658 ;;		line 353 in file "src/driver/adf4351.c"
  9659 ;; Parameters:    Size  Location     Type
  9660 ;;  ctx             2   59[BANK0 ] PTR struct adf4351_ctx
  9661 ;;		 -> g_adf4351(55), 
  9662 ;; Auto vars:     Size  Location     Type
  9663 ;;  data            4   71[BANK0 ] unsigned long 
  9664 ;; Return value:  Size  Location     Type
  9665 ;;                  1    wreg      void 
  9666 ;; Registers used:
  9667 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9668 ;; Tracked objects:
  9669 ;;		On entry : 0/0
  9670 ;;		On exit  : 0/0
  9671 ;;		Unchanged: 0/0
  9672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9673 ;;      Params:         0       2       0       0       0       0       0
  9674 ;;      Locals:         0       4       0       0       0       0       0
  9675 ;;      Temps:          0      10       0       0       0       0       0
  9676 ;;      Totals:         0      16       0       0       0       0       0
  9677 ;;Total ram usage:       16 bytes
  9678 ;; Hardware stack levels used:    1
  9679 ;; Hardware stack levels required when called:   10
  9680 ;; This function calls:
  9681 ;;		_adf4351_write_latch
  9682 ;;		_printf
  9683 ;; This function is called by:
  9684 ;;		_adf4351_set_rfout_enable
  9685 ;;		_adf4351_set_mode
  9686 ;;		_adf4351_setup
  9687 ;; This function uses a non-reentrant model
  9688 ;;
  9689                           
  9690                           	psect	text28
  9691  00194E                     __ptext28:
  9692                           	opt callstack 0
  9693  00194E                     _adf4351_write_reg4:
  9694                           	opt callstack 16
  9695  00194E                     
  9696                           ;src/driver/adf4351.c: 353: static void adf4351_write_reg4(adf4351_ctx* ctx);src/driver/
      +                          adf4351.c: 354: {;src/driver/adf4351.c: 355:     if(ctx->init) {
  9697  00194E  C0BB  FFD9         	movff	adf4351_write_reg4@ctx,fsr2l
  9698  001952  C0BC  FFDA         	movff	adf4351_write_reg4@ctx+1,fsr2h
  9699  001956  50DE               	movf	postinc2,w,c
  9700  001958  10DE               	iorwf	postinc2,w,c
  9701  00195A  B4D8               	btfsc	status,2,c
  9702  00195C  EFB2  F00C         	goto	u7441
  9703  001960  EFB4  F00C         	goto	u7440
  9704  001964                     u7441:
  9705  001964  EF7F  F00E         	goto	l134
  9706  001968                     u7440:
  9707  001968                     
  9708                           ;src/driver/adf4351.c: 356:         u32 data = 4;
  9709  001968  0E04               	movlw	4
  9710  00196A  0100               	movlb	0	; () banked
  9711  00196C  6FC7               	movwf	adf4351_write_reg4@data& (0+255),b
  9712  00196E  0E00               	movlw	0
  9713  001970  6FC8               	movwf	(adf4351_write_reg4@data+1)& (0+255),b
  9714  001972  0E00               	movlw	0
  9715  001974  6FC9               	movwf	(adf4351_write_reg4@data+2)& (0+255),b
  9716  001976  0E00               	movlw	0
  9717  001978  6FCA               	movwf	(adf4351_write_reg4@data+3)& (0+255),b
  9718  00197A                     
  9719                           ; BSR set to: 0
  9720                           ;src/driver/adf4351.c: 358:         data |= (((u32)ctx->reg4.rfoutpwr&0x0003)<<3);
  9721  00197A  EE20 F029          	lfsr	2,41
  9722  00197E  51BB               	movf	adf4351_write_reg4@ctx& (0+255),w,b
  9723  001980  26D9               	addwf	fsr2l,f,c
  9724  001982  51BC               	movf	(adf4351_write_reg4@ctx+1)& (0+255),w,b
  9725  001984  22DA               	addwfc	fsr2h,f,c
  9726  001986  50DF               	movf	indf2,w,c
  9727  001988  6FBD               	movwf	??_adf4351_write_reg4& (0+255),b
  9728  00198A  0E03               	movlw	3
  9729  00198C  17BD               	andwf	??_adf4351_write_reg4& (0+255),f,b
  9730  00198E  C0BD  F0BE         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
  9731  001992  6BBF               	clrf	(??_adf4351_write_reg4+2)& (0+255),b
  9732  001994  6BC0               	clrf	(??_adf4351_write_reg4+3)& (0+255),b
  9733  001996  6BC1               	clrf	(??_adf4351_write_reg4+4)& (0+255),b
  9734  001998  0E03               	movlw	3
  9735  00199A                     u7455:
  9736  00199A  90D8               	bcf	status,0,c
  9737  00199C  37BE               	rlcf	(??_adf4351_write_reg4+1)& (0+255),f,b
  9738  00199E  37BF               	rlcf	(??_adf4351_write_reg4+2)& (0+255),f,b
  9739  0019A0  37C0               	rlcf	(??_adf4351_write_reg4+3)& (0+255),f,b
  9740  0019A2  37C1               	rlcf	(??_adf4351_write_reg4+4)& (0+255),f,b
  9741  0019A4  2EE8               	decfsz	wreg,f,c
  9742  0019A6  EFCD  F00C         	goto	u7455
  9743  0019AA  51BE               	movf	(??_adf4351_write_reg4+1)& (0+255),w,b
  9744  0019AC  13C7               	iorwf	adf4351_write_reg4@data& (0+255),f,b
  9745  0019AE  51BF               	movf	(??_adf4351_write_reg4+2)& (0+255),w,b
  9746  0019B0  13C8               	iorwf	(adf4351_write_reg4@data+1)& (0+255),f,b
  9747  0019B2  51C0               	movf	(??_adf4351_write_reg4+3)& (0+255),w,b
  9748  0019B4  13C9               	iorwf	(adf4351_write_reg4@data+2)& (0+255),f,b
  9749  0019B6  51C1               	movf	(??_adf4351_write_reg4+4)& (0+255),w,b
  9750  0019B8  13CA               	iorwf	(adf4351_write_reg4@data+3)& (0+255),f,b
  9751  0019BA                     
  9752                           ; BSR set to: 0
  9753                           ;src/driver/adf4351.c: 359:         data |= (((u32)ctx->reg4.rfoutena&0x0001)<<5);
  9754  0019BA  EE20 F028          	lfsr	2,40
  9755  0019BE  51BB               	movf	adf4351_write_reg4@ctx& (0+255),w,b
  9756  0019C0  26D9               	addwf	fsr2l,f,c
  9757  0019C2  51BC               	movf	(adf4351_write_reg4@ctx+1)& (0+255),w,b
  9758  0019C4  22DA               	addwfc	fsr2h,f,c
  9759  0019C6  50DF               	movf	indf2,w,c
  9760  0019C8  6FBD               	movwf	??_adf4351_write_reg4& (0+255),b
  9761  0019CA  0E01               	movlw	1
  9762  0019CC  17BD               	andwf	??_adf4351_write_reg4& (0+255),f,b
  9763  0019CE  C0BD  F0BE         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
  9764  0019D2  6BBF               	clrf	(??_adf4351_write_reg4+2)& (0+255),b
  9765  0019D4  6BC0               	clrf	(??_adf4351_write_reg4+3)& (0+255),b
  9766  0019D6  6BC1               	clrf	(??_adf4351_write_reg4+4)& (0+255),b
  9767  0019D8  0E05               	movlw	5
  9768  0019DA                     u7465:
  9769  0019DA  90D8               	bcf	status,0,c
  9770  0019DC  37BE               	rlcf	(??_adf4351_write_reg4+1)& (0+255),f,b
  9771  0019DE  37BF               	rlcf	(??_adf4351_write_reg4+2)& (0+255),f,b
  9772  0019E0  37C0               	rlcf	(??_adf4351_write_reg4+3)& (0+255),f,b
  9773  0019E2  37C1               	rlcf	(??_adf4351_write_reg4+4)& (0+255),f,b
  9774  0019E4  2EE8               	decfsz	wreg,f,c
  9775  0019E6  EFED  F00C         	goto	u7465
  9776  0019EA  51BE               	movf	(??_adf4351_write_reg4+1)& (0+255),w,b
  9777  0019EC  13C7               	iorwf	adf4351_write_reg4@data& (0+255),f,b
  9778  0019EE  51BF               	movf	(??_adf4351_write_reg4+2)& (0+255),w,b
  9779  0019F0  13C8               	iorwf	(adf4351_write_reg4@data+1)& (0+255),f,b
  9780  0019F2  51C0               	movf	(??_adf4351_write_reg4+3)& (0+255),w,b
  9781  0019F4  13C9               	iorwf	(adf4351_write_reg4@data+2)& (0+255),f,b
  9782  0019F6  51C1               	movf	(??_adf4351_write_reg4+4)& (0+255),w,b
  9783  0019F8  13CA               	iorwf	(adf4351_write_reg4@data+3)& (0+255),f,b
  9784  0019FA                     
  9785                           ; BSR set to: 0
  9786                           ;src/driver/adf4351.c: 360:         data |= (((u32)ctx->reg4.auxpwrout&0x0003)<<6);
  9787  0019FA  EE20 F027          	lfsr	2,39
  9788  0019FE  51BB               	movf	adf4351_write_reg4@ctx& (0+255),w,b
  9789  001A00  26D9               	addwf	fsr2l,f,c
  9790  001A02  51BC               	movf	(adf4351_write_reg4@ctx+1)& (0+255),w,b
  9791  001A04  22DA               	addwfc	fsr2h,f,c
  9792  001A06  50DF               	movf	indf2,w,c
  9793  001A08  6FBD               	movwf	??_adf4351_write_reg4& (0+255),b
  9794  001A0A  0E03               	movlw	3
  9795  001A0C  17BD               	andwf	??_adf4351_write_reg4& (0+255),f,b
  9796  001A0E  C0BD  F0BE         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
  9797  001A12  6BBF               	clrf	(??_adf4351_write_reg4+2)& (0+255),b
  9798  001A14  6BC0               	clrf	(??_adf4351_write_reg4+3)& (0+255),b
  9799  001A16  6BC1               	clrf	(??_adf4351_write_reg4+4)& (0+255),b
  9800  001A18  0E06               	movlw	6
  9801  001A1A                     u7475:
  9802  001A1A  90D8               	bcf	status,0,c
  9803  001A1C  37BE               	rlcf	(??_adf4351_write_reg4+1)& (0+255),f,b
  9804  001A1E  37BF               	rlcf	(??_adf4351_write_reg4+2)& (0+255),f,b
  9805  001A20  37C0               	rlcf	(??_adf4351_write_reg4+3)& (0+255),f,b
  9806  001A22  37C1               	rlcf	(??_adf4351_write_reg4+4)& (0+255),f,b
  9807  001A24  2EE8               	decfsz	wreg,f,c
  9808  001A26  EF0D  F00D         	goto	u7475
  9809  001A2A  51BE               	movf	(??_adf4351_write_reg4+1)& (0+255),w,b
  9810  001A2C  13C7               	iorwf	adf4351_write_reg4@data& (0+255),f,b
  9811  001A2E  51BF               	movf	(??_adf4351_write_reg4+2)& (0+255),w,b
  9812  001A30  13C8               	iorwf	(adf4351_write_reg4@data+1)& (0+255),f,b
  9813  001A32  51C0               	movf	(??_adf4351_write_reg4+3)& (0+255),w,b
  9814  001A34  13C9               	iorwf	(adf4351_write_reg4@data+2)& (0+255),f,b
  9815  001A36  51C1               	movf	(??_adf4351_write_reg4+4)& (0+255),w,b
  9816  001A38  13CA               	iorwf	(adf4351_write_reg4@data+3)& (0+255),f,b
  9817  001A3A                     
  9818                           ; BSR set to: 0
  9819                           ;src/driver/adf4351.c: 361:         data |= (((u32)ctx->reg4.auxoutena&0x0001)<<8);
  9820  001A3A  EE20 F026          	lfsr	2,38
  9821  001A3E  51BB               	movf	adf4351_write_reg4@ctx& (0+255),w,b
  9822  001A40  26D9               	addwf	fsr2l,f,c
  9823  001A42  51BC               	movf	(adf4351_write_reg4@ctx+1)& (0+255),w,b
  9824  001A44  22DA               	addwfc	fsr2h,f,c
  9825  001A46  50DF               	movf	indf2,w,c
  9826  001A48  6FBD               	movwf	??_adf4351_write_reg4& (0+255),b
  9827  001A4A  0E01               	movlw	1
  9828  001A4C  17BD               	andwf	??_adf4351_write_reg4& (0+255),f,b
  9829  001A4E  C0BD  F0BE         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
  9830  001A52  6BBF               	clrf	(??_adf4351_write_reg4+2)& (0+255),b
  9831  001A54  6BC0               	clrf	(??_adf4351_write_reg4+3)& (0+255),b
  9832  001A56  6BC1               	clrf	(??_adf4351_write_reg4+4)& (0+255),b
  9833  001A58  C0C0  F0C1         	movff	??_adf4351_write_reg4+3,??_adf4351_write_reg4+4
  9834  001A5C  C0BF  F0C0         	movff	??_adf4351_write_reg4+2,??_adf4351_write_reg4+3
  9835  001A60  C0BE  F0BF         	movff	??_adf4351_write_reg4+1,??_adf4351_write_reg4+2
  9836  001A64  6BBE               	clrf	(??_adf4351_write_reg4+1)& (0+255),b
  9837  001A66  51BE               	movf	(??_adf4351_write_reg4+1)& (0+255),w,b
  9838  001A68  13C7               	iorwf	adf4351_write_reg4@data& (0+255),f,b
  9839  001A6A  51BF               	movf	(??_adf4351_write_reg4+2)& (0+255),w,b
  9840  001A6C  13C8               	iorwf	(adf4351_write_reg4@data+1)& (0+255),f,b
  9841  001A6E  51C0               	movf	(??_adf4351_write_reg4+3)& (0+255),w,b
  9842  001A70  13C9               	iorwf	(adf4351_write_reg4@data+2)& (0+255),f,b
  9843  001A72  51C1               	movf	(??_adf4351_write_reg4+4)& (0+255),w,b
  9844  001A74  13CA               	iorwf	(adf4351_write_reg4@data+3)& (0+255),f,b
  9845  001A76                     
  9846                           ; BSR set to: 0
  9847                           ;src/driver/adf4351.c: 362:         data |= (((u32)ctx->reg4.auxoutsel&0x0001)<<9);
  9848  001A76  EE20 F025          	lfsr	2,37
  9849  001A7A  51BB               	movf	adf4351_write_reg4@ctx& (0+255),w,b
  9850  001A7C  26D9               	addwf	fsr2l,f,c
  9851  001A7E  51BC               	movf	(adf4351_write_reg4@ctx+1)& (0+255),w,b
  9852  001A80  22DA               	addwfc	fsr2h,f,c
  9853  001A82  50DF               	movf	indf2,w,c
  9854  001A84  6FBD               	movwf	??_adf4351_write_reg4& (0+255),b
  9855  001A86  0E01               	movlw	1
  9856  001A88  17BD               	andwf	??_adf4351_write_reg4& (0+255),f,b
  9857  001A8A  C0BD  F0BE         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
  9858  001A8E  6BBF               	clrf	(??_adf4351_write_reg4+2)& (0+255),b
  9859  001A90  6BC0               	clrf	(??_adf4351_write_reg4+3)& (0+255),b
  9860  001A92  6BC1               	clrf	(??_adf4351_write_reg4+4)& (0+255),b
  9861  001A94  0E09               	movlw	9
  9862  001A96                     u7485:
  9863  001A96  90D8               	bcf	status,0,c
  9864  001A98  37BE               	rlcf	(??_adf4351_write_reg4+1)& (0+255),f,b
  9865  001A9A  37BF               	rlcf	(??_adf4351_write_reg4+2)& (0+255),f,b
  9866  001A9C  37C0               	rlcf	(??_adf4351_write_reg4+3)& (0+255),f,b
  9867  001A9E  37C1               	rlcf	(??_adf4351_write_reg4+4)& (0+255),f,b
  9868  001AA0  2EE8               	decfsz	wreg,f,c
  9869  001AA2  EF4B  F00D         	goto	u7485
  9870  001AA6  51BE               	movf	(??_adf4351_write_reg4+1)& (0+255),w,b
  9871  001AA8  13C7               	iorwf	adf4351_write_reg4@data& (0+255),f,b
  9872  001AAA  51BF               	movf	(??_adf4351_write_reg4+2)& (0+255),w,b
  9873  001AAC  13C8               	iorwf	(adf4351_write_reg4@data+1)& (0+255),f,b
  9874  001AAE  51C0               	movf	(??_adf4351_write_reg4+3)& (0+255),w,b
  9875  001AB0  13C9               	iorwf	(adf4351_write_reg4@data+2)& (0+255),f,b
  9876  001AB2  51C1               	movf	(??_adf4351_write_reg4+4)& (0+255),w,b
  9877  001AB4  13CA               	iorwf	(adf4351_write_reg4@data+3)& (0+255),f,b
  9878  001AB6                     
  9879                           ; BSR set to: 0
  9880                           ;src/driver/adf4351.c: 363:         data |= (((u32)ctx->reg4.mtld&0x0001)<<10);
  9881  001AB6  EE20 F024          	lfsr	2,36
  9882  001ABA  51BB               	movf	adf4351_write_reg4@ctx& (0+255),w,b
  9883  001ABC  26D9               	addwf	fsr2l,f,c
  9884  001ABE  51BC               	movf	(adf4351_write_reg4@ctx+1)& (0+255),w,b
  9885  001AC0  22DA               	addwfc	fsr2h,f,c
  9886  001AC2  50DF               	movf	indf2,w,c
  9887  001AC4  6FBD               	movwf	??_adf4351_write_reg4& (0+255),b
  9888  001AC6  0E01               	movlw	1
  9889  001AC8  17BD               	andwf	??_adf4351_write_reg4& (0+255),f,b
  9890  001ACA  C0BD  F0BE         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
  9891  001ACE  6BBF               	clrf	(??_adf4351_write_reg4+2)& (0+255),b
  9892  001AD0  6BC0               	clrf	(??_adf4351_write_reg4+3)& (0+255),b
  9893  001AD2  6BC1               	clrf	(??_adf4351_write_reg4+4)& (0+255),b
  9894  001AD4  0E0A               	movlw	10
  9895  001AD6                     u7495:
  9896  001AD6  90D8               	bcf	status,0,c
  9897  001AD8  37BE               	rlcf	(??_adf4351_write_reg4+1)& (0+255),f,b
  9898  001ADA  37BF               	rlcf	(??_adf4351_write_reg4+2)& (0+255),f,b
  9899  001ADC  37C0               	rlcf	(??_adf4351_write_reg4+3)& (0+255),f,b
  9900  001ADE  37C1               	rlcf	(??_adf4351_write_reg4+4)& (0+255),f,b
  9901  001AE0  2EE8               	decfsz	wreg,f,c
  9902  001AE2  EF6B  F00D         	goto	u7495
  9903  001AE6  51BE               	movf	(??_adf4351_write_reg4+1)& (0+255),w,b
  9904  001AE8  13C7               	iorwf	adf4351_write_reg4@data& (0+255),f,b
  9905  001AEA  51BF               	movf	(??_adf4351_write_reg4+2)& (0+255),w,b
  9906  001AEC  13C8               	iorwf	(adf4351_write_reg4@data+1)& (0+255),f,b
  9907  001AEE  51C0               	movf	(??_adf4351_write_reg4+3)& (0+255),w,b
  9908  001AF0  13C9               	iorwf	(adf4351_write_reg4@data+2)& (0+255),f,b
  9909  001AF2  51C1               	movf	(??_adf4351_write_reg4+4)& (0+255),w,b
  9910  001AF4  13CA               	iorwf	(adf4351_write_reg4@data+3)& (0+255),f,b
  9911  001AF6                     
  9912                           ; BSR set to: 0
  9913                           ;src/driver/adf4351.c: 364:         data |= (((u32)ctx->reg4.vcopd&0x0001)<<11);
  9914  001AF6  EE20 F023          	lfsr	2,35
  9915  001AFA  51BB               	movf	adf4351_write_reg4@ctx& (0+255),w,b
  9916  001AFC  26D9               	addwf	fsr2l,f,c
  9917  001AFE  51BC               	movf	(adf4351_write_reg4@ctx+1)& (0+255),w,b
  9918  001B00  22DA               	addwfc	fsr2h,f,c
  9919  001B02  50DF               	movf	indf2,w,c
  9920  001B04  6FBD               	movwf	??_adf4351_write_reg4& (0+255),b
  9921  001B06  0E01               	movlw	1
  9922  001B08  17BD               	andwf	??_adf4351_write_reg4& (0+255),f,b
  9923  001B0A  C0BD  F0BE         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
  9924  001B0E  6BBF               	clrf	(??_adf4351_write_reg4+2)& (0+255),b
  9925  001B10  6BC0               	clrf	(??_adf4351_write_reg4+3)& (0+255),b
  9926  001B12  6BC1               	clrf	(??_adf4351_write_reg4+4)& (0+255),b
  9927  001B14  0E0B               	movlw	11
  9928  001B16                     u7505:
  9929  001B16  90D8               	bcf	status,0,c
  9930  001B18  37BE               	rlcf	(??_adf4351_write_reg4+1)& (0+255),f,b
  9931  001B1A  37BF               	rlcf	(??_adf4351_write_reg4+2)& (0+255),f,b
  9932  001B1C  37C0               	rlcf	(??_adf4351_write_reg4+3)& (0+255),f,b
  9933  001B1E  37C1               	rlcf	(??_adf4351_write_reg4+4)& (0+255),f,b
  9934  001B20  2EE8               	decfsz	wreg,f,c
  9935  001B22  EF8B  F00D         	goto	u7505
  9936  001B26  51BE               	movf	(??_adf4351_write_reg4+1)& (0+255),w,b
  9937  001B28  13C7               	iorwf	adf4351_write_reg4@data& (0+255),f,b
  9938  001B2A  51BF               	movf	(??_adf4351_write_reg4+2)& (0+255),w,b
  9939  001B2C  13C8               	iorwf	(adf4351_write_reg4@data+1)& (0+255),f,b
  9940  001B2E  51C0               	movf	(??_adf4351_write_reg4+3)& (0+255),w,b
  9941  001B30  13C9               	iorwf	(adf4351_write_reg4@data+2)& (0+255),f,b
  9942  001B32  51C1               	movf	(??_adf4351_write_reg4+4)& (0+255),w,b
  9943  001B34  13CA               	iorwf	(adf4351_write_reg4@data+3)& (0+255),f,b
  9944  001B36                     
  9945                           ; BSR set to: 0
  9946                           ;src/driver/adf4351.c: 365:         data |= (((u32)ctx->reg4.bsclkdiv&0x00FF)<<12);
  9947  001B36  EE20 F022          	lfsr	2,34
  9948  001B3A  51BB               	movf	adf4351_write_reg4@ctx& (0+255),w,b
  9949  001B3C  26D9               	addwf	fsr2l,f,c
  9950  001B3E  51BC               	movf	(adf4351_write_reg4@ctx+1)& (0+255),w,b
  9951  001B40  22DA               	addwfc	fsr2h,f,c
  9952  001B42  50DF               	movf	indf2,w,c
  9953  001B44  6FBD               	movwf	??_adf4351_write_reg4& (0+255),b
  9954  001B46  C0BD  F0BE         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
  9955  001B4A  6BBF               	clrf	(??_adf4351_write_reg4+2)& (0+255),b
  9956  001B4C  6BC0               	clrf	(??_adf4351_write_reg4+3)& (0+255),b
  9957  001B4E  6BC1               	clrf	(??_adf4351_write_reg4+4)& (0+255),b
  9958  001B50  0E0C               	movlw	12
  9959  001B52                     u7515:
  9960  001B52  90D8               	bcf	status,0,c
  9961  001B54  37BE               	rlcf	(??_adf4351_write_reg4+1)& (0+255),f,b
  9962  001B56  37BF               	rlcf	(??_adf4351_write_reg4+2)& (0+255),f,b
  9963  001B58  37C0               	rlcf	(??_adf4351_write_reg4+3)& (0+255),f,b
  9964  001B5A  37C1               	rlcf	(??_adf4351_write_reg4+4)& (0+255),f,b
  9965  001B5C  2EE8               	decfsz	wreg,f,c
  9966  001B5E  EFA9  F00D         	goto	u7515
  9967  001B62  51BE               	movf	(??_adf4351_write_reg4+1)& (0+255),w,b
  9968  001B64  13C7               	iorwf	adf4351_write_reg4@data& (0+255),f,b
  9969  001B66  51BF               	movf	(??_adf4351_write_reg4+2)& (0+255),w,b
  9970  001B68  13C8               	iorwf	(adf4351_write_reg4@data+1)& (0+255),f,b
  9971  001B6A  51C0               	movf	(??_adf4351_write_reg4+3)& (0+255),w,b
  9972  001B6C  13C9               	iorwf	(adf4351_write_reg4@data+2)& (0+255),f,b
  9973  001B6E  51C1               	movf	(??_adf4351_write_reg4+4)& (0+255),w,b
  9974  001B70  13CA               	iorwf	(adf4351_write_reg4@data+3)& (0+255),f,b
  9975  001B72                     
  9976                           ; BSR set to: 0
  9977                           ;src/driver/adf4351.c: 366:         data |= (((u32)ctx->reg4.divsel&0x0007)<<20);
  9978  001B72  EE20 F021          	lfsr	2,33
  9979  001B76  51BB               	movf	adf4351_write_reg4@ctx& (0+255),w,b
  9980  001B78  26D9               	addwf	fsr2l,f,c
  9981  001B7A  51BC               	movf	(adf4351_write_reg4@ctx+1)& (0+255),w,b
  9982  001B7C  22DA               	addwfc	fsr2h,f,c
  9983  001B7E  50DF               	movf	indf2,w,c
  9984  001B80  6FBD               	movwf	??_adf4351_write_reg4& (0+255),b
  9985  001B82  0E07               	movlw	7
  9986  001B84  17BD               	andwf	??_adf4351_write_reg4& (0+255),f,b
  9987  001B86  C0BD  F0BE         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
  9988  001B8A  6BBF               	clrf	(??_adf4351_write_reg4+2)& (0+255),b
  9989  001B8C  6BC0               	clrf	(??_adf4351_write_reg4+3)& (0+255),b
  9990  001B8E  6BC1               	clrf	(??_adf4351_write_reg4+4)& (0+255),b
  9991  001B90  0E14               	movlw	20
  9992  001B92                     u7525:
  9993  001B92  90D8               	bcf	status,0,c
  9994  001B94  37BE               	rlcf	(??_adf4351_write_reg4+1)& (0+255),f,b
  9995  001B96  37BF               	rlcf	(??_adf4351_write_reg4+2)& (0+255),f,b
  9996  001B98  37C0               	rlcf	(??_adf4351_write_reg4+3)& (0+255),f,b
  9997  001B9A  37C1               	rlcf	(??_adf4351_write_reg4+4)& (0+255),f,b
  9998  001B9C  2EE8               	decfsz	wreg,f,c
  9999  001B9E  EFC9  F00D         	goto	u7525
 10000  001BA2  51BE               	movf	(??_adf4351_write_reg4+1)& (0+255),w,b
 10001  001BA4  13C7               	iorwf	adf4351_write_reg4@data& (0+255),f,b
 10002  001BA6  51BF               	movf	(??_adf4351_write_reg4+2)& (0+255),w,b
 10003  001BA8  13C8               	iorwf	(adf4351_write_reg4@data+1)& (0+255),f,b
 10004  001BAA  51C0               	movf	(??_adf4351_write_reg4+3)& (0+255),w,b
 10005  001BAC  13C9               	iorwf	(adf4351_write_reg4@data+2)& (0+255),f,b
 10006  001BAE  51C1               	movf	(??_adf4351_write_reg4+4)& (0+255),w,b
 10007  001BB0  13CA               	iorwf	(adf4351_write_reg4@data+3)& (0+255),f,b
 10008  001BB2                     
 10009                           ; BSR set to: 0
 10010                           ;src/driver/adf4351.c: 367:         data |= (((u32)ctx->reg4.fbsel&0x0001)<<23);
 10011  001BB2  EE20 F020          	lfsr	2,32
 10012  001BB6  51BB               	movf	adf4351_write_reg4@ctx& (0+255),w,b
 10013  001BB8  26D9               	addwf	fsr2l,f,c
 10014  001BBA  51BC               	movf	(adf4351_write_reg4@ctx+1)& (0+255),w,b
 10015  001BBC  22DA               	addwfc	fsr2h,f,c
 10016  001BBE  50DF               	movf	indf2,w,c
 10017  001BC0  6FBD               	movwf	??_adf4351_write_reg4& (0+255),b
 10018  001BC2  0E01               	movlw	1
 10019  001BC4  17BD               	andwf	??_adf4351_write_reg4& (0+255),f,b
 10020  001BC6  C0BD  F0BE         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
 10021  001BCA  6BBF               	clrf	(??_adf4351_write_reg4+2)& (0+255),b
 10022  001BCC  6BC0               	clrf	(??_adf4351_write_reg4+3)& (0+255),b
 10023  001BCE  6BC1               	clrf	(??_adf4351_write_reg4+4)& (0+255),b
 10024  001BD0  0E17               	movlw	23
 10025  001BD2                     u7535:
 10026  001BD2  90D8               	bcf	status,0,c
 10027  001BD4  37BE               	rlcf	(??_adf4351_write_reg4+1)& (0+255),f,b
 10028  001BD6  37BF               	rlcf	(??_adf4351_write_reg4+2)& (0+255),f,b
 10029  001BD8  37C0               	rlcf	(??_adf4351_write_reg4+3)& (0+255),f,b
 10030  001BDA  37C1               	rlcf	(??_adf4351_write_reg4+4)& (0+255),f,b
 10031  001BDC  2EE8               	decfsz	wreg,f,c
 10032  001BDE  EFE9  F00D         	goto	u7535
 10033  001BE2  51BE               	movf	(??_adf4351_write_reg4+1)& (0+255),w,b
 10034  001BE4  13C7               	iorwf	adf4351_write_reg4@data& (0+255),f,b
 10035  001BE6  51BF               	movf	(??_adf4351_write_reg4+2)& (0+255),w,b
 10036  001BE8  13C8               	iorwf	(adf4351_write_reg4@data+1)& (0+255),f,b
 10037  001BEA  51C0               	movf	(??_adf4351_write_reg4+3)& (0+255),w,b
 10038  001BEC  13C9               	iorwf	(adf4351_write_reg4@data+2)& (0+255),f,b
 10039  001BEE  51C1               	movf	(??_adf4351_write_reg4+4)& (0+255),w,b
 10040  001BF0  13CA               	iorwf	(adf4351_write_reg4@data+3)& (0+255),f,b
 10041  001BF2                     
 10042                           ; BSR set to: 0
 10043                           ;src/driver/adf4351.c: 369:         printf("ADF4351 WRITE REG4: 0x%08lX (fbsel=%i, divse
      +                          l=%i, bsclkdiv=%i, vcopd=%i, mtld=%i, auxoutsel=%i, auxoutena=%i, auxpwrout=%i, rfoutena
      +                          =%i rfoutpwr=%i \r\n", data, ctx->reg4.fbsel, ctx->reg4.divsel, ctx->reg4.bsclkdiv, ctx-
      +                          >reg4.vcopd, ctx->reg4.mtld, ctx->reg4.auxoutsel, ctx->reg4.auxoutena, ctx->reg4.auxpwro
      +                          ut, ctx->reg4.rfoutena, ctx->reg4.rfoutpwr);
 10044  001BF2  0E1B               	movlw	low STR_16
 10045  001BF4  6F97               	movwf	printf@fmt& (0+255),b
 10046  001BF6  0E7A               	movlw	high STR_16
 10047  001BF8  6F98               	movwf	(printf@fmt+1)& (0+255),b
 10048  001BFA  C0C7  F099         	movff	adf4351_write_reg4@data,?_printf+2
 10049  001BFE  C0C8  F09A         	movff	adf4351_write_reg4@data+1,?_printf+3
 10050  001C02  C0C9  F09B         	movff	adf4351_write_reg4@data+2,?_printf+4
 10051  001C06  C0CA  F09C         	movff	adf4351_write_reg4@data+3,?_printf+5
 10052  001C0A  EE20 F020          	lfsr	2,32
 10053  001C0E  51BB               	movf	adf4351_write_reg4@ctx& (0+255),w,b
 10054  001C10  26D9               	addwf	fsr2l,f,c
 10055  001C12  51BC               	movf	(adf4351_write_reg4@ctx+1)& (0+255),w,b
 10056  001C14  22DA               	addwfc	fsr2h,f,c
 10057  001C16  50DF               	movf	indf2,w,c
 10058  001C18  6FBD               	movwf	??_adf4351_write_reg4& (0+255),b
 10059  001C1A  51BD               	movf	??_adf4351_write_reg4& (0+255),w,b
 10060  001C1C  6F9D               	movwf	(?_printf+6)& (0+255),b
 10061  001C1E  6B9E               	clrf	(?_printf+7)& (0+255),b
 10062  001C20  EE20 F021          	lfsr	2,33
 10063  001C24  51BB               	movf	adf4351_write_reg4@ctx& (0+255),w,b
 10064  001C26  26D9               	addwf	fsr2l,f,c
 10065  001C28  51BC               	movf	(adf4351_write_reg4@ctx+1)& (0+255),w,b
 10066  001C2A  22DA               	addwfc	fsr2h,f,c
 10067  001C2C  50DF               	movf	indf2,w,c
 10068  001C2E  6FBE               	movwf	(??_adf4351_write_reg4+1)& (0+255),b
 10069  001C30  51BE               	movf	(??_adf4351_write_reg4+1)& (0+255),w,b
 10070  001C32  6F9F               	movwf	(?_printf+8)& (0+255),b
 10071  001C34  6BA0               	clrf	(?_printf+9)& (0+255),b
 10072  001C36  EE20 F022          	lfsr	2,34
 10073  001C3A  51BB               	movf	adf4351_write_reg4@ctx& (0+255),w,b
 10074  001C3C  26D9               	addwf	fsr2l,f,c
 10075  001C3E  51BC               	movf	(adf4351_write_reg4@ctx+1)& (0+255),w,b
 10076  001C40  22DA               	addwfc	fsr2h,f,c
 10077  001C42  50DF               	movf	indf2,w,c
 10078  001C44  6FBF               	movwf	(??_adf4351_write_reg4+2)& (0+255),b
 10079  001C46  51BF               	movf	(??_adf4351_write_reg4+2)& (0+255),w,b
 10080  001C48  6FA1               	movwf	(?_printf+10)& (0+255),b
 10081  001C4A  6BA2               	clrf	(?_printf+11)& (0+255),b
 10082  001C4C  EE20 F023          	lfsr	2,35
 10083  001C50  51BB               	movf	adf4351_write_reg4@ctx& (0+255),w,b
 10084  001C52  26D9               	addwf	fsr2l,f,c
 10085  001C54  51BC               	movf	(adf4351_write_reg4@ctx+1)& (0+255),w,b
 10086  001C56  22DA               	addwfc	fsr2h,f,c
 10087  001C58  50DF               	movf	indf2,w,c
 10088  001C5A  6FC0               	movwf	(??_adf4351_write_reg4+3)& (0+255),b
 10089  001C5C  51C0               	movf	(??_adf4351_write_reg4+3)& (0+255),w,b
 10090  001C5E  6FA3               	movwf	(?_printf+12)& (0+255),b
 10091  001C60  6BA4               	clrf	(?_printf+13)& (0+255),b
 10092  001C62  EE20 F024          	lfsr	2,36
 10093  001C66  51BB               	movf	adf4351_write_reg4@ctx& (0+255),w,b
 10094  001C68  26D9               	addwf	fsr2l,f,c
 10095  001C6A  51BC               	movf	(adf4351_write_reg4@ctx+1)& (0+255),w,b
 10096  001C6C  22DA               	addwfc	fsr2h,f,c
 10097  001C6E  50DF               	movf	indf2,w,c
 10098  001C70  6FC1               	movwf	(??_adf4351_write_reg4+4)& (0+255),b
 10099  001C72  51C1               	movf	(??_adf4351_write_reg4+4)& (0+255),w,b
 10100  001C74  6FA5               	movwf	(?_printf+14)& (0+255),b
 10101  001C76  6BA6               	clrf	(?_printf+15)& (0+255),b
 10102  001C78  EE20 F025          	lfsr	2,37
 10103  001C7C  51BB               	movf	adf4351_write_reg4@ctx& (0+255),w,b
 10104  001C7E  26D9               	addwf	fsr2l,f,c
 10105  001C80  51BC               	movf	(adf4351_write_reg4@ctx+1)& (0+255),w,b
 10106  001C82  22DA               	addwfc	fsr2h,f,c
 10107  001C84  50DF               	movf	indf2,w,c
 10108  001C86  6FC2               	movwf	(??_adf4351_write_reg4+5)& (0+255),b
 10109  001C88  51C2               	movf	(??_adf4351_write_reg4+5)& (0+255),w,b
 10110  001C8A  6FA7               	movwf	(?_printf+16)& (0+255),b
 10111  001C8C  6BA8               	clrf	(?_printf+17)& (0+255),b
 10112  001C8E  EE20 F026          	lfsr	2,38
 10113  001C92  51BB               	movf	adf4351_write_reg4@ctx& (0+255),w,b
 10114  001C94  26D9               	addwf	fsr2l,f,c
 10115  001C96  51BC               	movf	(adf4351_write_reg4@ctx+1)& (0+255),w,b
 10116  001C98  22DA               	addwfc	fsr2h,f,c
 10117  001C9A  50DF               	movf	indf2,w,c
 10118  001C9C  6FC3               	movwf	(??_adf4351_write_reg4+6)& (0+255),b
 10119  001C9E  51C3               	movf	(??_adf4351_write_reg4+6)& (0+255),w,b
 10120  001CA0  6FA9               	movwf	(?_printf+18)& (0+255),b
 10121  001CA2  6BAA               	clrf	(?_printf+19)& (0+255),b
 10122  001CA4  EE20 F027          	lfsr	2,39
 10123  001CA8  51BB               	movf	adf4351_write_reg4@ctx& (0+255),w,b
 10124  001CAA  26D9               	addwf	fsr2l,f,c
 10125  001CAC  51BC               	movf	(adf4351_write_reg4@ctx+1)& (0+255),w,b
 10126  001CAE  22DA               	addwfc	fsr2h,f,c
 10127  001CB0  50DF               	movf	indf2,w,c
 10128  001CB2  6FC4               	movwf	(??_adf4351_write_reg4+7)& (0+255),b
 10129  001CB4  51C4               	movf	(??_adf4351_write_reg4+7)& (0+255),w,b
 10130  001CB6  6FAB               	movwf	(?_printf+20)& (0+255),b
 10131  001CB8  6BAC               	clrf	(?_printf+21)& (0+255),b
 10132  001CBA  EE20 F028          	lfsr	2,40
 10133  001CBE  51BB               	movf	adf4351_write_reg4@ctx& (0+255),w,b
 10134  001CC0  26D9               	addwf	fsr2l,f,c
 10135  001CC2  51BC               	movf	(adf4351_write_reg4@ctx+1)& (0+255),w,b
 10136  001CC4  22DA               	addwfc	fsr2h,f,c
 10137  001CC6  50DF               	movf	indf2,w,c
 10138  001CC8  6FC5               	movwf	(??_adf4351_write_reg4+8)& (0+255),b
 10139  001CCA  51C5               	movf	(??_adf4351_write_reg4+8)& (0+255),w,b
 10140  001CCC  6FAD               	movwf	(?_printf+22)& (0+255),b
 10141  001CCE  6BAE               	clrf	(?_printf+23)& (0+255),b
 10142  001CD0  EE20 F029          	lfsr	2,41
 10143  001CD4  51BB               	movf	adf4351_write_reg4@ctx& (0+255),w,b
 10144  001CD6  26D9               	addwf	fsr2l,f,c
 10145  001CD8  51BC               	movf	(adf4351_write_reg4@ctx+1)& (0+255),w,b
 10146  001CDA  22DA               	addwfc	fsr2h,f,c
 10147  001CDC  50DF               	movf	indf2,w,c
 10148  001CDE  6FC6               	movwf	(??_adf4351_write_reg4+9)& (0+255),b
 10149  001CE0  51C6               	movf	(??_adf4351_write_reg4+9)& (0+255),w,b
 10150  001CE2  6FAF               	movwf	(?_printf+24)& (0+255),b
 10151  001CE4  6BB0               	clrf	(?_printf+25)& (0+255),b
 10152  001CE6  ECFF  F02B         	call	_printf	;wreg free
 10153  001CEA                     
 10154                           ;src/driver/adf4351.c: 371:         adf4351_write_latch(data);
 10155  001CEA  C0C7  F00D         	movff	adf4351_write_reg4@data,adf4351_write_latch@value
 10156  001CEE  C0C8  F00E         	movff	adf4351_write_reg4@data+1,adf4351_write_latch@value+1
 10157  001CF2  C0C9  F00F         	movff	adf4351_write_reg4@data+2,adf4351_write_latch@value+2
 10158  001CF6  C0CA  F010         	movff	adf4351_write_reg4@data+3,adf4351_write_latch@value+3
 10159  001CFA  ECC6  F018         	call	_adf4351_write_latch	;wreg free
 10160  001CFE                     l134:
 10161  001CFE  0012               	return		;funcret
 10162  001D00                     __end_of_adf4351_write_reg4:
 10163                           	opt callstack 0
 10164                           
 10165 ;; *************** function _adf4351_write_reg3 *****************
 10166 ;; Defined at:
 10167 ;;		line 335 in file "src/driver/adf4351.c"
 10168 ;; Parameters:    Size  Location     Type
 10169 ;;  ctx             2   59[BANK0 ] PTR struct adf4351_ctx
 10170 ;;		 -> g_adf4351(55), 
 10171 ;; Auto vars:     Size  Location     Type
 10172 ;;  data            4   67[BANK0 ] unsigned long 
 10173 ;; Return value:  Size  Location     Type
 10174 ;;                  1    wreg      void 
 10175 ;; Registers used:
 10176 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10177 ;; Tracked objects:
 10178 ;;		On entry : 0/0
 10179 ;;		On exit  : 0/0
 10180 ;;		Unchanged: 0/0
 10181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10182 ;;      Params:         0       2       0       0       0       0       0
 10183 ;;      Locals:         0       4       0       0       0       0       0
 10184 ;;      Temps:          0       6       0       0       0       0       0
 10185 ;;      Totals:         0      12       0       0       0       0       0
 10186 ;;Total ram usage:       12 bytes
 10187 ;; Hardware stack levels used:    1
 10188 ;; Hardware stack levels required when called:   10
 10189 ;; This function calls:
 10190 ;;		_adf4351_write_latch
 10191 ;;		_printf
 10192 ;; This function is called by:
 10193 ;;		_adf4351_setup
 10194 ;; This function uses a non-reentrant model
 10195 ;;
 10196                           
 10197                           	psect	text29
 10198  0028F0                     __ptext29:
 10199                           	opt callstack 0
 10200  0028F0                     _adf4351_write_reg3:
 10201                           	opt callstack 16
 10202  0028F0                     
 10203                           ;src/driver/adf4351.c: 335: static void adf4351_write_reg3(adf4351_ctx* ctx);src/driver/
      +                          adf4351.c: 336: {;src/driver/adf4351.c: 337:     if(ctx->init) {
 10204  0028F0  C0BB  FFD9         	movff	adf4351_write_reg3@ctx,fsr2l
 10205  0028F4  C0BC  FFDA         	movff	adf4351_write_reg3@ctx+1,fsr2h
 10206  0028F8  50DE               	movf	postinc2,w,c
 10207  0028FA  10DE               	iorwf	postinc2,w,c
 10208  0028FC  B4D8               	btfsc	status,2,c
 10209  0028FE  EF83  F014         	goto	u7681
 10210  002902  EF85  F014         	goto	u7680
 10211  002906                     u7681:
 10212  002906  EFAA  F015         	goto	l130
 10213  00290A                     u7680:
 10214  00290A                     
 10215                           ;src/driver/adf4351.c: 338:         u32 data = 3;
 10216  00290A  0E03               	movlw	3
 10217  00290C  0100               	movlb	0	; () banked
 10218  00290E  6FC3               	movwf	adf4351_write_reg3@data& (0+255),b
 10219  002910  0E00               	movlw	0
 10220  002912  6FC4               	movwf	(adf4351_write_reg3@data+1)& (0+255),b
 10221  002914  0E00               	movlw	0
 10222  002916  6FC5               	movwf	(adf4351_write_reg3@data+2)& (0+255),b
 10223  002918  0E00               	movlw	0
 10224  00291A  6FC6               	movwf	(adf4351_write_reg3@data+3)& (0+255),b
 10225  00291C                     
 10226                           ; BSR set to: 0
 10227                           ;src/driver/adf4351.c: 340:         data |= (((u32)ctx->reg3.clkdiv&0x0FFF)<<3);
 10228  00291C  EE20 F01E          	lfsr	2,30
 10229  002920  51BB               	movf	adf4351_write_reg3@ctx& (0+255),w,b
 10230  002922  26D9               	addwf	fsr2l,f,c
 10231  002924  51BC               	movf	(adf4351_write_reg3@ctx+1)& (0+255),w,b
 10232  002926  22DA               	addwfc	fsr2h,f,c
 10233  002928  CFDE F0BD          	movff	postinc2,??_adf4351_write_reg3
 10234  00292C  CFDD F0BE          	movff	postdec2,??_adf4351_write_reg3+1
 10235  002930  0EFF               	movlw	255
 10236  002932  15BD               	andwf	??_adf4351_write_reg3& (0+255),w,b
 10237  002934  6FBF               	movwf	(??_adf4351_write_reg3+2)& (0+255),b
 10238  002936  0E0F               	movlw	15
 10239  002938  15BE               	andwf	(??_adf4351_write_reg3+1)& (0+255),w,b
 10240  00293A  6FC0               	movwf	(??_adf4351_write_reg3+3)& (0+255),b
 10241  00293C  6BC1               	clrf	(??_adf4351_write_reg3+4)& (0+255),b
 10242  00293E  6BC2               	clrf	(??_adf4351_write_reg3+5)& (0+255),b
 10243  002940  0E03               	movlw	3
 10244  002942                     u7695:
 10245  002942  90D8               	bcf	status,0,c
 10246  002944  37BF               	rlcf	(??_adf4351_write_reg3+2)& (0+255),f,b
 10247  002946  37C0               	rlcf	(??_adf4351_write_reg3+3)& (0+255),f,b
 10248  002948  37C1               	rlcf	(??_adf4351_write_reg3+4)& (0+255),f,b
 10249  00294A  37C2               	rlcf	(??_adf4351_write_reg3+5)& (0+255),f,b
 10250  00294C  2EE8               	decfsz	wreg,f,c
 10251  00294E  EFA1  F014         	goto	u7695
 10252  002952  51BF               	movf	(??_adf4351_write_reg3+2)& (0+255),w,b
 10253  002954  13C3               	iorwf	adf4351_write_reg3@data& (0+255),f,b
 10254  002956  51C0               	movf	(??_adf4351_write_reg3+3)& (0+255),w,b
 10255  002958  13C4               	iorwf	(adf4351_write_reg3@data+1)& (0+255),f,b
 10256  00295A  51C1               	movf	(??_adf4351_write_reg3+4)& (0+255),w,b
 10257  00295C  13C5               	iorwf	(adf4351_write_reg3@data+2)& (0+255),f,b
 10258  00295E  51C2               	movf	(??_adf4351_write_reg3+5)& (0+255),w,b
 10259  002960  13C6               	iorwf	(adf4351_write_reg3@data+3)& (0+255),f,b
 10260  002962                     
 10261                           ; BSR set to: 0
 10262                           ;src/driver/adf4351.c: 341:         data |= (((u32)ctx->reg3.clkdivmode&0x0003)<<15);
 10263  002962  EE20 F01D          	lfsr	2,29
 10264  002966  51BB               	movf	adf4351_write_reg3@ctx& (0+255),w,b
 10265  002968  26D9               	addwf	fsr2l,f,c
 10266  00296A  51BC               	movf	(adf4351_write_reg3@ctx+1)& (0+255),w,b
 10267  00296C  22DA               	addwfc	fsr2h,f,c
 10268  00296E  50DF               	movf	indf2,w,c
 10269  002970  6FBD               	movwf	??_adf4351_write_reg3& (0+255),b
 10270  002972  0E03               	movlw	3
 10271  002974  17BD               	andwf	??_adf4351_write_reg3& (0+255),f,b
 10272  002976  C0BD  F0BE         	movff	??_adf4351_write_reg3,??_adf4351_write_reg3+1
 10273  00297A  6BBF               	clrf	(??_adf4351_write_reg3+2)& (0+255),b
 10274  00297C  6BC0               	clrf	(??_adf4351_write_reg3+3)& (0+255),b
 10275  00297E  6BC1               	clrf	(??_adf4351_write_reg3+4)& (0+255),b
 10276  002980  0E0F               	movlw	15
 10277  002982                     u7705:
 10278  002982  90D8               	bcf	status,0,c
 10279  002984  37BE               	rlcf	(??_adf4351_write_reg3+1)& (0+255),f,b
 10280  002986  37BF               	rlcf	(??_adf4351_write_reg3+2)& (0+255),f,b
 10281  002988  37C0               	rlcf	(??_adf4351_write_reg3+3)& (0+255),f,b
 10282  00298A  37C1               	rlcf	(??_adf4351_write_reg3+4)& (0+255),f,b
 10283  00298C  2EE8               	decfsz	wreg,f,c
 10284  00298E  EFC1  F014         	goto	u7705
 10285  002992  51BE               	movf	(??_adf4351_write_reg3+1)& (0+255),w,b
 10286  002994  13C3               	iorwf	adf4351_write_reg3@data& (0+255),f,b
 10287  002996  51BF               	movf	(??_adf4351_write_reg3+2)& (0+255),w,b
 10288  002998  13C4               	iorwf	(adf4351_write_reg3@data+1)& (0+255),f,b
 10289  00299A  51C0               	movf	(??_adf4351_write_reg3+3)& (0+255),w,b
 10290  00299C  13C5               	iorwf	(adf4351_write_reg3@data+2)& (0+255),f,b
 10291  00299E  51C1               	movf	(??_adf4351_write_reg3+4)& (0+255),w,b
 10292  0029A0  13C6               	iorwf	(adf4351_write_reg3@data+3)& (0+255),f,b
 10293  0029A2                     
 10294                           ; BSR set to: 0
 10295                           ;src/driver/adf4351.c: 342:         data |= (((u32)ctx->reg3.csr&0x0001)<<18);
 10296  0029A2  EE20 F01C          	lfsr	2,28
 10297  0029A6  51BB               	movf	adf4351_write_reg3@ctx& (0+255),w,b
 10298  0029A8  26D9               	addwf	fsr2l,f,c
 10299  0029AA  51BC               	movf	(adf4351_write_reg3@ctx+1)& (0+255),w,b
 10300  0029AC  22DA               	addwfc	fsr2h,f,c
 10301  0029AE  50DF               	movf	indf2,w,c
 10302  0029B0  6FBD               	movwf	??_adf4351_write_reg3& (0+255),b
 10303  0029B2  0E01               	movlw	1
 10304  0029B4  17BD               	andwf	??_adf4351_write_reg3& (0+255),f,b
 10305  0029B6  C0BD  F0BE         	movff	??_adf4351_write_reg3,??_adf4351_write_reg3+1
 10306  0029BA  6BBF               	clrf	(??_adf4351_write_reg3+2)& (0+255),b
 10307  0029BC  6BC0               	clrf	(??_adf4351_write_reg3+3)& (0+255),b
 10308  0029BE  6BC1               	clrf	(??_adf4351_write_reg3+4)& (0+255),b
 10309  0029C0  0E12               	movlw	18
 10310  0029C2                     u7715:
 10311  0029C2  90D8               	bcf	status,0,c
 10312  0029C4  37BE               	rlcf	(??_adf4351_write_reg3+1)& (0+255),f,b
 10313  0029C6  37BF               	rlcf	(??_adf4351_write_reg3+2)& (0+255),f,b
 10314  0029C8  37C0               	rlcf	(??_adf4351_write_reg3+3)& (0+255),f,b
 10315  0029CA  37C1               	rlcf	(??_adf4351_write_reg3+4)& (0+255),f,b
 10316  0029CC  2EE8               	decfsz	wreg,f,c
 10317  0029CE  EFE1  F014         	goto	u7715
 10318  0029D2  51BE               	movf	(??_adf4351_write_reg3+1)& (0+255),w,b
 10319  0029D4  13C3               	iorwf	adf4351_write_reg3@data& (0+255),f,b
 10320  0029D6  51BF               	movf	(??_adf4351_write_reg3+2)& (0+255),w,b
 10321  0029D8  13C4               	iorwf	(adf4351_write_reg3@data+1)& (0+255),f,b
 10322  0029DA  51C0               	movf	(??_adf4351_write_reg3+3)& (0+255),w,b
 10323  0029DC  13C5               	iorwf	(adf4351_write_reg3@data+2)& (0+255),f,b
 10324  0029DE  51C1               	movf	(??_adf4351_write_reg3+4)& (0+255),w,b
 10325  0029E0  13C6               	iorwf	(adf4351_write_reg3@data+3)& (0+255),f,b
 10326  0029E2                     
 10327                           ; BSR set to: 0
 10328                           ;src/driver/adf4351.c: 343:         data |= (((u32)ctx->reg3.chcancel&0x0001)<<21);
 10329  0029E2  EE20 F01B          	lfsr	2,27
 10330  0029E6  51BB               	movf	adf4351_write_reg3@ctx& (0+255),w,b
 10331  0029E8  26D9               	addwf	fsr2l,f,c
 10332  0029EA  51BC               	movf	(adf4351_write_reg3@ctx+1)& (0+255),w,b
 10333  0029EC  22DA               	addwfc	fsr2h,f,c
 10334  0029EE  50DF               	movf	indf2,w,c
 10335  0029F0  6FBD               	movwf	??_adf4351_write_reg3& (0+255),b
 10336  0029F2  0E01               	movlw	1
 10337  0029F4  17BD               	andwf	??_adf4351_write_reg3& (0+255),f,b
 10338  0029F6  C0BD  F0BE         	movff	??_adf4351_write_reg3,??_adf4351_write_reg3+1
 10339  0029FA  6BBF               	clrf	(??_adf4351_write_reg3+2)& (0+255),b
 10340  0029FC  6BC0               	clrf	(??_adf4351_write_reg3+3)& (0+255),b
 10341  0029FE  6BC1               	clrf	(??_adf4351_write_reg3+4)& (0+255),b
 10342  002A00  0E15               	movlw	21
 10343  002A02                     u7725:
 10344  002A02  90D8               	bcf	status,0,c
 10345  002A04  37BE               	rlcf	(??_adf4351_write_reg3+1)& (0+255),f,b
 10346  002A06  37BF               	rlcf	(??_adf4351_write_reg3+2)& (0+255),f,b
 10347  002A08  37C0               	rlcf	(??_adf4351_write_reg3+3)& (0+255),f,b
 10348  002A0A  37C1               	rlcf	(??_adf4351_write_reg3+4)& (0+255),f,b
 10349  002A0C  2EE8               	decfsz	wreg,f,c
 10350  002A0E  EF01  F015         	goto	u7725
 10351  002A12  51BE               	movf	(??_adf4351_write_reg3+1)& (0+255),w,b
 10352  002A14  13C3               	iorwf	adf4351_write_reg3@data& (0+255),f,b
 10353  002A16  51BF               	movf	(??_adf4351_write_reg3+2)& (0+255),w,b
 10354  002A18  13C4               	iorwf	(adf4351_write_reg3@data+1)& (0+255),f,b
 10355  002A1A  51C0               	movf	(??_adf4351_write_reg3+3)& (0+255),w,b
 10356  002A1C  13C5               	iorwf	(adf4351_write_reg3@data+2)& (0+255),f,b
 10357  002A1E  51C1               	movf	(??_adf4351_write_reg3+4)& (0+255),w,b
 10358  002A20  13C6               	iorwf	(adf4351_write_reg3@data+3)& (0+255),f,b
 10359  002A22                     
 10360                           ; BSR set to: 0
 10361                           ;src/driver/adf4351.c: 344:         data |= (((u32)ctx->reg3.abp&0x0001)<<22);
 10362  002A22  EE20 F01A          	lfsr	2,26
 10363  002A26  51BB               	movf	adf4351_write_reg3@ctx& (0+255),w,b
 10364  002A28  26D9               	addwf	fsr2l,f,c
 10365  002A2A  51BC               	movf	(adf4351_write_reg3@ctx+1)& (0+255),w,b
 10366  002A2C  22DA               	addwfc	fsr2h,f,c
 10367  002A2E  50DF               	movf	indf2,w,c
 10368  002A30  6FBD               	movwf	??_adf4351_write_reg3& (0+255),b
 10369  002A32  0E01               	movlw	1
 10370  002A34  17BD               	andwf	??_adf4351_write_reg3& (0+255),f,b
 10371  002A36  C0BD  F0BE         	movff	??_adf4351_write_reg3,??_adf4351_write_reg3+1
 10372  002A3A  6BBF               	clrf	(??_adf4351_write_reg3+2)& (0+255),b
 10373  002A3C  6BC0               	clrf	(??_adf4351_write_reg3+3)& (0+255),b
 10374  002A3E  6BC1               	clrf	(??_adf4351_write_reg3+4)& (0+255),b
 10375  002A40  0E16               	movlw	22
 10376  002A42                     u7735:
 10377  002A42  90D8               	bcf	status,0,c
 10378  002A44  37BE               	rlcf	(??_adf4351_write_reg3+1)& (0+255),f,b
 10379  002A46  37BF               	rlcf	(??_adf4351_write_reg3+2)& (0+255),f,b
 10380  002A48  37C0               	rlcf	(??_adf4351_write_reg3+3)& (0+255),f,b
 10381  002A4A  37C1               	rlcf	(??_adf4351_write_reg3+4)& (0+255),f,b
 10382  002A4C  2EE8               	decfsz	wreg,f,c
 10383  002A4E  EF21  F015         	goto	u7735
 10384  002A52  51BE               	movf	(??_adf4351_write_reg3+1)& (0+255),w,b
 10385  002A54  13C3               	iorwf	adf4351_write_reg3@data& (0+255),f,b
 10386  002A56  51BF               	movf	(??_adf4351_write_reg3+2)& (0+255),w,b
 10387  002A58  13C4               	iorwf	(adf4351_write_reg3@data+1)& (0+255),f,b
 10388  002A5A  51C0               	movf	(??_adf4351_write_reg3+3)& (0+255),w,b
 10389  002A5C  13C5               	iorwf	(adf4351_write_reg3@data+2)& (0+255),f,b
 10390  002A5E  51C1               	movf	(??_adf4351_write_reg3+4)& (0+255),w,b
 10391  002A60  13C6               	iorwf	(adf4351_write_reg3@data+3)& (0+255),f,b
 10392  002A62                     
 10393                           ; BSR set to: 0
 10394                           ;src/driver/adf4351.c: 345:         data |= (((u32)ctx->reg3.bscm&0x0001)<<23);
 10395  002A62  EE20 F019          	lfsr	2,25
 10396  002A66  51BB               	movf	adf4351_write_reg3@ctx& (0+255),w,b
 10397  002A68  26D9               	addwf	fsr2l,f,c
 10398  002A6A  51BC               	movf	(adf4351_write_reg3@ctx+1)& (0+255),w,b
 10399  002A6C  22DA               	addwfc	fsr2h,f,c
 10400  002A6E  50DF               	movf	indf2,w,c
 10401  002A70  6FBD               	movwf	??_adf4351_write_reg3& (0+255),b
 10402  002A72  0E01               	movlw	1
 10403  002A74  17BD               	andwf	??_adf4351_write_reg3& (0+255),f,b
 10404  002A76  C0BD  F0BE         	movff	??_adf4351_write_reg3,??_adf4351_write_reg3+1
 10405  002A7A  6BBF               	clrf	(??_adf4351_write_reg3+2)& (0+255),b
 10406  002A7C  6BC0               	clrf	(??_adf4351_write_reg3+3)& (0+255),b
 10407  002A7E  6BC1               	clrf	(??_adf4351_write_reg3+4)& (0+255),b
 10408  002A80  0E17               	movlw	23
 10409  002A82                     u7745:
 10410  002A82  90D8               	bcf	status,0,c
 10411  002A84  37BE               	rlcf	(??_adf4351_write_reg3+1)& (0+255),f,b
 10412  002A86  37BF               	rlcf	(??_adf4351_write_reg3+2)& (0+255),f,b
 10413  002A88  37C0               	rlcf	(??_adf4351_write_reg3+3)& (0+255),f,b
 10414  002A8A  37C1               	rlcf	(??_adf4351_write_reg3+4)& (0+255),f,b
 10415  002A8C  2EE8               	decfsz	wreg,f,c
 10416  002A8E  EF41  F015         	goto	u7745
 10417  002A92  51BE               	movf	(??_adf4351_write_reg3+1)& (0+255),w,b
 10418  002A94  13C3               	iorwf	adf4351_write_reg3@data& (0+255),f,b
 10419  002A96  51BF               	movf	(??_adf4351_write_reg3+2)& (0+255),w,b
 10420  002A98  13C4               	iorwf	(adf4351_write_reg3@data+1)& (0+255),f,b
 10421  002A9A  51C0               	movf	(??_adf4351_write_reg3+3)& (0+255),w,b
 10422  002A9C  13C5               	iorwf	(adf4351_write_reg3@data+2)& (0+255),f,b
 10423  002A9E  51C1               	movf	(??_adf4351_write_reg3+4)& (0+255),w,b
 10424  002AA0  13C6               	iorwf	(adf4351_write_reg3@data+3)& (0+255),f,b
 10425  002AA2                     
 10426                           ; BSR set to: 0
 10427                           ;src/driver/adf4351.c: 347:         printf("ADF4351 WRITE REG3: 0x%08lX (bscm=%i, abp=%i
      +                          , chcancel=%i csr=%i clkdivmode=%i clkdiv=%i\r\n", data, ctx->reg3.bscm, ctx->reg3.abp, 
      +                          ctx->reg3.chcancel, ctx->reg3.csr, ctx->reg3.clkdivmode, ctx->reg3.clkdiv);
 10428  002AA2  0E46               	movlw	low STR_15
 10429  002AA4  6F97               	movwf	printf@fmt& (0+255),b
 10430  002AA6  0E7B               	movlw	high STR_15
 10431  002AA8  6F98               	movwf	(printf@fmt+1)& (0+255),b
 10432  002AAA  C0C3  F099         	movff	adf4351_write_reg3@data,?_printf+2
 10433  002AAE  C0C4  F09A         	movff	adf4351_write_reg3@data+1,?_printf+3
 10434  002AB2  C0C5  F09B         	movff	adf4351_write_reg3@data+2,?_printf+4
 10435  002AB6  C0C6  F09C         	movff	adf4351_write_reg3@data+3,?_printf+5
 10436  002ABA  EE20 F019          	lfsr	2,25
 10437  002ABE  51BB               	movf	adf4351_write_reg3@ctx& (0+255),w,b
 10438  002AC0  26D9               	addwf	fsr2l,f,c
 10439  002AC2  51BC               	movf	(adf4351_write_reg3@ctx+1)& (0+255),w,b
 10440  002AC4  22DA               	addwfc	fsr2h,f,c
 10441  002AC6  50DF               	movf	indf2,w,c
 10442  002AC8  6FBD               	movwf	??_adf4351_write_reg3& (0+255),b
 10443  002ACA  51BD               	movf	??_adf4351_write_reg3& (0+255),w,b
 10444  002ACC  6F9D               	movwf	(?_printf+6)& (0+255),b
 10445  002ACE  6B9E               	clrf	(?_printf+7)& (0+255),b
 10446  002AD0  EE20 F01A          	lfsr	2,26
 10447  002AD4  51BB               	movf	adf4351_write_reg3@ctx& (0+255),w,b
 10448  002AD6  26D9               	addwf	fsr2l,f,c
 10449  002AD8  51BC               	movf	(adf4351_write_reg3@ctx+1)& (0+255),w,b
 10450  002ADA  22DA               	addwfc	fsr2h,f,c
 10451  002ADC  50DF               	movf	indf2,w,c
 10452  002ADE  6FBE               	movwf	(??_adf4351_write_reg3+1)& (0+255),b
 10453  002AE0  51BE               	movf	(??_adf4351_write_reg3+1)& (0+255),w,b
 10454  002AE2  6F9F               	movwf	(?_printf+8)& (0+255),b
 10455  002AE4  6BA0               	clrf	(?_printf+9)& (0+255),b
 10456  002AE6  EE20 F01B          	lfsr	2,27
 10457  002AEA  51BB               	movf	adf4351_write_reg3@ctx& (0+255),w,b
 10458  002AEC  26D9               	addwf	fsr2l,f,c
 10459  002AEE  51BC               	movf	(adf4351_write_reg3@ctx+1)& (0+255),w,b
 10460  002AF0  22DA               	addwfc	fsr2h,f,c
 10461  002AF2  50DF               	movf	indf2,w,c
 10462  002AF4  6FBF               	movwf	(??_adf4351_write_reg3+2)& (0+255),b
 10463  002AF6  51BF               	movf	(??_adf4351_write_reg3+2)& (0+255),w,b
 10464  002AF8  6FA1               	movwf	(?_printf+10)& (0+255),b
 10465  002AFA  6BA2               	clrf	(?_printf+11)& (0+255),b
 10466  002AFC  EE20 F01C          	lfsr	2,28
 10467  002B00  51BB               	movf	adf4351_write_reg3@ctx& (0+255),w,b
 10468  002B02  26D9               	addwf	fsr2l,f,c
 10469  002B04  51BC               	movf	(adf4351_write_reg3@ctx+1)& (0+255),w,b
 10470  002B06  22DA               	addwfc	fsr2h,f,c
 10471  002B08  50DF               	movf	indf2,w,c
 10472  002B0A  6FC0               	movwf	(??_adf4351_write_reg3+3)& (0+255),b
 10473  002B0C  51C0               	movf	(??_adf4351_write_reg3+3)& (0+255),w,b
 10474  002B0E  6FA3               	movwf	(?_printf+12)& (0+255),b
 10475  002B10  6BA4               	clrf	(?_printf+13)& (0+255),b
 10476  002B12  EE20 F01D          	lfsr	2,29
 10477  002B16  51BB               	movf	adf4351_write_reg3@ctx& (0+255),w,b
 10478  002B18  26D9               	addwf	fsr2l,f,c
 10479  002B1A  51BC               	movf	(adf4351_write_reg3@ctx+1)& (0+255),w,b
 10480  002B1C  22DA               	addwfc	fsr2h,f,c
 10481  002B1E  50DF               	movf	indf2,w,c
 10482  002B20  6FC1               	movwf	(??_adf4351_write_reg3+4)& (0+255),b
 10483  002B22  51C1               	movf	(??_adf4351_write_reg3+4)& (0+255),w,b
 10484  002B24  6FA5               	movwf	(?_printf+14)& (0+255),b
 10485  002B26  6BA6               	clrf	(?_printf+15)& (0+255),b
 10486  002B28  EE20 F01E          	lfsr	2,30
 10487  002B2C  51BB               	movf	adf4351_write_reg3@ctx& (0+255),w,b
 10488  002B2E  26D9               	addwf	fsr2l,f,c
 10489  002B30  51BC               	movf	(adf4351_write_reg3@ctx+1)& (0+255),w,b
 10490  002B32  22DA               	addwfc	fsr2h,f,c
 10491  002B34  CFDE F0A7          	movff	postinc2,?_printf+16
 10492  002B38  CFDD F0A8          	movff	postdec2,?_printf+17
 10493  002B3C  ECFF  F02B         	call	_printf	;wreg free
 10494  002B40                     
 10495                           ;src/driver/adf4351.c: 349:         adf4351_write_latch(data);
 10496  002B40  C0C3  F00D         	movff	adf4351_write_reg3@data,adf4351_write_latch@value
 10497  002B44  C0C4  F00E         	movff	adf4351_write_reg3@data+1,adf4351_write_latch@value+1
 10498  002B48  C0C5  F00F         	movff	adf4351_write_reg3@data+2,adf4351_write_latch@value+2
 10499  002B4C  C0C6  F010         	movff	adf4351_write_reg3@data+3,adf4351_write_latch@value+3
 10500  002B50  ECC6  F018         	call	_adf4351_write_latch	;wreg free
 10501  002B54                     l130:
 10502  002B54  0012               	return		;funcret
 10503  002B56                     __end_of_adf4351_write_reg3:
 10504                           	opt callstack 0
 10505                           
 10506 ;; *************** function _adf4351_write_reg2 *****************
 10507 ;; Defined at:
 10508 ;;		line 308 in file "src/driver/adf4351.c"
 10509 ;; Parameters:    Size  Location     Type
 10510 ;;  ctx             2   59[BANK0 ] PTR struct adf4351_ctx
 10511 ;;		 -> g_adf4351(55), 
 10512 ;; Auto vars:     Size  Location     Type
 10513 ;;  data            4   73[BANK0 ] unsigned long 
 10514 ;; Return value:  Size  Location     Type
 10515 ;;                  1    wreg      void 
 10516 ;; Registers used:
 10517 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10518 ;; Tracked objects:
 10519 ;;		On entry : 0/0
 10520 ;;		On exit  : 0/0
 10521 ;;		Unchanged: 0/0
 10522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10523 ;;      Params:         0       2       0       0       0       0       0
 10524 ;;      Locals:         0       4       0       0       0       0       0
 10525 ;;      Temps:          0      12       0       0       0       0       0
 10526 ;;      Totals:         0      18       0       0       0       0       0
 10527 ;;Total ram usage:       18 bytes
 10528 ;; Hardware stack levels used:    1
 10529 ;; Hardware stack levels required when called:   10
 10530 ;; This function calls:
 10531 ;;		_adf4351_write_latch
 10532 ;;		_printf
 10533 ;; This function is called by:
 10534 ;;		_adf4351_set_rfout_enable
 10535 ;;		_adf4351_set_mode
 10536 ;;		_adf4351_setup
 10537 ;; This function uses a non-reentrant model
 10538 ;;
 10539                           
 10540                           	psect	text30
 10541  001012                     __ptext30:
 10542                           	opt callstack 0
 10543  001012                     _adf4351_write_reg2:
 10544                           	opt callstack 16
 10545  001012                     
 10546                           ;src/driver/adf4351.c: 308: static void adf4351_write_reg2(adf4351_ctx* ctx);src/driver/
      +                          adf4351.c: 309: {;src/driver/adf4351.c: 310:     if(ctx->init) {
 10547  001012  C0BB  FFD9         	movff	adf4351_write_reg2@ctx,fsr2l
 10548  001016  C0BC  FFDA         	movff	adf4351_write_reg2@ctx+1,fsr2h
 10549  00101A  50DE               	movf	postinc2,w,c
 10550  00101C  10DE               	iorwf	postinc2,w,c
 10551  00101E  B4D8               	btfsc	status,2,c
 10552  001020  EF14  F008         	goto	u7541
 10553  001024  EF16  F008         	goto	u7540
 10554  001028                     u7541:
 10555  001028  EF62  F00A         	goto	l126
 10556  00102C                     u7540:
 10557  00102C                     
 10558                           ;src/driver/adf4351.c: 311:         u32 data = 2;
 10559  00102C  0E02               	movlw	2
 10560  00102E  0100               	movlb	0	; () banked
 10561  001030  6FC9               	movwf	adf4351_write_reg2@data& (0+255),b
 10562  001032  0E00               	movlw	0
 10563  001034  6FCA               	movwf	(adf4351_write_reg2@data+1)& (0+255),b
 10564  001036  0E00               	movlw	0
 10565  001038  6FCB               	movwf	(adf4351_write_reg2@data+2)& (0+255),b
 10566  00103A  0E00               	movlw	0
 10567  00103C  6FCC               	movwf	(adf4351_write_reg2@data+3)& (0+255),b
 10568  00103E                     
 10569                           ; BSR set to: 0
 10570                           ;src/driver/adf4351.c: 313:         data |= (((u32)ctx->reg2.cntreset&0x0001)<<3);
 10571  00103E  EE20 F018          	lfsr	2,24
 10572  001042  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 10573  001044  26D9               	addwf	fsr2l,f,c
 10574  001046  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 10575  001048  22DA               	addwfc	fsr2h,f,c
 10576  00104A  50DF               	movf	indf2,w,c
 10577  00104C  6FBD               	movwf	??_adf4351_write_reg2& (0+255),b
 10578  00104E  0E01               	movlw	1
 10579  001050  17BD               	andwf	??_adf4351_write_reg2& (0+255),f,b
 10580  001052  C0BD  F0BE         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 10581  001056  6BBF               	clrf	(??_adf4351_write_reg2+2)& (0+255),b
 10582  001058  6BC0               	clrf	(??_adf4351_write_reg2+3)& (0+255),b
 10583  00105A  6BC1               	clrf	(??_adf4351_write_reg2+4)& (0+255),b
 10584  00105C  0E03               	movlw	3
 10585  00105E                     u7555:
 10586  00105E  90D8               	bcf	status,0,c
 10587  001060  37BE               	rlcf	(??_adf4351_write_reg2+1)& (0+255),f,b
 10588  001062  37BF               	rlcf	(??_adf4351_write_reg2+2)& (0+255),f,b
 10589  001064  37C0               	rlcf	(??_adf4351_write_reg2+3)& (0+255),f,b
 10590  001066  37C1               	rlcf	(??_adf4351_write_reg2+4)& (0+255),f,b
 10591  001068  2EE8               	decfsz	wreg,f,c
 10592  00106A  EF2F  F008         	goto	u7555
 10593  00106E  51BE               	movf	(??_adf4351_write_reg2+1)& (0+255),w,b
 10594  001070  13C9               	iorwf	adf4351_write_reg2@data& (0+255),f,b
 10595  001072  51BF               	movf	(??_adf4351_write_reg2+2)& (0+255),w,b
 10596  001074  13CA               	iorwf	(adf4351_write_reg2@data+1)& (0+255),f,b
 10597  001076  51C0               	movf	(??_adf4351_write_reg2+3)& (0+255),w,b
 10598  001078  13CB               	iorwf	(adf4351_write_reg2@data+2)& (0+255),f,b
 10599  00107A  51C1               	movf	(??_adf4351_write_reg2+4)& (0+255),w,b
 10600  00107C  13CC               	iorwf	(adf4351_write_reg2@data+3)& (0+255),f,b
 10601  00107E                     
 10602                           ; BSR set to: 0
 10603                           ;src/driver/adf4351.c: 314:         data |= (((u32)ctx->reg2.cpts&0x0001)<<4);
 10604  00107E  EE20 F017          	lfsr	2,23
 10605  001082  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 10606  001084  26D9               	addwf	fsr2l,f,c
 10607  001086  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 10608  001088  22DA               	addwfc	fsr2h,f,c
 10609  00108A  50DF               	movf	indf2,w,c
 10610  00108C  6FBD               	movwf	??_adf4351_write_reg2& (0+255),b
 10611  00108E  0E01               	movlw	1
 10612  001090  17BD               	andwf	??_adf4351_write_reg2& (0+255),f,b
 10613  001092  C0BD  F0BE         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 10614  001096  6BBF               	clrf	(??_adf4351_write_reg2+2)& (0+255),b
 10615  001098  6BC0               	clrf	(??_adf4351_write_reg2+3)& (0+255),b
 10616  00109A  6BC1               	clrf	(??_adf4351_write_reg2+4)& (0+255),b
 10617  00109C  0E04               	movlw	4
 10618  00109E                     u7565:
 10619  00109E  90D8               	bcf	status,0,c
 10620  0010A0  37BE               	rlcf	(??_adf4351_write_reg2+1)& (0+255),f,b
 10621  0010A2  37BF               	rlcf	(??_adf4351_write_reg2+2)& (0+255),f,b
 10622  0010A4  37C0               	rlcf	(??_adf4351_write_reg2+3)& (0+255),f,b
 10623  0010A6  37C1               	rlcf	(??_adf4351_write_reg2+4)& (0+255),f,b
 10624  0010A8  2EE8               	decfsz	wreg,f,c
 10625  0010AA  EF4F  F008         	goto	u7565
 10626  0010AE  51BE               	movf	(??_adf4351_write_reg2+1)& (0+255),w,b
 10627  0010B0  13C9               	iorwf	adf4351_write_reg2@data& (0+255),f,b
 10628  0010B2  51BF               	movf	(??_adf4351_write_reg2+2)& (0+255),w,b
 10629  0010B4  13CA               	iorwf	(adf4351_write_reg2@data+1)& (0+255),f,b
 10630  0010B6  51C0               	movf	(??_adf4351_write_reg2+3)& (0+255),w,b
 10631  0010B8  13CB               	iorwf	(adf4351_write_reg2@data+2)& (0+255),f,b
 10632  0010BA  51C1               	movf	(??_adf4351_write_reg2+4)& (0+255),w,b
 10633  0010BC  13CC               	iorwf	(adf4351_write_reg2@data+3)& (0+255),f,b
 10634  0010BE                     
 10635                           ; BSR set to: 0
 10636                           ;src/driver/adf4351.c: 315:         data |= (((u32)ctx->reg2.pd&0x0001)<<5);
 10637  0010BE  EE20 F016          	lfsr	2,22
 10638  0010C2  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 10639  0010C4  26D9               	addwf	fsr2l,f,c
 10640  0010C6  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 10641  0010C8  22DA               	addwfc	fsr2h,f,c
 10642  0010CA  50DF               	movf	indf2,w,c
 10643  0010CC  6FBD               	movwf	??_adf4351_write_reg2& (0+255),b
 10644  0010CE  0E01               	movlw	1
 10645  0010D0  17BD               	andwf	??_adf4351_write_reg2& (0+255),f,b
 10646  0010D2  C0BD  F0BE         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 10647  0010D6  6BBF               	clrf	(??_adf4351_write_reg2+2)& (0+255),b
 10648  0010D8  6BC0               	clrf	(??_adf4351_write_reg2+3)& (0+255),b
 10649  0010DA  6BC1               	clrf	(??_adf4351_write_reg2+4)& (0+255),b
 10650  0010DC  0E05               	movlw	5
 10651  0010DE                     u7575:
 10652  0010DE  90D8               	bcf	status,0,c
 10653  0010E0  37BE               	rlcf	(??_adf4351_write_reg2+1)& (0+255),f,b
 10654  0010E2  37BF               	rlcf	(??_adf4351_write_reg2+2)& (0+255),f,b
 10655  0010E4  37C0               	rlcf	(??_adf4351_write_reg2+3)& (0+255),f,b
 10656  0010E6  37C1               	rlcf	(??_adf4351_write_reg2+4)& (0+255),f,b
 10657  0010E8  2EE8               	decfsz	wreg,f,c
 10658  0010EA  EF6F  F008         	goto	u7575
 10659  0010EE  51BE               	movf	(??_adf4351_write_reg2+1)& (0+255),w,b
 10660  0010F0  13C9               	iorwf	adf4351_write_reg2@data& (0+255),f,b
 10661  0010F2  51BF               	movf	(??_adf4351_write_reg2+2)& (0+255),w,b
 10662  0010F4  13CA               	iorwf	(adf4351_write_reg2@data+1)& (0+255),f,b
 10663  0010F6  51C0               	movf	(??_adf4351_write_reg2+3)& (0+255),w,b
 10664  0010F8  13CB               	iorwf	(adf4351_write_reg2@data+2)& (0+255),f,b
 10665  0010FA  51C1               	movf	(??_adf4351_write_reg2+4)& (0+255),w,b
 10666  0010FC  13CC               	iorwf	(adf4351_write_reg2@data+3)& (0+255),f,b
 10667  0010FE                     
 10668                           ; BSR set to: 0
 10669                           ;src/driver/adf4351.c: 316:         data |= (((u32)ctx->reg2.pdpol&0x0001)<<6);
 10670  0010FE  EE20 F015          	lfsr	2,21
 10671  001102  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 10672  001104  26D9               	addwf	fsr2l,f,c
 10673  001106  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 10674  001108  22DA               	addwfc	fsr2h,f,c
 10675  00110A  50DF               	movf	indf2,w,c
 10676  00110C  6FBD               	movwf	??_adf4351_write_reg2& (0+255),b
 10677  00110E  0E01               	movlw	1
 10678  001110  17BD               	andwf	??_adf4351_write_reg2& (0+255),f,b
 10679  001112  C0BD  F0BE         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 10680  001116  6BBF               	clrf	(??_adf4351_write_reg2+2)& (0+255),b
 10681  001118  6BC0               	clrf	(??_adf4351_write_reg2+3)& (0+255),b
 10682  00111A  6BC1               	clrf	(??_adf4351_write_reg2+4)& (0+255),b
 10683  00111C  0E06               	movlw	6
 10684  00111E                     u7585:
 10685  00111E  90D8               	bcf	status,0,c
 10686  001120  37BE               	rlcf	(??_adf4351_write_reg2+1)& (0+255),f,b
 10687  001122  37BF               	rlcf	(??_adf4351_write_reg2+2)& (0+255),f,b
 10688  001124  37C0               	rlcf	(??_adf4351_write_reg2+3)& (0+255),f,b
 10689  001126  37C1               	rlcf	(??_adf4351_write_reg2+4)& (0+255),f,b
 10690  001128  2EE8               	decfsz	wreg,f,c
 10691  00112A  EF8F  F008         	goto	u7585
 10692  00112E  51BE               	movf	(??_adf4351_write_reg2+1)& (0+255),w,b
 10693  001130  13C9               	iorwf	adf4351_write_reg2@data& (0+255),f,b
 10694  001132  51BF               	movf	(??_adf4351_write_reg2+2)& (0+255),w,b
 10695  001134  13CA               	iorwf	(adf4351_write_reg2@data+1)& (0+255),f,b
 10696  001136  51C0               	movf	(??_adf4351_write_reg2+3)& (0+255),w,b
 10697  001138  13CB               	iorwf	(adf4351_write_reg2@data+2)& (0+255),f,b
 10698  00113A  51C1               	movf	(??_adf4351_write_reg2+4)& (0+255),w,b
 10699  00113C  13CC               	iorwf	(adf4351_write_reg2@data+3)& (0+255),f,b
 10700  00113E                     
 10701                           ; BSR set to: 0
 10702                           ;src/driver/adf4351.c: 317:         data |= (((u32)ctx->reg2.ldp&0x0001)<<7);
 10703  00113E  EE20 F014          	lfsr	2,20
 10704  001142  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 10705  001144  26D9               	addwf	fsr2l,f,c
 10706  001146  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 10707  001148  22DA               	addwfc	fsr2h,f,c
 10708  00114A  50DF               	movf	indf2,w,c
 10709  00114C  6FBD               	movwf	??_adf4351_write_reg2& (0+255),b
 10710  00114E  0E01               	movlw	1
 10711  001150  17BD               	andwf	??_adf4351_write_reg2& (0+255),f,b
 10712  001152  C0BD  F0BE         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 10713  001156  6BBF               	clrf	(??_adf4351_write_reg2+2)& (0+255),b
 10714  001158  6BC0               	clrf	(??_adf4351_write_reg2+3)& (0+255),b
 10715  00115A  6BC1               	clrf	(??_adf4351_write_reg2+4)& (0+255),b
 10716  00115C  0E07               	movlw	7
 10717  00115E                     u7595:
 10718  00115E  90D8               	bcf	status,0,c
 10719  001160  37BE               	rlcf	(??_adf4351_write_reg2+1)& (0+255),f,b
 10720  001162  37BF               	rlcf	(??_adf4351_write_reg2+2)& (0+255),f,b
 10721  001164  37C0               	rlcf	(??_adf4351_write_reg2+3)& (0+255),f,b
 10722  001166  37C1               	rlcf	(??_adf4351_write_reg2+4)& (0+255),f,b
 10723  001168  2EE8               	decfsz	wreg,f,c
 10724  00116A  EFAF  F008         	goto	u7595
 10725  00116E  51BE               	movf	(??_adf4351_write_reg2+1)& (0+255),w,b
 10726  001170  13C9               	iorwf	adf4351_write_reg2@data& (0+255),f,b
 10727  001172  51BF               	movf	(??_adf4351_write_reg2+2)& (0+255),w,b
 10728  001174  13CA               	iorwf	(adf4351_write_reg2@data+1)& (0+255),f,b
 10729  001176  51C0               	movf	(??_adf4351_write_reg2+3)& (0+255),w,b
 10730  001178  13CB               	iorwf	(adf4351_write_reg2@data+2)& (0+255),f,b
 10731  00117A  51C1               	movf	(??_adf4351_write_reg2+4)& (0+255),w,b
 10732  00117C  13CC               	iorwf	(adf4351_write_reg2@data+3)& (0+255),f,b
 10733  00117E                     
 10734                           ; BSR set to: 0
 10735                           ;src/driver/adf4351.c: 318:         data |= (((u32)ctx->reg2.ldf&0x0001)<<8);
 10736  00117E  EE20 F013          	lfsr	2,19
 10737  001182  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 10738  001184  26D9               	addwf	fsr2l,f,c
 10739  001186  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 10740  001188  22DA               	addwfc	fsr2h,f,c
 10741  00118A  50DF               	movf	indf2,w,c
 10742  00118C  6FBD               	movwf	??_adf4351_write_reg2& (0+255),b
 10743  00118E  0E01               	movlw	1
 10744  001190  17BD               	andwf	??_adf4351_write_reg2& (0+255),f,b
 10745  001192  C0BD  F0BE         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 10746  001196  6BBF               	clrf	(??_adf4351_write_reg2+2)& (0+255),b
 10747  001198  6BC0               	clrf	(??_adf4351_write_reg2+3)& (0+255),b
 10748  00119A  6BC1               	clrf	(??_adf4351_write_reg2+4)& (0+255),b
 10749  00119C  C0C0  F0C1         	movff	??_adf4351_write_reg2+3,??_adf4351_write_reg2+4
 10750  0011A0  C0BF  F0C0         	movff	??_adf4351_write_reg2+2,??_adf4351_write_reg2+3
 10751  0011A4  C0BE  F0BF         	movff	??_adf4351_write_reg2+1,??_adf4351_write_reg2+2
 10752  0011A8  6BBE               	clrf	(??_adf4351_write_reg2+1)& (0+255),b
 10753  0011AA  51BE               	movf	(??_adf4351_write_reg2+1)& (0+255),w,b
 10754  0011AC  13C9               	iorwf	adf4351_write_reg2@data& (0+255),f,b
 10755  0011AE  51BF               	movf	(??_adf4351_write_reg2+2)& (0+255),w,b
 10756  0011B0  13CA               	iorwf	(adf4351_write_reg2@data+1)& (0+255),f,b
 10757  0011B2  51C0               	movf	(??_adf4351_write_reg2+3)& (0+255),w,b
 10758  0011B4  13CB               	iorwf	(adf4351_write_reg2@data+2)& (0+255),f,b
 10759  0011B6  51C1               	movf	(??_adf4351_write_reg2+4)& (0+255),w,b
 10760  0011B8  13CC               	iorwf	(adf4351_write_reg2@data+3)& (0+255),f,b
 10761  0011BA                     
 10762                           ; BSR set to: 0
 10763                           ;src/driver/adf4351.c: 319:         data |= (((u32)ctx->reg2.cpc&0x000F)<<9);
 10764  0011BA  EE20 F012          	lfsr	2,18
 10765  0011BE  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 10766  0011C0  26D9               	addwf	fsr2l,f,c
 10767  0011C2  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 10768  0011C4  22DA               	addwfc	fsr2h,f,c
 10769  0011C6  50DF               	movf	indf2,w,c
 10770  0011C8  6FBD               	movwf	??_adf4351_write_reg2& (0+255),b
 10771  0011CA  0E0F               	movlw	15
 10772  0011CC  17BD               	andwf	??_adf4351_write_reg2& (0+255),f,b
 10773  0011CE  C0BD  F0BE         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 10774  0011D2  6BBF               	clrf	(??_adf4351_write_reg2+2)& (0+255),b
 10775  0011D4  6BC0               	clrf	(??_adf4351_write_reg2+3)& (0+255),b
 10776  0011D6  6BC1               	clrf	(??_adf4351_write_reg2+4)& (0+255),b
 10777  0011D8  0E09               	movlw	9
 10778  0011DA                     u7605:
 10779  0011DA  90D8               	bcf	status,0,c
 10780  0011DC  37BE               	rlcf	(??_adf4351_write_reg2+1)& (0+255),f,b
 10781  0011DE  37BF               	rlcf	(??_adf4351_write_reg2+2)& (0+255),f,b
 10782  0011E0  37C0               	rlcf	(??_adf4351_write_reg2+3)& (0+255),f,b
 10783  0011E2  37C1               	rlcf	(??_adf4351_write_reg2+4)& (0+255),f,b
 10784  0011E4  2EE8               	decfsz	wreg,f,c
 10785  0011E6  EFED  F008         	goto	u7605
 10786  0011EA  51BE               	movf	(??_adf4351_write_reg2+1)& (0+255),w,b
 10787  0011EC  13C9               	iorwf	adf4351_write_reg2@data& (0+255),f,b
 10788  0011EE  51BF               	movf	(??_adf4351_write_reg2+2)& (0+255),w,b
 10789  0011F0  13CA               	iorwf	(adf4351_write_reg2@data+1)& (0+255),f,b
 10790  0011F2  51C0               	movf	(??_adf4351_write_reg2+3)& (0+255),w,b
 10791  0011F4  13CB               	iorwf	(adf4351_write_reg2@data+2)& (0+255),f,b
 10792  0011F6  51C1               	movf	(??_adf4351_write_reg2+4)& (0+255),w,b
 10793  0011F8  13CC               	iorwf	(adf4351_write_reg2@data+3)& (0+255),f,b
 10794  0011FA                     
 10795                           ; BSR set to: 0
 10796                           ;src/driver/adf4351.c: 320:         data |= (((u32)ctx->reg2.dblbuff&0x0001)<<13);
 10797  0011FA  EE20 F011          	lfsr	2,17
 10798  0011FE  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 10799  001200  26D9               	addwf	fsr2l,f,c
 10800  001202  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 10801  001204  22DA               	addwfc	fsr2h,f,c
 10802  001206  50DF               	movf	indf2,w,c
 10803  001208  6FBD               	movwf	??_adf4351_write_reg2& (0+255),b
 10804  00120A  0E01               	movlw	1
 10805  00120C  17BD               	andwf	??_adf4351_write_reg2& (0+255),f,b
 10806  00120E  C0BD  F0BE         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 10807  001212  6BBF               	clrf	(??_adf4351_write_reg2+2)& (0+255),b
 10808  001214  6BC0               	clrf	(??_adf4351_write_reg2+3)& (0+255),b
 10809  001216  6BC1               	clrf	(??_adf4351_write_reg2+4)& (0+255),b
 10810  001218  0E0D               	movlw	13
 10811  00121A                     u7615:
 10812  00121A  90D8               	bcf	status,0,c
 10813  00121C  37BE               	rlcf	(??_adf4351_write_reg2+1)& (0+255),f,b
 10814  00121E  37BF               	rlcf	(??_adf4351_write_reg2+2)& (0+255),f,b
 10815  001220  37C0               	rlcf	(??_adf4351_write_reg2+3)& (0+255),f,b
 10816  001222  37C1               	rlcf	(??_adf4351_write_reg2+4)& (0+255),f,b
 10817  001224  2EE8               	decfsz	wreg,f,c
 10818  001226  EF0D  F009         	goto	u7615
 10819  00122A  51BE               	movf	(??_adf4351_write_reg2+1)& (0+255),w,b
 10820  00122C  13C9               	iorwf	adf4351_write_reg2@data& (0+255),f,b
 10821  00122E  51BF               	movf	(??_adf4351_write_reg2+2)& (0+255),w,b
 10822  001230  13CA               	iorwf	(adf4351_write_reg2@data+1)& (0+255),f,b
 10823  001232  51C0               	movf	(??_adf4351_write_reg2+3)& (0+255),w,b
 10824  001234  13CB               	iorwf	(adf4351_write_reg2@data+2)& (0+255),f,b
 10825  001236  51C1               	movf	(??_adf4351_write_reg2+4)& (0+255),w,b
 10826  001238  13CC               	iorwf	(adf4351_write_reg2@data+3)& (0+255),f,b
 10827  00123A                     
 10828                           ; BSR set to: 0
 10829                           ;src/driver/adf4351.c: 321:         data |= (((u32)ctx->reg2.rcnt&0x03FF)<<14);
 10830  00123A  EE20 F00F          	lfsr	2,15
 10831  00123E  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 10832  001240  26D9               	addwf	fsr2l,f,c
 10833  001242  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 10834  001244  22DA               	addwfc	fsr2h,f,c
 10835  001246  CFDE F0BD          	movff	postinc2,??_adf4351_write_reg2
 10836  00124A  CFDD F0BE          	movff	postdec2,??_adf4351_write_reg2+1
 10837  00124E  0EFF               	movlw	255
 10838  001250  15BD               	andwf	??_adf4351_write_reg2& (0+255),w,b
 10839  001252  6FBF               	movwf	(??_adf4351_write_reg2+2)& (0+255),b
 10840  001254  0E03               	movlw	3
 10841  001256  15BE               	andwf	(??_adf4351_write_reg2+1)& (0+255),w,b
 10842  001258  6FC0               	movwf	(??_adf4351_write_reg2+3)& (0+255),b
 10843  00125A  6BC1               	clrf	(??_adf4351_write_reg2+4)& (0+255),b
 10844  00125C  6BC2               	clrf	(??_adf4351_write_reg2+5)& (0+255),b
 10845  00125E  0E0E               	movlw	14
 10846  001260                     u7625:
 10847  001260  90D8               	bcf	status,0,c
 10848  001262  37BF               	rlcf	(??_adf4351_write_reg2+2)& (0+255),f,b
 10849  001264  37C0               	rlcf	(??_adf4351_write_reg2+3)& (0+255),f,b
 10850  001266  37C1               	rlcf	(??_adf4351_write_reg2+4)& (0+255),f,b
 10851  001268  37C2               	rlcf	(??_adf4351_write_reg2+5)& (0+255),f,b
 10852  00126A  2EE8               	decfsz	wreg,f,c
 10853  00126C  EF30  F009         	goto	u7625
 10854  001270  51BF               	movf	(??_adf4351_write_reg2+2)& (0+255),w,b
 10855  001272  13C9               	iorwf	adf4351_write_reg2@data& (0+255),f,b
 10856  001274  51C0               	movf	(??_adf4351_write_reg2+3)& (0+255),w,b
 10857  001276  13CA               	iorwf	(adf4351_write_reg2@data+1)& (0+255),f,b
 10858  001278  51C1               	movf	(??_adf4351_write_reg2+4)& (0+255),w,b
 10859  00127A  13CB               	iorwf	(adf4351_write_reg2@data+2)& (0+255),f,b
 10860  00127C  51C2               	movf	(??_adf4351_write_reg2+5)& (0+255),w,b
 10861  00127E  13CC               	iorwf	(adf4351_write_reg2@data+3)& (0+255),f,b
 10862  001280                     
 10863                           ; BSR set to: 0
 10864                           ;src/driver/adf4351.c: 322:         data |= (((u32)ctx->reg2.refdiv&0x0001)<<24);
 10865  001280  EE20 F00E          	lfsr	2,14
 10866  001284  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 10867  001286  26D9               	addwf	fsr2l,f,c
 10868  001288  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 10869  00128A  22DA               	addwfc	fsr2h,f,c
 10870  00128C  50DF               	movf	indf2,w,c
 10871  00128E  6FBD               	movwf	??_adf4351_write_reg2& (0+255),b
 10872  001290  0E01               	movlw	1
 10873  001292  17BD               	andwf	??_adf4351_write_reg2& (0+255),f,b
 10874  001294  C0BD  F0BE         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 10875  001298  6BBF               	clrf	(??_adf4351_write_reg2+2)& (0+255),b
 10876  00129A  6BC0               	clrf	(??_adf4351_write_reg2+3)& (0+255),b
 10877  00129C  6BC1               	clrf	(??_adf4351_write_reg2+4)& (0+255),b
 10878  00129E  C0BE  F0C1         	movff	??_adf4351_write_reg2+1,??_adf4351_write_reg2+4
 10879  0012A2  6BC0               	clrf	(??_adf4351_write_reg2+3)& (0+255),b
 10880  0012A4  6BBF               	clrf	(??_adf4351_write_reg2+2)& (0+255),b
 10881  0012A6  6BBE               	clrf	(??_adf4351_write_reg2+1)& (0+255),b
 10882  0012A8  51BE               	movf	(??_adf4351_write_reg2+1)& (0+255),w,b
 10883  0012AA  13C9               	iorwf	adf4351_write_reg2@data& (0+255),f,b
 10884  0012AC  51BF               	movf	(??_adf4351_write_reg2+2)& (0+255),w,b
 10885  0012AE  13CA               	iorwf	(adf4351_write_reg2@data+1)& (0+255),f,b
 10886  0012B0  51C0               	movf	(??_adf4351_write_reg2+3)& (0+255),w,b
 10887  0012B2  13CB               	iorwf	(adf4351_write_reg2@data+2)& (0+255),f,b
 10888  0012B4  51C1               	movf	(??_adf4351_write_reg2+4)& (0+255),w,b
 10889  0012B6  13CC               	iorwf	(adf4351_write_reg2@data+3)& (0+255),f,b
 10890  0012B8                     
 10891                           ; BSR set to: 0
 10892                           ;src/driver/adf4351.c: 323:         data |= (((u32)ctx->reg2.refdbl&0x0001)<<25);
 10893  0012B8  EE20 F00D          	lfsr	2,13
 10894  0012BC  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 10895  0012BE  26D9               	addwf	fsr2l,f,c
 10896  0012C0  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 10897  0012C2  22DA               	addwfc	fsr2h,f,c
 10898  0012C4  50DF               	movf	indf2,w,c
 10899  0012C6  6FBD               	movwf	??_adf4351_write_reg2& (0+255),b
 10900  0012C8  0E01               	movlw	1
 10901  0012CA  17BD               	andwf	??_adf4351_write_reg2& (0+255),f,b
 10902  0012CC  C0BD  F0BE         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 10903  0012D0  6BBF               	clrf	(??_adf4351_write_reg2+2)& (0+255),b
 10904  0012D2  6BC0               	clrf	(??_adf4351_write_reg2+3)& (0+255),b
 10905  0012D4  6BC1               	clrf	(??_adf4351_write_reg2+4)& (0+255),b
 10906  0012D6  0E19               	movlw	25
 10907  0012D8                     u7635:
 10908  0012D8  90D8               	bcf	status,0,c
 10909  0012DA  37BE               	rlcf	(??_adf4351_write_reg2+1)& (0+255),f,b
 10910  0012DC  37BF               	rlcf	(??_adf4351_write_reg2+2)& (0+255),f,b
 10911  0012DE  37C0               	rlcf	(??_adf4351_write_reg2+3)& (0+255),f,b
 10912  0012E0  37C1               	rlcf	(??_adf4351_write_reg2+4)& (0+255),f,b
 10913  0012E2  2EE8               	decfsz	wreg,f,c
 10914  0012E4  EF6C  F009         	goto	u7635
 10915  0012E8  51BE               	movf	(??_adf4351_write_reg2+1)& (0+255),w,b
 10916  0012EA  13C9               	iorwf	adf4351_write_reg2@data& (0+255),f,b
 10917  0012EC  51BF               	movf	(??_adf4351_write_reg2+2)& (0+255),w,b
 10918  0012EE  13CA               	iorwf	(adf4351_write_reg2@data+1)& (0+255),f,b
 10919  0012F0  51C0               	movf	(??_adf4351_write_reg2+3)& (0+255),w,b
 10920  0012F2  13CB               	iorwf	(adf4351_write_reg2@data+2)& (0+255),f,b
 10921  0012F4  51C1               	movf	(??_adf4351_write_reg2+4)& (0+255),w,b
 10922  0012F6  13CC               	iorwf	(adf4351_write_reg2@data+3)& (0+255),f,b
 10923  0012F8                     
 10924                           ; BSR set to: 0
 10925                           ;src/driver/adf4351.c: 324:         data |= (((u32)ctx->reg2.muxout&0x0007)<<26);
 10926  0012F8  EE20 F00C          	lfsr	2,12
 10927  0012FC  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 10928  0012FE  26D9               	addwf	fsr2l,f,c
 10929  001300  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 10930  001302  22DA               	addwfc	fsr2h,f,c
 10931  001304  50DF               	movf	indf2,w,c
 10932  001306  6FBD               	movwf	??_adf4351_write_reg2& (0+255),b
 10933  001308  0E07               	movlw	7
 10934  00130A  17BD               	andwf	??_adf4351_write_reg2& (0+255),f,b
 10935  00130C  C0BD  F0BE         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 10936  001310  6BBF               	clrf	(??_adf4351_write_reg2+2)& (0+255),b
 10937  001312  6BC0               	clrf	(??_adf4351_write_reg2+3)& (0+255),b
 10938  001314  6BC1               	clrf	(??_adf4351_write_reg2+4)& (0+255),b
 10939  001316  0E1A               	movlw	26
 10940  001318                     u7645:
 10941  001318  90D8               	bcf	status,0,c
 10942  00131A  37BE               	rlcf	(??_adf4351_write_reg2+1)& (0+255),f,b
 10943  00131C  37BF               	rlcf	(??_adf4351_write_reg2+2)& (0+255),f,b
 10944  00131E  37C0               	rlcf	(??_adf4351_write_reg2+3)& (0+255),f,b
 10945  001320  37C1               	rlcf	(??_adf4351_write_reg2+4)& (0+255),f,b
 10946  001322  2EE8               	decfsz	wreg,f,c
 10947  001324  EF8C  F009         	goto	u7645
 10948  001328  51BE               	movf	(??_adf4351_write_reg2+1)& (0+255),w,b
 10949  00132A  13C9               	iorwf	adf4351_write_reg2@data& (0+255),f,b
 10950  00132C  51BF               	movf	(??_adf4351_write_reg2+2)& (0+255),w,b
 10951  00132E  13CA               	iorwf	(adf4351_write_reg2@data+1)& (0+255),f,b
 10952  001330  51C0               	movf	(??_adf4351_write_reg2+3)& (0+255),w,b
 10953  001332  13CB               	iorwf	(adf4351_write_reg2@data+2)& (0+255),f,b
 10954  001334  51C1               	movf	(??_adf4351_write_reg2+4)& (0+255),w,b
 10955  001336  13CC               	iorwf	(adf4351_write_reg2@data+3)& (0+255),f,b
 10956  001338                     
 10957                           ; BSR set to: 0
 10958                           ;src/driver/adf4351.c: 325:         data |= (((u32)ctx->reg2.lownoise&0x0003)<<29);
 10959  001338  EE20 F00B          	lfsr	2,11
 10960  00133C  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 10961  00133E  26D9               	addwf	fsr2l,f,c
 10962  001340  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 10963  001342  22DA               	addwfc	fsr2h,f,c
 10964  001344  50DF               	movf	indf2,w,c
 10965  001346  6FBD               	movwf	??_adf4351_write_reg2& (0+255),b
 10966  001348  0E03               	movlw	3
 10967  00134A  17BD               	andwf	??_adf4351_write_reg2& (0+255),f,b
 10968  00134C  C0BD  F0BE         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 10969  001350  6BBF               	clrf	(??_adf4351_write_reg2+2)& (0+255),b
 10970  001352  6BC0               	clrf	(??_adf4351_write_reg2+3)& (0+255),b
 10971  001354  6BC1               	clrf	(??_adf4351_write_reg2+4)& (0+255),b
 10972  001356  0E1D               	movlw	29
 10973  001358                     u7655:
 10974  001358  90D8               	bcf	status,0,c
 10975  00135A  37BE               	rlcf	(??_adf4351_write_reg2+1)& (0+255),f,b
 10976  00135C  37BF               	rlcf	(??_adf4351_write_reg2+2)& (0+255),f,b
 10977  00135E  37C0               	rlcf	(??_adf4351_write_reg2+3)& (0+255),f,b
 10978  001360  37C1               	rlcf	(??_adf4351_write_reg2+4)& (0+255),f,b
 10979  001362  2EE8               	decfsz	wreg,f,c
 10980  001364  EFAC  F009         	goto	u7655
 10981  001368  51BE               	movf	(??_adf4351_write_reg2+1)& (0+255),w,b
 10982  00136A  13C9               	iorwf	adf4351_write_reg2@data& (0+255),f,b
 10983  00136C  51BF               	movf	(??_adf4351_write_reg2+2)& (0+255),w,b
 10984  00136E  13CA               	iorwf	(adf4351_write_reg2@data+1)& (0+255),f,b
 10985  001370  51C0               	movf	(??_adf4351_write_reg2+3)& (0+255),w,b
 10986  001372  13CB               	iorwf	(adf4351_write_reg2@data+2)& (0+255),f,b
 10987  001374  51C1               	movf	(??_adf4351_write_reg2+4)& (0+255),w,b
 10988  001376  13CC               	iorwf	(adf4351_write_reg2@data+3)& (0+255),f,b
 10989  001378                     
 10990                           ; BSR set to: 0
 10991                           ;src/driver/adf4351.c: 327:         printf("ADF4351 WRITE REG2: 0x%08lX (lownoise=%i mux
      +                          out=%i refdbl=%i refdiv=%i rcnt=%i dblbuff=%i cpc=%i ldf=%i ldp=%i pdpol=%i pd=%i cpts=%
      +                          i cntreset=%i\r\n", data, ctx->reg2.lownoise, ctx->reg2.muxout, ctx->reg2.refdbl, ctx->r
      +                          eg2.refdiv, ctx->reg2.rcnt, ctx->reg2.dblbuff, ctx->reg2.cpc, ctx->reg2.ldf, ctx->reg2.l
      +                          dp, ctx->reg2.pdpol, ctx->reg2.pd, ctx->reg2.cpts, ctx->reg2.cntreset);
 10992  001378  0EB2               	movlw	low STR_14
 10993  00137A  6F97               	movwf	printf@fmt& (0+255),b
 10994  00137C  0E7A               	movlw	high STR_14
 10995  00137E  6F98               	movwf	(printf@fmt+1)& (0+255),b
 10996  001380  C0C9  F099         	movff	adf4351_write_reg2@data,?_printf+2
 10997  001384  C0CA  F09A         	movff	adf4351_write_reg2@data+1,?_printf+3
 10998  001388  C0CB  F09B         	movff	adf4351_write_reg2@data+2,?_printf+4
 10999  00138C  C0CC  F09C         	movff	adf4351_write_reg2@data+3,?_printf+5
 11000  001390  EE20 F00B          	lfsr	2,11
 11001  001394  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 11002  001396  26D9               	addwf	fsr2l,f,c
 11003  001398  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 11004  00139A  22DA               	addwfc	fsr2h,f,c
 11005  00139C  50DF               	movf	indf2,w,c
 11006  00139E  6FBD               	movwf	??_adf4351_write_reg2& (0+255),b
 11007  0013A0  51BD               	movf	??_adf4351_write_reg2& (0+255),w,b
 11008  0013A2  6F9D               	movwf	(?_printf+6)& (0+255),b
 11009  0013A4  6B9E               	clrf	(?_printf+7)& (0+255),b
 11010  0013A6  EE20 F00C          	lfsr	2,12
 11011  0013AA  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 11012  0013AC  26D9               	addwf	fsr2l,f,c
 11013  0013AE  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 11014  0013B0  22DA               	addwfc	fsr2h,f,c
 11015  0013B2  50DF               	movf	indf2,w,c
 11016  0013B4  6FBE               	movwf	(??_adf4351_write_reg2+1)& (0+255),b
 11017  0013B6  51BE               	movf	(??_adf4351_write_reg2+1)& (0+255),w,b
 11018  0013B8  6F9F               	movwf	(?_printf+8)& (0+255),b
 11019  0013BA  6BA0               	clrf	(?_printf+9)& (0+255),b
 11020  0013BC  EE20 F00D          	lfsr	2,13
 11021  0013C0  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 11022  0013C2  26D9               	addwf	fsr2l,f,c
 11023  0013C4  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 11024  0013C6  22DA               	addwfc	fsr2h,f,c
 11025  0013C8  50DF               	movf	indf2,w,c
 11026  0013CA  6FBF               	movwf	(??_adf4351_write_reg2+2)& (0+255),b
 11027  0013CC  51BF               	movf	(??_adf4351_write_reg2+2)& (0+255),w,b
 11028  0013CE  6FA1               	movwf	(?_printf+10)& (0+255),b
 11029  0013D0  6BA2               	clrf	(?_printf+11)& (0+255),b
 11030  0013D2  EE20 F00E          	lfsr	2,14
 11031  0013D6  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 11032  0013D8  26D9               	addwf	fsr2l,f,c
 11033  0013DA  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 11034  0013DC  22DA               	addwfc	fsr2h,f,c
 11035  0013DE  50DF               	movf	indf2,w,c
 11036  0013E0  6FC0               	movwf	(??_adf4351_write_reg2+3)& (0+255),b
 11037  0013E2  51C0               	movf	(??_adf4351_write_reg2+3)& (0+255),w,b
 11038  0013E4  6FA3               	movwf	(?_printf+12)& (0+255),b
 11039  0013E6  6BA4               	clrf	(?_printf+13)& (0+255),b
 11040  0013E8  EE20 F00F          	lfsr	2,15
 11041  0013EC  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 11042  0013EE  26D9               	addwf	fsr2l,f,c
 11043  0013F0  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 11044  0013F2  22DA               	addwfc	fsr2h,f,c
 11045  0013F4  CFDE F0A5          	movff	postinc2,?_printf+14
 11046  0013F8  CFDD F0A6          	movff	postdec2,?_printf+15
 11047  0013FC  EE20 F011          	lfsr	2,17
 11048  001400  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 11049  001402  26D9               	addwf	fsr2l,f,c
 11050  001404  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 11051  001406  22DA               	addwfc	fsr2h,f,c
 11052  001408  50DF               	movf	indf2,w,c
 11053  00140A  6FC1               	movwf	(??_adf4351_write_reg2+4)& (0+255),b
 11054  00140C  51C1               	movf	(??_adf4351_write_reg2+4)& (0+255),w,b
 11055  00140E  6FA7               	movwf	(?_printf+16)& (0+255),b
 11056  001410  6BA8               	clrf	(?_printf+17)& (0+255),b
 11057  001412  EE20 F012          	lfsr	2,18
 11058  001416  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 11059  001418  26D9               	addwf	fsr2l,f,c
 11060  00141A  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 11061  00141C  22DA               	addwfc	fsr2h,f,c
 11062  00141E  50DF               	movf	indf2,w,c
 11063  001420  6FC2               	movwf	(??_adf4351_write_reg2+5)& (0+255),b
 11064  001422  51C2               	movf	(??_adf4351_write_reg2+5)& (0+255),w,b
 11065  001424  6FA9               	movwf	(?_printf+18)& (0+255),b
 11066  001426  6BAA               	clrf	(?_printf+19)& (0+255),b
 11067  001428  EE20 F013          	lfsr	2,19
 11068  00142C  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 11069  00142E  26D9               	addwf	fsr2l,f,c
 11070  001430  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 11071  001432  22DA               	addwfc	fsr2h,f,c
 11072  001434  50DF               	movf	indf2,w,c
 11073  001436  6FC3               	movwf	(??_adf4351_write_reg2+6)& (0+255),b
 11074  001438  51C3               	movf	(??_adf4351_write_reg2+6)& (0+255),w,b
 11075  00143A  6FAB               	movwf	(?_printf+20)& (0+255),b
 11076  00143C  6BAC               	clrf	(?_printf+21)& (0+255),b
 11077  00143E  EE20 F014          	lfsr	2,20
 11078  001442  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 11079  001444  26D9               	addwf	fsr2l,f,c
 11080  001446  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 11081  001448  22DA               	addwfc	fsr2h,f,c
 11082  00144A  50DF               	movf	indf2,w,c
 11083  00144C  6FC4               	movwf	(??_adf4351_write_reg2+7)& (0+255),b
 11084  00144E  51C4               	movf	(??_adf4351_write_reg2+7)& (0+255),w,b
 11085  001450  6FAD               	movwf	(?_printf+22)& (0+255),b
 11086  001452  6BAE               	clrf	(?_printf+23)& (0+255),b
 11087  001454  EE20 F015          	lfsr	2,21
 11088  001458  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 11089  00145A  26D9               	addwf	fsr2l,f,c
 11090  00145C  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 11091  00145E  22DA               	addwfc	fsr2h,f,c
 11092  001460  50DF               	movf	indf2,w,c
 11093  001462  6FC5               	movwf	(??_adf4351_write_reg2+8)& (0+255),b
 11094  001464  51C5               	movf	(??_adf4351_write_reg2+8)& (0+255),w,b
 11095  001466  6FAF               	movwf	(?_printf+24)& (0+255),b
 11096  001468  6BB0               	clrf	(?_printf+25)& (0+255),b
 11097  00146A  EE20 F016          	lfsr	2,22
 11098  00146E  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 11099  001470  26D9               	addwf	fsr2l,f,c
 11100  001472  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 11101  001474  22DA               	addwfc	fsr2h,f,c
 11102  001476  50DF               	movf	indf2,w,c
 11103  001478  6FC6               	movwf	(??_adf4351_write_reg2+9)& (0+255),b
 11104  00147A  51C6               	movf	(??_adf4351_write_reg2+9)& (0+255),w,b
 11105  00147C  6FB1               	movwf	(?_printf+26)& (0+255),b
 11106  00147E  6BB2               	clrf	(?_printf+27)& (0+255),b
 11107  001480  EE20 F017          	lfsr	2,23
 11108  001484  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 11109  001486  26D9               	addwf	fsr2l,f,c
 11110  001488  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 11111  00148A  22DA               	addwfc	fsr2h,f,c
 11112  00148C  50DF               	movf	indf2,w,c
 11113  00148E  6FC7               	movwf	(??_adf4351_write_reg2+10)& (0+255),b
 11114  001490  51C7               	movf	(??_adf4351_write_reg2+10)& (0+255),w,b
 11115  001492  6FB3               	movwf	(?_printf+28)& (0+255),b
 11116  001494  6BB4               	clrf	(?_printf+29)& (0+255),b
 11117  001496  EE20 F018          	lfsr	2,24
 11118  00149A  51BB               	movf	adf4351_write_reg2@ctx& (0+255),w,b
 11119  00149C  26D9               	addwf	fsr2l,f,c
 11120  00149E  51BC               	movf	(adf4351_write_reg2@ctx+1)& (0+255),w,b
 11121  0014A0  22DA               	addwfc	fsr2h,f,c
 11122  0014A2  50DF               	movf	indf2,w,c
 11123  0014A4  6FC8               	movwf	(??_adf4351_write_reg2+11)& (0+255),b
 11124  0014A6  51C8               	movf	(??_adf4351_write_reg2+11)& (0+255),w,b
 11125  0014A8  6FB5               	movwf	(?_printf+30)& (0+255),b
 11126  0014AA  6BB6               	clrf	(?_printf+31)& (0+255),b
 11127  0014AC  ECFF  F02B         	call	_printf	;wreg free
 11128  0014B0                     
 11129                           ;src/driver/adf4351.c: 331:         adf4351_write_latch(data);
 11130  0014B0  C0C9  F00D         	movff	adf4351_write_reg2@data,adf4351_write_latch@value
 11131  0014B4  C0CA  F00E         	movff	adf4351_write_reg2@data+1,adf4351_write_latch@value+1
 11132  0014B8  C0CB  F00F         	movff	adf4351_write_reg2@data+2,adf4351_write_latch@value+2
 11133  0014BC  C0CC  F010         	movff	adf4351_write_reg2@data+3,adf4351_write_latch@value+3
 11134  0014C0  ECC6  F018         	call	_adf4351_write_latch	;wreg free
 11135  0014C4                     l126:
 11136  0014C4  0012               	return		;funcret
 11137  0014C6                     __end_of_adf4351_write_reg2:
 11138                           	opt callstack 0
 11139                           
 11140 ;; *************** function _adf4351_write_reg1 *****************
 11141 ;; Defined at:
 11142 ;;		line 294 in file "src/driver/adf4351.c"
 11143 ;; Parameters:    Size  Location     Type
 11144 ;;  ctx             2   59[BANK0 ] PTR struct adf4351_ctx
 11145 ;;		 -> g_adf4351(55), 
 11146 ;; Auto vars:     Size  Location     Type
 11147 ;;  data            4   67[BANK0 ] unsigned long 
 11148 ;; Return value:  Size  Location     Type
 11149 ;;                  1    wreg      void 
 11150 ;; Registers used:
 11151 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11152 ;; Tracked objects:
 11153 ;;		On entry : 0/0
 11154 ;;		On exit  : 0/0
 11155 ;;		Unchanged: 0/0
 11156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11157 ;;      Params:         0       2       0       0       0       0       0
 11158 ;;      Locals:         0       4       0       0       0       0       0
 11159 ;;      Temps:          0       6       0       0       0       0       0
 11160 ;;      Totals:         0      12       0       0       0       0       0
 11161 ;;Total ram usage:       12 bytes
 11162 ;; Hardware stack levels used:    1
 11163 ;; Hardware stack levels required when called:   10
 11164 ;; This function calls:
 11165 ;;		_adf4351_write_latch
 11166 ;;		_printf
 11167 ;; This function is called by:
 11168 ;;		_adf4351_setup
 11169 ;; This function uses a non-reentrant model
 11170 ;;
 11171                           
 11172                           	psect	text31
 11173  003B20                     __ptext31:
 11174                           	opt callstack 0
 11175  003B20                     _adf4351_write_reg1:
 11176                           	opt callstack 16
 11177  003B20                     
 11178                           ;src/driver/adf4351.c: 294: static void adf4351_write_reg1(adf4351_ctx* ctx);src/driver/
      +                          adf4351.c: 295: {;src/driver/adf4351.c: 296:     if(ctx->init) {
 11179  003B20  C0BB  FFD9         	movff	adf4351_write_reg1@ctx,fsr2l
 11180  003B24  C0BC  FFDA         	movff	adf4351_write_reg1@ctx+1,fsr2h
 11181  003B28  50DE               	movf	postinc2,w,c
 11182  003B2A  10DE               	iorwf	postinc2,w,c
 11183  003B2C  B4D8               	btfsc	status,2,c
 11184  003B2E  EF9B  F01D         	goto	u7751
 11185  003B32  EF9D  F01D         	goto	u7750
 11186  003B36                     u7751:
 11187  003B36  EF43  F01E         	goto	l122
 11188  003B3A                     u7750:
 11189  003B3A                     
 11190                           ;src/driver/adf4351.c: 297:         u32 data = 1;
 11191  003B3A  0E01               	movlw	1
 11192  003B3C  0100               	movlb	0	; () banked
 11193  003B3E  6FC3               	movwf	adf4351_write_reg1@data& (0+255),b
 11194  003B40  0E00               	movlw	0
 11195  003B42  6FC4               	movwf	(adf4351_write_reg1@data+1)& (0+255),b
 11196  003B44  0E00               	movlw	0
 11197  003B46  6FC5               	movwf	(adf4351_write_reg1@data+2)& (0+255),b
 11198  003B48  0E00               	movlw	0
 11199  003B4A  6FC6               	movwf	(adf4351_write_reg1@data+3)& (0+255),b
 11200  003B4C                     
 11201                           ; BSR set to: 0
 11202                           ;src/driver/adf4351.c: 299:         data |= (((u32)ctx->reg1.mod&0x0FFF)<<3);
 11203  003B4C  EE20 F009          	lfsr	2,9
 11204  003B50  51BB               	movf	adf4351_write_reg1@ctx& (0+255),w,b
 11205  003B52  26D9               	addwf	fsr2l,f,c
 11206  003B54  51BC               	movf	(adf4351_write_reg1@ctx+1)& (0+255),w,b
 11207  003B56  22DA               	addwfc	fsr2h,f,c
 11208  003B58  CFDE F0BD          	movff	postinc2,??_adf4351_write_reg1
 11209  003B5C  CFDD F0BE          	movff	postdec2,??_adf4351_write_reg1+1
 11210  003B60  0EFF               	movlw	255
 11211  003B62  15BD               	andwf	??_adf4351_write_reg1& (0+255),w,b
 11212  003B64  6FBF               	movwf	(??_adf4351_write_reg1+2)& (0+255),b
 11213  003B66  0E0F               	movlw	15
 11214  003B68  15BE               	andwf	(??_adf4351_write_reg1+1)& (0+255),w,b
 11215  003B6A  6FC0               	movwf	(??_adf4351_write_reg1+3)& (0+255),b
 11216  003B6C  6BC1               	clrf	(??_adf4351_write_reg1+4)& (0+255),b
 11217  003B6E  6BC2               	clrf	(??_adf4351_write_reg1+5)& (0+255),b
 11218  003B70  0E03               	movlw	3
 11219  003B72                     u7765:
 11220  003B72  90D8               	bcf	status,0,c
 11221  003B74  37BF               	rlcf	(??_adf4351_write_reg1+2)& (0+255),f,b
 11222  003B76  37C0               	rlcf	(??_adf4351_write_reg1+3)& (0+255),f,b
 11223  003B78  37C1               	rlcf	(??_adf4351_write_reg1+4)& (0+255),f,b
 11224  003B7A  37C2               	rlcf	(??_adf4351_write_reg1+5)& (0+255),f,b
 11225  003B7C  2EE8               	decfsz	wreg,f,c
 11226  003B7E  EFB9  F01D         	goto	u7765
 11227  003B82  51BF               	movf	(??_adf4351_write_reg1+2)& (0+255),w,b
 11228  003B84  13C3               	iorwf	adf4351_write_reg1@data& (0+255),f,b
 11229  003B86  51C0               	movf	(??_adf4351_write_reg1+3)& (0+255),w,b
 11230  003B88  13C4               	iorwf	(adf4351_write_reg1@data+1)& (0+255),f,b
 11231  003B8A  51C1               	movf	(??_adf4351_write_reg1+4)& (0+255),w,b
 11232  003B8C  13C5               	iorwf	(adf4351_write_reg1@data+2)& (0+255),f,b
 11233  003B8E  51C2               	movf	(??_adf4351_write_reg1+5)& (0+255),w,b
 11234  003B90  13C6               	iorwf	(adf4351_write_reg1@data+3)& (0+255),f,b
 11235  003B92                     
 11236                           ; BSR set to: 0
 11237                           ;src/driver/adf4351.c: 300:         data |= (((u32)ctx->reg1.phase&0x0FFF)<<15);
 11238  003B92  EE20 F007          	lfsr	2,7
 11239  003B96  51BB               	movf	adf4351_write_reg1@ctx& (0+255),w,b
 11240  003B98  26D9               	addwf	fsr2l,f,c
 11241  003B9A  51BC               	movf	(adf4351_write_reg1@ctx+1)& (0+255),w,b
 11242  003B9C  22DA               	addwfc	fsr2h,f,c
 11243  003B9E  CFDE F0BD          	movff	postinc2,??_adf4351_write_reg1
 11244  003BA2  CFDD F0BE          	movff	postdec2,??_adf4351_write_reg1+1
 11245  003BA6  0EFF               	movlw	255
 11246  003BA8  15BD               	andwf	??_adf4351_write_reg1& (0+255),w,b
 11247  003BAA  6FBF               	movwf	(??_adf4351_write_reg1+2)& (0+255),b
 11248  003BAC  0E0F               	movlw	15
 11249  003BAE  15BE               	andwf	(??_adf4351_write_reg1+1)& (0+255),w,b
 11250  003BB0  6FC0               	movwf	(??_adf4351_write_reg1+3)& (0+255),b
 11251  003BB2  6BC1               	clrf	(??_adf4351_write_reg1+4)& (0+255),b
 11252  003BB4  6BC2               	clrf	(??_adf4351_write_reg1+5)& (0+255),b
 11253  003BB6  0E0F               	movlw	15
 11254  003BB8                     u7775:
 11255  003BB8  90D8               	bcf	status,0,c
 11256  003BBA  37BF               	rlcf	(??_adf4351_write_reg1+2)& (0+255),f,b
 11257  003BBC  37C0               	rlcf	(??_adf4351_write_reg1+3)& (0+255),f,b
 11258  003BBE  37C1               	rlcf	(??_adf4351_write_reg1+4)& (0+255),f,b
 11259  003BC0  37C2               	rlcf	(??_adf4351_write_reg1+5)& (0+255),f,b
 11260  003BC2  2EE8               	decfsz	wreg,f,c
 11261  003BC4  EFDC  F01D         	goto	u7775
 11262  003BC8  51BF               	movf	(??_adf4351_write_reg1+2)& (0+255),w,b
 11263  003BCA  13C3               	iorwf	adf4351_write_reg1@data& (0+255),f,b
 11264  003BCC  51C0               	movf	(??_adf4351_write_reg1+3)& (0+255),w,b
 11265  003BCE  13C4               	iorwf	(adf4351_write_reg1@data+1)& (0+255),f,b
 11266  003BD0  51C1               	movf	(??_adf4351_write_reg1+4)& (0+255),w,b
 11267  003BD2  13C5               	iorwf	(adf4351_write_reg1@data+2)& (0+255),f,b
 11268  003BD4  51C2               	movf	(??_adf4351_write_reg1+5)& (0+255),w,b
 11269  003BD6  13C6               	iorwf	(adf4351_write_reg1@data+3)& (0+255),f,b
 11270  003BD8                     
 11271                           ; BSR set to: 0
 11272                           ;src/driver/adf4351.c: 301:         data |= (((u32)ctx->reg1.prescaler&0x0001)<<27);
 11273  003BD8  EE20 F006          	lfsr	2,6
 11274  003BDC  51BB               	movf	adf4351_write_reg1@ctx& (0+255),w,b
 11275  003BDE  26D9               	addwf	fsr2l,f,c
 11276  003BE0  51BC               	movf	(adf4351_write_reg1@ctx+1)& (0+255),w,b
 11277  003BE2  22DA               	addwfc	fsr2h,f,c
 11278  003BE4  50DF               	movf	indf2,w,c
 11279  003BE6  6FBD               	movwf	??_adf4351_write_reg1& (0+255),b
 11280  003BE8  0E01               	movlw	1
 11281  003BEA  17BD               	andwf	??_adf4351_write_reg1& (0+255),f,b
 11282  003BEC  C0BD  F0BE         	movff	??_adf4351_write_reg1,??_adf4351_write_reg1+1
 11283  003BF0  6BBF               	clrf	(??_adf4351_write_reg1+2)& (0+255),b
 11284  003BF2  6BC0               	clrf	(??_adf4351_write_reg1+3)& (0+255),b
 11285  003BF4  6BC1               	clrf	(??_adf4351_write_reg1+4)& (0+255),b
 11286  003BF6  0E1B               	movlw	27
 11287  003BF8                     u7785:
 11288  003BF8  90D8               	bcf	status,0,c
 11289  003BFA  37BE               	rlcf	(??_adf4351_write_reg1+1)& (0+255),f,b
 11290  003BFC  37BF               	rlcf	(??_adf4351_write_reg1+2)& (0+255),f,b
 11291  003BFE  37C0               	rlcf	(??_adf4351_write_reg1+3)& (0+255),f,b
 11292  003C00  37C1               	rlcf	(??_adf4351_write_reg1+4)& (0+255),f,b
 11293  003C02  2EE8               	decfsz	wreg,f,c
 11294  003C04  EFFC  F01D         	goto	u7785
 11295  003C08  51BE               	movf	(??_adf4351_write_reg1+1)& (0+255),w,b
 11296  003C0A  13C3               	iorwf	adf4351_write_reg1@data& (0+255),f,b
 11297  003C0C  51BF               	movf	(??_adf4351_write_reg1+2)& (0+255),w,b
 11298  003C0E  13C4               	iorwf	(adf4351_write_reg1@data+1)& (0+255),f,b
 11299  003C10  51C0               	movf	(??_adf4351_write_reg1+3)& (0+255),w,b
 11300  003C12  13C5               	iorwf	(adf4351_write_reg1@data+2)& (0+255),f,b
 11301  003C14  51C1               	movf	(??_adf4351_write_reg1+4)& (0+255),w,b
 11302  003C16  13C6               	iorwf	(adf4351_write_reg1@data+3)& (0+255),f,b
 11303  003C18                     
 11304                           ; BSR set to: 0
 11305                           ;src/driver/adf4351.c: 303:         printf("ADF4351 WRITE REG1: 0x%08lX (prescaler=%i ph
      +                          ase=%i mod=%i)\r\n", data, ctx->reg1.prescaler, ctx->reg1.phase, ctx->reg1.mod);
 11306  003C18  0E33               	movlw	low STR_13
 11307  003C1A  6F97               	movwf	printf@fmt& (0+255),b
 11308  003C1C  0E7C               	movlw	high STR_13
 11309  003C1E  6F98               	movwf	(printf@fmt+1)& (0+255),b
 11310  003C20  C0C3  F099         	movff	adf4351_write_reg1@data,?_printf+2
 11311  003C24  C0C4  F09A         	movff	adf4351_write_reg1@data+1,?_printf+3
 11312  003C28  C0C5  F09B         	movff	adf4351_write_reg1@data+2,?_printf+4
 11313  003C2C  C0C6  F09C         	movff	adf4351_write_reg1@data+3,?_printf+5
 11314  003C30  EE20 F006          	lfsr	2,6
 11315  003C34  51BB               	movf	adf4351_write_reg1@ctx& (0+255),w,b
 11316  003C36  26D9               	addwf	fsr2l,f,c
 11317  003C38  51BC               	movf	(adf4351_write_reg1@ctx+1)& (0+255),w,b
 11318  003C3A  22DA               	addwfc	fsr2h,f,c
 11319  003C3C  50DF               	movf	indf2,w,c
 11320  003C3E  6FBD               	movwf	??_adf4351_write_reg1& (0+255),b
 11321  003C40  51BD               	movf	??_adf4351_write_reg1& (0+255),w,b
 11322  003C42  6F9D               	movwf	(?_printf+6)& (0+255),b
 11323  003C44  6B9E               	clrf	(?_printf+7)& (0+255),b
 11324  003C46  EE20 F007          	lfsr	2,7
 11325  003C4A  51BB               	movf	adf4351_write_reg1@ctx& (0+255),w,b
 11326  003C4C  26D9               	addwf	fsr2l,f,c
 11327  003C4E  51BC               	movf	(adf4351_write_reg1@ctx+1)& (0+255),w,b
 11328  003C50  22DA               	addwfc	fsr2h,f,c
 11329  003C52  CFDE F09F          	movff	postinc2,?_printf+8
 11330  003C56  CFDD F0A0          	movff	postdec2,?_printf+9
 11331  003C5A  EE20 F009          	lfsr	2,9
 11332  003C5E  51BB               	movf	adf4351_write_reg1@ctx& (0+255),w,b
 11333  003C60  26D9               	addwf	fsr2l,f,c
 11334  003C62  51BC               	movf	(adf4351_write_reg1@ctx+1)& (0+255),w,b
 11335  003C64  22DA               	addwfc	fsr2h,f,c
 11336  003C66  CFDE F0A1          	movff	postinc2,?_printf+10
 11337  003C6A  CFDD F0A2          	movff	postdec2,?_printf+11
 11338  003C6E  ECFF  F02B         	call	_printf	;wreg free
 11339  003C72                     
 11340                           ;src/driver/adf4351.c: 304:         adf4351_write_latch(data);
 11341  003C72  C0C3  F00D         	movff	adf4351_write_reg1@data,adf4351_write_latch@value
 11342  003C76  C0C4  F00E         	movff	adf4351_write_reg1@data+1,adf4351_write_latch@value+1
 11343  003C7A  C0C5  F00F         	movff	adf4351_write_reg1@data+2,adf4351_write_latch@value+2
 11344  003C7E  C0C6  F010         	movff	adf4351_write_reg1@data+3,adf4351_write_latch@value+3
 11345  003C82  ECC6  F018         	call	_adf4351_write_latch	;wreg free
 11346  003C86                     l122:
 11347  003C86  0012               	return		;funcret
 11348  003C88                     __end_of_adf4351_write_reg1:
 11349                           	opt callstack 0
 11350                           
 11351 ;; *************** function _adf4351_write_reg0 *****************
 11352 ;; Defined at:
 11353 ;;		line 281 in file "src/driver/adf4351.c"
 11354 ;; Parameters:    Size  Location     Type
 11355 ;;  ctx             2   59[BANK0 ] PTR struct adf4351_ctx
 11356 ;;		 -> g_adf4351(55), 
 11357 ;; Auto vars:     Size  Location     Type
 11358 ;;  data            4   67[BANK0 ] unsigned long 
 11359 ;; Return value:  Size  Location     Type
 11360 ;;                  1    wreg      void 
 11361 ;; Registers used:
 11362 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11363 ;; Tracked objects:
 11364 ;;		On entry : 0/0
 11365 ;;		On exit  : 0/0
 11366 ;;		Unchanged: 0/0
 11367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11368 ;;      Params:         0       2       0       0       0       0       0
 11369 ;;      Locals:         0       4       0       0       0       0       0
 11370 ;;      Temps:          0       6       0       0       0       0       0
 11371 ;;      Totals:         0      12       0       0       0       0       0
 11372 ;;Total ram usage:       12 bytes
 11373 ;; Hardware stack levels used:    1
 11374 ;; Hardware stack levels required when called:   10
 11375 ;; This function calls:
 11376 ;;		_adf4351_write_latch
 11377 ;;		_printf
 11378 ;; This function is called by:
 11379 ;;		_adf4351_setup
 11380 ;; This function uses a non-reentrant model
 11381 ;;
 11382                           
 11383                           	psect	text32
 11384  004176                     __ptext32:
 11385                           	opt callstack 0
 11386  004176                     _adf4351_write_reg0:
 11387                           	opt callstack 16
 11388  004176                     
 11389                           ;src/driver/adf4351.c: 281: static void adf4351_write_reg0(adf4351_ctx* ctx);src/driver/
      +                          adf4351.c: 282: {;src/driver/adf4351.c: 283:  if(ctx->init) {
 11390  004176  C0BB  FFD9         	movff	adf4351_write_reg0@ctx,fsr2l
 11391  00417A  C0BC  FFDA         	movff	adf4351_write_reg0@ctx+1,fsr2h
 11392  00417E  50DE               	movf	postinc2,w,c
 11393  004180  10DE               	iorwf	postinc2,w,c
 11394  004182  B4D8               	btfsc	status,2,c
 11395  004184  EFC6  F020         	goto	u7791
 11396  004188  EFC8  F020         	goto	u7790
 11397  00418C                     u7791:
 11398  00418C  EF41  F021         	goto	l118
 11399  004190                     u7790:
 11400  004190                     
 11401                           ;src/driver/adf4351.c: 284:         u32 data = 0;
 11402  004190  0E00               	movlw	0
 11403  004192  0100               	movlb	0	; () banked
 11404  004194  6FC3               	movwf	adf4351_write_reg0@data& (0+255),b
 11405  004196  0E00               	movlw	0
 11406  004198  6FC4               	movwf	(adf4351_write_reg0@data+1)& (0+255),b
 11407  00419A  0E00               	movlw	0
 11408  00419C  6FC5               	movwf	(adf4351_write_reg0@data+2)& (0+255),b
 11409  00419E  0E00               	movlw	0
 11410  0041A0  6FC6               	movwf	(adf4351_write_reg0@data+3)& (0+255),b
 11411  0041A2                     
 11412                           ; BSR set to: 0
 11413                           ;src/driver/adf4351.c: 286:         data |= (((u32)ctx->reg0.frac&0x0FFF)<<3);
 11414  0041A2  EE20 F004          	lfsr	2,4
 11415  0041A6  51BB               	movf	adf4351_write_reg0@ctx& (0+255),w,b
 11416  0041A8  26D9               	addwf	fsr2l,f,c
 11417  0041AA  51BC               	movf	(adf4351_write_reg0@ctx+1)& (0+255),w,b
 11418  0041AC  22DA               	addwfc	fsr2h,f,c
 11419  0041AE  CFDE F0BD          	movff	postinc2,??_adf4351_write_reg0
 11420  0041B2  CFDD F0BE          	movff	postdec2,??_adf4351_write_reg0+1
 11421  0041B6  0EFF               	movlw	255
 11422  0041B8  15BD               	andwf	??_adf4351_write_reg0& (0+255),w,b
 11423  0041BA  6FBF               	movwf	(??_adf4351_write_reg0+2)& (0+255),b
 11424  0041BC  0E0F               	movlw	15
 11425  0041BE  15BE               	andwf	(??_adf4351_write_reg0+1)& (0+255),w,b
 11426  0041C0  6FC0               	movwf	(??_adf4351_write_reg0+3)& (0+255),b
 11427  0041C2  6BC1               	clrf	(??_adf4351_write_reg0+4)& (0+255),b
 11428  0041C4  6BC2               	clrf	(??_adf4351_write_reg0+5)& (0+255),b
 11429  0041C6  0E03               	movlw	3
 11430  0041C8                     u7805:
 11431  0041C8  90D8               	bcf	status,0,c
 11432  0041CA  37BF               	rlcf	(??_adf4351_write_reg0+2)& (0+255),f,b
 11433  0041CC  37C0               	rlcf	(??_adf4351_write_reg0+3)& (0+255),f,b
 11434  0041CE  37C1               	rlcf	(??_adf4351_write_reg0+4)& (0+255),f,b
 11435  0041D0  37C2               	rlcf	(??_adf4351_write_reg0+5)& (0+255),f,b
 11436  0041D2  2EE8               	decfsz	wreg,f,c
 11437  0041D4  EFE4  F020         	goto	u7805
 11438  0041D8  51BF               	movf	(??_adf4351_write_reg0+2)& (0+255),w,b
 11439  0041DA  13C3               	iorwf	adf4351_write_reg0@data& (0+255),f,b
 11440  0041DC  51C0               	movf	(??_adf4351_write_reg0+3)& (0+255),w,b
 11441  0041DE  13C4               	iorwf	(adf4351_write_reg0@data+1)& (0+255),f,b
 11442  0041E0  51C1               	movf	(??_adf4351_write_reg0+4)& (0+255),w,b
 11443  0041E2  13C5               	iorwf	(adf4351_write_reg0@data+2)& (0+255),f,b
 11444  0041E4  51C2               	movf	(??_adf4351_write_reg0+5)& (0+255),w,b
 11445  0041E6  13C6               	iorwf	(adf4351_write_reg0@data+3)& (0+255),f,b
 11446  0041E8                     
 11447                           ; BSR set to: 0
 11448                           ;src/driver/adf4351.c: 287:         data |= (((u32)ctx->reg0.integer&0xFFFF)<<15);
 11449  0041E8  EE20 F002          	lfsr	2,2
 11450  0041EC  51BB               	movf	adf4351_write_reg0@ctx& (0+255),w,b
 11451  0041EE  26D9               	addwf	fsr2l,f,c
 11452  0041F0  51BC               	movf	(adf4351_write_reg0@ctx+1)& (0+255),w,b
 11453  0041F2  22DA               	addwfc	fsr2h,f,c
 11454  0041F4  CFDE F0BD          	movff	postinc2,??_adf4351_write_reg0
 11455  0041F8  CFDD F0BE          	movff	postdec2,??_adf4351_write_reg0+1
 11456  0041FC  51BD               	movf	??_adf4351_write_reg0& (0+255),w,b
 11457  0041FE  6FBF               	movwf	(??_adf4351_write_reg0+2)& (0+255),b
 11458  004200  51BE               	movf	(??_adf4351_write_reg0+1)& (0+255),w,b
 11459  004202  6FC0               	movwf	(??_adf4351_write_reg0+3)& (0+255),b
 11460  004204  6BC1               	clrf	(??_adf4351_write_reg0+4)& (0+255),b
 11461  004206  6BC2               	clrf	(??_adf4351_write_reg0+5)& (0+255),b
 11462  004208  0E0F               	movlw	15
 11463  00420A                     u7815:
 11464  00420A  90D8               	bcf	status,0,c
 11465  00420C  37BF               	rlcf	(??_adf4351_write_reg0+2)& (0+255),f,b
 11466  00420E  37C0               	rlcf	(??_adf4351_write_reg0+3)& (0+255),f,b
 11467  004210  37C1               	rlcf	(??_adf4351_write_reg0+4)& (0+255),f,b
 11468  004212  37C2               	rlcf	(??_adf4351_write_reg0+5)& (0+255),f,b
 11469  004214  2EE8               	decfsz	wreg,f,c
 11470  004216  EF05  F021         	goto	u7815
 11471  00421A  51BF               	movf	(??_adf4351_write_reg0+2)& (0+255),w,b
 11472  00421C  13C3               	iorwf	adf4351_write_reg0@data& (0+255),f,b
 11473  00421E  51C0               	movf	(??_adf4351_write_reg0+3)& (0+255),w,b
 11474  004220  13C4               	iorwf	(adf4351_write_reg0@data+1)& (0+255),f,b
 11475  004222  51C1               	movf	(??_adf4351_write_reg0+4)& (0+255),w,b
 11476  004224  13C5               	iorwf	(adf4351_write_reg0@data+2)& (0+255),f,b
 11477  004226  51C2               	movf	(??_adf4351_write_reg0+5)& (0+255),w,b
 11478  004228  13C6               	iorwf	(adf4351_write_reg0@data+3)& (0+255),f,b
 11479  00422A                     
 11480                           ; BSR set to: 0
 11481                           ;src/driver/adf4351.c: 289:         printf("ADF4351 WRITE REG0: 0x%08lX (int=%i frac=%i)
      +                          \r\n", data, ctx->reg0.integer, ctx->reg0.frac);
 11482  00422A  0EE4               	movlw	low STR_12
 11483  00422C  6F97               	movwf	printf@fmt& (0+255),b
 11484  00422E  0E7C               	movlw	high STR_12
 11485  004230  6F98               	movwf	(printf@fmt+1)& (0+255),b
 11486  004232  C0C3  F099         	movff	adf4351_write_reg0@data,?_printf+2
 11487  004236  C0C4  F09A         	movff	adf4351_write_reg0@data+1,?_printf+3
 11488  00423A  C0C5  F09B         	movff	adf4351_write_reg0@data+2,?_printf+4
 11489  00423E  C0C6  F09C         	movff	adf4351_write_reg0@data+3,?_printf+5
 11490  004242  EE20 F002          	lfsr	2,2
 11491  004246  51BB               	movf	adf4351_write_reg0@ctx& (0+255),w,b
 11492  004248  26D9               	addwf	fsr2l,f,c
 11493  00424A  51BC               	movf	(adf4351_write_reg0@ctx+1)& (0+255),w,b
 11494  00424C  22DA               	addwfc	fsr2h,f,c
 11495  00424E  CFDE F09D          	movff	postinc2,?_printf+6
 11496  004252  CFDD F09E          	movff	postdec2,?_printf+7
 11497  004256  EE20 F004          	lfsr	2,4
 11498  00425A  51BB               	movf	adf4351_write_reg0@ctx& (0+255),w,b
 11499  00425C  26D9               	addwf	fsr2l,f,c
 11500  00425E  51BC               	movf	(adf4351_write_reg0@ctx+1)& (0+255),w,b
 11501  004260  22DA               	addwfc	fsr2h,f,c
 11502  004262  CFDE F09F          	movff	postinc2,?_printf+8
 11503  004266  CFDD F0A0          	movff	postdec2,?_printf+9
 11504  00426A  ECFF  F02B         	call	_printf	;wreg free
 11505  00426E                     
 11506                           ;src/driver/adf4351.c: 290:         adf4351_write_latch(data);
 11507  00426E  C0C3  F00D         	movff	adf4351_write_reg0@data,adf4351_write_latch@value
 11508  004272  C0C4  F00E         	movff	adf4351_write_reg0@data+1,adf4351_write_latch@value+1
 11509  004276  C0C5  F00F         	movff	adf4351_write_reg0@data+2,adf4351_write_latch@value+2
 11510  00427A  C0C6  F010         	movff	adf4351_write_reg0@data+3,adf4351_write_latch@value+3
 11511  00427E  ECC6  F018         	call	_adf4351_write_latch	;wreg free
 11512  004282                     l118:
 11513  004282  0012               	return		;funcret
 11514  004284                     __end_of_adf4351_write_reg0:
 11515                           	opt callstack 0
 11516                           
 11517 ;; *************** function _printf *****************
 11518 ;; Defined at:
 11519 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/printf.c"
 11520 ;; Parameters:    Size  Location     Type
 11521 ;;  fmt             2   23[BANK0 ] PTR const unsigned char 
 11522 ;;		 -> STR_50(18), STR_49(17), STR_48(19), STR_47(19), 
 11523 ;;		 -> STR_46(17), STR_45(4), STR_44(6), STR_43(18), 
 11524 ;;		 -> STR_42(29), STR_40(16), STR_38(16), STR_36(24), 
 11525 ;;		 -> STR_34(33), STR_33(16), STR_31(33), STR_29(12), 
 11526 ;;		 -> STR_28(10), STR_27(39), STR_26(15), STR_25(6), 
 11527 ;;		 -> STR_24(14), STR_23(19), STR_20(23), STR_18(19), 
 11528 ;;		 -> STR_17(44), STR_16(151), STR_15(91), STR_14(148), 
 11529 ;;		 -> STR_13(61), STR_12(47), STR_11(22), STR_10(28), 
 11530 ;;		 -> STR_9(25), STR_8(55), STR_7(72), STR_6(74), 
 11531 ;;		 -> STR_5(33), STR_4(32), STR_3(34), STR_2(61), 
 11532 ;;		 -> STR_1(34), 
 11533 ;; Auto vars:     Size  Location     Type
 11534 ;;  ap              2   57[BANK0 ] PTR void [1]
 11535 ;;		 -> ?_printf(2), 
 11536 ;;  ret             2    0        int 
 11537 ;; Return value:  Size  Location     Type
 11538 ;;                  2   23[BANK0 ] int 
 11539 ;; Registers used:
 11540 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11541 ;; Tracked objects:
 11542 ;;		On entry : 0/0
 11543 ;;		On exit  : 0/0
 11544 ;;		Unchanged: 0/0
 11545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11546 ;;      Params:         0      32       0       0       0       0       0
 11547 ;;      Locals:         0       4       0       0       0       0       0
 11548 ;;      Temps:          0       0       0       0       0       0       0
 11549 ;;      Totals:         0      36       0       0       0       0       0
 11550 ;;Total ram usage:       36 bytes
 11551 ;; Hardware stack levels used:    1
 11552 ;; Hardware stack levels required when called:    9
 11553 ;; This function calls:
 11554 ;;		_vfprintf
 11555 ;; This function is called by:
 11556 ;;		_adf4351_set_tune
 11557 ;;		_adf4351_calc_counters
 11558 ;;		_adf4351_calc_rcnt_block
 11559 ;;		_adf4351_write_reg0
 11560 ;;		_adf4351_write_reg1
 11561 ;;		_adf4351_write_reg2
 11562 ;;		_adf4351_write_reg3
 11563 ;;		_adf4351_write_reg4
 11564 ;;		_adf4351_write_reg5
 11565 ;;		_main
 11566 ;;		_apply_ipc
 11567 ;;		_pa_mute
 11568 ;;		_pa_unmute
 11569 ;;		_check_usart
 11570 ;;		_handle_cmd
 11571 ;;		_adf4351_regdump
 11572 ;;		_check_adf4351_lock
 11573 ;; This function uses a non-reentrant model
 11574 ;;
 11575                           
 11576                           	psect	text33
 11577  0057FE                     __ptext33:
 11578                           	opt callstack 0
 11579  0057FE                     _printf:
 11580                           	opt callstack 19
 11581  0057FE  0E99               	movlw	low (?_printf+2)
 11582  005800  0100               	movlb	0	; () banked
 11583  005802  6FB9               	movwf	printf@ap& (0+255),b
 11584  005804  0E00               	movlw	high (?_printf+2)
 11585  005806  6FBA               	movwf	(printf@ap+1)& (0+255),b
 11586  005808                     
 11587                           ; BSR set to: 0
 11588  005808  0E00               	movlw	0
 11589  00580A  6E5F               	movwf	vfprintf@fp^0,c
 11590  00580C  0E00               	movlw	0
 11591  00580E  6E60               	movwf	(vfprintf@fp+1)^0,c
 11592  005810  C097  F061         	movff	printf@fmt,vfprintf@fmt
 11593  005814  C098  F062         	movff	printf@fmt+1,vfprintf@fmt+1
 11594  005818  0EB9               	movlw	low printf@ap
 11595  00581A  6E63               	movwf	vfprintf@ap^0,c
 11596  00581C  0E00               	movlw	high printf@ap
 11597  00581E  6E64               	movwf	(vfprintf@ap+1)^0,c
 11598  005820  EC43  F029         	call	_vfprintf	;wreg free
 11599  005824  0012               	return		;funcret
 11600  005826                     __end_of_printf:
 11601                           	opt callstack 0
 11602                           
 11603 ;; *************** function _vfprintf *****************
 11604 ;; Defined at:
 11605 ;;		line 1368 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c"
 11606 ;; Parameters:    Size  Location     Type
 11607 ;;  fp              2   94[COMRAM] PTR struct _IO_FILE
 11608 ;;		 -> NULL(0), 
 11609 ;;  fmt             2   96[COMRAM] PTR const unsigned char 
 11610 ;;		 -> STR_50(18), STR_49(17), STR_48(19), STR_47(19), 
 11611 ;;		 -> STR_46(17), STR_45(4), STR_44(6), STR_43(18), 
 11612 ;;		 -> STR_42(29), STR_40(16), STR_38(16), STR_36(24), 
 11613 ;;		 -> STR_34(33), STR_33(16), STR_31(33), STR_29(12), 
 11614 ;;		 -> STR_28(10), STR_27(39), STR_26(15), STR_25(6), 
 11615 ;;		 -> STR_24(14), STR_23(19), STR_20(23), STR_18(19), 
 11616 ;;		 -> STR_17(44), STR_16(151), STR_15(91), STR_14(148), 
 11617 ;;		 -> STR_13(61), STR_12(47), STR_11(22), STR_10(28), 
 11618 ;;		 -> STR_9(25), STR_8(55), STR_7(72), STR_6(74), 
 11619 ;;		 -> STR_5(33), STR_4(32), STR_3(34), STR_2(61), 
 11620 ;;		 -> STR_1(34), 
 11621 ;;  ap              2   98[COMRAM] PTR PTR void 
 11622 ;;		 -> printf@ap(2), 
 11623 ;; Auto vars:     Size  Location     Type
 11624 ;;  cfmt            2  100[COMRAM] PTR unsigned char 
 11625 ;;		 -> STR_50(18), STR_49(17), STR_48(19), STR_47(19), 
 11626 ;;		 -> STR_46(17), STR_45(4), STR_44(6), STR_43(18), 
 11627 ;;		 -> STR_42(29), STR_40(16), STR_38(16), STR_36(24), 
 11628 ;;		 -> STR_34(33), STR_33(16), STR_31(33), STR_29(12), 
 11629 ;;		 -> STR_28(10), STR_27(39), STR_26(15), STR_25(6), 
 11630 ;;		 -> STR_24(14), STR_23(19), STR_20(23), STR_18(19), 
 11631 ;;		 -> STR_17(44), STR_16(151), STR_15(91), STR_14(148), 
 11632 ;;		 -> STR_13(61), STR_12(47), STR_11(22), STR_10(28), 
 11633 ;;		 -> STR_9(25), STR_8(55), STR_7(72), STR_6(74), 
 11634 ;;		 -> STR_5(33), STR_4(32), STR_3(34), STR_2(61), 
 11635 ;;		 -> STR_1(34), 
 11636 ;; Return value:  Size  Location     Type
 11637 ;;                  2   94[COMRAM] int 
 11638 ;; Registers used:
 11639 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11640 ;; Tracked objects:
 11641 ;;		On entry : 0/0
 11642 ;;		On exit  : 0/0
 11643 ;;		Unchanged: 0/0
 11644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11645 ;;      Params:         6       0       0       0       0       0       0
 11646 ;;      Locals:         2       0       0       0       0       0       0
 11647 ;;      Temps:          0       0       0       0       0       0       0
 11648 ;;      Totals:         8       0       0       0       0       0       0
 11649 ;;Total ram usage:        8 bytes
 11650 ;; Hardware stack levels used:    1
 11651 ;; Hardware stack levels required when called:    8
 11652 ;; This function calls:
 11653 ;;		_vfpfcnvrt
 11654 ;; This function is called by:
 11655 ;;		_printf
 11656 ;; This function uses a non-reentrant model
 11657 ;;
 11658                           
 11659                           	psect	text34
 11660  005286                     __ptext34:
 11661                           	opt callstack 0
 11662  005286                     _vfprintf:
 11663                           	opt callstack 19
 11664  005286                     
 11665                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1368: int vfprintf(FILE *fp, 
      +                          const char *fmt, va_list ap);/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1
      +                          369: {;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1371:     char *cfmt;;/
      +                          opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1373:     cfmt = (char *)fmt;
 11666  005286  C061  F065         	movff	vfprintf@fmt,vfprintf@cfmt
 11667  00528A  C062  F066         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
 11668  00528E                     
 11669                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1374:     nout = 0;
 11670  00528E  0E00               	movlw	0
 11671  005290  0101               	movlb	1	; () banked
 11672  005292  6F81               	movwf	(_nout+1)& (0+255),b
 11673  005294  0E00               	movlw	0
 11674  005296  6F80               	movwf	_nout& (0+255),b
 11675                           
 11676                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1375:     while (*cfmt) {
 11677  005298  EF61  F029         	goto	l5947
 11678  00529C                     l5945:
 11679                           
 11680                           ; BSR set to: 1
 11681                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1376:         nout += vfpfcnv
      +                          rt(fp, &cfmt, ap);
 11682  00529C  C05F  F04B         	movff	vfprintf@fp,vfpfcnvrt@fp
 11683  0052A0  C060  F04C         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
 11684  0052A4  0E65               	movlw	low vfprintf@cfmt
 11685  0052A6  6E4D               	movwf	vfpfcnvrt@fmt^0,c
 11686  0052A8  0E00               	movlw	high vfprintf@cfmt
 11687  0052AA  6E4E               	movwf	(vfpfcnvrt@fmt+1)^0,c
 11688  0052AC  C063  F04F         	movff	vfprintf@ap,vfpfcnvrt@ap
 11689  0052B0  C064  F050         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
 11690  0052B4  EC09  F000         	call	_vfpfcnvrt	;wreg free
 11691  0052B8  504B               	movf	?_vfpfcnvrt^0,w,c
 11692  0052BA  0101               	movlb	1	; () banked
 11693  0052BC  2780               	addwf	_nout& (0+255),f,b
 11694  0052BE  504C               	movf	(?_vfpfcnvrt+1)^0,w,c
 11695  0052C0  2381               	addwfc	(_nout+1)& (0+255),f,b
 11696  0052C2                     l5947:
 11697                           
 11698                           ; BSR set to: 1
 11699                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1375:     while (*cfmt) {
 11700  0052C2  C065  FFF6         	movff	vfprintf@cfmt,tblptrl
 11701  0052C6  C066  FFF7         	movff	vfprintf@cfmt+1,tblptrh
 11702  0052CA                     	if	0	;tblptru may be non-zero
 11703  0052CA                     	endif
 11704  0052CA                     	if	0	;tblptru may be non-zero
 11705  0052CA                     	endif
 11706  0052CA  0008               	tblrd		*
 11707  0052CC  50F5               	movf	tablat,w,c
 11708  0052CE  0900               	iorlw	0
 11709  0052D0  A4D8               	btfss	status,2,c
 11710  0052D2  EF6D  F029         	goto	u7381
 11711  0052D6  EF6F  F029         	goto	u7380
 11712  0052DA                     u7381:
 11713  0052DA  EF4E  F029         	goto	l5945
 11714  0052DE                     u7380:
 11715  0052DE                     
 11716                           ; BSR set to: 1
 11717                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1378:     return nout;
 11718  0052DE  C180  F05F         	movff	_nout,?_vfprintf
 11719  0052E2  C181  F060         	movff	_nout+1,?_vfprintf+1
 11720  0052E6                     
 11721                           ; BSR set to: 1
 11722  0052E6  0012               	return		;funcret
 11723  0052E8                     __end_of_vfprintf:
 11724                           	opt callstack 0
 11725                           
 11726 ;; *************** function _vfpfcnvrt *****************
 11727 ;; Defined at:
 11728 ;;		line 670 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c"
 11729 ;; Parameters:    Size  Location     Type
 11730 ;;  fp              2   74[COMRAM] PTR struct _IO_FILE
 11731 ;;		 -> NULL(0), 
 11732 ;;  fmt             2   76[COMRAM] PTR PTR unsigned char 
 11733 ;;		 -> vfprintf@cfmt(2), 
 11734 ;;  ap              2   78[COMRAM] PTR PTR void 
 11735 ;;		 -> printf@ap(2), 
 11736 ;; Auto vars:     Size  Location     Type
 11737 ;;  llu             8   15[BANK0 ] unsigned long long 
 11738 ;;  ll              8    6[BANK0 ] long long 
 11739 ;;  f               4    0        long long 
 11740 ;;  vp              3    0        PTR void 
 11741 ;;  ct              3    0        unsigned char [3]
 11742 ;;  done            2    2[BANK0 ] int 
 11743 ;;  cp              2    0[BANK0 ] PTR unsigned char 
 11744 ;;		 -> ?_printf(2), g_adf4351(55), STR_22(3), STR_21(3), 
 11745 ;;		 -> STR_19(9), 
 11746 ;;  i               2    0        int 
 11747 ;;  c               1   14[BANK0 ] unsigned char 
 11748 ;; Return value:  Size  Location     Type
 11749 ;;                  2   74[COMRAM] int 
 11750 ;; Registers used:
 11751 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11752 ;; Tracked objects:
 11753 ;;		On entry : 0/0
 11754 ;;		On exit  : 0/0
 11755 ;;		Unchanged: 0/0
 11756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11757 ;;      Params:         6       0       0       0       0       0       0
 11758 ;;      Locals:         0      23       0       0       0       0       0
 11759 ;;      Temps:         14       0       0       0       0       0       0
 11760 ;;      Totals:        20      23       0       0       0       0       0
 11761 ;;Total ram usage:       43 bytes
 11762 ;; Hardware stack levels used:    1
 11763 ;; Hardware stack levels required when called:    7
 11764 ;; This function calls:
 11765 ;;		_atoi
 11766 ;;		_ctoa
 11767 ;;		_dtoa
 11768 ;;		_fputc
 11769 ;;		_isdigit
 11770 ;;		_stoa
 11771 ;;		_strncmp
 11772 ;;		_utoa
 11773 ;;		_xtoa
 11774 ;; This function is called by:
 11775 ;;		_vfprintf
 11776 ;; This function uses a non-reentrant model
 11777 ;;
 11778                           
 11779                           	psect	text35
 11780  000012                     __ptext35:
 11781                           	opt callstack 0
 11782  000012                     _vfpfcnvrt:
 11783                           	opt callstack 19
 11784  000012                     
 11785                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 670: static int vfpfcnvrt(FIL
      +                          E *fp, char *fmt[], va_list ap);/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c
      +                          : 671: {;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 672:     char c, *cp,
      +                           ct[3];;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 673:     int done, i;;
      +                          /opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 674:     long long ll;;/opt/mi
      +                          crochip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 675:     unsigned long long llu;
 11786  000012  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 11787  000016  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 11788  00001A  CFDE FFF6          	movff	postinc2,tblptrl
 11789  00001E  CFDD FFF7          	movff	postdec2,tblptrh
 11790  000022                     	if	0	;tblptru may be non-zero
 11791  000022                     	endif
 11792  000022                     	if	0	;tblptru may be non-zero
 11793  000022                     	endif
 11794  000022  0008               	tblrd		*
 11795  000024  50F5               	movf	tablat,w,c
 11796  000026  0A25               	xorlw	37
 11797  000028  A4D8               	btfss	status,2,c
 11798  00002A  EF19  F000         	goto	u7161
 11799  00002E  EF1B  F000         	goto	u7160
 11800  000032                     u7161:
 11801  000032  EFC1  F004         	goto	l5923
 11802  000036                     u7160:
 11803  000036                     
 11804                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 681:         ++*fmt;
 11805  000036  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 11806  00003A  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 11807  00003E  2ADE               	incf	postinc2,f,c
 11808  000040  0E00               	movlw	0
 11809  000042  22DD               	addwfc	postdec2,f,c
 11810  000044                     
 11811                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 683:         flags = width = 
      +                          0;
 11812  000044  0E00               	movlw	0
 11813  000046  6E68               	movwf	(_width+1)^0,c
 11814  000048  0E00               	movlw	0
 11815  00004A  6E67               	movwf	_width^0,c
 11816  00004C  C067  F06B         	movff	_width,_flags
 11817  000050  C068  F06C         	movff	_width+1,_flags+1
 11818  000054                     
 11819                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 684:         prec = -1;
 11820  000054  6869               	setf	_prec^0,c
 11821  000056  686A               	setf	(_prec+1)^0,c
 11822  000058                     
 11823                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 688:         done = 0;
 11824  000058  0E00               	movlw	0
 11825  00005A  0100               	movlb	0	; () banked
 11826  00005C  6F83               	movwf	(vfpfcnvrt@done+1)& (0+255),b
 11827  00005E  0E00               	movlw	0
 11828  000060  6F82               	movwf	vfpfcnvrt@done& (0+255),b
 11829                           
 11830                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 689:         while (!done) {
 11831  000062  EF79  F000         	goto	l5797
 11832  000066                     l5771:
 11833                           
 11834                           ; BSR set to: 0
 11835                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 692:                     flag
      +                          s |= (1 << 0);
 11836  000066  806B               	bsf	_flags^0,0,c
 11837  000068                     l5773:
 11838                           
 11839                           ; BSR set to: 0
 11840                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 693:                     ++*f
      +                          mt;
 11841  000068  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 11842  00006C  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 11843  000070  2ADE               	incf	postinc2,f,c
 11844  000072  0E00               	movlw	0
 11845  000074  22DD               	addwfc	postdec2,f,c
 11846                           
 11847                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 694:                     brea
      +                          k;
 11848  000076  EF79  F000         	goto	l5797
 11849  00007A                     l5775:
 11850                           
 11851                           ; BSR set to: 0
 11852                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 696:                     flag
      +                          s |= (1 << 1);
 11853  00007A  826B               	bsf	_flags^0,1,c
 11854  00007C  EF34  F000         	goto	l5773
 11855  000080                     l5779:
 11856                           
 11857                           ; BSR set to: 0
 11858                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 700:                     flag
      +                          s |= (1 << 2);
 11859  000080  846B               	bsf	_flags^0,2,c
 11860  000082  EF34  F000         	goto	l5773
 11861  000086                     l5783:
 11862                           
 11863                           ; BSR set to: 0
 11864                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 704:                     flag
      +                          s |= (1 << 3);
 11865  000086  866B               	bsf	_flags^0,3,c
 11866  000088  EF34  F000         	goto	l5773
 11867  00008C                     l5787:
 11868                           
 11869                           ; BSR set to: 0
 11870                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 708:                     flag
      +                          s |= (1 << 4);
 11871  00008C  886B               	bsf	_flags^0,4,c
 11872  00008E  EF34  F000         	goto	l5773
 11873  000092                     l5791:
 11874                           
 11875                           ; BSR set to: 0
 11876                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 712:                     done
      +                           = 1;
 11877  000092  0E00               	movlw	0
 11878  000094  6F83               	movwf	(vfpfcnvrt@done+1)& (0+255),b
 11879  000096  0E01               	movlw	1
 11880  000098  6F82               	movwf	vfpfcnvrt@done& (0+255),b
 11881                           
 11882                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 713:                     brea
      +                          k;
 11883  00009A  EF79  F000         	goto	l5797
 11884  00009E                     l5795:
 11885                           
 11886                           ; BSR set to: 0
 11887  00009E  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 11888  0000A2  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 11889  0000A6  CFDE FFF6          	movff	postinc2,tblptrl
 11890  0000AA  CFDD FFF7          	movff	postdec2,tblptrh
 11891  0000AE                     	if	0	;tblptru may be non-zero
 11892  0000AE                     	endif
 11893  0000AE                     	if	0	;tblptru may be non-zero
 11894  0000AE                     	endif
 11895  0000AE  0008               	tblrd		*
 11896  0000B0  50F5               	movf	tablat,w,c
 11897  0000B2  6E51               	movwf	??_vfpfcnvrt^0,c
 11898  0000B4  6A52               	clrf	(??_vfpfcnvrt+1)^0,c
 11899                           
 11900                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11901                           ; Switch size 1, requested type "simple"
 11902                           ; Number of cases is 1, Range of values is 0 to 0
 11903                           ; switch strategies available:
 11904                           ; Name         Instructions Cycles
 11905                           ; simple_byte            4     3 (average)
 11906                           ;	Chosen strategy is simple_byte
 11907  0000B6  5052               	movf	(??_vfpfcnvrt+1)^0,w,c
 11908  0000B8  0A00               	xorlw	0	; case 0
 11909  0000BA  B4D8               	btfsc	status,2,c
 11910  0000BC  EF62  F000         	goto	l6943
 11911  0000C0  EF49  F000         	goto	l5791
 11912  0000C4                     l6943:
 11913                           
 11914                           ; BSR set to: 0
 11915                           ; Switch size 1, requested type "simple"
 11916                           ; Number of cases is 5, Range of values is 32 to 48
 11917                           ; switch strategies available:
 11918                           ; Name         Instructions Cycles
 11919                           ; simple_byte           16     9 (average)
 11920                           ;	Chosen strategy is simple_byte
 11921  0000C4  5051               	movf	??_vfpfcnvrt^0,w,c
 11922  0000C6  0A20               	xorlw	32	; case 32
 11923  0000C8  B4D8               	btfsc	status,2,c
 11924  0000CA  EF43  F000         	goto	l5783
 11925  0000CE  0A03               	xorlw	3	; case 35
 11926  0000D0  B4D8               	btfsc	status,2,c
 11927  0000D2  EF46  F000         	goto	l5787
 11928  0000D6  0A08               	xorlw	8	; case 43
 11929  0000D8  B4D8               	btfsc	status,2,c
 11930  0000DA  EF40  F000         	goto	l5779
 11931  0000DE  0A06               	xorlw	6	; case 45
 11932  0000E0  B4D8               	btfsc	status,2,c
 11933  0000E2  EF33  F000         	goto	l5771
 11934  0000E6  0A1D               	xorlw	29	; case 48
 11935  0000E8  B4D8               	btfsc	status,2,c
 11936  0000EA  EF3D  F000         	goto	l5775
 11937  0000EE  EF49  F000         	goto	l5791
 11938  0000F2                     l5797:
 11939                           
 11940                           ; BSR set to: 0
 11941                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 689:         while (!done) {
 11942  0000F2  5182               	movf	vfpfcnvrt@done& (0+255),w,b
 11943  0000F4  1183               	iorwf	(vfpfcnvrt@done+1)& (0+255),w,b
 11944  0000F6  B4D8               	btfsc	status,2,c
 11945  0000F8  EF80  F000         	goto	u7171
 11946  0000FC  EF82  F000         	goto	u7170
 11947  000100                     u7171:
 11948  000100  EF4F  F000         	goto	l5795
 11949  000104                     u7170:
 11950  000104                     
 11951                           ; BSR set to: 0
 11952                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 716:         if (flags & (1 <
      +                          < 0)) {
 11953  000104  A06B               	btfss	_flags^0,0,c
 11954  000106  EF87  F000         	goto	u7181
 11955  00010A  EF89  F000         	goto	u7180
 11956  00010E                     u7181:
 11957  00010E  EF8A  F000         	goto	l5801
 11958  000112                     u7180:
 11959  000112                     
 11960                           ; BSR set to: 0
 11961                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 717:             flags &= ~(1
      +                           << 1);
 11962  000112  926B               	bcf	_flags^0,1,c
 11963  000114                     l5801:
 11964                           
 11965                           ; BSR set to: 0
 11966                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 723:         if ((*fmt)[0] ==
      +                           '*') {
 11967  000114  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 11968  000118  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 11969  00011C  CFDE FFF6          	movff	postinc2,tblptrl
 11970  000120  CFDD FFF7          	movff	postdec2,tblptrh
 11971  000124                     	if	0	;tblptru may be non-zero
 11972  000124                     	endif
 11973  000124                     	if	0	;tblptru may be non-zero
 11974  000124                     	endif
 11975  000124  0008               	tblrd		*
 11976  000126  50F5               	movf	tablat,w,c
 11977  000128  0A2A               	xorlw	42
 11978  00012A  A4D8               	btfss	status,2,c
 11979  00012C  EF9A  F000         	goto	u7191
 11980  000130  EF9C  F000         	goto	u7190
 11981  000134                     u7191:
 11982  000134  EFC5  F000         	goto	l5809
 11983  000138                     u7190:
 11984  000138                     
 11985                           ; BSR set to: 0
 11986                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 724:             ++*fmt;
 11987  000138  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 11988  00013C  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 11989  000140  2ADE               	incf	postinc2,f,c
 11990  000142  0E00               	movlw	0
 11991  000144  22DD               	addwfc	postdec2,f,c
 11992                           
 11993                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 725:             width = (*(i
      +                          nt *)__va_arg(*(int **)ap, (int)0));
 11994  000146  C04F  FFD9         	movff	vfpfcnvrt@ap,fsr2l
 11995  00014A  C050  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
 11996  00014E  CFDF F051          	movff	indf2,??_vfpfcnvrt
 11997  000152  0E02               	movlw	2
 11998  000154  26DE               	addwf	postinc2,f,c
 11999  000156  CFDF F052          	movff	indf2,??_vfpfcnvrt+1
 12000  00015A  0E00               	movlw	0
 12001  00015C  22DD               	addwfc	postdec2,f,c
 12002  00015E  C051  FFD9         	movff	??_vfpfcnvrt,fsr2l
 12003  000162  C052  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
 12004  000166  CFDE F067          	movff	postinc2,_width
 12005  00016A  CFDD F068          	movff	postdec2,_width+1
 12006  00016E                     
 12007                           ; BSR set to: 0
 12008                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 726:             if (width < 
      +                          0) {
 12009  00016E  BE68               	btfsc	(_width+1)^0,7,c
 12010  000170  EFBE  F000         	goto	u7200
 12011  000174  EFBC  F000         	goto	u7201
 12012  000178                     u7201:
 12013  000178  EF09  F001         	goto	l5819
 12014  00017C                     u7200:
 12015  00017C                     
 12016                           ; BSR set to: 0
 12017                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 727:                 flags |=
      +                           (1 << 0);
 12018  00017C  806B               	bsf	_flags^0,0,c
 12019                           
 12020                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 728:                 width = 
      +                          -width;
 12021  00017E  6C67               	negf	_width^0,c
 12022  000180  1E68               	comf	(_width+1)^0,f,c
 12023  000182  B0D8               	btfsc	status,0,c
 12024  000184  2A68               	incf	(_width+1)^0,f,c
 12025  000186  EF09  F001         	goto	l5819
 12026  00018A                     l5809:
 12027                           
 12028                           ; BSR set to: 0
 12029                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 731:             width = atoi
      +                          (*fmt);
 12030  00018A  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12031  00018E  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12032  000192  CFDE F014          	movff	postinc2,atoi@s
 12033  000196  CFDD F015          	movff	postdec2,atoi@s+1
 12034  00019A  EC49  F01B         	call	_atoi	;wreg free
 12035  00019E  C014  F067         	movff	?_atoi,_width
 12036  0001A2  C015  F068         	movff	?_atoi+1,_width+1
 12037                           
 12038                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 732:             while ((0 ? 
      +                          isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
 12039  0001A6  EFDC  F000         	goto	l5813
 12040  0001AA                     l5811:
 12041                           
 12042                           ; BSR set to: 0
 12043                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 733:                 ++*fmt;
 12044  0001AA  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12045  0001AE  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12046  0001B2  2ADE               	incf	postinc2,f,c
 12047  0001B4  0E00               	movlw	0
 12048  0001B6  22DD               	addwfc	postdec2,f,c
 12049  0001B8                     l5813:
 12050  0001B8  0ED0               	movlw	208
 12051  0001BA  6E51               	movwf	??_vfpfcnvrt^0,c
 12052  0001BC  0EFF               	movlw	255
 12053  0001BE  6E52               	movwf	(??_vfpfcnvrt+1)^0,c
 12054  0001C0  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12055  0001C4  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12056  0001C8  CFDE FFF6          	movff	postinc2,tblptrl
 12057  0001CC  CFDD FFF7          	movff	postdec2,tblptrh
 12058  0001D0                     	if	0	;tblptru may be non-zero
 12059  0001D0                     	endif
 12060  0001D0                     	if	0	;tblptru may be non-zero
 12061  0001D0                     	endif
 12062  0001D0  0008               	tblrd		*
 12063  0001D2  50F5               	movf	tablat,w,c
 12064  0001D4  6E53               	movwf	(??_vfpfcnvrt+2)^0,c
 12065  0001D6  6A54               	clrf	(??_vfpfcnvrt+3)^0,c
 12066  0001D8  5051               	movf	??_vfpfcnvrt^0,w,c
 12067  0001DA  2653               	addwf	(??_vfpfcnvrt+2)^0,f,c
 12068  0001DC  5052               	movf	(??_vfpfcnvrt+1)^0,w,c
 12069  0001DE  2254               	addwfc	(??_vfpfcnvrt+3)^0,f,c
 12070  0001E0  5054               	movf	(??_vfpfcnvrt+3)^0,w,c
 12071  0001E2  E10A               	bnz	u7210
 12072  0001E4  0E0A               	movlw	10
 12073  0001E6  5C53               	subwf	(??_vfpfcnvrt+2)^0,w,c
 12074  0001E8  A0D8               	btfss	status,0,c
 12075  0001EA  EFF9  F000         	goto	u7211
 12076  0001EE  EFFC  F000         	goto	u7210
 12077  0001F2                     u7211:
 12078  0001F2  0E01               	movlw	1
 12079  0001F4  EFFD  F000         	goto	u7220
 12080  0001F8                     u7210:
 12081  0001F8  0E00               	movlw	0
 12082  0001FA                     u7220:
 12083  0001FA  0100               	movlb	0	; () banked
 12084  0001FC  6F84               	movwf	_vfpfcnvrt$2366& (0+255),b
 12085  0001FE  6B85               	clrf	(_vfpfcnvrt$2366+1)& (0+255),b
 12086  000200                     
 12087                           ; BSR set to: 0
 12088  000200  5184               	movf	_vfpfcnvrt$2366& (0+255),w,b
 12089  000202  1185               	iorwf	(_vfpfcnvrt$2366+1)& (0+255),w,b
 12090  000204  A4D8               	btfss	status,2,c
 12091  000206  EF07  F001         	goto	u7231
 12092  00020A  EF09  F001         	goto	u7230
 12093  00020E                     u7231:
 12094  00020E  EFD5  F000         	goto	l5811
 12095  000212                     u7230:
 12096  000212                     l5819:
 12097                           
 12098                           ; BSR set to: 0
 12099                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 792:         if (*fmt[0] == '
      +                          c') {
 12100  000212  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12101  000216  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12102  00021A  CFDE FFF6          	movff	postinc2,tblptrl
 12103  00021E  CFDD FFF7          	movff	postdec2,tblptrh
 12104  000222                     	if	0	;tblptru may be non-zero
 12105  000222                     	endif
 12106  000222                     	if	0	;tblptru may be non-zero
 12107  000222                     	endif
 12108  000222  0008               	tblrd		*
 12109  000224  50F5               	movf	tablat,w,c
 12110  000226  0A63               	xorlw	99
 12111  000228  A4D8               	btfss	status,2,c
 12112  00022A  EF19  F001         	goto	u7241
 12113  00022E  EF1B  F001         	goto	u7240
 12114  000232                     u7241:
 12115  000232  EF42  F001         	goto	l5827
 12116  000236                     u7240:
 12117  000236                     
 12118                           ; BSR set to: 0
 12119                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 793:             ++*fmt;
 12120  000236  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12121  00023A  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12122  00023E  2ADE               	incf	postinc2,f,c
 12123  000240  0E00               	movlw	0
 12124  000242  22DD               	addwfc	postdec2,f,c
 12125                           
 12126                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 794:             c = (unsigne
      +                          d char)(*(int *)__va_arg(*(int **)ap, (int)0));
 12127  000244  C04F  FFD9         	movff	vfpfcnvrt@ap,fsr2l
 12128  000248  C050  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
 12129  00024C  CFDF F051          	movff	indf2,??_vfpfcnvrt
 12130  000250  0E02               	movlw	2
 12131  000252  26DE               	addwf	postinc2,f,c
 12132  000254  CFDF F052          	movff	indf2,??_vfpfcnvrt+1
 12133  000258  0E00               	movlw	0
 12134  00025A  22DD               	addwfc	postdec2,f,c
 12135  00025C  C051  FFD9         	movff	??_vfpfcnvrt,fsr2l
 12136  000260  C052  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
 12137  000264  50DF               	movf	indf2,w,c
 12138  000266  6F8E               	movwf	vfpfcnvrt@c& (0+255),b
 12139  000268                     
 12140                           ; BSR set to: 0
 12141                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 795:             return ctoa(
      +                          fp, c);
 12142  000268  C04B  F024         	movff	vfpfcnvrt@fp,ctoa@fp
 12143  00026C  C04C  F025         	movff	vfpfcnvrt@fp+1,ctoa@fp+1
 12144  000270  C08E  F026         	movff	vfpfcnvrt@c,ctoa@c
 12145  000274  ECD2  F029         	call	_ctoa	;wreg free
 12146  000278  C024  F04B         	movff	?_ctoa,?_vfpfcnvrt
 12147  00027C  C025  F04C         	movff	?_ctoa+1,?_vfpfcnvrt+1
 12148  000280  EFDC  F004         	goto	l802
 12149  000284                     l5827:
 12150                           
 12151                           ; BSR set to: 0
 12152                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 825:         if ((*fmt[0] == 
      +                          'd') || (*fmt[0] == 'i')) {
 12153  000284  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12154  000288  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12155  00028C  CFDE FFF6          	movff	postinc2,tblptrl
 12156  000290  CFDD FFF7          	movff	postdec2,tblptrh
 12157  000294                     	if	0	;tblptru may be non-zero
 12158  000294                     	endif
 12159  000294                     	if	0	;tblptru may be non-zero
 12160  000294                     	endif
 12161  000294  0008               	tblrd		*
 12162  000296  50F5               	movf	tablat,w,c
 12163  000298  0A64               	xorlw	100
 12164  00029A  B4D8               	btfsc	status,2,c
 12165  00029C  EF52  F001         	goto	u7251
 12166  0002A0  EF54  F001         	goto	u7250
 12167  0002A4                     u7251:
 12168  0002A4  EF66  F001         	goto	l5831
 12169  0002A8                     u7250:
 12170  0002A8                     
 12171                           ; BSR set to: 0
 12172  0002A8  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12173  0002AC  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12174  0002B0  CFDE FFF6          	movff	postinc2,tblptrl
 12175  0002B4  CFDD FFF7          	movff	postdec2,tblptrh
 12176  0002B8                     	if	0	;tblptru may be non-zero
 12177  0002B8                     	endif
 12178  0002B8                     	if	0	;tblptru may be non-zero
 12179  0002B8                     	endif
 12180  0002B8  0008               	tblrd		*
 12181  0002BA  50F5               	movf	tablat,w,c
 12182  0002BC  0A69               	xorlw	105
 12183  0002BE  A4D8               	btfss	status,2,c
 12184  0002C0  EF64  F001         	goto	u7261
 12185  0002C4  EF66  F001         	goto	u7260
 12186  0002C8                     u7261:
 12187  0002C8  EFA6  F001         	goto	l5837
 12188  0002CC                     u7260:
 12189  0002CC                     l5831:
 12190                           
 12191                           ; BSR set to: 0
 12192                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 827:             ++*fmt;
 12193  0002CC  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12194  0002D0  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12195  0002D4  2ADE               	incf	postinc2,f,c
 12196  0002D6  0E00               	movlw	0
 12197  0002D8  22DD               	addwfc	postdec2,f,c
 12198                           
 12199                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 828:             ll = (long l
      +                          ong)(*(int *)__va_arg(*(int **)ap, (int)0));
 12200  0002DA  C04F  FFD9         	movff	vfpfcnvrt@ap,fsr2l
 12201  0002DE  C050  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
 12202  0002E2  CFDF F051          	movff	indf2,??_vfpfcnvrt
 12203  0002E6  0E02               	movlw	2
 12204  0002E8  26DE               	addwf	postinc2,f,c
 12205  0002EA  CFDF F052          	movff	indf2,??_vfpfcnvrt+1
 12206  0002EE  0E00               	movlw	0
 12207  0002F0  22DD               	addwfc	postdec2,f,c
 12208  0002F2  C051  FFD9         	movff	??_vfpfcnvrt,fsr2l
 12209  0002F6  C052  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
 12210  0002FA  CFDE F086          	movff	postinc2,vfpfcnvrt@ll
 12211  0002FE  CFDD F087          	movff	postdec2,vfpfcnvrt@ll+1
 12212  000302  0E00               	movlw	0
 12213  000304  BF87               	btfsc	(vfpfcnvrt@ll+1)& (0+255),7,b
 12214  000306  0EFF               	movlw	-1
 12215  000308  6F88               	movwf	(vfpfcnvrt@ll+2)& (0+255),b
 12216  00030A  6F89               	movwf	(vfpfcnvrt@ll+3)& (0+255),b
 12217  00030C  6F8A               	movwf	(vfpfcnvrt@ll+4)& (0+255),b
 12218  00030E  6F8B               	movwf	(vfpfcnvrt@ll+5)& (0+255),b
 12219  000310  6F8C               	movwf	(vfpfcnvrt@ll+6)& (0+255),b
 12220  000312  6F8D               	movwf	(vfpfcnvrt@ll+7)& (0+255),b
 12221  000314                     
 12222                           ; BSR set to: 0
 12223                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 830:             return dtoa(
      +                          fp, ll);
 12224  000314  C04B  F027         	movff	vfpfcnvrt@fp,dtoa@fp
 12225  000318  C04C  F028         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
 12226  00031C  C086  F029         	movff	vfpfcnvrt@ll,dtoa@d
 12227  000320  C087  F02A         	movff	vfpfcnvrt@ll+1,dtoa@d+1
 12228  000324  C088  F02B         	movff	vfpfcnvrt@ll+2,dtoa@d+2
 12229  000328  C089  F02C         	movff	vfpfcnvrt@ll+3,dtoa@d+3
 12230  00032C  C08A  F02D         	movff	vfpfcnvrt@ll+4,dtoa@d+4
 12231  000330  C08B  F02E         	movff	vfpfcnvrt@ll+5,dtoa@d+5
 12232  000334  C08C  F02F         	movff	vfpfcnvrt@ll+6,dtoa@d+6
 12233  000338  C08D  F030         	movff	vfpfcnvrt@ll+7,dtoa@d+7
 12234  00033C  EC9F  F011         	call	_dtoa	;wreg free
 12235  000340  C027  F04B         	movff	?_dtoa,?_vfpfcnvrt
 12236  000344  C028  F04C         	movff	?_dtoa+1,?_vfpfcnvrt+1
 12237  000348  EFDC  F004         	goto	l802
 12238  00034C                     l5837:
 12239                           
 12240                           ; BSR set to: 0
 12241                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 835:         if (!strncmp(*fm
      +                          t, "ld", ((sizeof("ld")/sizeof("ld"[0]))-1)) || !strncmp(*fmt, "li", ((sizeof("li")/size
      +                          of("li"[0]))-1))) {
 12242  00034C  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12243  000350  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12244  000354  CFDE F00D          	movff	postinc2,strncmp@_l
 12245  000358  CFDD F00E          	movff	postdec2,strncmp@_l+1
 12246  00035C  0EED               	movlw	low STR_51
 12247  00035E  6E0F               	movwf	strncmp@_r^0,c
 12248  000360  0E7F               	movlw	high STR_51
 12249  000362  6E10               	movwf	(strncmp@_r+1)^0,c
 12250  000364  0E00               	movlw	0
 12251  000366  6E12               	movwf	(strncmp@n+1)^0,c
 12252  000368  0E02               	movlw	2
 12253  00036A  6E11               	movwf	strncmp@n^0,c
 12254  00036C  EC2E  F020         	call	_strncmp	;wreg free
 12255  000370  500D               	movf	?_strncmp^0,w,c
 12256  000372  100E               	iorwf	(?_strncmp+1)^0,w,c
 12257  000374  B4D8               	btfsc	status,2,c
 12258  000376  EFBF  F001         	goto	u7271
 12259  00037A  EFC1  F001         	goto	u7270
 12260  00037E                     u7271:
 12261  00037E  EFDC  F001         	goto	l5841
 12262  000382                     u7270:
 12263  000382  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12264  000386  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12265  00038A  CFDE F00D          	movff	postinc2,strncmp@_l
 12266  00038E  CFDD F00E          	movff	postdec2,strncmp@_l+1
 12267  000392  0EF0               	movlw	low STR_55
 12268  000394  6E0F               	movwf	strncmp@_r^0,c
 12269  000396  0E7F               	movlw	high STR_55
 12270  000398  6E10               	movwf	(strncmp@_r+1)^0,c
 12271  00039A  0E00               	movlw	0
 12272  00039C  6E12               	movwf	(strncmp@n+1)^0,c
 12273  00039E  0E02               	movlw	2
 12274  0003A0  6E11               	movwf	strncmp@n^0,c
 12275  0003A2  EC2E  F020         	call	_strncmp	;wreg free
 12276  0003A6  500D               	movf	?_strncmp^0,w,c
 12277  0003A8  100E               	iorwf	(?_strncmp+1)^0,w,c
 12278  0003AA  A4D8               	btfss	status,2,c
 12279  0003AC  EFDA  F001         	goto	u7281
 12280  0003B0  EFDC  F001         	goto	u7280
 12281  0003B4                     u7281:
 12282  0003B4  EF39  F002         	goto	l5847
 12283  0003B8                     u7280:
 12284  0003B8                     l5841:
 12285                           
 12286                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 836: ;/opt/microchip/xc8/v2.1
      +                          0/pic/sources/c99/common/doprnt.c: 838:             *fmt += ((sizeof("ld")/sizeof("ld"[0
      +                          ]))-1);
 12287  0003B8  0E02               	movlw	2
 12288  0003BA  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12289  0003BE  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12290  0003C2  26DE               	addwf	postinc2,f,c
 12291  0003C4  0E00               	movlw	0
 12292  0003C6  22DD               	addwfc	postdec2,f,c
 12293                           
 12294                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 839:             ll = (long l
      +                          ong)(*(long *)__va_arg(*(long **)ap, (long)0));
 12295  0003C8  C04F  FFD9         	movff	vfpfcnvrt@ap,fsr2l
 12296  0003CC  C050  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
 12297  0003D0  CFDF F051          	movff	indf2,??_vfpfcnvrt
 12298  0003D4  0E04               	movlw	4
 12299  0003D6  26DE               	addwf	postinc2,f,c
 12300  0003D8  CFDF F052          	movff	indf2,??_vfpfcnvrt+1
 12301  0003DC  0E00               	movlw	0
 12302  0003DE  22DD               	addwfc	postdec2,f,c
 12303  0003E0  C051  FFD9         	movff	??_vfpfcnvrt,fsr2l
 12304  0003E4  C052  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
 12305  0003E8  CFDE F053          	movff	postinc2,??_vfpfcnvrt+2
 12306  0003EC  CFDE F054          	movff	postinc2,??_vfpfcnvrt+3
 12307  0003F0  CFDE F055          	movff	postinc2,??_vfpfcnvrt+4
 12308  0003F4  CFDE F056          	movff	postinc2,??_vfpfcnvrt+5
 12309  0003F8  C053  F057         	movff	??_vfpfcnvrt+2,??_vfpfcnvrt+6
 12310  0003FC  C054  F058         	movff	??_vfpfcnvrt+3,??_vfpfcnvrt+7
 12311  000400  C055  F059         	movff	??_vfpfcnvrt+4,??_vfpfcnvrt+8
 12312  000404  C056  F05A         	movff	??_vfpfcnvrt+5,??_vfpfcnvrt+9
 12313  000408  6A5B               	clrf	(??_vfpfcnvrt+10)^0,c
 12314  00040A  BE5A               	btfsc	(??_vfpfcnvrt+9)^0,7,c
 12315  00040C  685B               	setf	(??_vfpfcnvrt+10)^0,c
 12316  00040E  C05B  F05C         	movff	??_vfpfcnvrt+10,??_vfpfcnvrt+11
 12317  000412  C05B  F05D         	movff	??_vfpfcnvrt+10,??_vfpfcnvrt+12
 12318  000416  C05B  F05E         	movff	??_vfpfcnvrt+10,??_vfpfcnvrt+13
 12319  00041A  C057  F086         	movff	??_vfpfcnvrt+6,vfpfcnvrt@ll
 12320  00041E  C058  F087         	movff	??_vfpfcnvrt+7,vfpfcnvrt@ll+1
 12321  000422  C059  F088         	movff	??_vfpfcnvrt+8,vfpfcnvrt@ll+2
 12322  000426  C05A  F089         	movff	??_vfpfcnvrt+9,vfpfcnvrt@ll+3
 12323  00042A  C05B  F08A         	movff	??_vfpfcnvrt+10,vfpfcnvrt@ll+4
 12324  00042E  C05C  F08B         	movff	??_vfpfcnvrt+11,vfpfcnvrt@ll+5
 12325  000432  C05D  F08C         	movff	??_vfpfcnvrt+12,vfpfcnvrt@ll+6
 12326  000436  C05E  F08D         	movff	??_vfpfcnvrt+13,vfpfcnvrt@ll+7
 12327  00043A                     
 12328                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 841:             return dtoa(
      +                          fp, ll);
 12329  00043A  C04B  F027         	movff	vfpfcnvrt@fp,dtoa@fp
 12330  00043E  C04C  F028         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
 12331  000442  C086  F029         	movff	vfpfcnvrt@ll,dtoa@d
 12332  000446  C087  F02A         	movff	vfpfcnvrt@ll+1,dtoa@d+1
 12333  00044A  C088  F02B         	movff	vfpfcnvrt@ll+2,dtoa@d+2
 12334  00044E  C089  F02C         	movff	vfpfcnvrt@ll+3,dtoa@d+3
 12335  000452  C08A  F02D         	movff	vfpfcnvrt@ll+4,dtoa@d+4
 12336  000456  C08B  F02E         	movff	vfpfcnvrt@ll+5,dtoa@d+5
 12337  00045A  C08C  F02F         	movff	vfpfcnvrt@ll+6,dtoa@d+6
 12338  00045E  C08D  F030         	movff	vfpfcnvrt@ll+7,dtoa@d+7
 12339  000462  EC9F  F011         	call	_dtoa	;wreg free
 12340  000466  C027  F04B         	movff	?_dtoa,?_vfpfcnvrt
 12341  00046A  C028  F04C         	movff	?_dtoa+1,?_vfpfcnvrt+1
 12342  00046E  EFDC  F004         	goto	l802
 12343  000472                     l5847:
 12344                           
 12345                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1138:         if (*fmt[0] == 
      +                          'p') {
 12346  000472  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12347  000476  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12348  00047A  CFDE FFF6          	movff	postinc2,tblptrl
 12349  00047E  CFDD FFF7          	movff	postdec2,tblptrh
 12350  000482                     	if	0	;tblptru may be non-zero
 12351  000482                     	endif
 12352  000482                     	if	0	;tblptru may be non-zero
 12353  000482                     	endif
 12354  000482  0008               	tblrd		*
 12355  000484  50F5               	movf	tablat,w,c
 12356  000486  0A70               	xorlw	112
 12357  000488  A4D8               	btfss	status,2,c
 12358  00048A  EF49  F002         	goto	u7291
 12359  00048E  EF4B  F002         	goto	u7290
 12360  000492                     u7291:
 12361  000492  EF8F  F002         	goto	l5855
 12362  000496                     u7290:
 12363  000496                     
 12364                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1140:             ++*fmt;
 12365  000496  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12366  00049A  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12367  00049E  2ADE               	incf	postinc2,f,c
 12368  0004A0  0E00               	movlw	0
 12369  0004A2  22DD               	addwfc	postdec2,f,c
 12370                           
 12371                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1141:             llu = (unsi
      +                          gned long long)(size_t)(*(void * *)__va_arg(*(void * **)ap, (void *)0));
 12372  0004A4  C04F  FFD9         	movff	vfpfcnvrt@ap,fsr2l
 12373  0004A8  C050  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
 12374  0004AC  CFDF F051          	movff	indf2,??_vfpfcnvrt
 12375  0004B0  0E02               	movlw	2
 12376  0004B2  26DE               	addwf	postinc2,f,c
 12377  0004B4  CFDF F052          	movff	indf2,??_vfpfcnvrt+1
 12378  0004B8  0E00               	movlw	0
 12379  0004BA  22DD               	addwfc	postdec2,f,c
 12380  0004BC  C051  FFD9         	movff	??_vfpfcnvrt,fsr2l
 12381  0004C0  C052  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
 12382  0004C4  CFDE F053          	movff	postinc2,??_vfpfcnvrt+2
 12383  0004C8  CFDD F054          	movff	postdec2,??_vfpfcnvrt+3
 12384  0004CC  C053  F08F         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
 12385  0004D0  C054  F090         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
 12386  0004D4  0100               	movlb	0	; () banked
 12387  0004D6  6B91               	clrf	(vfpfcnvrt@llu+2)& (0+255),b
 12388  0004D8  6B92               	clrf	(vfpfcnvrt@llu+3)& (0+255),b
 12389  0004DA  6B93               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
 12390  0004DC  6B94               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
 12391  0004DE  6B95               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
 12392  0004E0  6B96               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
 12393  0004E2                     
 12394                           ; BSR set to: 0
 12395                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1143:             return xtoa
      +                          (fp, llu, 'x');
 12396  0004E2  C04B  F024         	movff	vfpfcnvrt@fp,xtoa@fp
 12397  0004E6  C04C  F025         	movff	vfpfcnvrt@fp+1,xtoa@fp+1
 12398  0004EA  C08F  F026         	movff	vfpfcnvrt@llu,xtoa@d
 12399  0004EE  C090  F027         	movff	vfpfcnvrt@llu+1,xtoa@d+1
 12400  0004F2  C091  F028         	movff	vfpfcnvrt@llu+2,xtoa@d+2
 12401  0004F6  C092  F029         	movff	vfpfcnvrt@llu+3,xtoa@d+3
 12402  0004FA  C093  F02A         	movff	vfpfcnvrt@llu+4,xtoa@d+4
 12403  0004FE  C094  F02B         	movff	vfpfcnvrt@llu+5,xtoa@d+5
 12404  000502  C095  F02C         	movff	vfpfcnvrt@llu+6,xtoa@d+6
 12405  000506  C096  F02D         	movff	vfpfcnvrt@llu+7,xtoa@d+7
 12406  00050A  0E78               	movlw	120
 12407  00050C  6E2E               	movwf	xtoa@x^0,c
 12408  00050E  EC0E  F013         	call	_xtoa	;wreg free
 12409  000512  C024  F04B         	movff	?_xtoa,?_vfpfcnvrt
 12410  000516  C025  F04C         	movff	?_xtoa+1,?_vfpfcnvrt+1
 12411  00051A  EFDC  F004         	goto	l802
 12412  00051E                     l5855:
 12413                           
 12414                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1149:         if (*fmt[0] == 
      +                          's') {
 12415  00051E  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12416  000522  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12417  000526  CFDE FFF6          	movff	postinc2,tblptrl
 12418  00052A  CFDD FFF7          	movff	postdec2,tblptrh
 12419  00052E                     	if	0	;tblptru may be non-zero
 12420  00052E                     	endif
 12421  00052E                     	if	0	;tblptru may be non-zero
 12422  00052E                     	endif
 12423  00052E  0008               	tblrd		*
 12424  000530  50F5               	movf	tablat,w,c
 12425  000532  0A73               	xorlw	115
 12426  000534  A4D8               	btfss	status,2,c
 12427  000536  EF9F  F002         	goto	u7301
 12428  00053A  EFA1  F002         	goto	u7300
 12429  00053E                     u7301:
 12430  00053E  EFCC  F002         	goto	l5863
 12431  000542                     u7300:
 12432  000542                     
 12433                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1151:             ++*fmt;
 12434  000542  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12435  000546  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12436  00054A  2ADE               	incf	postinc2,f,c
 12437  00054C  0E00               	movlw	0
 12438  00054E  22DD               	addwfc	postdec2,f,c
 12439                           
 12440                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1152:             cp = (*(cha
      +                          r * *)__va_arg(*(char * **)ap, (char *)0));
 12441  000550  C04F  FFD9         	movff	vfpfcnvrt@ap,fsr2l
 12442  000554  C050  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
 12443  000558  CFDF F051          	movff	indf2,??_vfpfcnvrt
 12444  00055C  0E02               	movlw	2
 12445  00055E  26DE               	addwf	postinc2,f,c
 12446  000560  CFDF F052          	movff	indf2,??_vfpfcnvrt+1
 12447  000564  0E00               	movlw	0
 12448  000566  22DD               	addwfc	postdec2,f,c
 12449  000568  C051  FFD9         	movff	??_vfpfcnvrt,fsr2l
 12450  00056C  C052  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
 12451  000570  CFDE F080          	movff	postinc2,vfpfcnvrt@cp
 12452  000574  CFDD F081          	movff	postdec2,vfpfcnvrt@cp+1
 12453  000578                     
 12454                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1154:             return stoa
      +                          (fp, cp);
 12455  000578  C04B  F012         	movff	vfpfcnvrt@fp,stoa@fp
 12456  00057C  C04C  F013         	movff	vfpfcnvrt@fp+1,stoa@fp+1
 12457  000580  C080  F014         	movff	vfpfcnvrt@cp,stoa@s
 12458  000584  C081  F015         	movff	vfpfcnvrt@cp+1,stoa@s+1
 12459  000588  EC7D  F01A         	call	_stoa	;wreg free
 12460  00058C  C012  F04B         	movff	?_stoa,?_vfpfcnvrt
 12461  000590  C013  F04C         	movff	?_stoa+1,?_vfpfcnvrt+1
 12462  000594  EFDC  F004         	goto	l802
 12463  000598                     l5863:
 12464                           
 12465                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1182:         if (*fmt[0] == 
      +                          'u') {
 12466  000598  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12467  00059C  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12468  0005A0  CFDE FFF6          	movff	postinc2,tblptrl
 12469  0005A4  CFDD FFF7          	movff	postdec2,tblptrh
 12470  0005A8                     	if	0	;tblptru may be non-zero
 12471  0005A8                     	endif
 12472  0005A8                     	if	0	;tblptru may be non-zero
 12473  0005A8                     	endif
 12474  0005A8  0008               	tblrd		*
 12475  0005AA  50F5               	movf	tablat,w,c
 12476  0005AC  0A75               	xorlw	117
 12477  0005AE  A4D8               	btfss	status,2,c
 12478  0005B0  EFDC  F002         	goto	u7311
 12479  0005B4  EFDE  F002         	goto	u7310
 12480  0005B8                     u7311:
 12481  0005B8  EF20  F003         	goto	l5871
 12482  0005BC                     u7310:
 12483  0005BC                     
 12484                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1184:             ++*fmt;
 12485  0005BC  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12486  0005C0  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12487  0005C4  2ADE               	incf	postinc2,f,c
 12488  0005C6  0E00               	movlw	0
 12489  0005C8  22DD               	addwfc	postdec2,f,c
 12490                           
 12491                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1185:             llu = (unsi
      +                          gned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned int)0));
 12492  0005CA  C04F  FFD9         	movff	vfpfcnvrt@ap,fsr2l
 12493  0005CE  C050  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
 12494  0005D2  CFDF F051          	movff	indf2,??_vfpfcnvrt
 12495  0005D6  0E02               	movlw	2
 12496  0005D8  26DE               	addwf	postinc2,f,c
 12497  0005DA  CFDF F052          	movff	indf2,??_vfpfcnvrt+1
 12498  0005DE  0E00               	movlw	0
 12499  0005E0  22DD               	addwfc	postdec2,f,c
 12500  0005E2  C051  FFD9         	movff	??_vfpfcnvrt,fsr2l
 12501  0005E6  C052  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
 12502  0005EA  CFDE F053          	movff	postinc2,??_vfpfcnvrt+2
 12503  0005EE  CFDD F054          	movff	postdec2,??_vfpfcnvrt+3
 12504  0005F2  C053  F08F         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
 12505  0005F6  C054  F090         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
 12506  0005FA  0100               	movlb	0	; () banked
 12507  0005FC  6B91               	clrf	(vfpfcnvrt@llu+2)& (0+255),b
 12508  0005FE  6B92               	clrf	(vfpfcnvrt@llu+3)& (0+255),b
 12509  000600  6B93               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
 12510  000602  6B94               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
 12511  000604  6B95               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
 12512  000606  6B96               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
 12513  000608                     
 12514                           ; BSR set to: 0
 12515                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1187:             return utoa
      +                          (fp, llu);
 12516  000608  C04B  F026         	movff	vfpfcnvrt@fp,utoa@fp
 12517  00060C  C04C  F027         	movff	vfpfcnvrt@fp+1,utoa@fp+1
 12518  000610  C08F  F028         	movff	vfpfcnvrt@llu,utoa@d
 12519  000614  C090  F029         	movff	vfpfcnvrt@llu+1,utoa@d+1
 12520  000618  C091  F02A         	movff	vfpfcnvrt@llu+2,utoa@d+2
 12521  00061C  C092  F02B         	movff	vfpfcnvrt@llu+3,utoa@d+3
 12522  000620  C093  F02C         	movff	vfpfcnvrt@llu+4,utoa@d+4
 12523  000624  C094  F02D         	movff	vfpfcnvrt@llu+5,utoa@d+5
 12524  000628  C095  F02E         	movff	vfpfcnvrt@llu+6,utoa@d+6
 12525  00062C  C096  F02F         	movff	vfpfcnvrt@llu+7,utoa@d+7
 12526  000630  ECCE  F016         	call	_utoa	;wreg free
 12527  000634  C026  F04B         	movff	?_utoa,?_vfpfcnvrt
 12528  000638  C027  F04C         	movff	?_utoa+1,?_vfpfcnvrt+1
 12529  00063C  EFDC  F004         	goto	l802
 12530  000640                     l5871:
 12531                           
 12532                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1192:         if (!strncmp(*f
      +                          mt, "lu", ((sizeof("lu")/sizeof("lu"[0]))-1))) {
 12533  000640  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12534  000644  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12535  000648  CFDE F00D          	movff	postinc2,strncmp@_l
 12536  00064C  CFDD F00E          	movff	postdec2,strncmp@_l+1
 12537  000650  0EF3               	movlw	low STR_60
 12538  000652  6E0F               	movwf	strncmp@_r^0,c
 12539  000654  0E7F               	movlw	high STR_60
 12540  000656  6E10               	movwf	(strncmp@_r+1)^0,c
 12541  000658  0E00               	movlw	0
 12542  00065A  6E12               	movwf	(strncmp@n+1)^0,c
 12543  00065C  0E02               	movlw	2
 12544  00065E  6E11               	movwf	strncmp@n^0,c
 12545  000660  EC2E  F020         	call	_strncmp	;wreg free
 12546  000664  500D               	movf	?_strncmp^0,w,c
 12547  000666  100E               	iorwf	(?_strncmp+1)^0,w,c
 12548  000668  A4D8               	btfss	status,2,c
 12549  00066A  EF39  F003         	goto	u7321
 12550  00066E  EF3B  F003         	goto	u7320
 12551  000672                     u7321:
 12552  000672  EF84  F003         	goto	l5879
 12553  000676                     u7320:
 12554  000676                     
 12555                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1194:             *fmt += ((s
      +                          izeof("lu")/sizeof("lu"[0]))-1);
 12556  000676  0E02               	movlw	2
 12557  000678  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12558  00067C  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12559  000680  26DE               	addwf	postinc2,f,c
 12560  000682  0E00               	movlw	0
 12561  000684  22DD               	addwfc	postdec2,f,c
 12562                           
 12563                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1195:             llu = (unsi
      +                          gned long long)(*(unsigned long *)__va_arg(*(unsigned long **)ap, (unsigned long)0));
 12564  000686  C04F  FFD9         	movff	vfpfcnvrt@ap,fsr2l
 12565  00068A  C050  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
 12566  00068E  CFDF F051          	movff	indf2,??_vfpfcnvrt
 12567  000692  0E04               	movlw	4
 12568  000694  26DE               	addwf	postinc2,f,c
 12569  000696  CFDF F052          	movff	indf2,??_vfpfcnvrt+1
 12570  00069A  0E00               	movlw	0
 12571  00069C  22DD               	addwfc	postdec2,f,c
 12572  00069E  C051  FFD9         	movff	??_vfpfcnvrt,fsr2l
 12573  0006A2  C052  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
 12574  0006A6  CFDE F053          	movff	postinc2,??_vfpfcnvrt+2
 12575  0006AA  CFDE F054          	movff	postinc2,??_vfpfcnvrt+3
 12576  0006AE  CFDE F055          	movff	postinc2,??_vfpfcnvrt+4
 12577  0006B2  CFDE F056          	movff	postinc2,??_vfpfcnvrt+5
 12578  0006B6  5053               	movf	(??_vfpfcnvrt+2)^0,w,c
 12579  0006B8  0100               	movlb	0	; () banked
 12580  0006BA  6F8F               	movwf	vfpfcnvrt@llu& (0+255),b
 12581  0006BC  5054               	movf	(??_vfpfcnvrt+3)^0,w,c
 12582  0006BE  6F90               	movwf	(vfpfcnvrt@llu+1)& (0+255),b
 12583  0006C0  5055               	movf	(??_vfpfcnvrt+4)^0,w,c
 12584  0006C2  6F91               	movwf	(vfpfcnvrt@llu+2)& (0+255),b
 12585  0006C4  5056               	movf	(??_vfpfcnvrt+5)^0,w,c
 12586  0006C6  6F92               	movwf	(vfpfcnvrt@llu+3)& (0+255),b
 12587  0006C8  6B93               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
 12588  0006CA  6B94               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
 12589  0006CC  6B95               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
 12590  0006CE  6B96               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
 12591  0006D0                     
 12592                           ; BSR set to: 0
 12593                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1197:             return utoa
      +                          (fp, llu);
 12594  0006D0  C04B  F026         	movff	vfpfcnvrt@fp,utoa@fp
 12595  0006D4  C04C  F027         	movff	vfpfcnvrt@fp+1,utoa@fp+1
 12596  0006D8  C08F  F028         	movff	vfpfcnvrt@llu,utoa@d
 12597  0006DC  C090  F029         	movff	vfpfcnvrt@llu+1,utoa@d+1
 12598  0006E0  C091  F02A         	movff	vfpfcnvrt@llu+2,utoa@d+2
 12599  0006E4  C092  F02B         	movff	vfpfcnvrt@llu+3,utoa@d+3
 12600  0006E8  C093  F02C         	movff	vfpfcnvrt@llu+4,utoa@d+4
 12601  0006EC  C094  F02D         	movff	vfpfcnvrt@llu+5,utoa@d+5
 12602  0006F0  C095  F02E         	movff	vfpfcnvrt@llu+6,utoa@d+6
 12603  0006F4  C096  F02F         	movff	vfpfcnvrt@llu+7,utoa@d+7
 12604  0006F8  ECCE  F016         	call	_utoa	;wreg free
 12605  0006FC  C026  F04B         	movff	?_utoa,?_vfpfcnvrt
 12606  000700  C027  F04C         	movff	?_utoa+1,?_vfpfcnvrt+1
 12607  000704  EFDC  F004         	goto	l802
 12608  000708                     l5879:
 12609                           
 12610                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1274:         if ((*fmt[0] ==
      +                           'x') || (*fmt[0] == 'X')) {
 12611  000708  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12612  00070C  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12613  000710  CFDE FFF6          	movff	postinc2,tblptrl
 12614  000714  CFDD FFF7          	movff	postdec2,tblptrh
 12615  000718                     	if	0	;tblptru may be non-zero
 12616  000718                     	endif
 12617  000718                     	if	0	;tblptru may be non-zero
 12618  000718                     	endif
 12619  000718  0008               	tblrd		*
 12620  00071A  50F5               	movf	tablat,w,c
 12621  00071C  0A78               	xorlw	120
 12622  00071E  B4D8               	btfsc	status,2,c
 12623  000720  EF94  F003         	goto	u7331
 12624  000724  EF96  F003         	goto	u7330
 12625  000728                     u7331:
 12626  000728  EFA8  F003         	goto	l5883
 12627  00072C                     u7330:
 12628  00072C  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12629  000730  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12630  000734  CFDE FFF6          	movff	postinc2,tblptrl
 12631  000738  CFDD FFF7          	movff	postdec2,tblptrh
 12632  00073C                     	if	0	;tblptru may be non-zero
 12633  00073C                     	endif
 12634  00073C                     	if	0	;tblptru may be non-zero
 12635  00073C                     	endif
 12636  00073C  0008               	tblrd		*
 12637  00073E  50F5               	movf	tablat,w,c
 12638  000740  0A58               	xorlw	88
 12639  000742  A4D8               	btfss	status,2,c
 12640  000744  EFA6  F003         	goto	u7341
 12641  000748  EFA8  F003         	goto	u7340
 12642  00074C                     u7341:
 12643  00074C  EFF7  F003         	goto	l5893
 12644  000750                     u7340:
 12645  000750                     l5883:
 12646                           
 12647                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1276:             c = (*fmt)[
      +                          0];
 12648  000750  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12649  000754  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12650  000758  CFDE FFF6          	movff	postinc2,tblptrl
 12651  00075C  CFDD FFF7          	movff	postdec2,tblptrh
 12652  000760                     	if	0	;tblptru may be non-zero
 12653  000760                     	endif
 12654  000760                     	if	0	;tblptru may be non-zero
 12655  000760                     	endif
 12656  000760  0008               	tblrd		*
 12657  000762  CFF5 F08E          	movff	tablat,vfpfcnvrt@c
 12658  000766                     
 12659                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1277:             ++*fmt;
 12660  000766  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12661  00076A  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12662  00076E  2ADE               	incf	postinc2,f,c
 12663  000770  0E00               	movlw	0
 12664  000772  22DD               	addwfc	postdec2,f,c
 12665  000774                     
 12666                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1278:             llu = (unsi
      +                          gned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned int)0));
 12667  000774  C04F  FFD9         	movff	vfpfcnvrt@ap,fsr2l
 12668  000778  C050  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
 12669  00077C  CFDF F051          	movff	indf2,??_vfpfcnvrt
 12670  000780  0E02               	movlw	2
 12671  000782  26DE               	addwf	postinc2,f,c
 12672  000784  CFDF F052          	movff	indf2,??_vfpfcnvrt+1
 12673  000788  0E00               	movlw	0
 12674  00078A  22DD               	addwfc	postdec2,f,c
 12675  00078C  C051  FFD9         	movff	??_vfpfcnvrt,fsr2l
 12676  000790  C052  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
 12677  000794  CFDE F053          	movff	postinc2,??_vfpfcnvrt+2
 12678  000798  CFDD F054          	movff	postdec2,??_vfpfcnvrt+3
 12679  00079C  C053  F08F         	movff	??_vfpfcnvrt+2,vfpfcnvrt@llu
 12680  0007A0  C054  F090         	movff	??_vfpfcnvrt+3,vfpfcnvrt@llu+1
 12681  0007A4  0100               	movlb	0	; () banked
 12682  0007A6  6B91               	clrf	(vfpfcnvrt@llu+2)& (0+255),b
 12683  0007A8  6B92               	clrf	(vfpfcnvrt@llu+3)& (0+255),b
 12684  0007AA  6B93               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
 12685  0007AC  6B94               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
 12686  0007AE  6B95               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
 12687  0007B0  6B96               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
 12688  0007B2                     
 12689                           ; BSR set to: 0
 12690                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1280:             return xtoa
      +                          (fp, llu, c);
 12691  0007B2  C04B  F024         	movff	vfpfcnvrt@fp,xtoa@fp
 12692  0007B6  C04C  F025         	movff	vfpfcnvrt@fp+1,xtoa@fp+1
 12693  0007BA  C08F  F026         	movff	vfpfcnvrt@llu,xtoa@d
 12694  0007BE  C090  F027         	movff	vfpfcnvrt@llu+1,xtoa@d+1
 12695  0007C2  C091  F028         	movff	vfpfcnvrt@llu+2,xtoa@d+2
 12696  0007C6  C092  F029         	movff	vfpfcnvrt@llu+3,xtoa@d+3
 12697  0007CA  C093  F02A         	movff	vfpfcnvrt@llu+4,xtoa@d+4
 12698  0007CE  C094  F02B         	movff	vfpfcnvrt@llu+5,xtoa@d+5
 12699  0007D2  C095  F02C         	movff	vfpfcnvrt@llu+6,xtoa@d+6
 12700  0007D6  C096  F02D         	movff	vfpfcnvrt@llu+7,xtoa@d+7
 12701  0007DA  C08E  F02E         	movff	vfpfcnvrt@c,xtoa@x
 12702  0007DE  EC0E  F013         	call	_xtoa	;wreg free
 12703  0007E2  C024  F04B         	movff	?_xtoa,?_vfpfcnvrt
 12704  0007E6  C025  F04C         	movff	?_xtoa+1,?_vfpfcnvrt+1
 12705  0007EA  EFDC  F004         	goto	l802
 12706  0007EE                     l5893:
 12707                           
 12708                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1285:         if (!strncmp(*f
      +                          mt, "lx", ((sizeof("lx")/sizeof("lx"[0]))-1)) || !strncmp(*fmt, "lX", ((sizeof("lX")/siz
      +                          eof("lX"[0]))-1))) {
 12709  0007EE  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12710  0007F2  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12711  0007F6  CFDE F00D          	movff	postinc2,strncmp@_l
 12712  0007FA  CFDD F00E          	movff	postdec2,strncmp@_l+1
 12713  0007FE  0EF6               	movlw	low STR_65
 12714  000800  6E0F               	movwf	strncmp@_r^0,c
 12715  000802  0E7F               	movlw	high STR_65
 12716  000804  6E10               	movwf	(strncmp@_r+1)^0,c
 12717  000806  0E00               	movlw	0
 12718  000808  6E12               	movwf	(strncmp@n+1)^0,c
 12719  00080A  0E02               	movlw	2
 12720  00080C  6E11               	movwf	strncmp@n^0,c
 12721  00080E  EC2E  F020         	call	_strncmp	;wreg free
 12722  000812  500D               	movf	?_strncmp^0,w,c
 12723  000814  100E               	iorwf	(?_strncmp+1)^0,w,c
 12724  000816  B4D8               	btfsc	status,2,c
 12725  000818  EF10  F004         	goto	u7351
 12726  00081C  EF12  F004         	goto	u7350
 12727  000820                     u7351:
 12728  000820  EF2D  F004         	goto	l5897
 12729  000824                     u7350:
 12730  000824  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12731  000828  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12732  00082C  CFDE F00D          	movff	postinc2,strncmp@_l
 12733  000830  CFDD F00E          	movff	postdec2,strncmp@_l+1
 12734  000834  0EEA               	movlw	low STR_69
 12735  000836  6E0F               	movwf	strncmp@_r^0,c
 12736  000838  0E7F               	movlw	high STR_69
 12737  00083A  6E10               	movwf	(strncmp@_r+1)^0,c
 12738  00083C  0E00               	movlw	0
 12739  00083E  6E12               	movwf	(strncmp@n+1)^0,c
 12740  000840  0E02               	movlw	2
 12741  000842  6E11               	movwf	strncmp@n^0,c
 12742  000844  EC2E  F020         	call	_strncmp	;wreg free
 12743  000848  500D               	movf	?_strncmp^0,w,c
 12744  00084A  100E               	iorwf	(?_strncmp+1)^0,w,c
 12745  00084C  A4D8               	btfss	status,2,c
 12746  00084E  EF2B  F004         	goto	u7361
 12747  000852  EF2D  F004         	goto	u7360
 12748  000856                     u7361:
 12749  000856  EF8B  F004         	goto	l5907
 12750  00085A                     u7360:
 12751  00085A                     l5897:
 12752                           
 12753                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1286: ;/opt/microchip/xc8/v2.
      +                          10/pic/sources/c99/common/doprnt.c: 1288:             c = (*fmt)[1];
 12754  00085A  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12755  00085E  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12756  000862  CFDE F051          	movff	postinc2,??_vfpfcnvrt
 12757  000866  CFDD F052          	movff	postdec2,??_vfpfcnvrt+1
 12758  00086A  0E01               	movlw	1
 12759  00086C  2651               	addwf	??_vfpfcnvrt^0,f,c
 12760  00086E  0E00               	movlw	0
 12761  000870  2252               	addwfc	(??_vfpfcnvrt+1)^0,f,c
 12762  000872  C051  FFF6         	movff	??_vfpfcnvrt,tblptrl
 12763  000876  C052  FFF7         	movff	??_vfpfcnvrt+1,tblptrh
 12764  00087A                     	if	0	;tblptru may be non-zero
 12765  00087A                     	endif
 12766  00087A                     	if	0	;tblptru may be non-zero
 12767  00087A                     	endif
 12768  00087A  0008               	tblrd		*
 12769  00087C  CFF5 F08E          	movff	tablat,vfpfcnvrt@c
 12770  000880                     
 12771                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1289:             *fmt += ((s
      +                          izeof("lx")/sizeof("lx"[0]))-1);
 12772  000880  0E02               	movlw	2
 12773  000882  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12774  000886  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12775  00088A  26DE               	addwf	postinc2,f,c
 12776  00088C  0E00               	movlw	0
 12777  00088E  22DD               	addwfc	postdec2,f,c
 12778  000890                     
 12779                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1290:             llu = (unsi
      +                          gned long long)(*(unsigned long *)__va_arg(*(unsigned long **)ap, (unsigned long)0));
 12780  000890  C04F  FFD9         	movff	vfpfcnvrt@ap,fsr2l
 12781  000894  C050  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
 12782  000898  CFDF F051          	movff	indf2,??_vfpfcnvrt
 12783  00089C  0E04               	movlw	4
 12784  00089E  26DE               	addwf	postinc2,f,c
 12785  0008A0  CFDF F052          	movff	indf2,??_vfpfcnvrt+1
 12786  0008A4  0E00               	movlw	0
 12787  0008A6  22DD               	addwfc	postdec2,f,c
 12788  0008A8  C051  FFD9         	movff	??_vfpfcnvrt,fsr2l
 12789  0008AC  C052  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
 12790  0008B0  CFDE F053          	movff	postinc2,??_vfpfcnvrt+2
 12791  0008B4  CFDE F054          	movff	postinc2,??_vfpfcnvrt+3
 12792  0008B8  CFDE F055          	movff	postinc2,??_vfpfcnvrt+4
 12793  0008BC  CFDE F056          	movff	postinc2,??_vfpfcnvrt+5
 12794  0008C0  5053               	movf	(??_vfpfcnvrt+2)^0,w,c
 12795  0008C2  0100               	movlb	0	; () banked
 12796  0008C4  6F8F               	movwf	vfpfcnvrt@llu& (0+255),b
 12797  0008C6  5054               	movf	(??_vfpfcnvrt+3)^0,w,c
 12798  0008C8  6F90               	movwf	(vfpfcnvrt@llu+1)& (0+255),b
 12799  0008CA  5055               	movf	(??_vfpfcnvrt+4)^0,w,c
 12800  0008CC  6F91               	movwf	(vfpfcnvrt@llu+2)& (0+255),b
 12801  0008CE  5056               	movf	(??_vfpfcnvrt+5)^0,w,c
 12802  0008D0  6F92               	movwf	(vfpfcnvrt@llu+3)& (0+255),b
 12803  0008D2  6B93               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
 12804  0008D4  6B94               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
 12805  0008D6  6B95               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
 12806  0008D8  6B96               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
 12807  0008DA                     
 12808                           ; BSR set to: 0
 12809                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1292:             return xtoa
      +                          (fp, llu, c);
 12810  0008DA  C04B  F024         	movff	vfpfcnvrt@fp,xtoa@fp
 12811  0008DE  C04C  F025         	movff	vfpfcnvrt@fp+1,xtoa@fp+1
 12812  0008E2  C08F  F026         	movff	vfpfcnvrt@llu,xtoa@d
 12813  0008E6  C090  F027         	movff	vfpfcnvrt@llu+1,xtoa@d+1
 12814  0008EA  C091  F028         	movff	vfpfcnvrt@llu+2,xtoa@d+2
 12815  0008EE  C092  F029         	movff	vfpfcnvrt@llu+3,xtoa@d+3
 12816  0008F2  C093  F02A         	movff	vfpfcnvrt@llu+4,xtoa@d+4
 12817  0008F6  C094  F02B         	movff	vfpfcnvrt@llu+5,xtoa@d+5
 12818  0008FA  C095  F02C         	movff	vfpfcnvrt@llu+6,xtoa@d+6
 12819  0008FE  C096  F02D         	movff	vfpfcnvrt@llu+7,xtoa@d+7
 12820  000902  C08E  F02E         	movff	vfpfcnvrt@c,xtoa@x
 12821  000906  EC0E  F013         	call	_xtoa	;wreg free
 12822  00090A  C024  F04B         	movff	?_xtoa,?_vfpfcnvrt
 12823  00090E  C025  F04C         	movff	?_xtoa+1,?_vfpfcnvrt+1
 12824  000912  EFDC  F004         	goto	l802
 12825  000916                     l5907:
 12826                           
 12827                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1350:         if ((*fmt)[0] =
      +                          = '%') {
 12828  000916  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12829  00091A  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12830  00091E  CFDE FFF6          	movff	postinc2,tblptrl
 12831  000922  CFDD FFF7          	movff	postdec2,tblptrh
 12832  000926                     	if	0	;tblptru may be non-zero
 12833  000926                     	endif
 12834  000926                     	if	0	;tblptru may be non-zero
 12835  000926                     	endif
 12836  000926  0008               	tblrd		*
 12837  000928  50F5               	movf	tablat,w,c
 12838  00092A  0A25               	xorlw	37
 12839  00092C  A4D8               	btfss	status,2,c
 12840  00092E  EF9B  F004         	goto	u7371
 12841  000932  EF9D  F004         	goto	u7370
 12842  000936                     u7371:
 12843  000936  EFB4  F004         	goto	l5917
 12844  00093A                     u7370:
 12845  00093A                     
 12846                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1351:             ++*fmt;
 12847  00093A  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12848  00093E  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12849  000942  2ADE               	incf	postinc2,f,c
 12850  000944  0E00               	movlw	0
 12851  000946  22DD               	addwfc	postdec2,f,c
 12852  000948                     
 12853                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1352:             fputc((int)
      +                          '%', fp);
 12854  000948  0E00               	movlw	0
 12855  00094A  6E0F               	movwf	(fputc@c+1)^0,c
 12856  00094C  0E25               	movlw	37
 12857  00094E  6E0E               	movwf	fputc@c^0,c
 12858  000950  C04B  F010         	movff	vfpfcnvrt@fp,fputc@fp
 12859  000954  C04C  F011         	movff	vfpfcnvrt@fp+1,fputc@fp+1
 12860  000958  EC13  F02C         	call	_fputc	;wreg free
 12861  00095C                     l5913:
 12862                           
 12863                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1353:             return 1;
 12864  00095C  0E00               	movlw	0
 12865  00095E  6E4C               	movwf	(?_vfpfcnvrt+1)^0,c
 12866  000960  0E01               	movlw	1
 12867  000962  6E4B               	movwf	?_vfpfcnvrt^0,c
 12868  000964  EFDC  F004         	goto	l802
 12869  000968                     l5917:
 12870                           
 12871                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1357:         ++*fmt;
 12872  000968  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12873  00096C  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12874  000970  2ADE               	incf	postinc2,f,c
 12875  000972  0E00               	movlw	0
 12876  000974  22DD               	addwfc	postdec2,f,c
 12877  000976                     
 12878                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1358:         return 0;
 12879  000976  0E00               	movlw	0
 12880  000978  6E4C               	movwf	(?_vfpfcnvrt+1)^0,c
 12881  00097A  0E00               	movlw	0
 12882  00097C  6E4B               	movwf	?_vfpfcnvrt^0,c
 12883  00097E  EFDC  F004         	goto	l802
 12884  000982                     l5923:
 12885                           
 12886                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1362:     fputc((int)(*fmt)[0
      +                          ], fp);
 12887  000982  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12888  000986  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12889  00098A  CFDE FFF6          	movff	postinc2,tblptrl
 12890  00098E  CFDD FFF7          	movff	postdec2,tblptrh
 12891  000992                     	if	0	;tblptru may be non-zero
 12892  000992                     	endif
 12893  000992                     	if	0	;tblptru may be non-zero
 12894  000992                     	endif
 12895  000992  0008               	tblrd		*
 12896  000994  50F5               	movf	tablat,w,c
 12897  000996  6E0E               	movwf	fputc@c^0,c
 12898  000998  6A0F               	clrf	(fputc@c+1)^0,c
 12899  00099A  C04B  F010         	movff	vfpfcnvrt@fp,fputc@fp
 12900  00099E  C04C  F011         	movff	vfpfcnvrt@fp+1,fputc@fp+1
 12901  0009A2  EC13  F02C         	call	_fputc	;wreg free
 12902  0009A6                     
 12903                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1363:     ++*fmt;
 12904  0009A6  C04D  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
 12905  0009AA  C04E  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
 12906  0009AE  2ADE               	incf	postinc2,f,c
 12907  0009B0  0E00               	movlw	0
 12908  0009B2  22DD               	addwfc	postdec2,f,c
 12909  0009B4  EFAE  F004         	goto	l5913
 12910  0009B8                     l802:
 12911  0009B8  0012               	return		;funcret
 12912  0009BA                     __end_of_vfpfcnvrt:
 12913                           	opt callstack 0
 12914                           
 12915 ;; *************** function _xtoa *****************
 12916 ;; Defined at:
 12917 ;;		line 623 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c"
 12918 ;; Parameters:    Size  Location     Type
 12919 ;;  fp              2   35[COMRAM] PTR struct _IO_FILE
 12920 ;;		 -> NULL(0), 
 12921 ;;  d               8   37[COMRAM] unsigned long long 
 12922 ;;  x               1   45[COMRAM] unsigned char 
 12923 ;; Auto vars:     Size  Location     Type
 12924 ;;  n               8   62[COMRAM] unsigned long long 
 12925 ;;  c               2   72[COMRAM] int 
 12926 ;;  i               2   70[COMRAM] int 
 12927 ;;  w               2   60[COMRAM] int 
 12928 ;;  p               2   58[COMRAM] int 
 12929 ;; Return value:  Size  Location     Type
 12930 ;;                  2   35[COMRAM] int 
 12931 ;; Registers used:
 12932 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12933 ;; Tracked objects:
 12934 ;;		On entry : 0/0
 12935 ;;		On exit  : 0/0
 12936 ;;		Unchanged: 0/0
 12937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12938 ;;      Params:        11       0       0       0       0       0       0
 12939 ;;      Locals:        20       0       0       0       0       0       0
 12940 ;;      Temps:          8       0       0       0       0       0       0
 12941 ;;      Totals:        39       0       0       0       0       0       0
 12942 ;;Total ram usage:       39 bytes
 12943 ;; Hardware stack levels used:    1
 12944 ;; Hardware stack levels required when called:    6
 12945 ;; This function calls:
 12946 ;;		_isalpha
 12947 ;;		_isupper
 12948 ;;		_pad
 12949 ;;		_toupper
 12950 ;; This function is called by:
 12951 ;;		_vfpfcnvrt
 12952 ;; This function uses a non-reentrant model
 12953 ;;
 12954                           
 12955                           	psect	text36
 12956  00261C                     __ptext36:
 12957                           	opt callstack 0
 12958  00261C                     _xtoa:
 12959                           	opt callstack 19
 12960  00261C                     
 12961                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 623: static int xtoa(FILE *fp
      +                          , unsigned long long d, char x);/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c
      +                          : 624: {;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 625:     int c, i, p,
      +                           w;;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 626:     unsigned long lon
      +                          g n;;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 629:     if (!(prec < 0))
      +                           {
 12962  00261C  BE6A               	btfsc	(_prec+1)^0,7,c
 12963  00261E  EF13  F013         	goto	u6921
 12964  002622  EF15  F013         	goto	u6920
 12965  002626                     u6921:
 12966  002626  EF16  F013         	goto	l5657
 12967  00262A                     u6920:
 12968  00262A                     
 12969                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 630:         flags &= ~(1 << 
      +                          1);
 12970  00262A  926B               	bcf	_flags^0,1,c
 12971  00262C                     l5657:
 12972                           
 12973                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 632:     p = (0 < prec) ? pre
      +                          c : 1;
 12974  00262C  BE6A               	btfsc	(_prec+1)^0,7,c
 12975  00262E  EF23  F013         	goto	u6930
 12976  002632  506A               	movf	(_prec+1)^0,w,c
 12977  002634  E106               	bnz	u6931
 12978  002636  0469               	decf	_prec^0,w,c
 12979  002638  B0D8               	btfsc	status,0,c
 12980  00263A  EF21  F013         	goto	u6931
 12981  00263E  EF23  F013         	goto	u6930
 12982  002642                     u6931:
 12983  002642  EF29  F013         	goto	l750
 12984  002646                     u6930:
 12985  002646  0E00               	movlw	0
 12986  002648  6E3C               	movwf	(xtoa@p+1)^0,c
 12987  00264A  0E01               	movlw	1
 12988  00264C  6E3B               	movwf	xtoa@p^0,c
 12989  00264E  EF2D  F013         	goto	l752
 12990  002652                     l750:
 12991  002652  C069  F03B         	movff	_prec,xtoa@p
 12992  002656  C06A  F03C         	movff	_prec+1,xtoa@p+1
 12993  00265A                     l752:
 12994                           
 12995                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 633:     w = width;
 12996  00265A  C067  F03D         	movff	_width,xtoa@w
 12997  00265E  C068  F03E         	movff	_width+1,xtoa@w+1
 12998                           
 12999                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 634:     if (flags & (1 << 4)
      +                          ) {
 13000  002662  A86B               	btfss	_flags^0,4,c
 13001  002664  EF36  F013         	goto	u6941
 13002  002668  EF38  F013         	goto	u6940
 13003  00266C                     u6941:
 13004  00266C  EF3C  F013         	goto	l5663
 13005  002670                     u6940:
 13006  002670                     
 13007                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 635:         w -= 2;
 13008  002670  0EFE               	movlw	254
 13009  002672  263D               	addwf	xtoa@w^0,f,c
 13010  002674  0EFF               	movlw	255
 13011  002676  223E               	addwfc	(xtoa@w+1)^0,f,c
 13012  002678                     l5663:
 13013                           
 13014                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 639:     n = d;
 13015  002678  C026  F03F         	movff	xtoa@d,xtoa@n
 13016  00267C  C027  F040         	movff	xtoa@d+1,xtoa@n+1
 13017  002680  C028  F041         	movff	xtoa@d+2,xtoa@n+2
 13018  002684  C029  F042         	movff	xtoa@d+3,xtoa@n+3
 13019  002688  C02A  F043         	movff	xtoa@d+4,xtoa@n+4
 13020  00268C  C02B  F044         	movff	xtoa@d+5,xtoa@n+5
 13021  002690  C02C  F045         	movff	xtoa@d+6,xtoa@n+6
 13022  002694  C02D  F046         	movff	xtoa@d+7,xtoa@n+7
 13023  002698                     
 13024                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 640:     i = sizeof(dbuf) - 1
      +                          ;
 13025  002698  0E00               	movlw	0
 13026  00269A  6E48               	movwf	(xtoa@i+1)^0,c
 13027  00269C  0E1F               	movlw	31
 13028  00269E  6E47               	movwf	xtoa@i^0,c
 13029  0026A0                     
 13030                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 641:     dbuf[i] = '\0';
 13031  0026A0  0E00               	movlw	0
 13032  0026A2  0101               	movlb	1	; () banked
 13033  0026A4  6FDC               	movwf	(_dbuf+31)& (0+255),b
 13034                           
 13035                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 642:     while (!(i < 2) && (
      +                          n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 13036  0026A6  EF08  F014         	goto	l5699
 13037  0026AA                     l5669:
 13038                           
 13039                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 643:         --i;
 13040  0026AA  0647               	decf	xtoa@i^0,f,c
 13041  0026AC  A0D8               	btfss	status,0,c
 13042  0026AE  0648               	decf	(xtoa@i+1)^0,f,c
 13043  0026B0                     
 13044                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 644:         c = n & 0x0f;
 13045  0026B0  0E0F               	movlw	15
 13046  0026B2  143F               	andwf	xtoa@n^0,w,c
 13047  0026B4  6E49               	movwf	xtoa@c^0,c
 13048  0026B6  6A4A               	clrf	(xtoa@c+1)^0,c
 13049  0026B8                     
 13050                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 645:         c = (c < 10) ? '
      +                          0' + c : 'a' + (c - 10);
 13051  0026B8  BE4A               	btfsc	(xtoa@c+1)^0,7,c
 13052  0026BA  EF68  F013         	goto	u6951
 13053  0026BE  504A               	movf	(xtoa@c+1)^0,w,c
 13054  0026C0  E109               	bnz	u6950
 13055  0026C2  0E0A               	movlw	10
 13056  0026C4  5C49               	subwf	xtoa@c^0,w,c
 13057  0026C6  A0D8               	btfss	status,0,c
 13058  0026C8  EF68  F013         	goto	u6951
 13059  0026CC  EF6A  F013         	goto	u6950
 13060  0026D0                     u6951:
 13061  0026D0  EF72  F013         	goto	l5677
 13062  0026D4                     u6950:
 13063  0026D4  0E57               	movlw	87
 13064  0026D6  2449               	addwf	xtoa@c^0,w,c
 13065  0026D8  6E49               	movwf	xtoa@c^0,c
 13066  0026DA  0E00               	movlw	0
 13067  0026DC  204A               	addwfc	(xtoa@c+1)^0,w,c
 13068  0026DE  6E4A               	movwf	(xtoa@c+1)^0,c
 13069  0026E0  EF78  F013         	goto	l759
 13070  0026E4                     l5677:
 13071  0026E4  0E30               	movlw	48
 13072  0026E6  2449               	addwf	xtoa@c^0,w,c
 13073  0026E8  6E49               	movwf	xtoa@c^0,c
 13074  0026EA  0E00               	movlw	0
 13075  0026EC  204A               	addwfc	(xtoa@c+1)^0,w,c
 13076  0026EE  6E4A               	movwf	(xtoa@c+1)^0,c
 13077  0026F0                     l759:
 13078  0026F0  0EBF               	movlw	191
 13079  0026F2  6E2F               	movwf	??_xtoa^0,c
 13080  0026F4  0EFF               	movlw	255
 13081  0026F6  6E30               	movwf	(??_xtoa+1)^0,c
 13082  0026F8  502E               	movf	xtoa@x^0,w,c
 13083  0026FA  6E31               	movwf	(??_xtoa+2)^0,c
 13084  0026FC  6A32               	clrf	(??_xtoa+3)^0,c
 13085  0026FE  502F               	movf	??_xtoa^0,w,c
 13086  002700  2631               	addwf	(??_xtoa+2)^0,f,c
 13087  002702  5030               	movf	(??_xtoa+1)^0,w,c
 13088  002704  2232               	addwfc	(??_xtoa+3)^0,f,c
 13089  002706  5032               	movf	(??_xtoa+3)^0,w,c
 13090  002708  E10A               	bnz	u6960
 13091  00270A  0E1A               	movlw	26
 13092  00270C  5C31               	subwf	(??_xtoa+2)^0,w,c
 13093  00270E  A0D8               	btfss	status,0,c
 13094  002710  EF8C  F013         	goto	u6961
 13095  002714  EF8F  F013         	goto	u6960
 13096  002718                     u6961:
 13097  002718  0E01               	movlw	1
 13098  00271A  EF90  F013         	goto	u6970
 13099  00271E                     u6960:
 13100  00271E  0E00               	movlw	0
 13101  002720                     u6970:
 13102  002720  6E37               	movwf	_xtoa$2351^0,c
 13103  002722  6A38               	clrf	(_xtoa$2351+1)^0,c
 13104  002724  5037               	movf	_xtoa$2351^0,w,c
 13105  002726  1038               	iorwf	(_xtoa$2351+1)^0,w,c
 13106  002728  B4D8               	btfsc	status,2,c
 13107  00272A  EF99  F013         	goto	u6981
 13108  00272E  EF9B  F013         	goto	u6980
 13109  002732                     u6981:
 13110  002732  EFCB  F013         	goto	l5691
 13111  002736                     u6980:
 13112  002736  0E9F               	movlw	159
 13113  002738  6E2F               	movwf	??_xtoa^0,c
 13114  00273A  0EFF               	movlw	255
 13115  00273C  6E30               	movwf	(??_xtoa+1)^0,c
 13116  00273E  0E20               	movlw	32
 13117  002740  1049               	iorwf	xtoa@c^0,w,c
 13118  002742  6E31               	movwf	(??_xtoa+2)^0,c
 13119  002744  0E00               	movlw	0
 13120  002746  104A               	iorwf	(xtoa@c+1)^0,w,c
 13121  002748  6E32               	movwf	(??_xtoa+3)^0,c
 13122  00274A  502F               	movf	??_xtoa^0,w,c
 13123  00274C  2631               	addwf	(??_xtoa+2)^0,f,c
 13124  00274E  5030               	movf	(??_xtoa+1)^0,w,c
 13125  002750  2232               	addwfc	(??_xtoa+3)^0,f,c
 13126  002752  5032               	movf	(??_xtoa+3)^0,w,c
 13127  002754  E10A               	bnz	u6990
 13128  002756  0E1A               	movlw	26
 13129  002758  5C31               	subwf	(??_xtoa+2)^0,w,c
 13130  00275A  A0D8               	btfss	status,0,c
 13131  00275C  EFB2  F013         	goto	u6991
 13132  002760  EFB5  F013         	goto	u6990
 13133  002764                     u6991:
 13134  002764  0E01               	movlw	1
 13135  002766  EFB6  F013         	goto	u7000
 13136  00276A                     u6990:
 13137  00276A  0E00               	movlw	0
 13138  00276C                     u7000:
 13139  00276C  6E39               	movwf	_xtoa$2352^0,c
 13140  00276E  6A3A               	clrf	(_xtoa$2352+1)^0,c
 13141  002770  5039               	movf	_xtoa$2352^0,w,c
 13142  002772  103A               	iorwf	(_xtoa$2352+1)^0,w,c
 13143  002774  B4D8               	btfsc	status,2,c
 13144  002776  EFBF  F013         	goto	u7011
 13145  00277A  EFC1  F013         	goto	u7010
 13146  00277E                     u7011:
 13147  00277E  EFCB  F013         	goto	l5691
 13148  002782                     u7010:
 13149  002782                     
 13150                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 647:             c = toupper(
      +                          c);
 13151  002782  C049  F013         	movff	xtoa@c,toupper@c
 13152  002786  C04A  F014         	movff	xtoa@c+1,toupper@c+1
 13153  00278A  EC74  F029         	call	_toupper	;wreg free
 13154  00278E  C013  F049         	movff	?_toupper,xtoa@c
 13155  002792  C014  F04A         	movff	?_toupper+1,xtoa@c+1
 13156  002796                     l5691:
 13157                           
 13158                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 649:         dbuf[i] = (char)
      +                          c;
 13159  002796  0EBD               	movlw	low _dbuf
 13160  002798  2447               	addwf	xtoa@i^0,w,c
 13161  00279A  6ED9               	movwf	fsr2l,c
 13162  00279C  0E01               	movlw	high _dbuf
 13163  00279E  2048               	addwfc	(xtoa@i+1)^0,w,c
 13164  0027A0  6EDA               	movwf	fsr2h,c
 13165  0027A2  C049  FFDF         	movff	xtoa@c,indf2
 13166  0027A6                     
 13167                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 650:         --p;
 13168  0027A6  063B               	decf	xtoa@p^0,f,c
 13169  0027A8  A0D8               	btfss	status,0,c
 13170  0027AA  063C               	decf	(xtoa@p+1)^0,f,c
 13171  0027AC                     
 13172                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 651:         --w;
 13173  0027AC  063D               	decf	xtoa@w^0,f,c
 13174  0027AE  A0D8               	btfss	status,0,c
 13175  0027B0  063E               	decf	(xtoa@w+1)^0,f,c
 13176  0027B2                     
 13177                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 652:         n = n >> 4;
 13178  0027B2  C03F  F02F         	movff	xtoa@n,??_xtoa
 13179  0027B6  C040  F030         	movff	xtoa@n+1,??_xtoa+1
 13180  0027BA  C041  F031         	movff	xtoa@n+2,??_xtoa+2
 13181  0027BE  C042  F032         	movff	xtoa@n+3,??_xtoa+3
 13182  0027C2  C043  F033         	movff	xtoa@n+4,??_xtoa+4
 13183  0027C6  C044  F034         	movff	xtoa@n+5,??_xtoa+5
 13184  0027CA  C045  F035         	movff	xtoa@n+6,??_xtoa+6
 13185  0027CE  C046  F036         	movff	xtoa@n+7,??_xtoa+7
 13186  0027D2  0E05               	movlw	5
 13187  0027D4  EFF5  F013         	goto	u7020
 13188  0027D8                     u7025:
 13189  0027D8  90D8               	bcf	status,0,c
 13190  0027DA  3236               	rrcf	(??_xtoa+7)^0,f,c
 13191  0027DC  3235               	rrcf	(??_xtoa+6)^0,f,c
 13192  0027DE  3234               	rrcf	(??_xtoa+5)^0,f,c
 13193  0027E0  3233               	rrcf	(??_xtoa+4)^0,f,c
 13194  0027E2  3232               	rrcf	(??_xtoa+3)^0,f,c
 13195  0027E4  3231               	rrcf	(??_xtoa+2)^0,f,c
 13196  0027E6  3230               	rrcf	(??_xtoa+1)^0,f,c
 13197  0027E8  322F               	rrcf	??_xtoa^0,f,c
 13198  0027EA                     u7020:
 13199  0027EA  2EE8               	decfsz	wreg,f,c
 13200  0027EC  EFEC  F013         	goto	u7025
 13201  0027F0  C02F  F03F         	movff	??_xtoa,xtoa@n
 13202  0027F4  C030  F040         	movff	??_xtoa+1,xtoa@n+1
 13203  0027F8  C031  F041         	movff	??_xtoa+2,xtoa@n+2
 13204  0027FC  C032  F042         	movff	??_xtoa+3,xtoa@n+3
 13205  002800  C033  F043         	movff	??_xtoa+4,xtoa@n+4
 13206  002804  C034  F044         	movff	??_xtoa+5,xtoa@n+5
 13207  002808  C035  F045         	movff	??_xtoa+6,xtoa@n+6
 13208  00280C  C036  F046         	movff	??_xtoa+7,xtoa@n+7
 13209  002810                     l5699:
 13210                           
 13211                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 642:     while (!(i < 2) && (
      +                          n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 13212  002810  BE48               	btfsc	(xtoa@i+1)^0,7,c
 13213  002812  EF14  F014         	goto	u7031
 13214  002816  5048               	movf	(xtoa@i+1)^0,w,c
 13215  002818  E109               	bnz	u7030
 13216  00281A  0E02               	movlw	2
 13217  00281C  5C47               	subwf	xtoa@i^0,w,c
 13218  00281E  A0D8               	btfss	status,0,c
 13219  002820  EF14  F014         	goto	u7031
 13220  002824  EF16  F014         	goto	u7030
 13221  002828                     u7031:
 13222  002828  EF46  F014         	goto	l773
 13223  00282C                     u7030:
 13224  00282C  503F               	movf	xtoa@n^0,w,c
 13225  00282E  1040               	iorwf	(xtoa@n+1)^0,w,c
 13226  002830  1041               	iorwf	(xtoa@n+2)^0,w,c
 13227  002832  1042               	iorwf	(xtoa@n+3)^0,w,c
 13228  002834  1043               	iorwf	(xtoa@n+4)^0,w,c
 13229  002836  1044               	iorwf	(xtoa@n+5)^0,w,c
 13230  002838  1045               	iorwf	(xtoa@n+6)^0,w,c
 13231  00283A  1046               	iorwf	(xtoa@n+7)^0,w,c
 13232  00283C  A4D8               	btfss	status,2,c
 13233  00283E  EF23  F014         	goto	u7041
 13234  002842  EF25  F014         	goto	u7040
 13235  002846                     u7041:
 13236  002846  EF55  F013         	goto	l5669
 13237  00284A                     u7040:
 13238  00284A  BE3C               	btfsc	(xtoa@p+1)^0,7,c
 13239  00284C  EF32  F014         	goto	u7050
 13240  002850  503C               	movf	(xtoa@p+1)^0,w,c
 13241  002852  E106               	bnz	u7051
 13242  002854  043B               	decf	xtoa@p^0,w,c
 13243  002856  B0D8               	btfsc	status,0,c
 13244  002858  EF30  F014         	goto	u7051
 13245  00285C  EF32  F014         	goto	u7050
 13246  002860                     u7051:
 13247  002860  EF55  F013         	goto	l5669
 13248  002864                     u7050:
 13249  002864  BE3E               	btfsc	(xtoa@w+1)^0,7,c
 13250  002866  EF3D  F014         	goto	u7061
 13251  00286A  503E               	movf	(xtoa@w+1)^0,w,c
 13252  00286C  E108               	bnz	u7060
 13253  00286E  043D               	decf	xtoa@w^0,w,c
 13254  002870  A0D8               	btfss	status,0,c
 13255  002872  EF3D  F014         	goto	u7061
 13256  002876  EF3F  F014         	goto	u7060
 13257  00287A                     u7061:
 13258  00287A  EF46  F014         	goto	l773
 13259  00287E                     u7060:
 13260  00287E  B26B               	btfsc	_flags^0,1,c
 13261  002880  EF44  F014         	goto	u7071
 13262  002884  EF46  F014         	goto	u7070
 13263  002888                     u7071:
 13264  002888  EF55  F013         	goto	l5669
 13265  00288C                     u7070:
 13266  00288C                     l773:
 13267                           
 13268                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 656:     if (flags & (1 << 4)
      +                          ) {
 13269  00288C  A86B               	btfss	_flags^0,4,c
 13270  00288E  EF4B  F014         	goto	u7081
 13271  002892  EF4D  F014         	goto	u7080
 13272  002896                     u7081:
 13273  002896  EF63  F014         	goto	l5715
 13274  00289A                     u7080:
 13275  00289A                     
 13276                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 657:         --i;
 13277  00289A  0647               	decf	xtoa@i^0,f,c
 13278  00289C  A0D8               	btfss	status,0,c
 13279  00289E  0648               	decf	(xtoa@i+1)^0,f,c
 13280  0028A0                     
 13281                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 658:         dbuf[i] = x;
 13282  0028A0  0EBD               	movlw	low _dbuf
 13283  0028A2  2447               	addwf	xtoa@i^0,w,c
 13284  0028A4  6ED9               	movwf	fsr2l,c
 13285  0028A6  0E01               	movlw	high _dbuf
 13286  0028A8  2048               	addwfc	(xtoa@i+1)^0,w,c
 13287  0028AA  6EDA               	movwf	fsr2h,c
 13288  0028AC  C02E  FFDF         	movff	xtoa@x,indf2
 13289  0028B0                     
 13290                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 659:         --i;
 13291  0028B0  0647               	decf	xtoa@i^0,f,c
 13292  0028B2  A0D8               	btfss	status,0,c
 13293  0028B4  0648               	decf	(xtoa@i+1)^0,f,c
 13294                           
 13295                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 660:         dbuf[i] = '0';
 13296  0028B6  0EBD               	movlw	low _dbuf
 13297  0028B8  2447               	addwf	xtoa@i^0,w,c
 13298  0028BA  6ED9               	movwf	fsr2l,c
 13299  0028BC  0E01               	movlw	high _dbuf
 13300  0028BE  2048               	addwfc	(xtoa@i+1)^0,w,c
 13301  0028C0  6EDA               	movwf	fsr2h,c
 13302  0028C2  0E30               	movlw	48
 13303  0028C4  6EDF               	movwf	indf2,c
 13304  0028C6                     l5715:
 13305                           
 13306                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 664:     return pad(fp, &dbuf
      +                          [i], w);
 13307  0028C6  C024  F019         	movff	xtoa@fp,pad@fp
 13308  0028CA  C025  F01A         	movff	xtoa@fp+1,pad@fp+1
 13309  0028CE  0EBD               	movlw	low _dbuf
 13310  0028D0  2447               	addwf	xtoa@i^0,w,c
 13311  0028D2  6E1B               	movwf	pad@buf^0,c
 13312  0028D4  0E01               	movlw	high _dbuf
 13313  0028D6  2048               	addwfc	(xtoa@i+1)^0,w,c
 13314  0028D8  6E1C               	movwf	(pad@buf+1)^0,c
 13315  0028DA  C03D  F01D         	movff	xtoa@w,pad@p
 13316  0028DE  C03E  F01E         	movff	xtoa@w+1,pad@p+1
 13317  0028E2  ECCD  F023         	call	_pad	;wreg free
 13318  0028E6  C019  F024         	movff	?_pad,?_xtoa
 13319  0028EA  C01A  F025         	movff	?_pad+1,?_xtoa+1
 13320  0028EE  0012               	return		;funcret
 13321  0028F0                     __end_of_xtoa:
 13322                           	opt callstack 0
 13323                           
 13324 ;; *************** function _toupper *****************
 13325 ;; Defined at:
 13326 ;;		line 4 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/toupper.c"
 13327 ;; Parameters:    Size  Location     Type
 13328 ;;  c               2   18[COMRAM] int 
 13329 ;; Auto vars:     Size  Location     Type
 13330 ;;		None
 13331 ;; Return value:  Size  Location     Type
 13332 ;;                  2   18[COMRAM] int 
 13333 ;; Registers used:
 13334 ;;		wreg, status,2, status,0
 13335 ;; Tracked objects:
 13336 ;;		On entry : 0/0
 13337 ;;		On exit  : 0/0
 13338 ;;		Unchanged: 0/0
 13339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13340 ;;      Params:         2       0       0       0       0       0       0
 13341 ;;      Locals:         2       0       0       0       0       0       0
 13342 ;;      Temps:          4       0       0       0       0       0       0
 13343 ;;      Totals:         8       0       0       0       0       0       0
 13344 ;;Total ram usage:        8 bytes
 13345 ;; Hardware stack levels used:    1
 13346 ;; Hardware stack levels required when called:    3
 13347 ;; This function calls:
 13348 ;;		_islower
 13349 ;; This function is called by:
 13350 ;;		_xtoa
 13351 ;; This function uses a non-reentrant model
 13352 ;;
 13353                           
 13354                           	psect	text37
 13355  0052E8                     __ptext37:
 13356                           	opt callstack 0
 13357  0052E8                     _toupper:
 13358                           	opt callstack 21
 13359  0052E8  0E9F               	movlw	159
 13360  0052EA  6E15               	movwf	??_toupper^0,c
 13361  0052EC  0EFF               	movlw	255
 13362  0052EE  6E16               	movwf	(??_toupper+1)^0,c
 13363  0052F0  C013  F017         	movff	toupper@c,??_toupper+2
 13364  0052F4  C014  F018         	movff	toupper@c+1,??_toupper+3
 13365  0052F8  5015               	movf	??_toupper^0,w,c
 13366  0052FA  2617               	addwf	(??_toupper+2)^0,f,c
 13367  0052FC  5016               	movf	(??_toupper+1)^0,w,c
 13368  0052FE  2218               	addwfc	(??_toupper+3)^0,f,c
 13369  005300  5018               	movf	(??_toupper+3)^0,w,c
 13370  005302  E10A               	bnz	u6250
 13371  005304  0E1A               	movlw	26
 13372  005306  5C17               	subwf	(??_toupper+2)^0,w,c
 13373  005308  A0D8               	btfss	status,0,c
 13374  00530A  EF89  F029         	goto	u6251
 13375  00530E  EF8C  F029         	goto	u6250
 13376  005312                     u6251:
 13377  005312  0E01               	movlw	1
 13378  005314  EF8D  F029         	goto	u6260
 13379  005318                     u6250:
 13380  005318  0E00               	movlw	0
 13381  00531A                     u6260:
 13382  00531A  6E19               	movwf	_toupper$2949^0,c
 13383  00531C  6A1A               	clrf	(_toupper$2949+1)^0,c
 13384  00531E  5019               	movf	_toupper$2949^0,w,c
 13385  005320  101A               	iorwf	(_toupper$2949+1)^0,w,c
 13386  005322  B4D8               	btfsc	status,2,c
 13387  005324  EF96  F029         	goto	u6271
 13388  005328  EF98  F029         	goto	u6270
 13389  00532C                     u6271:
 13390  00532C  EF9E  F029         	goto	l1613
 13391  005330                     u6270:
 13392  005330  0E5F               	movlw	95
 13393  005332  1413               	andwf	toupper@c^0,w,c
 13394  005334  6E13               	movwf	?_toupper^0,c
 13395  005336  6A14               	clrf	(?_toupper+1)^0,c
 13396  005338  EFA2  F029         	goto	l1618
 13397  00533C                     l1613:
 13398  00533C  C013  F013         	movff	toupper@c,?_toupper
 13399  005340  C014  F014         	movff	toupper@c+1,?_toupper+1
 13400  005344                     l1618:
 13401  005344  0012               	return		;funcret
 13402  005346                     __end_of_toupper:
 13403                           	opt callstack 0
 13404                           
 13405 ;; *************** function _islower *****************
 13406 ;; Defined at:
 13407 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/islower.c"
 13408 ;; Parameters:    Size  Location     Type
 13409 ;;  c               2   12[COMRAM] int 
 13410 ;; Auto vars:     Size  Location     Type
 13411 ;;		None
 13412 ;; Return value:  Size  Location     Type
 13413 ;;                  2   12[COMRAM] int 
 13414 ;; Registers used:
 13415 ;;		wreg, status,2, status,0
 13416 ;; Tracked objects:
 13417 ;;		On entry : 0/0
 13418 ;;		On exit  : 0/0
 13419 ;;		Unchanged: 0/0
 13420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13421 ;;      Params:         2       0       0       0       0       0       0
 13422 ;;      Locals:         0       0       0       0       0       0       0
 13423 ;;      Temps:          4       0       0       0       0       0       0
 13424 ;;      Totals:         6       0       0       0       0       0       0
 13425 ;;Total ram usage:        6 bytes
 13426 ;; Hardware stack levels used:    1
 13427 ;; Hardware stack levels required when called:    2
 13428 ;; This function calls:
 13429 ;;		Nothing
 13430 ;; This function is called by:
 13431 ;;		_toupper
 13432 ;; This function uses a non-reentrant model
 13433 ;;
 13434                           
 13435                           	psect	text38
 13436  005756                     __ptext38:
 13437                           	opt callstack 0
 13438  005756                     _islower:
 13439                           	opt callstack 21
 13440  005756  0E9F               	movlw	159
 13441  005758  6E0F               	movwf	??_islower^0,c
 13442  00575A  0EFF               	movlw	255
 13443  00575C  6E10               	movwf	(??_islower+1)^0,c
 13444  00575E  C00D  F011         	movff	islower@c,??_islower+2
 13445  005762  C00E  F012         	movff	islower@c+1,??_islower+3
 13446  005766  500F               	movf	??_islower^0,w,c
 13447  005768  2611               	addwf	(??_islower+2)^0,f,c
 13448  00576A  5010               	movf	(??_islower+1)^0,w,c
 13449  00576C  2212               	addwfc	(??_islower+3)^0,f,c
 13450  00576E  5012               	movf	(??_islower+3)^0,w,c
 13451  005770  E10A               	bnz	u6140
 13452  005772  0E1A               	movlw	26
 13453  005774  5C11               	subwf	(??_islower+2)^0,w,c
 13454  005776  A0D8               	btfss	status,0,c
 13455  005778  EFC0  F02B         	goto	u6141
 13456  00577C  EFC3  F02B         	goto	u6140
 13457  005780                     u6141:
 13458  005780  0E01               	movlw	1
 13459  005782  EFC4  F02B         	goto	u6150
 13460  005786                     u6140:
 13461  005786  0E00               	movlw	0
 13462  005788                     u6150:
 13463  005788  6E0D               	movwf	?_islower^0,c
 13464  00578A  6A0E               	clrf	(?_islower+1)^0,c
 13465  00578C  0012               	return		;funcret
 13466  00578E                     __end_of_islower:
 13467                           	opt callstack 0
 13468                           
 13469 ;; *************** function _isupper *****************
 13470 ;; Defined at:
 13471 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/isupper.c"
 13472 ;; Parameters:    Size  Location     Type
 13473 ;;  c               2   12[COMRAM] int 
 13474 ;; Auto vars:     Size  Location     Type
 13475 ;;		None
 13476 ;; Return value:  Size  Location     Type
 13477 ;;                  2   12[COMRAM] int 
 13478 ;; Registers used:
 13479 ;;		wreg, status,2, status,0
 13480 ;; Tracked objects:
 13481 ;;		On entry : 0/0
 13482 ;;		On exit  : 0/0
 13483 ;;		Unchanged: 0/0
 13484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13485 ;;      Params:         2       0       0       0       0       0       0
 13486 ;;      Locals:         0       0       0       0       0       0       0
 13487 ;;      Temps:          4       0       0       0       0       0       0
 13488 ;;      Totals:         6       0       0       0       0       0       0
 13489 ;;Total ram usage:        6 bytes
 13490 ;; Hardware stack levels used:    1
 13491 ;; Hardware stack levels required when called:    2
 13492 ;; This function calls:
 13493 ;;		Nothing
 13494 ;; This function is called by:
 13495 ;;		_xtoa
 13496 ;; This function uses a non-reentrant model
 13497 ;;
 13498                           
 13499                           	psect	text39
 13500  00578E                     __ptext39:
 13501                           	opt callstack 0
 13502  00578E                     _isupper:
 13503                           	opt callstack 22
 13504  00578E  0EBF               	movlw	191
 13505  005790  6E0F               	movwf	??_isupper^0,c
 13506  005792  0EFF               	movlw	255
 13507  005794  6E10               	movwf	(??_isupper+1)^0,c
 13508  005796  C00D  F011         	movff	isupper@c,??_isupper+2
 13509  00579A  C00E  F012         	movff	isupper@c+1,??_isupper+3
 13510  00579E  500F               	movf	??_isupper^0,w,c
 13511  0057A0  2611               	addwf	(??_isupper+2)^0,f,c
 13512  0057A2  5010               	movf	(??_isupper+1)^0,w,c
 13513  0057A4  2212               	addwfc	(??_isupper+3)^0,f,c
 13514  0057A6  5012               	movf	(??_isupper+3)^0,w,c
 13515  0057A8  E10A               	bnz	u6210
 13516  0057AA  0E1A               	movlw	26
 13517  0057AC  5C11               	subwf	(??_isupper+2)^0,w,c
 13518  0057AE  A0D8               	btfss	status,0,c
 13519  0057B0  EFDC  F02B         	goto	u6211
 13520  0057B4  EFDF  F02B         	goto	u6210
 13521  0057B8                     u6211:
 13522  0057B8  0E01               	movlw	1
 13523  0057BA  EFE0  F02B         	goto	u6220
 13524  0057BE                     u6210:
 13525  0057BE  0E00               	movlw	0
 13526  0057C0                     u6220:
 13527  0057C0  6E0D               	movwf	?_isupper^0,c
 13528  0057C2  6A0E               	clrf	(?_isupper+1)^0,c
 13529  0057C4  0012               	return		;funcret
 13530  0057C6                     __end_of_isupper:
 13531                           	opt callstack 0
 13532                           
 13533 ;; *************** function _isalpha *****************
 13534 ;; Defined at:
 13535 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/isalpha.c"
 13536 ;; Parameters:    Size  Location     Type
 13537 ;;  c               2   12[COMRAM] int 
 13538 ;; Auto vars:     Size  Location     Type
 13539 ;;		None
 13540 ;; Return value:  Size  Location     Type
 13541 ;;                  2   12[COMRAM] int 
 13542 ;; Registers used:
 13543 ;;		wreg, status,2, status,0
 13544 ;; Tracked objects:
 13545 ;;		On entry : 0/0
 13546 ;;		On exit  : 0/0
 13547 ;;		Unchanged: 0/0
 13548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13549 ;;      Params:         2       0       0       0       0       0       0
 13550 ;;      Locals:         0       0       0       0       0       0       0
 13551 ;;      Temps:          4       0       0       0       0       0       0
 13552 ;;      Totals:         6       0       0       0       0       0       0
 13553 ;;Total ram usage:        6 bytes
 13554 ;; Hardware stack levels used:    1
 13555 ;; Hardware stack levels required when called:    2
 13556 ;; This function calls:
 13557 ;;		Nothing
 13558 ;; This function is called by:
 13559 ;;		_xtoa
 13560 ;; This function uses a non-reentrant model
 13561 ;;
 13562                           
 13563                           	psect	text40
 13564  00571A                     __ptext40:
 13565                           	opt callstack 0
 13566  00571A                     _isalpha:
 13567                           	opt callstack 22
 13568  00571A  0E9F               	movlw	159
 13569  00571C  6E0F               	movwf	??_isalpha^0,c
 13570  00571E  0EFF               	movlw	255
 13571  005720  6E10               	movwf	(??_isalpha+1)^0,c
 13572  005722  0E20               	movlw	32
 13573  005724  100D               	iorwf	isalpha@c^0,w,c
 13574  005726  6E11               	movwf	(??_isalpha+2)^0,c
 13575  005728  0E00               	movlw	0
 13576  00572A  100E               	iorwf	(isalpha@c+1)^0,w,c
 13577  00572C  6E12               	movwf	(??_isalpha+3)^0,c
 13578  00572E  500F               	movf	??_isalpha^0,w,c
 13579  005730  2611               	addwf	(??_isalpha+2)^0,f,c
 13580  005732  5010               	movf	(??_isalpha+1)^0,w,c
 13581  005734  2212               	addwfc	(??_isalpha+3)^0,f,c
 13582  005736  5012               	movf	(??_isalpha+3)^0,w,c
 13583  005738  E10A               	bnz	u6230
 13584  00573A  0E1A               	movlw	26
 13585  00573C  5C11               	subwf	(??_isalpha+2)^0,w,c
 13586  00573E  A0D8               	btfss	status,0,c
 13587  005740  EFA4  F02B         	goto	u6231
 13588  005744  EFA7  F02B         	goto	u6230
 13589  005748                     u6231:
 13590  005748  0E01               	movlw	1
 13591  00574A  EFA8  F02B         	goto	u6240
 13592  00574E                     u6230:
 13593  00574E  0E00               	movlw	0
 13594  005750                     u6240:
 13595  005750  6E0D               	movwf	?_isalpha^0,c
 13596  005752  6A0E               	clrf	(?_isalpha+1)^0,c
 13597  005754  0012               	return		;funcret
 13598  005756                     __end_of_isalpha:
 13599                           	opt callstack 0
 13600                           
 13601 ;; *************** function _utoa *****************
 13602 ;; Defined at:
 13603 ;;		line 593 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c"
 13604 ;; Parameters:    Size  Location     Type
 13605 ;;  fp              2   37[COMRAM] PTR struct _IO_FILE
 13606 ;;		 -> NULL(0), 
 13607 ;;  d               8   39[COMRAM] unsigned long long 
 13608 ;; Auto vars:     Size  Location     Type
 13609 ;;  n               8   59[COMRAM] unsigned long long 
 13610 ;;  i               2   67[COMRAM] int 
 13611 ;;  w               2   57[COMRAM] int 
 13612 ;;  p               2   55[COMRAM] int 
 13613 ;; Return value:  Size  Location     Type
 13614 ;;                  2   37[COMRAM] int 
 13615 ;; Registers used:
 13616 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13617 ;; Tracked objects:
 13618 ;;		On entry : 0/0
 13619 ;;		On exit  : 0/0
 13620 ;;		Unchanged: 0/0
 13621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13622 ;;      Params:        10       0       0       0       0       0       0
 13623 ;;      Locals:        14       0       0       0       0       0       0
 13624 ;;      Temps:          8       0       0       0       0       0       0
 13625 ;;      Totals:        32       0       0       0       0       0       0
 13626 ;;Total ram usage:       32 bytes
 13627 ;; Hardware stack levels used:    1
 13628 ;; Hardware stack levels required when called:    6
 13629 ;; This function calls:
 13630 ;;		___lodiv
 13631 ;;		___lomod
 13632 ;;		_pad
 13633 ;; This function is called by:
 13634 ;;		_vfpfcnvrt
 13635 ;; This function uses a non-reentrant model
 13636 ;;
 13637                           
 13638                           	psect	text41
 13639  002D9C                     __ptext41:
 13640                           	opt callstack 0
 13641  002D9C                     _utoa:
 13642                           	opt callstack 19
 13643  002D9C                     
 13644                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 593: static int utoa(FILE *fp
      +                          , unsigned long long d);/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 594: {
      +                          ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 595:     int i, p, w;;/opt/mi
      +                          crochip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 596:     unsigned long long n;;/opt/m
      +                          icrochip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 599:     if (!(prec < 0)) {
 13645  002D9C  BE6A               	btfsc	(_prec+1)^0,7,c
 13646  002D9E  EFD3  F016         	goto	u6851
 13647  002DA2  EFD5  F016         	goto	u6850
 13648  002DA6                     u6851:
 13649  002DA6  EFD6  F016         	goto	l5621
 13650  002DAA                     u6850:
 13651  002DAA                     
 13652                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 600:         flags &= ~(1 << 
      +                          1);
 13653  002DAA  926B               	bcf	_flags^0,1,c
 13654  002DAC                     l5621:
 13655                           
 13656                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 602:     p = (0 < prec) ? pre
      +                          c : 1;
 13657  002DAC  BE6A               	btfsc	(_prec+1)^0,7,c
 13658  002DAE  EFE3  F016         	goto	u6860
 13659  002DB2  506A               	movf	(_prec+1)^0,w,c
 13660  002DB4  E106               	bnz	u6861
 13661  002DB6  0469               	decf	_prec^0,w,c
 13662  002DB8  B0D8               	btfsc	status,0,c
 13663  002DBA  EFE1  F016         	goto	u6861
 13664  002DBE  EFE3  F016         	goto	u6860
 13665  002DC2                     u6861:
 13666  002DC2  EFE9  F016         	goto	l735
 13667  002DC6                     u6860:
 13668  002DC6  0E00               	movlw	0
 13669  002DC8  6E39               	movwf	(utoa@p+1)^0,c
 13670  002DCA  0E01               	movlw	1
 13671  002DCC  6E38               	movwf	utoa@p^0,c
 13672  002DCE  EFED  F016         	goto	l737
 13673  002DD2                     l735:
 13674  002DD2  C069  F038         	movff	_prec,utoa@p
 13675  002DD6  C06A  F039         	movff	_prec+1,utoa@p+1
 13676  002DDA                     l737:
 13677                           
 13678                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 603:     w = width;
 13679  002DDA  C067  F03A         	movff	_width,utoa@w
 13680  002DDE  C068  F03B         	movff	_width+1,utoa@w+1
 13681                           
 13682                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 606:     n = d;
 13683  002DE2  C028  F03C         	movff	utoa@d,utoa@n
 13684  002DE6  C029  F03D         	movff	utoa@d+1,utoa@n+1
 13685  002DEA  C02A  F03E         	movff	utoa@d+2,utoa@n+2
 13686  002DEE  C02B  F03F         	movff	utoa@d+3,utoa@n+3
 13687  002DF2  C02C  F040         	movff	utoa@d+4,utoa@n+4
 13688  002DF6  C02D  F041         	movff	utoa@d+5,utoa@n+5
 13689  002DFA  C02E  F042         	movff	utoa@d+6,utoa@n+6
 13690  002DFE  C02F  F043         	movff	utoa@d+7,utoa@n+7
 13691  002E02                     
 13692                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 607:     i = sizeof(dbuf) - 1
      +                          ;
 13693  002E02  0E00               	movlw	0
 13694  002E04  6E45               	movwf	(utoa@i+1)^0,c
 13695  002E06  0E1F               	movlw	31
 13696  002E08  6E44               	movwf	utoa@i^0,c
 13697  002E0A                     
 13698                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 608:     dbuf[i] = '\0';
 13699  002E0A  0E00               	movlw	0
 13700  002E0C  0101               	movlb	1	; () banked
 13701  002E0E  6FDC               	movwf	(_dbuf+31)& (0+255),b
 13702                           
 13703                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 609:     while (i && (n || (0
      +                           < p) || ((0 < w) && (flags & (1 << 1))))) {
 13704  002E10  EF80  F017         	goto	l5639
 13705  002E14                     l5629:
 13706                           
 13707                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 610:         --i;
 13708  002E14  0644               	decf	utoa@i^0,f,c
 13709  002E16  A0D8               	btfss	status,0,c
 13710  002E18  0645               	decf	(utoa@i+1)^0,f,c
 13711  002E1A                     
 13712                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 611:         dbuf[i] = '0' + 
      +                          (n % 10);
 13713  002E1A  0EBD               	movlw	low _dbuf
 13714  002E1C  2444               	addwf	utoa@i^0,w,c
 13715  002E1E  6ED9               	movwf	fsr2l,c
 13716  002E20  0E01               	movlw	high _dbuf
 13717  002E22  2045               	addwfc	(utoa@i+1)^0,w,c
 13718  002E24  6EDA               	movwf	fsr2h,c
 13719  002E26  C03C  F00D         	movff	utoa@n,___lomod@dividend
 13720  002E2A  C03D  F00E         	movff	utoa@n+1,___lomod@dividend+1
 13721  002E2E  C03E  F00F         	movff	utoa@n+2,___lomod@dividend+2
 13722  002E32  C03F  F010         	movff	utoa@n+3,___lomod@dividend+3
 13723  002E36  C040  F011         	movff	utoa@n+4,___lomod@dividend+4
 13724  002E3A  C041  F012         	movff	utoa@n+5,___lomod@dividend+5
 13725  002E3E  C042  F013         	movff	utoa@n+6,___lomod@dividend+6
 13726  002E42  C043  F014         	movff	utoa@n+7,___lomod@dividend+7
 13727  002E46  0E0A               	movlw	10
 13728  002E48  6E15               	movwf	___lomod@divisor^0,c
 13729  002E4A  0E00               	movlw	0
 13730  002E4C  6E16               	movwf	(___lomod@divisor+1)^0,c
 13731  002E4E  0E00               	movlw	0
 13732  002E50  6E17               	movwf	(___lomod@divisor+2)^0,c
 13733  002E52  0E00               	movlw	0
 13734  002E54  6E18               	movwf	(___lomod@divisor+3)^0,c
 13735  002E56  0E00               	movlw	0
 13736  002E58  6E19               	movwf	(___lomod@divisor+4)^0,c
 13737  002E5A  0E00               	movlw	0
 13738  002E5C  6E1A               	movwf	(___lomod@divisor+5)^0,c
 13739  002E5E  0E00               	movlw	0
 13740  002E60  6E1B               	movwf	(___lomod@divisor+6)^0,c
 13741  002E62  0E00               	movlw	0
 13742  002E64  6E1C               	movwf	(___lomod@divisor+7)^0,c
 13743  002E66  EC03  F023         	call	___lomod	;wreg free
 13744  002E6A  C00D  F030         	movff	?___lomod,??_utoa
 13745  002E6E  C00E  F031         	movff	?___lomod+1,??_utoa+1
 13746  002E72  C00F  F032         	movff	?___lomod+2,??_utoa+2
 13747  002E76  C010  F033         	movff	?___lomod+3,??_utoa+3
 13748  002E7A  C011  F034         	movff	?___lomod+4,??_utoa+4
 13749  002E7E  C012  F035         	movff	?___lomod+5,??_utoa+5
 13750  002E82  C013  F036         	movff	?___lomod+6,??_utoa+6
 13751  002E86  C014  F037         	movff	?___lomod+7,??_utoa+7
 13752  002E8A  5030               	movf	??_utoa^0,w,c
 13753  002E8C  0F30               	addlw	48
 13754  002E8E  6EDF               	movwf	indf2,c
 13755  002E90                     
 13756                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 612:         --p;
 13757  002E90  0638               	decf	utoa@p^0,f,c
 13758  002E92  A0D8               	btfss	status,0,c
 13759  002E94  0639               	decf	(utoa@p+1)^0,f,c
 13760  002E96                     
 13761                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 613:         --w;
 13762  002E96  063A               	decf	utoa@w^0,f,c
 13763  002E98  A0D8               	btfss	status,0,c
 13764  002E9A  063B               	decf	(utoa@w+1)^0,f,c
 13765  002E9C                     
 13766                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 614:         n = n / 10;
 13767  002E9C  C03C  F00D         	movff	utoa@n,___lodiv@dividend
 13768  002EA0  C03D  F00E         	movff	utoa@n+1,___lodiv@dividend+1
 13769  002EA4  C03E  F00F         	movff	utoa@n+2,___lodiv@dividend+2
 13770  002EA8  C03F  F010         	movff	utoa@n+3,___lodiv@dividend+3
 13771  002EAC  C040  F011         	movff	utoa@n+4,___lodiv@dividend+4
 13772  002EB0  C041  F012         	movff	utoa@n+5,___lodiv@dividend+5
 13773  002EB4  C042  F013         	movff	utoa@n+6,___lodiv@dividend+6
 13774  002EB8  C043  F014         	movff	utoa@n+7,___lodiv@dividend+7
 13775  002EBC  0E0A               	movlw	10
 13776  002EBE  6E15               	movwf	___lodiv@divisor^0,c
 13777  002EC0  0E00               	movlw	0
 13778  002EC2  6E16               	movwf	(___lodiv@divisor+1)^0,c
 13779  002EC4  0E00               	movlw	0
 13780  002EC6  6E17               	movwf	(___lodiv@divisor+2)^0,c
 13781  002EC8  0E00               	movlw	0
 13782  002ECA  6E18               	movwf	(___lodiv@divisor+3)^0,c
 13783  002ECC  0E00               	movlw	0
 13784  002ECE  6E19               	movwf	(___lodiv@divisor+4)^0,c
 13785  002ED0  0E00               	movlw	0
 13786  002ED2  6E1A               	movwf	(___lodiv@divisor+5)^0,c
 13787  002ED4  0E00               	movlw	0
 13788  002ED6  6E1B               	movwf	(___lodiv@divisor+6)^0,c
 13789  002ED8  0E00               	movlw	0
 13790  002EDA  6E1C               	movwf	(___lodiv@divisor+7)^0,c
 13791  002EDC  EC42  F021         	call	___lodiv	;wreg free
 13792  002EE0  C00D  F03C         	movff	?___lodiv,utoa@n
 13793  002EE4  C00E  F03D         	movff	?___lodiv+1,utoa@n+1
 13794  002EE8  C00F  F03E         	movff	?___lodiv+2,utoa@n+2
 13795  002EEC  C010  F03F         	movff	?___lodiv+3,utoa@n+3
 13796  002EF0  C011  F040         	movff	?___lodiv+4,utoa@n+4
 13797  002EF4  C012  F041         	movff	?___lodiv+5,utoa@n+5
 13798  002EF8  C013  F042         	movff	?___lodiv+6,utoa@n+6
 13799  002EFC  C014  F043         	movff	?___lodiv+7,utoa@n+7
 13800  002F00                     l5639:
 13801                           
 13802                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 609:     while (i && (n || (0
      +                           < p) || ((0 < w) && (flags & (1 << 1))))) {
 13803  002F00  5044               	movf	utoa@i^0,w,c
 13804  002F02  1045               	iorwf	(utoa@i+1)^0,w,c
 13805  002F04  B4D8               	btfsc	status,2,c
 13806  002F06  EF87  F017         	goto	u6871
 13807  002F0A  EF89  F017         	goto	u6870
 13808  002F0E                     u6871:
 13809  002F0E  EFB9  F017         	goto	l5649
 13810  002F12                     u6870:
 13811  002F12  503C               	movf	utoa@n^0,w,c
 13812  002F14  103D               	iorwf	(utoa@n+1)^0,w,c
 13813  002F16  103E               	iorwf	(utoa@n+2)^0,w,c
 13814  002F18  103F               	iorwf	(utoa@n+3)^0,w,c
 13815  002F1A  1040               	iorwf	(utoa@n+4)^0,w,c
 13816  002F1C  1041               	iorwf	(utoa@n+5)^0,w,c
 13817  002F1E  1042               	iorwf	(utoa@n+6)^0,w,c
 13818  002F20  1043               	iorwf	(utoa@n+7)^0,w,c
 13819  002F22  A4D8               	btfss	status,2,c
 13820  002F24  EF96  F017         	goto	u6881
 13821  002F28  EF98  F017         	goto	u6880
 13822  002F2C                     u6881:
 13823  002F2C  EF0A  F017         	goto	l5629
 13824  002F30                     u6880:
 13825  002F30  BE39               	btfsc	(utoa@p+1)^0,7,c
 13826  002F32  EFA5  F017         	goto	u6890
 13827  002F36  5039               	movf	(utoa@p+1)^0,w,c
 13828  002F38  E106               	bnz	u6891
 13829  002F3A  0438               	decf	utoa@p^0,w,c
 13830  002F3C  B0D8               	btfsc	status,0,c
 13831  002F3E  EFA3  F017         	goto	u6891
 13832  002F42  EFA5  F017         	goto	u6890
 13833  002F46                     u6891:
 13834  002F46  EF0A  F017         	goto	l5629
 13835  002F4A                     u6890:
 13836  002F4A  BE3B               	btfsc	(utoa@w+1)^0,7,c
 13837  002F4C  EFB0  F017         	goto	u6901
 13838  002F50  503B               	movf	(utoa@w+1)^0,w,c
 13839  002F52  E108               	bnz	u6900
 13840  002F54  043A               	decf	utoa@w^0,w,c
 13841  002F56  A0D8               	btfss	status,0,c
 13842  002F58  EFB0  F017         	goto	u6901
 13843  002F5C  EFB2  F017         	goto	u6900
 13844  002F60                     u6901:
 13845  002F60  EFB9  F017         	goto	l5649
 13846  002F64                     u6900:
 13847  002F64  B26B               	btfsc	_flags^0,1,c
 13848  002F66  EFB7  F017         	goto	u6911
 13849  002F6A  EFB9  F017         	goto	u6910
 13850  002F6E                     u6911:
 13851  002F6E  EF0A  F017         	goto	l5629
 13852  002F72                     u6910:
 13853  002F72                     l5649:
 13854                           
 13855                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 618:     return pad(fp, &dbuf
      +                          [i], w);
 13856  002F72  C026  F019         	movff	utoa@fp,pad@fp
 13857  002F76  C027  F01A         	movff	utoa@fp+1,pad@fp+1
 13858  002F7A  0EBD               	movlw	low _dbuf
 13859  002F7C  2444               	addwf	utoa@i^0,w,c
 13860  002F7E  6E1B               	movwf	pad@buf^0,c
 13861  002F80  0E01               	movlw	high _dbuf
 13862  002F82  2045               	addwfc	(utoa@i+1)^0,w,c
 13863  002F84  6E1C               	movwf	(pad@buf+1)^0,c
 13864  002F86  C03A  F01D         	movff	utoa@w,pad@p
 13865  002F8A  C03B  F01E         	movff	utoa@w+1,pad@p+1
 13866  002F8E  ECCD  F023         	call	_pad	;wreg free
 13867  002F92  C019  F026         	movff	?_pad,?_utoa
 13868  002F96  C01A  F027         	movff	?_pad+1,?_utoa+1
 13869  002F9A  0012               	return		;funcret
 13870  002F9C                     __end_of_utoa:
 13871                           	opt callstack 0
 13872                           
 13873 ;; *************** function ___lomod *****************
 13874 ;; Defined at:
 13875 ;;		line 9 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/lomod.c"
 13876 ;; Parameters:    Size  Location     Type
 13877 ;;  dividend        8   12[COMRAM] unsigned long long 
 13878 ;;  divisor         8   20[COMRAM] unsigned long long 
 13879 ;; Auto vars:     Size  Location     Type
 13880 ;;  counter         1   28[COMRAM] unsigned char 
 13881 ;; Return value:  Size  Location     Type
 13882 ;;                  8   12[COMRAM] unsigned long long 
 13883 ;; Registers used:
 13884 ;;		wreg, status,2, status,0
 13885 ;; Tracked objects:
 13886 ;;		On entry : 0/0
 13887 ;;		On exit  : 0/0
 13888 ;;		Unchanged: 0/0
 13889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13890 ;;      Params:        16       0       0       0       0       0       0
 13891 ;;      Locals:         1       0       0       0       0       0       0
 13892 ;;      Temps:          0       0       0       0       0       0       0
 13893 ;;      Totals:        17       0       0       0       0       0       0
 13894 ;;Total ram usage:       17 bytes
 13895 ;; Hardware stack levels used:    1
 13896 ;; Hardware stack levels required when called:    2
 13897 ;; This function calls:
 13898 ;;		Nothing
 13899 ;; This function is called by:
 13900 ;;		_utoa
 13901 ;; This function uses a non-reentrant model
 13902 ;;
 13903                           
 13904                           	psect	text42
 13905  004606                     __ptext42:
 13906                           	opt callstack 0
 13907  004606                     ___lomod:
 13908                           	opt callstack 22
 13909  004606  5015               	movf	___lomod@divisor^0,w,c
 13910  004608  1016               	iorwf	(___lomod@divisor+1)^0,w,c
 13911  00460A  1017               	iorwf	(___lomod@divisor+2)^0,w,c
 13912  00460C  1018               	iorwf	(___lomod@divisor+3)^0,w,c
 13913  00460E  1019               	iorwf	(___lomod@divisor+4)^0,w,c
 13914  004610  101A               	iorwf	(___lomod@divisor+5)^0,w,c
 13915  004612  101B               	iorwf	(___lomod@divisor+6)^0,w,c
 13916  004614  101C               	iorwf	(___lomod@divisor+7)^0,w,c
 13917  004616  B4D8               	btfsc	status,2,c
 13918  004618  EF10  F023         	goto	u6471
 13919  00461C  EF12  F023         	goto	u6470
 13920  004620                     u6471:
 13921  004620  EF5A  F023         	goto	l1276
 13922  004624                     u6470:
 13923  004624  0E01               	movlw	1
 13924  004626  6E1D               	movwf	___lomod@counter^0,c
 13925  004628  EF20  F023         	goto	l5457
 13926  00462C                     l5455:
 13927  00462C  90D8               	bcf	status,0,c
 13928  00462E  3615               	rlcf	___lomod@divisor^0,f,c
 13929  004630  3616               	rlcf	(___lomod@divisor+1)^0,f,c
 13930  004632  3617               	rlcf	(___lomod@divisor+2)^0,f,c
 13931  004634  3618               	rlcf	(___lomod@divisor+3)^0,f,c
 13932  004636  3619               	rlcf	(___lomod@divisor+4)^0,f,c
 13933  004638  361A               	rlcf	(___lomod@divisor+5)^0,f,c
 13934  00463A  361B               	rlcf	(___lomod@divisor+6)^0,f,c
 13935  00463C  361C               	rlcf	(___lomod@divisor+7)^0,f,c
 13936  00463E  2A1D               	incf	___lomod@counter^0,f,c
 13937  004640                     l5457:
 13938  004640  AE1C               	btfss	(___lomod@divisor+7)^0,7,c
 13939  004642  EF25  F023         	goto	u6481
 13940  004646  EF27  F023         	goto	u6480
 13941  00464A                     u6481:
 13942  00464A  EF16  F023         	goto	l5455
 13943  00464E                     u6480:
 13944  00464E                     l5459:
 13945  00464E  5015               	movf	___lomod@divisor^0,w,c
 13946  004650  5C0D               	subwf	___lomod@dividend^0,w,c
 13947  004652  5016               	movf	(___lomod@divisor+1)^0,w,c
 13948  004654  580E               	subwfb	(___lomod@dividend+1)^0,w,c
 13949  004656  5017               	movf	(___lomod@divisor+2)^0,w,c
 13950  004658  580F               	subwfb	(___lomod@dividend+2)^0,w,c
 13951  00465A  5018               	movf	(___lomod@divisor+3)^0,w,c
 13952  00465C  5810               	subwfb	(___lomod@dividend+3)^0,w,c
 13953  00465E  5019               	movf	(___lomod@divisor+4)^0,w,c
 13954  004660  5811               	subwfb	(___lomod@dividend+4)^0,w,c
 13955  004662  501A               	movf	(___lomod@divisor+5)^0,w,c
 13956  004664  5812               	subwfb	(___lomod@dividend+5)^0,w,c
 13957  004666  501B               	movf	(___lomod@divisor+6)^0,w,c
 13958  004668  5813               	subwfb	(___lomod@dividend+6)^0,w,c
 13959  00466A  501C               	movf	(___lomod@divisor+7)^0,w,c
 13960  00466C  5814               	subwfb	(___lomod@dividend+7)^0,w,c
 13961  00466E  A0D8               	btfss	status,0,c
 13962  004670  EF3C  F023         	goto	u6491
 13963  004674  EF3E  F023         	goto	u6490
 13964  004678                     u6491:
 13965  004678  EF4E  F023         	goto	l5463
 13966  00467C                     u6490:
 13967  00467C  5015               	movf	___lomod@divisor^0,w,c
 13968  00467E  5E0D               	subwf	___lomod@dividend^0,f,c
 13969  004680  5016               	movf	(___lomod@divisor+1)^0,w,c
 13970  004682  5A0E               	subwfb	(___lomod@dividend+1)^0,f,c
 13971  004684  5017               	movf	(___lomod@divisor+2)^0,w,c
 13972  004686  5A0F               	subwfb	(___lomod@dividend+2)^0,f,c
 13973  004688  5018               	movf	(___lomod@divisor+3)^0,w,c
 13974  00468A  5A10               	subwfb	(___lomod@dividend+3)^0,f,c
 13975  00468C  5019               	movf	(___lomod@divisor+4)^0,w,c
 13976  00468E  5A11               	subwfb	(___lomod@dividend+4)^0,f,c
 13977  004690  501A               	movf	(___lomod@divisor+5)^0,w,c
 13978  004692  5A12               	subwfb	(___lomod@dividend+5)^0,f,c
 13979  004694  501B               	movf	(___lomod@divisor+6)^0,w,c
 13980  004696  5A13               	subwfb	(___lomod@dividend+6)^0,f,c
 13981  004698  501C               	movf	(___lomod@divisor+7)^0,w,c
 13982  00469A  5A14               	subwfb	(___lomod@dividend+7)^0,f,c
 13983  00469C                     l5463:
 13984  00469C  90D8               	bcf	status,0,c
 13985  00469E  321C               	rrcf	(___lomod@divisor+7)^0,f,c
 13986  0046A0  321B               	rrcf	(___lomod@divisor+6)^0,f,c
 13987  0046A2  321A               	rrcf	(___lomod@divisor+5)^0,f,c
 13988  0046A4  3219               	rrcf	(___lomod@divisor+4)^0,f,c
 13989  0046A6  3218               	rrcf	(___lomod@divisor+3)^0,f,c
 13990  0046A8  3217               	rrcf	(___lomod@divisor+2)^0,f,c
 13991  0046AA  3216               	rrcf	(___lomod@divisor+1)^0,f,c
 13992  0046AC  3215               	rrcf	___lomod@divisor^0,f,c
 13993  0046AE  2E1D               	decfsz	___lomod@counter^0,f,c
 13994  0046B0  EF27  F023         	goto	l5459
 13995  0046B4                     l1276:
 13996  0046B4  C00D  F00D         	movff	___lomod@dividend,?___lomod
 13997  0046B8  C00E  F00E         	movff	___lomod@dividend+1,?___lomod+1
 13998  0046BC  C00F  F00F         	movff	___lomod@dividend+2,?___lomod+2
 13999  0046C0  C010  F010         	movff	___lomod@dividend+3,?___lomod+3
 14000  0046C4  C011  F011         	movff	___lomod@dividend+4,?___lomod+4
 14001  0046C8  C012  F012         	movff	___lomod@dividend+5,?___lomod+5
 14002  0046CC  C013  F013         	movff	___lomod@dividend+6,?___lomod+6
 14003  0046D0  C014  F014         	movff	___lomod@dividend+7,?___lomod+7
 14004  0046D4  0012               	return		;funcret
 14005  0046D6                     __end_of___lomod:
 14006                           	opt callstack 0
 14007                           
 14008 ;; *************** function ___lodiv *****************
 14009 ;; Defined at:
 14010 ;;		line 9 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/lodiv.c"
 14011 ;; Parameters:    Size  Location     Type
 14012 ;;  dividend        8   12[COMRAM] unsigned long long 
 14013 ;;  divisor         8   20[COMRAM] unsigned long long 
 14014 ;; Auto vars:     Size  Location     Type
 14015 ;;  quotient        8   28[COMRAM] unsigned long long 
 14016 ;;  counter         1   36[COMRAM] unsigned char 
 14017 ;; Return value:  Size  Location     Type
 14018 ;;                  8   12[COMRAM] unsigned long long 
 14019 ;; Registers used:
 14020 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14021 ;; Tracked objects:
 14022 ;;		On entry : 0/0
 14023 ;;		On exit  : 0/0
 14024 ;;		Unchanged: 0/0
 14025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14026 ;;      Params:        16       0       0       0       0       0       0
 14027 ;;      Locals:         9       0       0       0       0       0       0
 14028 ;;      Temps:          0       0       0       0       0       0       0
 14029 ;;      Totals:        25       0       0       0       0       0       0
 14030 ;;Total ram usage:       25 bytes
 14031 ;; Hardware stack levels used:    1
 14032 ;; Hardware stack levels required when called:    2
 14033 ;; This function calls:
 14034 ;;		Nothing
 14035 ;; This function is called by:
 14036 ;;		_utoa
 14037 ;; This function uses a non-reentrant model
 14038 ;;
 14039                           
 14040                           	psect	text43
 14041  004284                     __ptext43:
 14042                           	opt callstack 0
 14043  004284                     ___lodiv:
 14044                           	opt callstack 22
 14045  004284  EE20  F01D         	lfsr	2,___lodiv@quotient
 14046  004288  0E07               	movlw	7
 14047  00428A                     u6431:
 14048  00428A  6ADE               	clrf	postinc2,c
 14049  00428C  06E8               	decf	wreg,f,c
 14050  00428E  E2FD               	bc	u6431
 14051  004290  5015               	movf	___lodiv@divisor^0,w,c
 14052  004292  1016               	iorwf	(___lodiv@divisor+1)^0,w,c
 14053  004294  1017               	iorwf	(___lodiv@divisor+2)^0,w,c
 14054  004296  1018               	iorwf	(___lodiv@divisor+3)^0,w,c
 14055  004298  1019               	iorwf	(___lodiv@divisor+4)^0,w,c
 14056  00429A  101A               	iorwf	(___lodiv@divisor+5)^0,w,c
 14057  00429C  101B               	iorwf	(___lodiv@divisor+6)^0,w,c
 14058  00429E  101C               	iorwf	(___lodiv@divisor+7)^0,w,c
 14059  0042A0  B4D8               	btfsc	status,2,c
 14060  0042A2  EF55  F021         	goto	u6441
 14061  0042A6  EF57  F021         	goto	u6440
 14062  0042AA                     u6441:
 14063  0042AA  EFA9  F021         	goto	l1266
 14064  0042AE                     u6440:
 14065  0042AE  0E01               	movlw	1
 14066  0042B0  6E25               	movwf	___lodiv@counter^0,c
 14067  0042B2  EF65  F021         	goto	l5437
 14068  0042B6                     l5435:
 14069  0042B6  90D8               	bcf	status,0,c
 14070  0042B8  3615               	rlcf	___lodiv@divisor^0,f,c
 14071  0042BA  3616               	rlcf	(___lodiv@divisor+1)^0,f,c
 14072  0042BC  3617               	rlcf	(___lodiv@divisor+2)^0,f,c
 14073  0042BE  3618               	rlcf	(___lodiv@divisor+3)^0,f,c
 14074  0042C0  3619               	rlcf	(___lodiv@divisor+4)^0,f,c
 14075  0042C2  361A               	rlcf	(___lodiv@divisor+5)^0,f,c
 14076  0042C4  361B               	rlcf	(___lodiv@divisor+6)^0,f,c
 14077  0042C6  361C               	rlcf	(___lodiv@divisor+7)^0,f,c
 14078  0042C8  2A25               	incf	___lodiv@counter^0,f,c
 14079  0042CA                     l5437:
 14080  0042CA  AE1C               	btfss	(___lodiv@divisor+7)^0,7,c
 14081  0042CC  EF6A  F021         	goto	u6451
 14082  0042D0  EF6C  F021         	goto	u6450
 14083  0042D4                     u6451:
 14084  0042D4  EF5B  F021         	goto	l5435
 14085  0042D8                     u6450:
 14086  0042D8                     l5439:
 14087  0042D8  90D8               	bcf	status,0,c
 14088  0042DA  361D               	rlcf	___lodiv@quotient^0,f,c
 14089  0042DC  361E               	rlcf	(___lodiv@quotient+1)^0,f,c
 14090  0042DE  361F               	rlcf	(___lodiv@quotient+2)^0,f,c
 14091  0042E0  3620               	rlcf	(___lodiv@quotient+3)^0,f,c
 14092  0042E2  3621               	rlcf	(___lodiv@quotient+4)^0,f,c
 14093  0042E4  3622               	rlcf	(___lodiv@quotient+5)^0,f,c
 14094  0042E6  3623               	rlcf	(___lodiv@quotient+6)^0,f,c
 14095  0042E8  3624               	rlcf	(___lodiv@quotient+7)^0,f,c
 14096  0042EA  5015               	movf	___lodiv@divisor^0,w,c
 14097  0042EC  5C0D               	subwf	___lodiv@dividend^0,w,c
 14098  0042EE  5016               	movf	(___lodiv@divisor+1)^0,w,c
 14099  0042F0  580E               	subwfb	(___lodiv@dividend+1)^0,w,c
 14100  0042F2  5017               	movf	(___lodiv@divisor+2)^0,w,c
 14101  0042F4  580F               	subwfb	(___lodiv@dividend+2)^0,w,c
 14102  0042F6  5018               	movf	(___lodiv@divisor+3)^0,w,c
 14103  0042F8  5810               	subwfb	(___lodiv@dividend+3)^0,w,c
 14104  0042FA  5019               	movf	(___lodiv@divisor+4)^0,w,c
 14105  0042FC  5811               	subwfb	(___lodiv@dividend+4)^0,w,c
 14106  0042FE  501A               	movf	(___lodiv@divisor+5)^0,w,c
 14107  004300  5812               	subwfb	(___lodiv@dividend+5)^0,w,c
 14108  004302  501B               	movf	(___lodiv@divisor+6)^0,w,c
 14109  004304  5813               	subwfb	(___lodiv@dividend+6)^0,w,c
 14110  004306  501C               	movf	(___lodiv@divisor+7)^0,w,c
 14111  004308  5814               	subwfb	(___lodiv@dividend+7)^0,w,c
 14112  00430A  A0D8               	btfss	status,0,c
 14113  00430C  EF8A  F021         	goto	u6461
 14114  004310  EF8C  F021         	goto	u6460
 14115  004314                     u6461:
 14116  004314  EF9D  F021         	goto	l5447
 14117  004318                     u6460:
 14118  004318  5015               	movf	___lodiv@divisor^0,w,c
 14119  00431A  5E0D               	subwf	___lodiv@dividend^0,f,c
 14120  00431C  5016               	movf	(___lodiv@divisor+1)^0,w,c
 14121  00431E  5A0E               	subwfb	(___lodiv@dividend+1)^0,f,c
 14122  004320  5017               	movf	(___lodiv@divisor+2)^0,w,c
 14123  004322  5A0F               	subwfb	(___lodiv@dividend+2)^0,f,c
 14124  004324  5018               	movf	(___lodiv@divisor+3)^0,w,c
 14125  004326  5A10               	subwfb	(___lodiv@dividend+3)^0,f,c
 14126  004328  5019               	movf	(___lodiv@divisor+4)^0,w,c
 14127  00432A  5A11               	subwfb	(___lodiv@dividend+4)^0,f,c
 14128  00432C  501A               	movf	(___lodiv@divisor+5)^0,w,c
 14129  00432E  5A12               	subwfb	(___lodiv@dividend+5)^0,f,c
 14130  004330  501B               	movf	(___lodiv@divisor+6)^0,w,c
 14131  004332  5A13               	subwfb	(___lodiv@dividend+6)^0,f,c
 14132  004334  501C               	movf	(___lodiv@divisor+7)^0,w,c
 14133  004336  5A14               	subwfb	(___lodiv@dividend+7)^0,f,c
 14134  004338  801D               	bsf	___lodiv@quotient^0,0,c
 14135  00433A                     l5447:
 14136  00433A  90D8               	bcf	status,0,c
 14137  00433C  321C               	rrcf	(___lodiv@divisor+7)^0,f,c
 14138  00433E  321B               	rrcf	(___lodiv@divisor+6)^0,f,c
 14139  004340  321A               	rrcf	(___lodiv@divisor+5)^0,f,c
 14140  004342  3219               	rrcf	(___lodiv@divisor+4)^0,f,c
 14141  004344  3218               	rrcf	(___lodiv@divisor+3)^0,f,c
 14142  004346  3217               	rrcf	(___lodiv@divisor+2)^0,f,c
 14143  004348  3216               	rrcf	(___lodiv@divisor+1)^0,f,c
 14144  00434A  3215               	rrcf	___lodiv@divisor^0,f,c
 14145  00434C  2E25               	decfsz	___lodiv@counter^0,f,c
 14146  00434E  EF6C  F021         	goto	l5439
 14147  004352                     l1266:
 14148  004352  C01D  F00D         	movff	___lodiv@quotient,?___lodiv
 14149  004356  C01E  F00E         	movff	___lodiv@quotient+1,?___lodiv+1
 14150  00435A  C01F  F00F         	movff	___lodiv@quotient+2,?___lodiv+2
 14151  00435E  C020  F010         	movff	___lodiv@quotient+3,?___lodiv+3
 14152  004362  C021  F011         	movff	___lodiv@quotient+4,?___lodiv+4
 14153  004366  C022  F012         	movff	___lodiv@quotient+5,?___lodiv+5
 14154  00436A  C023  F013         	movff	___lodiv@quotient+6,?___lodiv+6
 14155  00436E  C024  F014         	movff	___lodiv@quotient+7,?___lodiv+7
 14156  004372  0012               	return		;funcret
 14157  004374                     __end_of___lodiv:
 14158                           	opt callstack 0
 14159                           
 14160 ;; *************** function _strncmp *****************
 14161 ;; Defined at:
 14162 ;;		line 3 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/strncmp.c"
 14163 ;; Parameters:    Size  Location     Type
 14164 ;;  _l              2   12[COMRAM] PTR const unsigned char 
 14165 ;;		 -> STR_50(18), STR_49(17), STR_48(19), STR_47(19), 
 14166 ;;		 -> STR_46(17), STR_45(4), STR_44(6), STR_43(18), 
 14167 ;;		 -> STR_42(29), STR_40(16), STR_38(16), STR_36(24), 
 14168 ;;		 -> STR_34(33), STR_33(16), STR_31(33), g_cmd_buf(10), 
 14169 ;;		 -> STR_29(12), STR_28(10), STR_27(39), STR_26(15), 
 14170 ;;		 -> STR_25(6), STR_24(14), STR_23(19), STR_20(23), 
 14171 ;;		 -> STR_18(19), STR_17(44), STR_16(151), STR_15(91), 
 14172 ;;		 -> STR_14(148), STR_13(61), STR_12(47), STR_11(22), 
 14173 ;;		 -> STR_10(28), STR_9(25), STR_8(55), STR_7(72), 
 14174 ;;		 -> STR_6(74), STR_5(33), STR_4(32), STR_3(34), 
 14175 ;;		 -> STR_2(61), STR_1(34), 
 14176 ;;  _r              2   14[COMRAM] PTR const unsigned char 
 14177 ;;		 -> STR_71(3), STR_67(3), STR_62(3), STR_57(3), 
 14178 ;;		 -> STR_53(3), STR_41(6), STR_39(4), STR_37(4), 
 14179 ;;		 -> STR_35(5), STR_32(6), STR_30(5), 
 14180 ;;  n               2   16[COMRAM] unsigned int 
 14181 ;; Auto vars:     Size  Location     Type
 14182 ;;  r               2   21[COMRAM] PTR const unsigned char 
 14183 ;;		 -> STR_71(3), STR_67(3), STR_62(3), STR_57(3), 
 14184 ;;		 -> STR_53(3), STR_41(6), STR_39(4), STR_37(4), 
 14185 ;;		 -> STR_35(5), STR_32(6), STR_30(5), 
 14186 ;;  l               2   19[COMRAM] PTR const unsigned char 
 14187 ;;		 -> STR_50(18), STR_49(17), STR_48(19), STR_47(19), 
 14188 ;;		 -> STR_46(17), STR_45(4), STR_44(6), STR_43(18), 
 14189 ;;		 -> STR_42(29), STR_40(16), STR_38(16), STR_36(24), 
 14190 ;;		 -> STR_34(33), STR_33(16), STR_31(33), g_cmd_buf(10), 
 14191 ;;		 -> STR_29(12), STR_28(10), STR_27(39), STR_26(15), 
 14192 ;;		 -> STR_25(6), STR_24(14), STR_23(19), STR_20(23), 
 14193 ;;		 -> STR_18(19), STR_17(44), STR_16(151), STR_15(91), 
 14194 ;;		 -> STR_14(148), STR_13(61), STR_12(47), STR_11(22), 
 14195 ;;		 -> STR_10(28), STR_9(25), STR_8(55), STR_7(72), 
 14196 ;;		 -> STR_6(74), STR_5(33), STR_4(32), STR_3(34), 
 14197 ;;		 -> STR_2(61), STR_1(34), 
 14198 ;; Return value:  Size  Location     Type
 14199 ;;                  2   12[COMRAM] int 
 14200 ;; Registers used:
 14201 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
 14202 ;; Tracked objects:
 14203 ;;		On entry : 0/0
 14204 ;;		On exit  : 0/0
 14205 ;;		Unchanged: 0/0
 14206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14207 ;;      Params:         6       0       0       0       0       0       0
 14208 ;;      Locals:         4       0       0       0       0       0       0
 14209 ;;      Temps:          1       0       0       0       0       0       0
 14210 ;;      Totals:        11       0       0       0       0       0       0
 14211 ;;Total ram usage:       11 bytes
 14212 ;; Hardware stack levels used:    1
 14213 ;; Hardware stack levels required when called:    2
 14214 ;; This function calls:
 14215 ;;		Nothing
 14216 ;; This function is called by:
 14217 ;;		_check_usart
 14218 ;;		_vfpfcnvrt
 14219 ;; This function uses a non-reentrant model
 14220 ;;
 14221                           
 14222                           	psect	text44
 14223  00405C                     __ptext44:
 14224                           	opt callstack 0
 14225  00405C                     _strncmp:
 14226                           	opt callstack 23
 14227  00405C  C00D  F014         	movff	strncmp@_l,strncmp@l
 14228  004060  C00E  F015         	movff	strncmp@_l+1,strncmp@l+1
 14229  004064  C00F  F016         	movff	strncmp@_r,strncmp@r
 14230  004068  C010  F017         	movff	strncmp@_r+1,strncmp@r+1
 14231  00406C  0611               	decf	strncmp@n^0,f,c
 14232  00406E  A0D8               	btfss	status,0,c
 14233  004070  0612               	decf	(strncmp@n+1)^0,f,c
 14234  004072  2811               	incf	strncmp@n^0,w,c
 14235  004074  E106               	bnz	u6521
 14236  004076  2812               	incf	(strncmp@n+1)^0,w,c
 14237  004078  A4D8               	btfss	status,2,c
 14238  00407A  EF41  F020         	goto	u6521
 14239  00407E  EF43  F020         	goto	u6520
 14240  004082                     u6521:
 14241  004082  EF50  F020         	goto	l5487
 14242  004086                     u6520:
 14243  004086  0E00               	movlw	0
 14244  004088  6E0E               	movwf	(?_strncmp+1)^0,c
 14245  00408A  0E00               	movlw	0
 14246  00408C  6E0D               	movwf	?_strncmp^0,c
 14247  00408E  EFBA  F020         	goto	l1603
 14248  004092                     l5485:
 14249  004092  4A14               	infsnz	strncmp@l^0,f,c
 14250  004094  2A15               	incf	(strncmp@l+1)^0,f,c
 14251  004096  4A16               	infsnz	strncmp@r^0,f,c
 14252  004098  2A17               	incf	(strncmp@r+1)^0,f,c
 14253  00409A  0611               	decf	strncmp@n^0,f,c
 14254  00409C  A0D8               	btfss	status,0,c
 14255  00409E  0612               	decf	(strncmp@n+1)^0,f,c
 14256  0040A0                     l5487:
 14257  0040A0  C014  FFF6         	movff	strncmp@l,tblptrl
 14258  0040A4  C015  FFF7         	movff	strncmp@l+1,tblptrh
 14259  0040A8  6AF8               	clrf	tblptru,c
 14260  0040AA  0E05               	movlw	(high __ramtop+-1)
 14261  0040AC  64F7               	cpfsgt	tblptrh,c
 14262  0040AE  D003               	bra	u6537
 14263  0040B0  0008               	tblrd		*
 14264  0040B2  50F5               	movf	tablat,w,c
 14265  0040B4  D005               	bra	u6530
 14266  0040B6                     u6537:
 14267  0040B6  CFF6 FFE1          	movff	tblptrl,fsr1l
 14268  0040BA  CFF7 FFE2          	movff	tblptrh,fsr1h
 14269  0040BE  50E7               	movf	indf1,w,c
 14270  0040C0                     u6530:
 14271  0040C0  0900               	iorlw	0
 14272  0040C2  B4D8               	btfsc	status,2,c
 14273  0040C4  EF66  F020         	goto	u6541
 14274  0040C8  EF68  F020         	goto	u6540
 14275  0040CC                     u6541:
 14276  0040CC  EF9E  F020         	goto	l5495
 14277  0040D0                     u6540:
 14278  0040D0  C016  FFF6         	movff	strncmp@r,tblptrl
 14279  0040D4  C017  FFF7         	movff	strncmp@r+1,tblptrh
 14280  0040D8                     	if	0	;tblptru may be non-zero
 14281  0040D8                     	endif
 14282  0040D8                     	if	0	;tblptru may be non-zero
 14283  0040D8                     	endif
 14284  0040D8  0008               	tblrd		*
 14285  0040DA  50F5               	movf	tablat,w,c
 14286  0040DC  0900               	iorlw	0
 14287  0040DE  B4D8               	btfsc	status,2,c
 14288  0040E0  EF74  F020         	goto	u6551
 14289  0040E4  EF76  F020         	goto	u6550
 14290  0040E8                     u6551:
 14291  0040E8  EF9E  F020         	goto	l5495
 14292  0040EC                     u6550:
 14293  0040EC  5011               	movf	strncmp@n^0,w,c
 14294  0040EE  1012               	iorwf	(strncmp@n+1)^0,w,c
 14295  0040F0  B4D8               	btfsc	status,2,c
 14296  0040F2  EF7D  F020         	goto	u6561
 14297  0040F6  EF7F  F020         	goto	u6560
 14298  0040FA                     u6561:
 14299  0040FA  EF9E  F020         	goto	l5495
 14300  0040FE                     u6560:
 14301  0040FE  C016  FFF6         	movff	strncmp@r,tblptrl
 14302  004102  C017  FFF7         	movff	strncmp@r+1,tblptrh
 14303  004106                     	if	0	;tblptru may be non-zero
 14304  004106                     	endif
 14305  004106                     	if	0	;tblptru may be non-zero
 14306  004106                     	endif
 14307  004106  0008               	tblrd		*
 14308  004108  CFF5 F013          	movff	tablat,??_strncmp
 14309  00410C  C014  FFF6         	movff	strncmp@l,tblptrl
 14310  004110  C015  FFF7         	movff	strncmp@l+1,tblptrh
 14311  004114  6AF8               	clrf	tblptru,c
 14312  004116  0E05               	movlw	(high __ramtop+-1)
 14313  004118  64F7               	cpfsgt	tblptrh,c
 14314  00411A  D003               	bra	u6577
 14315  00411C  0008               	tblrd		*
 14316  00411E  50F5               	movf	tablat,w,c
 14317  004120  D005               	bra	u6575
 14318  004122                     u6577:
 14319  004122  CFF6 FFE1          	movff	tblptrl,fsr1l
 14320  004126  CFF7 FFE2          	movff	tblptrh,fsr1h
 14321  00412A  50E7               	movf	indf1,w,c
 14322  00412C                     u6575:
 14323  00412C  1813               	xorwf	??_strncmp^0,w,c
 14324  00412E  B4D8               	btfsc	status,2,c
 14325  004130  EF9C  F020         	goto	u6571
 14326  004134  EF9E  F020         	goto	u6570
 14327  004138                     u6571:
 14328  004138  EF49  F020         	goto	l5485
 14329  00413C                     u6570:
 14330  00413C                     l5495:
 14331  00413C  C014  FFF6         	movff	strncmp@l,tblptrl
 14332  004140  C015  FFF7         	movff	strncmp@l+1,tblptrh
 14333  004144  6AF8               	clrf	tblptru,c
 14334  004146  0E05               	movlw	(high __ramtop+-1)
 14335  004148  64F7               	cpfsgt	tblptrh,c
 14336  00414A  D003               	bra	u6587
 14337  00414C  0008               	tblrd		*
 14338  00414E  50F5               	movf	tablat,w,c
 14339  004150  D005               	bra	u6580
 14340  004152                     u6587:
 14341  004152  CFF6 FFE1          	movff	tblptrl,fsr1l
 14342  004156  CFF7 FFE2          	movff	tblptrh,fsr1h
 14343  00415A  50E7               	movf	indf1,w,c
 14344  00415C                     u6580:
 14345  00415C  6E13               	movwf	??_strncmp^0,c
 14346  00415E  C016  FFF6         	movff	strncmp@r,tblptrl
 14347  004162  C017  FFF7         	movff	strncmp@r+1,tblptrh
 14348  004166                     	if	0	;tblptru may be non-zero
 14349  004166                     	endif
 14350  004166                     	if	0	;tblptru may be non-zero
 14351  004166                     	endif
 14352  004166  0008               	tblrd		*
 14353  004168  50F5               	movf	tablat,w,c
 14354  00416A  5C13               	subwf	??_strncmp^0,w,c
 14355  00416C  6E0D               	movwf	?_strncmp^0,c
 14356  00416E  6A0E               	clrf	(?_strncmp+1)^0,c
 14357  004170  A0D8               	btfss	status,0,c
 14358  004172  060E               	decf	(?_strncmp+1)^0,f,c
 14359  004174                     l1603:
 14360  004174  0012               	return		;funcret
 14361  004176                     __end_of_strncmp:
 14362                           	opt callstack 0
 14363                           
 14364 ;; *************** function _stoa *****************
 14365 ;; Defined at:
 14366 ;;		line 546 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c"
 14367 ;; Parameters:    Size  Location     Type
 14368 ;;  fp              2   17[COMRAM] PTR struct _IO_FILE
 14369 ;;		 -> NULL(0), 
 14370 ;;  s               2   19[COMRAM] PTR unsigned char 
 14371 ;;		 -> ?_printf(2), g_adf4351(55), STR_22(3), STR_21(3), 
 14372 ;;		 -> STR_19(9), 
 14373 ;; Auto vars:     Size  Location     Type
 14374 ;;  nuls            7   22[COMRAM] unsigned char [7]
 14375 ;;  l               2   37[COMRAM] int 
 14376 ;;  p               2   35[COMRAM] int 
 14377 ;;  cp              2   33[COMRAM] PTR unsigned char 
 14378 ;;		 -> ?_printf(2), stoa@nuls(7), g_adf4351(55), STR_22(3), 
 14379 ;;		 -> STR_21(3), STR_19(9), 
 14380 ;;  w               2   31[COMRAM] int 
 14381 ;;  i               2   29[COMRAM] int 
 14382 ;; Return value:  Size  Location     Type
 14383 ;;                  2   17[COMRAM] int 
 14384 ;; Registers used:
 14385 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14386 ;; Tracked objects:
 14387 ;;		On entry : 0/0
 14388 ;;		On exit  : 0/0
 14389 ;;		Unchanged: 0/0
 14390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14391 ;;      Params:         4       0       0       0       0       0       0
 14392 ;;      Locals:        17       0       0       0       0       0       0
 14393 ;;      Temps:          1       0       0       0       0       0       0
 14394 ;;      Totals:        22       0       0       0       0       0       0
 14395 ;;Total ram usage:       22 bytes
 14396 ;; Hardware stack levels used:    1
 14397 ;; Hardware stack levels required when called:    4
 14398 ;; This function calls:
 14399 ;;		_fputc
 14400 ;;		_strlen
 14401 ;; This function is called by:
 14402 ;;		_vfpfcnvrt
 14403 ;; This function uses a non-reentrant model
 14404 ;;
 14405                           
 14406                           	psect	text45
 14407  0034FA                     __ptext45:
 14408                           	opt callstack 0
 14409  0034FA                     _stoa:
 14410                           	opt callstack 21
 14411  0034FA                     
 14412                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 546: static int stoa(FILE *fp
      +                          , char *s);/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 547: {;/opt/microch
      +                          ip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 548:     char *cp, nuls[] = "(null)";
 14413  0034FA  EE21  F0E7         	lfsr	2,stoa@F1144
 14414  0034FE  EE10  F017         	lfsr	1,stoa@nuls
 14415  003502  0E06               	movlw	6
 14416  003504                     u6751:
 14417  003504  CFDB FFE3          	movff	plusw2,plusw1
 14418  003508  06E8               	decf	wreg,f,c
 14419  00350A  E2FC               	bc	u6751
 14420  00350C                     
 14421                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 549:     int i, l, p, w;;/opt
      +                          /microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 552:     cp = s;
 14422  00350C  C014  F022         	movff	stoa@s,stoa@cp
 14423  003510  C015  F023         	movff	stoa@s+1,stoa@cp+1
 14424  003514                     
 14425                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 553:     if (!cp) {
 14426  003514  5022               	movf	stoa@cp^0,w,c
 14427  003516  1023               	iorwf	(stoa@cp+1)^0,w,c
 14428  003518  A4D8               	btfss	status,2,c
 14429  00351A  EF91  F01A         	goto	u6761
 14430  00351E  EF93  F01A         	goto	u6760
 14431  003522                     u6761:
 14432  003522  EF97  F01A         	goto	l5583
 14433  003526                     u6760:
 14434  003526                     
 14435                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 554:         cp = nuls;
 14436  003526  0E17               	movlw	low stoa@nuls
 14437  003528  6E22               	movwf	stoa@cp^0,c
 14438  00352A  0E00               	movlw	high stoa@nuls
 14439  00352C  6E23               	movwf	(stoa@cp+1)^0,c
 14440  00352E                     l5583:
 14441                           
 14442                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 558:     l = strlen(cp);
 14443  00352E  C022  F00D         	movff	stoa@cp,strlen@s
 14444  003532  C023  F00E         	movff	stoa@cp+1,strlen@s+1
 14445  003536  EC51  F02A         	call	_strlen	;wreg free
 14446  00353A  C00D  F026         	movff	?_strlen,stoa@l
 14447  00353E  C00E  F027         	movff	?_strlen+1,stoa@l+1
 14448  003542                     
 14449                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 559:     p = prec;
 14450  003542  C069  F024         	movff	_prec,stoa@p
 14451  003546  C06A  F025         	movff	_prec+1,stoa@p+1
 14452  00354A                     
 14453                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 560:     l = (!(p < 0) && (p 
      +                          < l)) ? p : l;
 14454  00354A  BE25               	btfsc	(stoa@p+1)^0,7,c
 14455  00354C  EFAA  F01A         	goto	u6771
 14456  003550  EFAC  F01A         	goto	u6770
 14457  003554                     u6771:
 14458  003554  EFC1  F01A         	goto	l716
 14459  003558                     u6770:
 14460  003558  5026               	movf	stoa@l^0,w,c
 14461  00355A  5C24               	subwf	stoa@p^0,w,c
 14462  00355C  5025               	movf	(stoa@p+1)^0,w,c
 14463  00355E  0A80               	xorlw	128
 14464  003560  6E16               	movwf	??_stoa^0,c
 14465  003562  5027               	movf	(stoa@l+1)^0,w,c
 14466  003564  0A80               	xorlw	128
 14467  003566  5816               	subwfb	??_stoa^0,w,c
 14468  003568  A0D8               	btfss	status,0,c
 14469  00356A  EFB9  F01A         	goto	u6781
 14470  00356E  EFBB  F01A         	goto	u6780
 14471  003572                     u6781:
 14472  003572  EFBD  F01A         	goto	l714
 14473  003576                     u6780:
 14474  003576  EFC1  F01A         	goto	l716
 14475  00357A                     l714:
 14476  00357A  C024  F026         	movff	stoa@p,stoa@l
 14477  00357E  C025  F027         	movff	stoa@p+1,stoa@l+1
 14478  003582                     l716:
 14479                           
 14480                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 561:     p = l;
 14481  003582  C026  F024         	movff	stoa@l,stoa@p
 14482  003586  C027  F025         	movff	stoa@l+1,stoa@p+1
 14483                           
 14484                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 562:     w = width;
 14485  00358A  C067  F020         	movff	_width,stoa@w
 14486  00358E  C068  F021         	movff	_width+1,stoa@w+1
 14487                           
 14488                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 565:     if (!(flags & (1 << 
      +                          0))) {
 14489  003592  B06B               	btfsc	_flags^0,0,c
 14490  003594  EFCE  F01A         	goto	u6791
 14491  003598  EFD0  F01A         	goto	u6790
 14492  00359C                     u6791:
 14493  00359C  EFED  F01A         	goto	l5599
 14494  0035A0                     u6790:
 14495  0035A0  EFDE  F01A         	goto	l5597
 14496  0035A4                     l5593:
 14497                           
 14498                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 567:             fputc(' ', f
      +                          p);
 14499  0035A4  0E00               	movlw	0
 14500  0035A6  6E0F               	movwf	(fputc@c+1)^0,c
 14501  0035A8  0E20               	movlw	32
 14502  0035AA  6E0E               	movwf	fputc@c^0,c
 14503  0035AC  C012  F010         	movff	stoa@fp,fputc@fp
 14504  0035B0  C013  F011         	movff	stoa@fp+1,fputc@fp+1
 14505  0035B4  EC13  F02C         	call	_fputc	;wreg free
 14506  0035B8                     
 14507                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 568:             ++l;
 14508  0035B8  4A26               	infsnz	stoa@l^0,f,c
 14509  0035BA  2A27               	incf	(stoa@l+1)^0,f,c
 14510  0035BC                     l5597:
 14511                           
 14512                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 566:         while (l < w) {
 14513  0035BC  5020               	movf	stoa@w^0,w,c
 14514  0035BE  5C26               	subwf	stoa@l^0,w,c
 14515  0035C0  5027               	movf	(stoa@l+1)^0,w,c
 14516  0035C2  0A80               	xorlw	128
 14517  0035C4  6E16               	movwf	??_stoa^0,c
 14518  0035C6  5021               	movf	(stoa@w+1)^0,w,c
 14519  0035C8  0A80               	xorlw	128
 14520  0035CA  5816               	subwfb	??_stoa^0,w,c
 14521  0035CC  A0D8               	btfss	status,0,c
 14522  0035CE  EFEB  F01A         	goto	u6801
 14523  0035D2  EFED  F01A         	goto	u6800
 14524  0035D6                     u6801:
 14525  0035D6  EFD2  F01A         	goto	l5593
 14526  0035DA                     u6800:
 14527  0035DA                     l5599:
 14528                           
 14529                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 573:     i = 0;
 14530  0035DA  0E00               	movlw	0
 14531  0035DC  6E1F               	movwf	(stoa@i+1)^0,c
 14532  0035DE  0E00               	movlw	0
 14533  0035E0  6E1E               	movwf	stoa@i^0,c
 14534                           
 14535                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 574:     while (i < p) {
 14536  0035E2  EF11  F01B         	goto	l5607
 14537  0035E6                     l5601:
 14538                           
 14539                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 575:         fputc(*cp, fp);
 14540  0035E6  C022  FFF6         	movff	stoa@cp,tblptrl
 14541  0035EA  C023  FFF7         	movff	stoa@cp+1,tblptrh
 14542  0035EE  6AF8               	clrf	tblptru,c
 14543  0035F0  0E05               	movlw	(high __ramtop+-1)
 14544  0035F2  64F7               	cpfsgt	tblptrh,c
 14545  0035F4  D003               	bra	u6817
 14546  0035F6  0008               	tblrd		*
 14547  0035F8  50F5               	movf	tablat,w,c
 14548  0035FA  D005               	bra	u6810
 14549  0035FC                     u6817:
 14550  0035FC  CFF6 FFE1          	movff	tblptrl,fsr1l
 14551  003600  CFF7 FFE2          	movff	tblptrh,fsr1h
 14552  003604  50E7               	movf	indf1,w,c
 14553  003606                     u6810:
 14554  003606  6E16               	movwf	??_stoa^0,c
 14555  003608  5016               	movf	??_stoa^0,w,c
 14556  00360A  6E0E               	movwf	fputc@c^0,c
 14557  00360C  6A0F               	clrf	(fputc@c+1)^0,c
 14558  00360E  C012  F010         	movff	stoa@fp,fputc@fp
 14559  003612  C013  F011         	movff	stoa@fp+1,fputc@fp+1
 14560  003616  EC13  F02C         	call	_fputc	;wreg free
 14561  00361A                     
 14562                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 576:         ++cp;
 14563  00361A  4A22               	infsnz	stoa@cp^0,f,c
 14564  00361C  2A23               	incf	(stoa@cp+1)^0,f,c
 14565  00361E                     
 14566                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 577:         ++i;
 14567  00361E  4A1E               	infsnz	stoa@i^0,f,c
 14568  003620  2A1F               	incf	(stoa@i+1)^0,f,c
 14569  003622                     l5607:
 14570                           
 14571                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 574:     while (i < p) {
 14572  003622  5024               	movf	stoa@p^0,w,c
 14573  003624  5C1E               	subwf	stoa@i^0,w,c
 14574  003626  501F               	movf	(stoa@i+1)^0,w,c
 14575  003628  0A80               	xorlw	128
 14576  00362A  6E16               	movwf	??_stoa^0,c
 14577  00362C  5025               	movf	(stoa@p+1)^0,w,c
 14578  00362E  0A80               	xorlw	128
 14579  003630  5816               	subwfb	??_stoa^0,w,c
 14580  003632  A0D8               	btfss	status,0,c
 14581  003634  EF1E  F01B         	goto	u6821
 14582  003638  EF20  F01B         	goto	u6820
 14583  00363C                     u6821:
 14584  00363C  EFF3  F01A         	goto	l5601
 14585  003640                     u6820:
 14586  003640                     
 14587                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 581:     if (flags & (1 << 0)
      +                          ) {
 14588  003640  A06B               	btfss	_flags^0,0,c
 14589  003642  EF25  F01B         	goto	u6831
 14590  003646  EF27  F01B         	goto	u6830
 14591  00364A                     u6831:
 14592  00364A  EF44  F01B         	goto	l726
 14593  00364E                     u6830:
 14594  00364E  EF35  F01B         	goto	l5615
 14595  003652                     l5611:
 14596                           
 14597                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 583:             fputc(' ', f
      +                          p);
 14598  003652  0E00               	movlw	0
 14599  003654  6E0F               	movwf	(fputc@c+1)^0,c
 14600  003656  0E20               	movlw	32
 14601  003658  6E0E               	movwf	fputc@c^0,c
 14602  00365A  C012  F010         	movff	stoa@fp,fputc@fp
 14603  00365E  C013  F011         	movff	stoa@fp+1,fputc@fp+1
 14604  003662  EC13  F02C         	call	_fputc	;wreg free
 14605  003666                     
 14606                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 584:             ++l;
 14607  003666  4A26               	infsnz	stoa@l^0,f,c
 14608  003668  2A27               	incf	(stoa@l+1)^0,f,c
 14609  00366A                     l5615:
 14610                           
 14611                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 582:         while (l < w) {
 14612  00366A  5020               	movf	stoa@w^0,w,c
 14613  00366C  5C26               	subwf	stoa@l^0,w,c
 14614  00366E  5027               	movf	(stoa@l+1)^0,w,c
 14615  003670  0A80               	xorlw	128
 14616  003672  6E16               	movwf	??_stoa^0,c
 14617  003674  5021               	movf	(stoa@w+1)^0,w,c
 14618  003676  0A80               	xorlw	128
 14619  003678  5816               	subwfb	??_stoa^0,w,c
 14620  00367A  A0D8               	btfss	status,0,c
 14621  00367C  EF42  F01B         	goto	u6841
 14622  003680  EF44  F01B         	goto	u6840
 14623  003684                     u6841:
 14624  003684  EF29  F01B         	goto	l5611
 14625  003688                     u6840:
 14626  003688                     l726:
 14627                           
 14628                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 588:     return l;
 14629  003688  C026  F012         	movff	stoa@l,?_stoa
 14630  00368C  C027  F013         	movff	stoa@l+1,?_stoa+1
 14631  003690  0012               	return		;funcret
 14632  003692                     __end_of_stoa:
 14633                           	opt callstack 0
 14634                           
 14635 ;; *************** function _dtoa *****************
 14636 ;; Defined at:
 14637 ;;		line 274 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c"
 14638 ;; Parameters:    Size  Location     Type
 14639 ;;  fp              2   38[COMRAM] PTR struct _IO_FILE
 14640 ;;		 -> NULL(0), 
 14641 ;;  d               8   40[COMRAM] long long 
 14642 ;; Auto vars:     Size  Location     Type
 14643 ;;  n               8   64[COMRAM] long long 
 14644 ;;  i               2   72[COMRAM] int 
 14645 ;;  s               2   62[COMRAM] int 
 14646 ;;  w               2   60[COMRAM] int 
 14647 ;;  p               2   58[COMRAM] int 
 14648 ;; Return value:  Size  Location     Type
 14649 ;;                  2   38[COMRAM] int 
 14650 ;; Registers used:
 14651 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14652 ;; Tracked objects:
 14653 ;;		On entry : 0/0
 14654 ;;		On exit  : 0/0
 14655 ;;		Unchanged: 0/0
 14656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14657 ;;      Params:        10       0       0       0       0       0       0
 14658 ;;      Locals:        18       0       0       0       0       0       0
 14659 ;;      Temps:          8       0       0       0       0       0       0
 14660 ;;      Totals:        36       0       0       0       0       0       0
 14661 ;;Total ram usage:       36 bytes
 14662 ;; Hardware stack levels used:    1
 14663 ;; Hardware stack levels required when called:    6
 14664 ;; This function calls:
 14665 ;;		___aodiv
 14666 ;;		___aomod
 14667 ;;		_abs
 14668 ;;		_pad
 14669 ;; This function is called by:
 14670 ;;		_vfpfcnvrt
 14671 ;; This function uses a non-reentrant model
 14672 ;;
 14673                           
 14674                           	psect	text46
 14675  00233E                     __ptext46:
 14676                           	opt callstack 0
 14677  00233E                     _dtoa:
 14678                           	opt callstack 19
 14679  00233E                     
 14680                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 274: static int dtoa(FILE *fp
      +                          , long long d);/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 275: {;/opt/mic
      +                          rochip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 276:     int i, p, s, w;;/opt/microchi
      +                          p/xc8/v2.10/pic/sources/c99/common/doprnt.c: 277:     long long n;;/opt/microchip/xc8/v2
      +                          .10/pic/sources/c99/common/doprnt.c: 280:     n = d;
 14681  00233E  C029  F041         	movff	dtoa@d,dtoa@n
 14682  002342  C02A  F042         	movff	dtoa@d+1,dtoa@n+1
 14683  002346  C02B  F043         	movff	dtoa@d+2,dtoa@n+2
 14684  00234A  C02C  F044         	movff	dtoa@d+3,dtoa@n+3
 14685  00234E  C02D  F045         	movff	dtoa@d+4,dtoa@n+4
 14686  002352  C02E  F046         	movff	dtoa@d+5,dtoa@n+5
 14687  002356  C02F  F047         	movff	dtoa@d+6,dtoa@n+6
 14688  00235A  C030  F048         	movff	dtoa@d+7,dtoa@n+7
 14689  00235E                     
 14690                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 281:     s = n < 0 ? 1 : 0;
 14691  00235E  BE48               	btfsc	(dtoa@n+7)^0,7,c
 14692  002360  EFB4  F011         	goto	u6601
 14693  002364  EFB7  F011         	goto	u6600
 14694  002368                     u6601:
 14695  002368  0E01               	movlw	1
 14696  00236A  EFB8  F011         	goto	u6610
 14697  00236E                     u6600:
 14698  00236E  0E00               	movlw	0
 14699  002370                     u6610:
 14700  002370  6E3F               	movwf	dtoa@s^0,c
 14701  002372  6A40               	clrf	(dtoa@s+1)^0,c
 14702                           
 14703                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 282:     if (s) {
 14704  002374  503F               	movf	dtoa@s^0,w,c
 14705  002376  1040               	iorwf	(dtoa@s+1)^0,w,c
 14706  002378  B4D8               	btfsc	status,2,c
 14707  00237A  EFC1  F011         	goto	u6621
 14708  00237E  EFC3  F011         	goto	u6620
 14709  002382                     u6621:
 14710  002382  EFD3  F011         	goto	l5519
 14711  002386                     u6620:
 14712  002386                     
 14713                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 283:         n = -n;
 14714  002386  1E48               	comf	(dtoa@n+7)^0,f,c
 14715  002388  1E47               	comf	(dtoa@n+6)^0,f,c
 14716  00238A  1E46               	comf	(dtoa@n+5)^0,f,c
 14717  00238C  1E45               	comf	(dtoa@n+4)^0,f,c
 14718  00238E  1E44               	comf	(dtoa@n+3)^0,f,c
 14719  002390  1E43               	comf	(dtoa@n+2)^0,f,c
 14720  002392  1E42               	comf	(dtoa@n+1)^0,f,c
 14721  002394  6C41               	negf	dtoa@n^0,c
 14722  002396  0E00               	movlw	0
 14723  002398  2242               	addwfc	(dtoa@n+1)^0,f,c
 14724  00239A  2243               	addwfc	(dtoa@n+2)^0,f,c
 14725  00239C  2244               	addwfc	(dtoa@n+3)^0,f,c
 14726  00239E  2245               	addwfc	(dtoa@n+4)^0,f,c
 14727  0023A0  2246               	addwfc	(dtoa@n+5)^0,f,c
 14728  0023A2  2247               	addwfc	(dtoa@n+6)^0,f,c
 14729  0023A4  2248               	addwfc	(dtoa@n+7)^0,f,c
 14730  0023A6                     l5519:
 14731                           
 14732                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 287:     if (!(prec < 0)) {
 14733  0023A6  BE6A               	btfsc	(_prec+1)^0,7,c
 14734  0023A8  EFD8  F011         	goto	u6631
 14735  0023AC  EFDA  F011         	goto	u6630
 14736  0023B0                     u6631:
 14737  0023B0  EFDB  F011         	goto	l5523
 14738  0023B4                     u6630:
 14739  0023B4                     
 14740                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 288:         flags &= ~(1 << 
      +                          1);
 14741  0023B4  926B               	bcf	_flags^0,1,c
 14742  0023B6                     l5523:
 14743                           
 14744                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 290:     p = (0 < prec) ? pre
      +                          c : 1;
 14745  0023B6  BE6A               	btfsc	(_prec+1)^0,7,c
 14746  0023B8  EFE8  F011         	goto	u6640
 14747  0023BC  506A               	movf	(_prec+1)^0,w,c
 14748  0023BE  E106               	bnz	u6641
 14749  0023C0  0469               	decf	_prec^0,w,c
 14750  0023C2  B0D8               	btfsc	status,0,c
 14751  0023C4  EFE6  F011         	goto	u6641
 14752  0023C8  EFE8  F011         	goto	u6640
 14753  0023CC                     u6641:
 14754  0023CC  EFEE  F011         	goto	l687
 14755  0023D0                     u6640:
 14756  0023D0  0E00               	movlw	0
 14757  0023D2  6E3C               	movwf	(dtoa@p+1)^0,c
 14758  0023D4  0E01               	movlw	1
 14759  0023D6  6E3B               	movwf	dtoa@p^0,c
 14760  0023D8  EFF2  F011         	goto	l689
 14761  0023DC                     l687:
 14762  0023DC  C069  F03B         	movff	_prec,dtoa@p
 14763  0023E0  C06A  F03C         	movff	_prec+1,dtoa@p+1
 14764  0023E4                     l689:
 14765                           
 14766                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 291:     w = width;
 14767  0023E4  C067  F03D         	movff	_width,dtoa@w
 14768  0023E8  C068  F03E         	movff	_width+1,dtoa@w+1
 14769  0023EC                     
 14770                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 292:     if (s || (flags & (1
      +                           << 2))) {
 14771  0023EC  503F               	movf	dtoa@s^0,w,c
 14772  0023EE  1040               	iorwf	(dtoa@s+1)^0,w,c
 14773  0023F0  A4D8               	btfss	status,2,c
 14774  0023F2  EFFD  F011         	goto	u6651
 14775  0023F6  EFFF  F011         	goto	u6650
 14776  0023FA                     u6651:
 14777  0023FA  EF06  F012         	goto	l5531
 14778  0023FE                     u6650:
 14779  0023FE  A46B               	btfss	_flags^0,2,c
 14780  002400  EF04  F012         	goto	u6661
 14781  002404  EF06  F012         	goto	u6660
 14782  002408                     u6661:
 14783  002408  EF09  F012         	goto	l5533
 14784  00240C                     u6660:
 14785  00240C                     l5531:
 14786                           
 14787                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 293:         --w;
 14788  00240C  063D               	decf	dtoa@w^0,f,c
 14789  00240E  A0D8               	btfss	status,0,c
 14790  002410  063E               	decf	(dtoa@w+1)^0,f,c
 14791  002412                     l5533:
 14792                           
 14793                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 297:     i = sizeof(dbuf) - 1
      +                          ;
 14794  002412  0E00               	movlw	0
 14795  002414  6E4A               	movwf	(dtoa@i+1)^0,c
 14796  002416  0E1F               	movlw	31
 14797  002418  6E49               	movwf	dtoa@i^0,c
 14798  00241A                     
 14799                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 298:     dbuf[i] = '\0';
 14800  00241A  0E00               	movlw	0
 14801  00241C  0101               	movlb	1	; () banked
 14802  00241E  6FDC               	movwf	(_dbuf+31)& (0+255),b
 14803                           
 14804                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 299:     while (!(i < 1) && (
      +                          n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 14805  002420  EF8E  F012         	goto	l5547
 14806  002424                     l5537:
 14807                           
 14808                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 300:         --i;
 14809  002424  0649               	decf	dtoa@i^0,f,c
 14810  002426  A0D8               	btfss	status,0,c
 14811  002428  064A               	decf	(dtoa@i+1)^0,f,c
 14812  00242A                     
 14813                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 301:         dbuf[i] = '0' + 
      +                          abs(n % 10);
 14814  00242A  0EBD               	movlw	low _dbuf
 14815  00242C  2449               	addwf	dtoa@i^0,w,c
 14816  00242E  6ED9               	movwf	fsr2l,c
 14817  002430  0E01               	movlw	high _dbuf
 14818  002432  204A               	addwfc	(dtoa@i+1)^0,w,c
 14819  002434  6EDA               	movwf	fsr2h,c
 14820  002436  C041  F00D         	movff	dtoa@n,___aomod@dividend
 14821  00243A  C042  F00E         	movff	dtoa@n+1,___aomod@dividend+1
 14822  00243E  C043  F00F         	movff	dtoa@n+2,___aomod@dividend+2
 14823  002442  C044  F010         	movff	dtoa@n+3,___aomod@dividend+3
 14824  002446  C045  F011         	movff	dtoa@n+4,___aomod@dividend+4
 14825  00244A  C046  F012         	movff	dtoa@n+5,___aomod@dividend+5
 14826  00244E  C047  F013         	movff	dtoa@n+6,___aomod@dividend+6
 14827  002452  C048  F014         	movff	dtoa@n+7,___aomod@dividend+7
 14828  002456  0E0A               	movlw	10
 14829  002458  6E15               	movwf	___aomod@divisor^0,c
 14830  00245A  0E00               	movlw	0
 14831  00245C  6E16               	movwf	(___aomod@divisor+1)^0,c
 14832  00245E  0E00               	movlw	0
 14833  002460  6E17               	movwf	(___aomod@divisor+2)^0,c
 14834  002462  0E00               	movlw	0
 14835  002464  6E18               	movwf	(___aomod@divisor+3)^0,c
 14836  002466  0E00               	movlw	0
 14837  002468  6E19               	movwf	(___aomod@divisor+4)^0,c
 14838  00246A  0E00               	movlw	0
 14839  00246C  6E1A               	movwf	(___aomod@divisor+5)^0,c
 14840  00246E  0E00               	movlw	0
 14841  002470  6E1B               	movwf	(___aomod@divisor+6)^0,c
 14842  002472  0E00               	movlw	0
 14843  002474  6E1C               	movwf	(___aomod@divisor+7)^0,c
 14844  002476  EC44  F01E         	call	___aomod	;wreg free
 14845  00247A  C00D  F031         	movff	?___aomod,??_dtoa
 14846  00247E  C00E  F032         	movff	?___aomod+1,??_dtoa+1
 14847  002482  C00F  F033         	movff	?___aomod+2,??_dtoa+2
 14848  002486  C010  F034         	movff	?___aomod+3,??_dtoa+3
 14849  00248A  C011  F035         	movff	?___aomod+4,??_dtoa+4
 14850  00248E  C012  F036         	movff	?___aomod+5,??_dtoa+5
 14851  002492  C013  F037         	movff	?___aomod+6,??_dtoa+6
 14852  002496  C014  F038         	movff	?___aomod+7,??_dtoa+7
 14853  00249A  C031  F01F         	movff	??_dtoa,abs@a
 14854  00249E  C033  F020         	movff	??_dtoa+2,abs@a+1
 14855  0024A2  EC4E  F02B         	call	_abs	;wreg free
 14856  0024A6  501F               	movf	?_abs^0,w,c
 14857  0024A8  0F30               	addlw	48
 14858  0024AA  6EDF               	movwf	indf2,c
 14859  0024AC                     
 14860                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 302:         --p;
 14861  0024AC  063B               	decf	dtoa@p^0,f,c
 14862  0024AE  A0D8               	btfss	status,0,c
 14863  0024B0  063C               	decf	(dtoa@p+1)^0,f,c
 14864  0024B2                     
 14865                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 303:         --w;
 14866  0024B2  063D               	decf	dtoa@w^0,f,c
 14867  0024B4  A0D8               	btfss	status,0,c
 14868  0024B6  063E               	decf	(dtoa@w+1)^0,f,c
 14869  0024B8                     
 14870                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 304:         n = n / 10;
 14871  0024B8  C041  F00D         	movff	dtoa@n,___aodiv@dividend
 14872  0024BC  C042  F00E         	movff	dtoa@n+1,___aodiv@dividend+1
 14873  0024C0  C043  F00F         	movff	dtoa@n+2,___aodiv@dividend+2
 14874  0024C4  C044  F010         	movff	dtoa@n+3,___aodiv@dividend+3
 14875  0024C8  C045  F011         	movff	dtoa@n+4,___aodiv@dividend+4
 14876  0024CC  C046  F012         	movff	dtoa@n+5,___aodiv@dividend+5
 14877  0024D0  C047  F013         	movff	dtoa@n+6,___aodiv@dividend+6
 14878  0024D4  C048  F014         	movff	dtoa@n+7,___aodiv@dividend+7
 14879  0024D8  0E0A               	movlw	10
 14880  0024DA  6E15               	movwf	___aodiv@divisor^0,c
 14881  0024DC  0E00               	movlw	0
 14882  0024DE  6E16               	movwf	(___aodiv@divisor+1)^0,c
 14883  0024E0  0E00               	movlw	0
 14884  0024E2  6E17               	movwf	(___aodiv@divisor+2)^0,c
 14885  0024E4  0E00               	movlw	0
 14886  0024E6  6E18               	movwf	(___aodiv@divisor+3)^0,c
 14887  0024E8  0E00               	movlw	0
 14888  0024EA  6E19               	movwf	(___aodiv@divisor+4)^0,c
 14889  0024EC  0E00               	movlw	0
 14890  0024EE  6E1A               	movwf	(___aodiv@divisor+5)^0,c
 14891  0024F0  0E00               	movlw	0
 14892  0024F2  6E1B               	movwf	(___aodiv@divisor+6)^0,c
 14893  0024F4  0E00               	movlw	0
 14894  0024F6  6E1C               	movwf	(___aodiv@divisor+7)^0,c
 14895  0024F8  EC11  F01C         	call	___aodiv	;wreg free
 14896  0024FC  C00D  F041         	movff	?___aodiv,dtoa@n
 14897  002500  C00E  F042         	movff	?___aodiv+1,dtoa@n+1
 14898  002504  C00F  F043         	movff	?___aodiv+2,dtoa@n+2
 14899  002508  C010  F044         	movff	?___aodiv+3,dtoa@n+3
 14900  00250C  C011  F045         	movff	?___aodiv+4,dtoa@n+4
 14901  002510  C012  F046         	movff	?___aodiv+5,dtoa@n+5
 14902  002514  C013  F047         	movff	?___aodiv+6,dtoa@n+6
 14903  002518  C014  F048         	movff	?___aodiv+7,dtoa@n+7
 14904  00251C                     l5547:
 14905                           
 14906                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 299:     while (!(i < 1) && (
      +                          n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 14907  00251C  BE4A               	btfsc	(dtoa@i+1)^0,7,c
 14908  00251E  EF99  F012         	goto	u6671
 14909  002522  504A               	movf	(dtoa@i+1)^0,w,c
 14910  002524  E108               	bnz	u6670
 14911  002526  0449               	decf	dtoa@i^0,w,c
 14912  002528  A0D8               	btfss	status,0,c
 14913  00252A  EF99  F012         	goto	u6671
 14914  00252E  EF9B  F012         	goto	u6670
 14915  002532                     u6671:
 14916  002532  EFCB  F012         	goto	l5557
 14917  002536                     u6670:
 14918  002536  5041               	movf	dtoa@n^0,w,c
 14919  002538  1042               	iorwf	(dtoa@n+1)^0,w,c
 14920  00253A  1043               	iorwf	(dtoa@n+2)^0,w,c
 14921  00253C  1044               	iorwf	(dtoa@n+3)^0,w,c
 14922  00253E  1045               	iorwf	(dtoa@n+4)^0,w,c
 14923  002540  1046               	iorwf	(dtoa@n+5)^0,w,c
 14924  002542  1047               	iorwf	(dtoa@n+6)^0,w,c
 14925  002544  1048               	iorwf	(dtoa@n+7)^0,w,c
 14926  002546  A4D8               	btfss	status,2,c
 14927  002548  EFA8  F012         	goto	u6681
 14928  00254C  EFAA  F012         	goto	u6680
 14929  002550                     u6681:
 14930  002550  EF12  F012         	goto	l5537
 14931  002554                     u6680:
 14932  002554  BE3C               	btfsc	(dtoa@p+1)^0,7,c
 14933  002556  EFB7  F012         	goto	u6690
 14934  00255A  503C               	movf	(dtoa@p+1)^0,w,c
 14935  00255C  E106               	bnz	u6691
 14936  00255E  043B               	decf	dtoa@p^0,w,c
 14937  002560  B0D8               	btfsc	status,0,c
 14938  002562  EFB5  F012         	goto	u6691
 14939  002566  EFB7  F012         	goto	u6690
 14940  00256A                     u6691:
 14941  00256A  EF12  F012         	goto	l5537
 14942  00256E                     u6690:
 14943  00256E  BE3E               	btfsc	(dtoa@w+1)^0,7,c
 14944  002570  EFC2  F012         	goto	u6701
 14945  002574  503E               	movf	(dtoa@w+1)^0,w,c
 14946  002576  E108               	bnz	u6700
 14947  002578  043D               	decf	dtoa@w^0,w,c
 14948  00257A  A0D8               	btfss	status,0,c
 14949  00257C  EFC2  F012         	goto	u6701
 14950  002580  EFC4  F012         	goto	u6700
 14951  002584                     u6701:
 14952  002584  EFCB  F012         	goto	l5557
 14953  002588                     u6700:
 14954  002588  B26B               	btfsc	_flags^0,1,c
 14955  00258A  EFC9  F012         	goto	u6711
 14956  00258E  EFCB  F012         	goto	u6710
 14957  002592                     u6711:
 14958  002592  EF12  F012         	goto	l5537
 14959  002596                     u6710:
 14960  002596                     l5557:
 14961                           
 14962                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 308:     if (s || (flags & (1
      +                           << 2))) {
 14963  002596  503F               	movf	dtoa@s^0,w,c
 14964  002598  1040               	iorwf	(dtoa@s+1)^0,w,c
 14965  00259A  A4D8               	btfss	status,2,c
 14966  00259C  EFD2  F012         	goto	u6721
 14967  0025A0  EFD4  F012         	goto	u6720
 14968  0025A4                     u6721:
 14969  0025A4  EFDB  F012         	goto	l5561
 14970  0025A8                     u6720:
 14971  0025A8  A46B               	btfss	_flags^0,2,c
 14972  0025AA  EFD9  F012         	goto	u6731
 14973  0025AE  EFDB  F012         	goto	u6730
 14974  0025B2                     u6731:
 14975  0025B2  EFF9  F012         	goto	l5571
 14976  0025B6                     u6730:
 14977  0025B6                     l5561:
 14978                           
 14979                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 309:         --i;
 14980  0025B6  0649               	decf	dtoa@i^0,f,c
 14981  0025B8  A0D8               	btfss	status,0,c
 14982  0025BA  064A               	decf	(dtoa@i+1)^0,f,c
 14983  0025BC                     
 14984                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 310:         dbuf[i] = s ? '-
      +                          ' : '+';
 14985  0025BC  503F               	movf	dtoa@s^0,w,c
 14986  0025BE  1040               	iorwf	(dtoa@s+1)^0,w,c
 14987  0025C0  A4D8               	btfss	status,2,c
 14988  0025C2  EFE5  F012         	goto	u6741
 14989  0025C6  EFE7  F012         	goto	u6740
 14990  0025CA                     u6741:
 14991  0025CA  EFED  F012         	goto	l5567
 14992  0025CE                     u6740:
 14993  0025CE  0E00               	movlw	0
 14994  0025D0  6E3A               	movwf	(_dtoa$2324+1)^0,c
 14995  0025D2  0E2B               	movlw	43
 14996  0025D4  6E39               	movwf	_dtoa$2324^0,c
 14997  0025D6  EFF1  F012         	goto	l5569
 14998  0025DA                     l5567:
 14999  0025DA  0E00               	movlw	0
 15000  0025DC  6E3A               	movwf	(_dtoa$2324+1)^0,c
 15001  0025DE  0E2D               	movlw	45
 15002  0025E0  6E39               	movwf	_dtoa$2324^0,c
 15003  0025E2                     l5569:
 15004  0025E2  0EBD               	movlw	low _dbuf
 15005  0025E4  2449               	addwf	dtoa@i^0,w,c
 15006  0025E6  6ED9               	movwf	fsr2l,c
 15007  0025E8  0E01               	movlw	high _dbuf
 15008  0025EA  204A               	addwfc	(dtoa@i+1)^0,w,c
 15009  0025EC  6EDA               	movwf	fsr2h,c
 15010  0025EE  C039  FFDF         	movff	_dtoa$2324,indf2
 15011  0025F2                     l5571:
 15012                           
 15013                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 314:     return pad(fp, &dbuf
      +                          [i], w);
 15014  0025F2  C027  F019         	movff	dtoa@fp,pad@fp
 15015  0025F6  C028  F01A         	movff	dtoa@fp+1,pad@fp+1
 15016  0025FA  0EBD               	movlw	low _dbuf
 15017  0025FC  2449               	addwf	dtoa@i^0,w,c
 15018  0025FE  6E1B               	movwf	pad@buf^0,c
 15019  002600  0E01               	movlw	high _dbuf
 15020  002602  204A               	addwfc	(dtoa@i+1)^0,w,c
 15021  002604  6E1C               	movwf	(pad@buf+1)^0,c
 15022  002606  C03D  F01D         	movff	dtoa@w,pad@p
 15023  00260A  C03E  F01E         	movff	dtoa@w+1,pad@p+1
 15024  00260E  ECCD  F023         	call	_pad	;wreg free
 15025  002612  C019  F027         	movff	?_pad,?_dtoa
 15026  002616  C01A  F028         	movff	?_pad+1,?_dtoa+1
 15027  00261A  0012               	return		;funcret
 15028  00261C                     __end_of_dtoa:
 15029                           	opt callstack 0
 15030                           
 15031 ;; *************** function _abs *****************
 15032 ;; Defined at:
 15033 ;;		line 1 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/abs.c"
 15034 ;; Parameters:    Size  Location     Type
 15035 ;;  a               2   30[COMRAM] int 
 15036 ;; Auto vars:     Size  Location     Type
 15037 ;;		None
 15038 ;; Return value:  Size  Location     Type
 15039 ;;                  2   30[COMRAM] int 
 15040 ;; Registers used:
 15041 ;;		wreg, status,2, status,0
 15042 ;; Tracked objects:
 15043 ;;		On entry : 0/0
 15044 ;;		On exit  : 0/0
 15045 ;;		Unchanged: 0/0
 15046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15047 ;;      Params:         2       0       0       0       0       0       0
 15048 ;;      Locals:         0       0       0       0       0       0       0
 15049 ;;      Temps:          2       0       0       0       0       0       0
 15050 ;;      Totals:         4       0       0       0       0       0       0
 15051 ;;Total ram usage:        4 bytes
 15052 ;; Hardware stack levels used:    1
 15053 ;; Hardware stack levels required when called:    2
 15054 ;; This function calls:
 15055 ;;		Nothing
 15056 ;; This function is called by:
 15057 ;;		_dtoa
 15058 ;; This function uses a non-reentrant model
 15059 ;;
 15060                           
 15061                           	psect	text47
 15062  00569C                     __ptext47:
 15063                           	opt callstack 0
 15064  00569C                     _abs:
 15065                           	opt callstack 22
 15066  00569C  BE20               	btfsc	(abs@a+1)^0,7,c
 15067  00569E  EF5B  F02B         	goto	u6200
 15068  0056A2  5020               	movf	(abs@a+1)^0,w,c
 15069  0056A4  E106               	bnz	u6201
 15070  0056A6  041F               	decf	abs@a^0,w,c
 15071  0056A8  B0D8               	btfsc	status,0,c
 15072  0056AA  EF59  F02B         	goto	u6201
 15073  0056AE  EF5B  F02B         	goto	u6200
 15074  0056B2                     u6201:
 15075  0056B2  EF69  F02B         	goto	l1503
 15076  0056B6                     u6200:
 15077  0056B6  C01F  F021         	movff	abs@a,??_abs
 15078  0056BA  C020  F022         	movff	abs@a+1,??_abs+1
 15079  0056BE  1E21               	comf	??_abs^0,f,c
 15080  0056C0  1E22               	comf	(??_abs+1)^0,f,c
 15081  0056C2  4A21               	infsnz	??_abs^0,f,c
 15082  0056C4  2A22               	incf	(??_abs+1)^0,f,c
 15083  0056C6  C021  F01F         	movff	??_abs,?_abs
 15084  0056CA  C022  F020         	movff	??_abs+1,?_abs+1
 15085  0056CE  EF6D  F02B         	goto	l1506
 15086  0056D2                     l1503:
 15087  0056D2  C01F  F01F         	movff	abs@a,?_abs
 15088  0056D6  C020  F020         	movff	abs@a+1,?_abs+1
 15089  0056DA                     l1506:
 15090  0056DA  0012               	return		;funcret
 15091  0056DC                     __end_of_abs:
 15092                           	opt callstack 0
 15093                           
 15094 ;; *************** function ___aomod *****************
 15095 ;; Defined at:
 15096 ;;		line 9 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/aomod.c"
 15097 ;; Parameters:    Size  Location     Type
 15098 ;;  dividend        8   12[COMRAM] long long 
 15099 ;;  divisor         8   20[COMRAM] long long 
 15100 ;; Auto vars:     Size  Location     Type
 15101 ;;  sign            1   29[COMRAM] unsigned char 
 15102 ;;  counter         1   28[COMRAM] unsigned char 
 15103 ;; Return value:  Size  Location     Type
 15104 ;;                  8   12[COMRAM] long long 
 15105 ;; Registers used:
 15106 ;;		wreg, status,2, status,0
 15107 ;; Tracked objects:
 15108 ;;		On entry : 0/0
 15109 ;;		On exit  : 0/0
 15110 ;;		Unchanged: 0/0
 15111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15112 ;;      Params:        16       0       0       0       0       0       0
 15113 ;;      Locals:         2       0       0       0       0       0       0
 15114 ;;      Temps:          0       0       0       0       0       0       0
 15115 ;;      Totals:        18       0       0       0       0       0       0
 15116 ;;Total ram usage:       18 bytes
 15117 ;; Hardware stack levels used:    1
 15118 ;; Hardware stack levels required when called:    2
 15119 ;; This function calls:
 15120 ;;		Nothing
 15121 ;; This function is called by:
 15122 ;;		_dtoa
 15123 ;; This function uses a non-reentrant model
 15124 ;;
 15125                           
 15126                           	psect	text48
 15127  003C88                     __ptext48:
 15128                           	opt callstack 0
 15129  003C88                     ___aomod:
 15130                           	opt callstack 22
 15131  003C88  0E00               	movlw	0
 15132  003C8A  6E1E               	movwf	___aomod@sign^0,c
 15133  003C8C  BE14               	btfsc	(___aomod@dividend+7)^0,7,c
 15134  003C8E  EF4D  F01E         	goto	u6370
 15135  003C92  EF4B  F01E         	goto	u6371
 15136  003C96                     u6371:
 15137  003C96  EF5F  F01E         	goto	l5401
 15138  003C9A                     u6370:
 15139  003C9A  1E14               	comf	(___aomod@dividend+7)^0,f,c
 15140  003C9C  1E13               	comf	(___aomod@dividend+6)^0,f,c
 15141  003C9E  1E12               	comf	(___aomod@dividend+5)^0,f,c
 15142  003CA0  1E11               	comf	(___aomod@dividend+4)^0,f,c
 15143  003CA2  1E10               	comf	(___aomod@dividend+3)^0,f,c
 15144  003CA4  1E0F               	comf	(___aomod@dividend+2)^0,f,c
 15145  003CA6  1E0E               	comf	(___aomod@dividend+1)^0,f,c
 15146  003CA8  6C0D               	negf	___aomod@dividend^0,c
 15147  003CAA  0E00               	movlw	0
 15148  003CAC  220E               	addwfc	(___aomod@dividend+1)^0,f,c
 15149  003CAE  220F               	addwfc	(___aomod@dividend+2)^0,f,c
 15150  003CB0  2210               	addwfc	(___aomod@dividend+3)^0,f,c
 15151  003CB2  2211               	addwfc	(___aomod@dividend+4)^0,f,c
 15152  003CB4  2212               	addwfc	(___aomod@dividend+5)^0,f,c
 15153  003CB6  2213               	addwfc	(___aomod@dividend+6)^0,f,c
 15154  003CB8  2214               	addwfc	(___aomod@dividend+7)^0,f,c
 15155  003CBA  0E01               	movlw	1
 15156  003CBC  6E1E               	movwf	___aomod@sign^0,c
 15157  003CBE                     l5401:
 15158  003CBE  BE1C               	btfsc	(___aomod@divisor+7)^0,7,c
 15159  003CC0  EF66  F01E         	goto	u6380
 15160  003CC4  EF64  F01E         	goto	u6381
 15161  003CC8                     u6381:
 15162  003CC8  EF76  F01E         	goto	l5405
 15163  003CCC                     u6380:
 15164  003CCC  1E1C               	comf	(___aomod@divisor+7)^0,f,c
 15165  003CCE  1E1B               	comf	(___aomod@divisor+6)^0,f,c
 15166  003CD0  1E1A               	comf	(___aomod@divisor+5)^0,f,c
 15167  003CD2  1E19               	comf	(___aomod@divisor+4)^0,f,c
 15168  003CD4  1E18               	comf	(___aomod@divisor+3)^0,f,c
 15169  003CD6  1E17               	comf	(___aomod@divisor+2)^0,f,c
 15170  003CD8  1E16               	comf	(___aomod@divisor+1)^0,f,c
 15171  003CDA  6C15               	negf	___aomod@divisor^0,c
 15172  003CDC  0E00               	movlw	0
 15173  003CDE  2216               	addwfc	(___aomod@divisor+1)^0,f,c
 15174  003CE0  2217               	addwfc	(___aomod@divisor+2)^0,f,c
 15175  003CE2  2218               	addwfc	(___aomod@divisor+3)^0,f,c
 15176  003CE4  2219               	addwfc	(___aomod@divisor+4)^0,f,c
 15177  003CE6  221A               	addwfc	(___aomod@divisor+5)^0,f,c
 15178  003CE8  221B               	addwfc	(___aomod@divisor+6)^0,f,c
 15179  003CEA  221C               	addwfc	(___aomod@divisor+7)^0,f,c
 15180  003CEC                     l5405:
 15181  003CEC  5015               	movf	___aomod@divisor^0,w,c
 15182  003CEE  1016               	iorwf	(___aomod@divisor+1)^0,w,c
 15183  003CF0  1017               	iorwf	(___aomod@divisor+2)^0,w,c
 15184  003CF2  1018               	iorwf	(___aomod@divisor+3)^0,w,c
 15185  003CF4  1019               	iorwf	(___aomod@divisor+4)^0,w,c
 15186  003CF6  101A               	iorwf	(___aomod@divisor+5)^0,w,c
 15187  003CF8  101B               	iorwf	(___aomod@divisor+6)^0,w,c
 15188  003CFA  101C               	iorwf	(___aomod@divisor+7)^0,w,c
 15189  003CFC  B4D8               	btfsc	status,2,c
 15190  003CFE  EF83  F01E         	goto	u6391
 15191  003D02  EF85  F01E         	goto	u6390
 15192  003D06                     u6391:
 15193  003D06  EFCD  F01E         	goto	l5421
 15194  003D0A                     u6390:
 15195  003D0A  0E01               	movlw	1
 15196  003D0C  6E1D               	movwf	___aomod@counter^0,c
 15197  003D0E  EF93  F01E         	goto	l5411
 15198  003D12                     l5409:
 15199  003D12  90D8               	bcf	status,0,c
 15200  003D14  3615               	rlcf	___aomod@divisor^0,f,c
 15201  003D16  3616               	rlcf	(___aomod@divisor+1)^0,f,c
 15202  003D18  3617               	rlcf	(___aomod@divisor+2)^0,f,c
 15203  003D1A  3618               	rlcf	(___aomod@divisor+3)^0,f,c
 15204  003D1C  3619               	rlcf	(___aomod@divisor+4)^0,f,c
 15205  003D1E  361A               	rlcf	(___aomod@divisor+5)^0,f,c
 15206  003D20  361B               	rlcf	(___aomod@divisor+6)^0,f,c
 15207  003D22  361C               	rlcf	(___aomod@divisor+7)^0,f,c
 15208  003D24  2A1D               	incf	___aomod@counter^0,f,c
 15209  003D26                     l5411:
 15210  003D26  AE1C               	btfss	(___aomod@divisor+7)^0,7,c
 15211  003D28  EF98  F01E         	goto	u6401
 15212  003D2C  EF9A  F01E         	goto	u6400
 15213  003D30                     u6401:
 15214  003D30  EF89  F01E         	goto	l5409
 15215  003D34                     u6400:
 15216  003D34                     l5413:
 15217  003D34  5015               	movf	___aomod@divisor^0,w,c
 15218  003D36  5C0D               	subwf	___aomod@dividend^0,w,c
 15219  003D38  5016               	movf	(___aomod@divisor+1)^0,w,c
 15220  003D3A  580E               	subwfb	(___aomod@dividend+1)^0,w,c
 15221  003D3C  5017               	movf	(___aomod@divisor+2)^0,w,c
 15222  003D3E  580F               	subwfb	(___aomod@dividend+2)^0,w,c
 15223  003D40  5018               	movf	(___aomod@divisor+3)^0,w,c
 15224  003D42  5810               	subwfb	(___aomod@dividend+3)^0,w,c
 15225  003D44  5019               	movf	(___aomod@divisor+4)^0,w,c
 15226  003D46  5811               	subwfb	(___aomod@dividend+4)^0,w,c
 15227  003D48  501A               	movf	(___aomod@divisor+5)^0,w,c
 15228  003D4A  5812               	subwfb	(___aomod@dividend+5)^0,w,c
 15229  003D4C  501B               	movf	(___aomod@divisor+6)^0,w,c
 15230  003D4E  5813               	subwfb	(___aomod@dividend+6)^0,w,c
 15231  003D50  501C               	movf	(___aomod@divisor+7)^0,w,c
 15232  003D52  5814               	subwfb	(___aomod@dividend+7)^0,w,c
 15233  003D54  A0D8               	btfss	status,0,c
 15234  003D56  EFAF  F01E         	goto	u6411
 15235  003D5A  EFB1  F01E         	goto	u6410
 15236  003D5E                     u6411:
 15237  003D5E  EFC1  F01E         	goto	l5417
 15238  003D62                     u6410:
 15239  003D62  5015               	movf	___aomod@divisor^0,w,c
 15240  003D64  5E0D               	subwf	___aomod@dividend^0,f,c
 15241  003D66  5016               	movf	(___aomod@divisor+1)^0,w,c
 15242  003D68  5A0E               	subwfb	(___aomod@dividend+1)^0,f,c
 15243  003D6A  5017               	movf	(___aomod@divisor+2)^0,w,c
 15244  003D6C  5A0F               	subwfb	(___aomod@dividend+2)^0,f,c
 15245  003D6E  5018               	movf	(___aomod@divisor+3)^0,w,c
 15246  003D70  5A10               	subwfb	(___aomod@dividend+3)^0,f,c
 15247  003D72  5019               	movf	(___aomod@divisor+4)^0,w,c
 15248  003D74  5A11               	subwfb	(___aomod@dividend+4)^0,f,c
 15249  003D76  501A               	movf	(___aomod@divisor+5)^0,w,c
 15250  003D78  5A12               	subwfb	(___aomod@dividend+5)^0,f,c
 15251  003D7A  501B               	movf	(___aomod@divisor+6)^0,w,c
 15252  003D7C  5A13               	subwfb	(___aomod@dividend+6)^0,f,c
 15253  003D7E  501C               	movf	(___aomod@divisor+7)^0,w,c
 15254  003D80  5A14               	subwfb	(___aomod@dividend+7)^0,f,c
 15255  003D82                     l5417:
 15256  003D82  90D8               	bcf	status,0,c
 15257  003D84  321C               	rrcf	(___aomod@divisor+7)^0,f,c
 15258  003D86  321B               	rrcf	(___aomod@divisor+6)^0,f,c
 15259  003D88  321A               	rrcf	(___aomod@divisor+5)^0,f,c
 15260  003D8A  3219               	rrcf	(___aomod@divisor+4)^0,f,c
 15261  003D8C  3218               	rrcf	(___aomod@divisor+3)^0,f,c
 15262  003D8E  3217               	rrcf	(___aomod@divisor+2)^0,f,c
 15263  003D90  3216               	rrcf	(___aomod@divisor+1)^0,f,c
 15264  003D92  3215               	rrcf	___aomod@divisor^0,f,c
 15265  003D94  2E1D               	decfsz	___aomod@counter^0,f,c
 15266  003D96  EF9A  F01E         	goto	l5413
 15267  003D9A                     l5421:
 15268  003D9A  501E               	movf	___aomod@sign^0,w,c
 15269  003D9C  B4D8               	btfsc	status,2,c
 15270  003D9E  EFD3  F01E         	goto	u6421
 15271  003DA2  EFD5  F01E         	goto	u6420
 15272  003DA6                     u6421:
 15273  003DA6  EFE5  F01E         	goto	l5425
 15274  003DAA                     u6420:
 15275  003DAA  1E14               	comf	(___aomod@dividend+7)^0,f,c
 15276  003DAC  1E13               	comf	(___aomod@dividend+6)^0,f,c
 15277  003DAE  1E12               	comf	(___aomod@dividend+5)^0,f,c
 15278  003DB0  1E11               	comf	(___aomod@dividend+4)^0,f,c
 15279  003DB2  1E10               	comf	(___aomod@dividend+3)^0,f,c
 15280  003DB4  1E0F               	comf	(___aomod@dividend+2)^0,f,c
 15281  003DB6  1E0E               	comf	(___aomod@dividend+1)^0,f,c
 15282  003DB8  6C0D               	negf	___aomod@dividend^0,c
 15283  003DBA  0E00               	movlw	0
 15284  003DBC  220E               	addwfc	(___aomod@dividend+1)^0,f,c
 15285  003DBE  220F               	addwfc	(___aomod@dividend+2)^0,f,c
 15286  003DC0  2210               	addwfc	(___aomod@dividend+3)^0,f,c
 15287  003DC2  2211               	addwfc	(___aomod@dividend+4)^0,f,c
 15288  003DC4  2212               	addwfc	(___aomod@dividend+5)^0,f,c
 15289  003DC6  2213               	addwfc	(___aomod@dividend+6)^0,f,c
 15290  003DC8  2214               	addwfc	(___aomod@dividend+7)^0,f,c
 15291  003DCA                     l5425:
 15292  003DCA  C00D  F00D         	movff	___aomod@dividend,?___aomod
 15293  003DCE  C00E  F00E         	movff	___aomod@dividend+1,?___aomod+1
 15294  003DD2  C00F  F00F         	movff	___aomod@dividend+2,?___aomod+2
 15295  003DD6  C010  F010         	movff	___aomod@dividend+3,?___aomod+3
 15296  003DDA  C011  F011         	movff	___aomod@dividend+4,?___aomod+4
 15297  003DDE  C012  F012         	movff	___aomod@dividend+5,?___aomod+5
 15298  003DE2  C013  F013         	movff	___aomod@dividend+6,?___aomod+6
 15299  003DE6  C014  F014         	movff	___aomod@dividend+7,?___aomod+7
 15300  003DEA  0012               	return		;funcret
 15301  003DEC                     __end_of___aomod:
 15302                           	opt callstack 0
 15303                           
 15304 ;; *************** function ___aodiv *****************
 15305 ;; Defined at:
 15306 ;;		line 9 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/aodiv.c"
 15307 ;; Parameters:    Size  Location     Type
 15308 ;;  dividend        8   12[COMRAM] long long 
 15309 ;;  divisor         8   20[COMRAM] long long 
 15310 ;; Auto vars:     Size  Location     Type
 15311 ;;  quotient        8   30[COMRAM] long long 
 15312 ;;  sign            1   29[COMRAM] unsigned char 
 15313 ;;  counter         1   28[COMRAM] unsigned char 
 15314 ;; Return value:  Size  Location     Type
 15315 ;;                  8   12[COMRAM] long long 
 15316 ;; Registers used:
 15317 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15318 ;; Tracked objects:
 15319 ;;		On entry : 0/0
 15320 ;;		On exit  : 0/0
 15321 ;;		Unchanged: 0/0
 15322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15323 ;;      Params:        16       0       0       0       0       0       0
 15324 ;;      Locals:        10       0       0       0       0       0       0
 15325 ;;      Temps:          0       0       0       0       0       0       0
 15326 ;;      Totals:        26       0       0       0       0       0       0
 15327 ;;Total ram usage:       26 bytes
 15328 ;; Hardware stack levels used:    1
 15329 ;; Hardware stack levels required when called:    2
 15330 ;; This function calls:
 15331 ;;		Nothing
 15332 ;; This function is called by:
 15333 ;;		_dtoa
 15334 ;; This function uses a non-reentrant model
 15335 ;;
 15336                           
 15337                           	psect	text49
 15338  003822                     __ptext49:
 15339                           	opt callstack 0
 15340  003822                     ___aodiv:
 15341                           	opt callstack 22
 15342  003822  0E00               	movlw	0
 15343  003824  6E1E               	movwf	___aodiv@sign^0,c
 15344  003826  BE1C               	btfsc	(___aodiv@divisor+7)^0,7,c
 15345  003828  EF1A  F01C         	goto	u6300
 15346  00382C  EF18  F01C         	goto	u6301
 15347  003830                     u6301:
 15348  003830  EF2C  F01C         	goto	l5357
 15349  003834                     u6300:
 15350  003834  1E1C               	comf	(___aodiv@divisor+7)^0,f,c
 15351  003836  1E1B               	comf	(___aodiv@divisor+6)^0,f,c
 15352  003838  1E1A               	comf	(___aodiv@divisor+5)^0,f,c
 15353  00383A  1E19               	comf	(___aodiv@divisor+4)^0,f,c
 15354  00383C  1E18               	comf	(___aodiv@divisor+3)^0,f,c
 15355  00383E  1E17               	comf	(___aodiv@divisor+2)^0,f,c
 15356  003840  1E16               	comf	(___aodiv@divisor+1)^0,f,c
 15357  003842  6C15               	negf	___aodiv@divisor^0,c
 15358  003844  0E00               	movlw	0
 15359  003846  2216               	addwfc	(___aodiv@divisor+1)^0,f,c
 15360  003848  2217               	addwfc	(___aodiv@divisor+2)^0,f,c
 15361  00384A  2218               	addwfc	(___aodiv@divisor+3)^0,f,c
 15362  00384C  2219               	addwfc	(___aodiv@divisor+4)^0,f,c
 15363  00384E  221A               	addwfc	(___aodiv@divisor+5)^0,f,c
 15364  003850  221B               	addwfc	(___aodiv@divisor+6)^0,f,c
 15365  003852  221C               	addwfc	(___aodiv@divisor+7)^0,f,c
 15366  003854  0E01               	movlw	1
 15367  003856  6E1E               	movwf	___aodiv@sign^0,c
 15368  003858                     l5357:
 15369  003858  BE14               	btfsc	(___aodiv@dividend+7)^0,7,c
 15370  00385A  EF33  F01C         	goto	u6310
 15371  00385E  EF31  F01C         	goto	u6311
 15372  003862                     u6311:
 15373  003862  EF45  F01C         	goto	l5363
 15374  003866                     u6310:
 15375  003866  1E14               	comf	(___aodiv@dividend+7)^0,f,c
 15376  003868  1E13               	comf	(___aodiv@dividend+6)^0,f,c
 15377  00386A  1E12               	comf	(___aodiv@dividend+5)^0,f,c
 15378  00386C  1E11               	comf	(___aodiv@dividend+4)^0,f,c
 15379  00386E  1E10               	comf	(___aodiv@dividend+3)^0,f,c
 15380  003870  1E0F               	comf	(___aodiv@dividend+2)^0,f,c
 15381  003872  1E0E               	comf	(___aodiv@dividend+1)^0,f,c
 15382  003874  6C0D               	negf	___aodiv@dividend^0,c
 15383  003876  0E00               	movlw	0
 15384  003878  220E               	addwfc	(___aodiv@dividend+1)^0,f,c
 15385  00387A  220F               	addwfc	(___aodiv@dividend+2)^0,f,c
 15386  00387C  2210               	addwfc	(___aodiv@dividend+3)^0,f,c
 15387  00387E  2211               	addwfc	(___aodiv@dividend+4)^0,f,c
 15388  003880  2212               	addwfc	(___aodiv@dividend+5)^0,f,c
 15389  003882  2213               	addwfc	(___aodiv@dividend+6)^0,f,c
 15390  003884  2214               	addwfc	(___aodiv@dividend+7)^0,f,c
 15391  003886  0E01               	movlw	1
 15392  003888  1A1E               	xorwf	___aodiv@sign^0,f,c
 15393  00388A                     l5363:
 15394  00388A  EE20  F01F         	lfsr	2,___aodiv@quotient
 15395  00388E  0E07               	movlw	7
 15396  003890                     u6321:
 15397  003890  6ADE               	clrf	postinc2,c
 15398  003892  06E8               	decf	wreg,f,c
 15399  003894  E2FD               	bc	u6321
 15400  003896  5015               	movf	___aodiv@divisor^0,w,c
 15401  003898  1016               	iorwf	(___aodiv@divisor+1)^0,w,c
 15402  00389A  1017               	iorwf	(___aodiv@divisor+2)^0,w,c
 15403  00389C  1018               	iorwf	(___aodiv@divisor+3)^0,w,c
 15404  00389E  1019               	iorwf	(___aodiv@divisor+4)^0,w,c
 15405  0038A0  101A               	iorwf	(___aodiv@divisor+5)^0,w,c
 15406  0038A2  101B               	iorwf	(___aodiv@divisor+6)^0,w,c
 15407  0038A4  101C               	iorwf	(___aodiv@divisor+7)^0,w,c
 15408  0038A6  B4D8               	btfsc	status,2,c
 15409  0038A8  EF58  F01C         	goto	u6331
 15410  0038AC  EF5A  F01C         	goto	u6330
 15411  0038B0                     u6331:
 15412  0038B0  EFAC  F01C         	goto	l5385
 15413  0038B4                     u6330:
 15414  0038B4  0E01               	movlw	1
 15415  0038B6  6E1D               	movwf	___aodiv@counter^0,c
 15416  0038B8  EF68  F01C         	goto	l5371
 15417  0038BC                     l5369:
 15418  0038BC  90D8               	bcf	status,0,c
 15419  0038BE  3615               	rlcf	___aodiv@divisor^0,f,c
 15420  0038C0  3616               	rlcf	(___aodiv@divisor+1)^0,f,c
 15421  0038C2  3617               	rlcf	(___aodiv@divisor+2)^0,f,c
 15422  0038C4  3618               	rlcf	(___aodiv@divisor+3)^0,f,c
 15423  0038C6  3619               	rlcf	(___aodiv@divisor+4)^0,f,c
 15424  0038C8  361A               	rlcf	(___aodiv@divisor+5)^0,f,c
 15425  0038CA  361B               	rlcf	(___aodiv@divisor+6)^0,f,c
 15426  0038CC  361C               	rlcf	(___aodiv@divisor+7)^0,f,c
 15427  0038CE  2A1D               	incf	___aodiv@counter^0,f,c
 15428  0038D0                     l5371:
 15429  0038D0  AE1C               	btfss	(___aodiv@divisor+7)^0,7,c
 15430  0038D2  EF6D  F01C         	goto	u6341
 15431  0038D6  EF6F  F01C         	goto	u6340
 15432  0038DA                     u6341:
 15433  0038DA  EF5E  F01C         	goto	l5369
 15434  0038DE                     u6340:
 15435  0038DE                     l5373:
 15436  0038DE  90D8               	bcf	status,0,c
 15437  0038E0  361F               	rlcf	___aodiv@quotient^0,f,c
 15438  0038E2  3620               	rlcf	(___aodiv@quotient+1)^0,f,c
 15439  0038E4  3621               	rlcf	(___aodiv@quotient+2)^0,f,c
 15440  0038E6  3622               	rlcf	(___aodiv@quotient+3)^0,f,c
 15441  0038E8  3623               	rlcf	(___aodiv@quotient+4)^0,f,c
 15442  0038EA  3624               	rlcf	(___aodiv@quotient+5)^0,f,c
 15443  0038EC  3625               	rlcf	(___aodiv@quotient+6)^0,f,c
 15444  0038EE  3626               	rlcf	(___aodiv@quotient+7)^0,f,c
 15445  0038F0  5015               	movf	___aodiv@divisor^0,w,c
 15446  0038F2  5C0D               	subwf	___aodiv@dividend^0,w,c
 15447  0038F4  5016               	movf	(___aodiv@divisor+1)^0,w,c
 15448  0038F6  580E               	subwfb	(___aodiv@dividend+1)^0,w,c
 15449  0038F8  5017               	movf	(___aodiv@divisor+2)^0,w,c
 15450  0038FA  580F               	subwfb	(___aodiv@dividend+2)^0,w,c
 15451  0038FC  5018               	movf	(___aodiv@divisor+3)^0,w,c
 15452  0038FE  5810               	subwfb	(___aodiv@dividend+3)^0,w,c
 15453  003900  5019               	movf	(___aodiv@divisor+4)^0,w,c
 15454  003902  5811               	subwfb	(___aodiv@dividend+4)^0,w,c
 15455  003904  501A               	movf	(___aodiv@divisor+5)^0,w,c
 15456  003906  5812               	subwfb	(___aodiv@dividend+5)^0,w,c
 15457  003908  501B               	movf	(___aodiv@divisor+6)^0,w,c
 15458  00390A  5813               	subwfb	(___aodiv@dividend+6)^0,w,c
 15459  00390C  501C               	movf	(___aodiv@divisor+7)^0,w,c
 15460  00390E  5814               	subwfb	(___aodiv@dividend+7)^0,w,c
 15461  003910  A0D8               	btfss	status,0,c
 15462  003912  EF8D  F01C         	goto	u6351
 15463  003916  EF8F  F01C         	goto	u6350
 15464  00391A                     u6351:
 15465  00391A  EFA0  F01C         	goto	l5381
 15466  00391E                     u6350:
 15467  00391E  5015               	movf	___aodiv@divisor^0,w,c
 15468  003920  5E0D               	subwf	___aodiv@dividend^0,f,c
 15469  003922  5016               	movf	(___aodiv@divisor+1)^0,w,c
 15470  003924  5A0E               	subwfb	(___aodiv@dividend+1)^0,f,c
 15471  003926  5017               	movf	(___aodiv@divisor+2)^0,w,c
 15472  003928  5A0F               	subwfb	(___aodiv@dividend+2)^0,f,c
 15473  00392A  5018               	movf	(___aodiv@divisor+3)^0,w,c
 15474  00392C  5A10               	subwfb	(___aodiv@dividend+3)^0,f,c
 15475  00392E  5019               	movf	(___aodiv@divisor+4)^0,w,c
 15476  003930  5A11               	subwfb	(___aodiv@dividend+4)^0,f,c
 15477  003932  501A               	movf	(___aodiv@divisor+5)^0,w,c
 15478  003934  5A12               	subwfb	(___aodiv@dividend+5)^0,f,c
 15479  003936  501B               	movf	(___aodiv@divisor+6)^0,w,c
 15480  003938  5A13               	subwfb	(___aodiv@dividend+6)^0,f,c
 15481  00393A  501C               	movf	(___aodiv@divisor+7)^0,w,c
 15482  00393C  5A14               	subwfb	(___aodiv@dividend+7)^0,f,c
 15483  00393E  801F               	bsf	___aodiv@quotient^0,0,c
 15484  003940                     l5381:
 15485  003940  90D8               	bcf	status,0,c
 15486  003942  321C               	rrcf	(___aodiv@divisor+7)^0,f,c
 15487  003944  321B               	rrcf	(___aodiv@divisor+6)^0,f,c
 15488  003946  321A               	rrcf	(___aodiv@divisor+5)^0,f,c
 15489  003948  3219               	rrcf	(___aodiv@divisor+4)^0,f,c
 15490  00394A  3218               	rrcf	(___aodiv@divisor+3)^0,f,c
 15491  00394C  3217               	rrcf	(___aodiv@divisor+2)^0,f,c
 15492  00394E  3216               	rrcf	(___aodiv@divisor+1)^0,f,c
 15493  003950  3215               	rrcf	___aodiv@divisor^0,f,c
 15494  003952  2E1D               	decfsz	___aodiv@counter^0,f,c
 15495  003954  EF6F  F01C         	goto	l5373
 15496  003958                     l5385:
 15497  003958  501E               	movf	___aodiv@sign^0,w,c
 15498  00395A  B4D8               	btfsc	status,2,c
 15499  00395C  EFB2  F01C         	goto	u6361
 15500  003960  EFB4  F01C         	goto	u6360
 15501  003964                     u6361:
 15502  003964  EFC4  F01C         	goto	l5389
 15503  003968                     u6360:
 15504  003968  1E26               	comf	(___aodiv@quotient+7)^0,f,c
 15505  00396A  1E25               	comf	(___aodiv@quotient+6)^0,f,c
 15506  00396C  1E24               	comf	(___aodiv@quotient+5)^0,f,c
 15507  00396E  1E23               	comf	(___aodiv@quotient+4)^0,f,c
 15508  003970  1E22               	comf	(___aodiv@quotient+3)^0,f,c
 15509  003972  1E21               	comf	(___aodiv@quotient+2)^0,f,c
 15510  003974  1E20               	comf	(___aodiv@quotient+1)^0,f,c
 15511  003976  6C1F               	negf	___aodiv@quotient^0,c
 15512  003978  0E00               	movlw	0
 15513  00397A  2220               	addwfc	(___aodiv@quotient+1)^0,f,c
 15514  00397C  2221               	addwfc	(___aodiv@quotient+2)^0,f,c
 15515  00397E  2222               	addwfc	(___aodiv@quotient+3)^0,f,c
 15516  003980  2223               	addwfc	(___aodiv@quotient+4)^0,f,c
 15517  003982  2224               	addwfc	(___aodiv@quotient+5)^0,f,c
 15518  003984  2225               	addwfc	(___aodiv@quotient+6)^0,f,c
 15519  003986  2226               	addwfc	(___aodiv@quotient+7)^0,f,c
 15520  003988                     l5389:
 15521  003988  C01F  F00D         	movff	___aodiv@quotient,?___aodiv
 15522  00398C  C020  F00E         	movff	___aodiv@quotient+1,?___aodiv+1
 15523  003990  C021  F00F         	movff	___aodiv@quotient+2,?___aodiv+2
 15524  003994  C022  F010         	movff	___aodiv@quotient+3,?___aodiv+3
 15525  003998  C023  F011         	movff	___aodiv@quotient+4,?___aodiv+4
 15526  00399C  C024  F012         	movff	___aodiv@quotient+5,?___aodiv+5
 15527  0039A0  C025  F013         	movff	___aodiv@quotient+6,?___aodiv+6
 15528  0039A4  C026  F014         	movff	___aodiv@quotient+7,?___aodiv+7
 15529  0039A8  0012               	return		;funcret
 15530  0039AA                     __end_of___aodiv:
 15531                           	opt callstack 0
 15532                           
 15533 ;; *************** function _ctoa *****************
 15534 ;; Defined at:
 15535 ;;		line 259 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c"
 15536 ;; Parameters:    Size  Location     Type
 15537 ;;  fp              2   35[COMRAM] PTR struct _IO_FILE
 15538 ;;		 -> NULL(0), 
 15539 ;;  c               1   37[COMRAM] unsigned char 
 15540 ;; Auto vars:     Size  Location     Type
 15541 ;;  w               2   38[COMRAM] int 
 15542 ;;  l               2    0        int 
 15543 ;; Return value:  Size  Location     Type
 15544 ;;                  2   35[COMRAM] int 
 15545 ;; Registers used:
 15546 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15547 ;; Tracked objects:
 15548 ;;		On entry : 0/0
 15549 ;;		On exit  : 0/0
 15550 ;;		Unchanged: 0/0
 15551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15552 ;;      Params:         3       0       0       0       0       0       0
 15553 ;;      Locals:         2       0       0       0       0       0       0
 15554 ;;      Temps:          0       0       0       0       0       0       0
 15555 ;;      Totals:         5       0       0       0       0       0       0
 15556 ;;Total ram usage:        5 bytes
 15557 ;; Hardware stack levels used:    1
 15558 ;; Hardware stack levels required when called:    6
 15559 ;; This function calls:
 15560 ;;		_pad
 15561 ;; This function is called by:
 15562 ;;		_vfpfcnvrt
 15563 ;; This function uses a non-reentrant model
 15564 ;;
 15565                           
 15566                           	psect	text50
 15567  0053A4                     __ptext50:
 15568                           	opt callstack 0
 15569  0053A4                     _ctoa:
 15570                           	opt callstack 19
 15571  0053A4                     
 15572                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 259: static int ctoa(FILE *fp
      +                          , char c);/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 260: {;/opt/microchi
      +                          p/xc8/v2.10/pic/sources/c99/common/doprnt.c: 261:     int l, w;;/opt/microchip/xc8/v2.10
      +                          /pic/sources/c99/common/doprnt.c: 264:     w = width ? width - 1 : width;
 15573  0053A4  5067               	movf	_width^0,w,c
 15574  0053A6  1068               	iorwf	(_width+1)^0,w,c
 15575  0053A8  A4D8               	btfss	status,2,c
 15576  0053AA  EFD9  F029         	goto	u6591
 15577  0053AE  EFDB  F029         	goto	u6590
 15578  0053B2                     u6591:
 15579  0053B2  EFE1  F029         	goto	l5503
 15580  0053B6                     u6590:
 15581  0053B6  C067  F027         	movff	_width,ctoa@w
 15582  0053BA  C068  F028         	movff	_width+1,ctoa@w+1
 15583  0053BE  EFE7  F029         	goto	l5505
 15584  0053C2                     l5503:
 15585  0053C2  0EFF               	movlw	255
 15586  0053C4  2467               	addwf	_width^0,w,c
 15587  0053C6  6E27               	movwf	ctoa@w^0,c
 15588  0053C8  0EFF               	movlw	255
 15589  0053CA  2068               	addwfc	(_width+1)^0,w,c
 15590  0053CC  6E28               	movwf	(ctoa@w+1)^0,c
 15591  0053CE                     l5505:
 15592                           
 15593                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 267:     dbuf[0] = c;
 15594  0053CE  C026  F1BD         	movff	ctoa@c,_dbuf
 15595  0053D2                     
 15596                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 268:     dbuf[1] = '\0';
 15597  0053D2  0E00               	movlw	0
 15598  0053D4  0101               	movlb	1	; () banked
 15599  0053D6  6FBE               	movwf	(_dbuf+1)& (0+255),b
 15600  0053D8                     
 15601                           ; BSR set to: 1
 15602                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 269:     return pad(fp, &dbuf
      +                          [0], w);
 15603  0053D8  C024  F019         	movff	ctoa@fp,pad@fp
 15604  0053DC  C025  F01A         	movff	ctoa@fp+1,pad@fp+1
 15605  0053E0  0EBD               	movlw	low _dbuf
 15606  0053E2  6E1B               	movwf	pad@buf^0,c
 15607  0053E4  0E01               	movlw	high _dbuf
 15608  0053E6  6E1C               	movwf	(pad@buf+1)^0,c
 15609  0053E8  C027  F01D         	movff	ctoa@w,pad@p
 15610  0053EC  C028  F01E         	movff	ctoa@w+1,pad@p+1
 15611  0053F0  ECCD  F023         	call	_pad	;wreg free
 15612  0053F4  C019  F024         	movff	?_pad,?_ctoa
 15613  0053F8  C01A  F025         	movff	?_pad+1,?_ctoa+1
 15614  0053FC  0012               	return		;funcret
 15615  0053FE                     __end_of_ctoa:
 15616                           	opt callstack 0
 15617                           
 15618 ;; *************** function _pad *****************
 15619 ;; Defined at:
 15620 ;;		line 72 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c"
 15621 ;; Parameters:    Size  Location     Type
 15622 ;;  fp              2   24[COMRAM] PTR struct _IO_FILE
 15623 ;;		 -> NULL(0), 
 15624 ;;  buf             2   26[COMRAM] PTR unsigned char 
 15625 ;;		 -> dbuf(32), 
 15626 ;;  p               2   28[COMRAM] int 
 15627 ;; Auto vars:     Size  Location     Type
 15628 ;;  w               2   33[COMRAM] int 
 15629 ;;  i               2   31[COMRAM] int 
 15630 ;; Return value:  Size  Location     Type
 15631 ;;                  2   24[COMRAM] int 
 15632 ;; Registers used:
 15633 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15634 ;; Tracked objects:
 15635 ;;		On entry : 0/0
 15636 ;;		On exit  : 0/0
 15637 ;;		Unchanged: 0/0
 15638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15639 ;;      Params:         6       0       0       0       0       0       0
 15640 ;;      Locals:         4       0       0       0       0       0       0
 15641 ;;      Temps:          1       0       0       0       0       0       0
 15642 ;;      Totals:        11       0       0       0       0       0       0
 15643 ;;Total ram usage:       11 bytes
 15644 ;; Hardware stack levels used:    1
 15645 ;; Hardware stack levels required when called:    5
 15646 ;; This function calls:
 15647 ;;		_fputc
 15648 ;;		_fputs
 15649 ;;		_strlen
 15650 ;; This function is called by:
 15651 ;;		_ctoa
 15652 ;;		_dtoa
 15653 ;;		_utoa
 15654 ;;		_xtoa
 15655 ;; This function uses a non-reentrant model
 15656 ;;
 15657                           
 15658                           	psect	text51
 15659  00479A                     __ptext51:
 15660                           	opt callstack 0
 15661  00479A                     _pad:
 15662                           	opt callstack 19
 15663  00479A                     
 15664                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 72: static int pad(FILE *fp, 
      +                          char *buf, int p);/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 73: {;/opt/m
      +                          icrochip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 74:     int i, w;;/opt/microchip/xc8
      +                          /v2.10/pic/sources/c99/common/doprnt.c: 77:     if (flags & (1 << 0)) {
 15665  00479A  A06B               	btfss	_flags^0,0,c
 15666  00479C  EFD2  F023         	goto	u6161
 15667  0047A0  EFD4  F023         	goto	u6160
 15668  0047A4                     u6161:
 15669  0047A4  EFDE  F023         	goto	l5299
 15670  0047A8                     u6160:
 15671  0047A8                     
 15672                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 78:         fputs((const char
      +                           *)buf, fp);
 15673  0047A8  C01B  F012         	movff	pad@buf,fputs@s
 15674  0047AC  C01C  F013         	movff	pad@buf+1,fputs@s+1
 15675  0047B0  C019  F014         	movff	pad@fp,fputs@fp
 15676  0047B4  C01A  F015         	movff	pad@fp+1,fputs@fp+1
 15677  0047B8  EC2C  F02B         	call	_fputs	;wreg free
 15678  0047BC                     l5299:
 15679                           
 15680                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 82:     w = (p < 0) ? 0 : p;
 15681  0047BC  BE1E               	btfsc	(pad@p+1)^0,7,c
 15682  0047BE  EFE3  F023         	goto	u6171
 15683  0047C2  EFE5  F023         	goto	u6170
 15684  0047C6                     u6171:
 15685  0047C6  EFEB  F023         	goto	l5303
 15686  0047CA                     u6170:
 15687  0047CA  C01D  F022         	movff	pad@p,pad@w
 15688  0047CE  C01E  F023         	movff	pad@p+1,pad@w+1
 15689  0047D2  EFEF  F023         	goto	l669
 15690  0047D6                     l5303:
 15691  0047D6  0E00               	movlw	0
 15692  0047D8  6E23               	movwf	(pad@w+1)^0,c
 15693  0047DA  0E00               	movlw	0
 15694  0047DC  6E22               	movwf	pad@w^0,c
 15695  0047DE                     l669:
 15696                           
 15697                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 83:     i = 0;
 15698  0047DE  0E00               	movlw	0
 15699  0047E0  6E21               	movwf	(pad@i+1)^0,c
 15700  0047E2  0E00               	movlw	0
 15701  0047E4  6E20               	movwf	pad@i^0,c
 15702                           
 15703                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 84:     while (i < w) {
 15704  0047E6  EF01  F024         	goto	l5309
 15705  0047EA                     l5305:
 15706                           
 15707                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 85:         fputc(' ', fp);
 15708  0047EA  0E00               	movlw	0
 15709  0047EC  6E0F               	movwf	(fputc@c+1)^0,c
 15710  0047EE  0E20               	movlw	32
 15711  0047F0  6E0E               	movwf	fputc@c^0,c
 15712  0047F2  C019  F010         	movff	pad@fp,fputc@fp
 15713  0047F6  C01A  F011         	movff	pad@fp+1,fputc@fp+1
 15714  0047FA  EC13  F02C         	call	_fputc	;wreg free
 15715  0047FE                     
 15716                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 86:         ++i;
 15717  0047FE  4A20               	infsnz	pad@i^0,f,c
 15718  004800  2A21               	incf	(pad@i+1)^0,f,c
 15719  004802                     l5309:
 15720                           
 15721                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 84:     while (i < w) {
 15722  004802  5022               	movf	pad@w^0,w,c
 15723  004804  5C20               	subwf	pad@i^0,w,c
 15724  004806  5021               	movf	(pad@i+1)^0,w,c
 15725  004808  0A80               	xorlw	128
 15726  00480A  6E1F               	movwf	??_pad^0,c
 15727  00480C  5023               	movf	(pad@w+1)^0,w,c
 15728  00480E  0A80               	xorlw	128
 15729  004810  581F               	subwfb	??_pad^0,w,c
 15730  004812  A0D8               	btfss	status,0,c
 15731  004814  EF0E  F024         	goto	u6181
 15732  004818  EF10  F024         	goto	u6180
 15733  00481C                     u6181:
 15734  00481C  EFF5  F023         	goto	l5305
 15735  004820                     u6180:
 15736  004820                     
 15737                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 90:     if (!(flags & (1 << 0
      +                          ))) {
 15738  004820  B06B               	btfsc	_flags^0,0,c
 15739  004822  EF15  F024         	goto	u6191
 15740  004826  EF17  F024         	goto	u6190
 15741  00482A                     u6191:
 15742  00482A  EF21  F024         	goto	l5313
 15743  00482E                     u6190:
 15744  00482E                     
 15745                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 91:         fputs((const char
      +                           *)buf, fp);
 15746  00482E  C01B  F012         	movff	pad@buf,fputs@s
 15747  004832  C01C  F013         	movff	pad@buf+1,fputs@s+1
 15748  004836  C019  F014         	movff	pad@fp,fputs@fp
 15749  00483A  C01A  F015         	movff	pad@fp+1,fputs@fp+1
 15750  00483E  EC2C  F02B         	call	_fputs	;wreg free
 15751  004842                     l5313:
 15752                           
 15753                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 94:     return strlen(buf) + 
      +                          w;
 15754  004842  C01B  F00D         	movff	pad@buf,strlen@s
 15755  004846  C01C  F00E         	movff	pad@buf+1,strlen@s+1
 15756  00484A  EC51  F02A         	call	_strlen	;wreg free
 15757  00484E  5022               	movf	pad@w^0,w,c
 15758  004850  240D               	addwf	?_strlen^0,w,c
 15759  004852  6E19               	movwf	?_pad^0,c
 15760  004854  5023               	movf	(pad@w+1)^0,w,c
 15761  004856  200E               	addwfc	(?_strlen+1)^0,w,c
 15762  004858  6E1A               	movwf	(?_pad+1)^0,c
 15763  00485A  0012               	return		;funcret
 15764  00485C                     __end_of_pad:
 15765                           	opt callstack 0
 15766                           
 15767 ;; *************** function _strlen *****************
 15768 ;; Defined at:
 15769 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/strlen.c"
 15770 ;; Parameters:    Size  Location     Type
 15771 ;;  s               2   12[COMRAM] PTR const unsigned char 
 15772 ;;		 -> ?_printf(2), stoa@nuls(7), dbuf(32), g_adf4351(55), 
 15773 ;;		 -> STR_22(3), STR_21(3), STR_19(9), 
 15774 ;; Auto vars:     Size  Location     Type
 15775 ;;  a               2   14[COMRAM] PTR const unsigned char 
 15776 ;;		 -> ?_printf(2), stoa@nuls(7), dbuf(32), g_adf4351(55), 
 15777 ;;		 -> STR_22(3), STR_21(3), STR_19(9), 
 15778 ;; Return value:  Size  Location     Type
 15779 ;;                  2   12[COMRAM] unsigned int 
 15780 ;; Registers used:
 15781 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
 15782 ;; Tracked objects:
 15783 ;;		On entry : 0/0
 15784 ;;		On exit  : 0/0
 15785 ;;		Unchanged: 0/0
 15786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15787 ;;      Params:         2       0       0       0       0       0       0
 15788 ;;      Locals:         2       0       0       0       0       0       0
 15789 ;;      Temps:          0       0       0       0       0       0       0
 15790 ;;      Totals:         4       0       0       0       0       0       0
 15791 ;;Total ram usage:        4 bytes
 15792 ;; Hardware stack levels used:    1
 15793 ;; Hardware stack levels required when called:    2
 15794 ;; This function calls:
 15795 ;;		Nothing
 15796 ;; This function is called by:
 15797 ;;		_pad
 15798 ;;		_stoa
 15799 ;; This function uses a non-reentrant model
 15800 ;;
 15801                           
 15802                           	psect	text52
 15803  0054A2                     __ptext52:
 15804                           	opt callstack 0
 15805  0054A2                     _strlen:
 15806                           	opt callstack 21
 15807  0054A2  C00D  F00F         	movff	strlen@s,strlen@a
 15808  0054A6  C00E  F010         	movff	strlen@s+1,strlen@a+1
 15809  0054AA  EF59  F02A         	goto	l5285
 15810  0054AE                     l5283:
 15811  0054AE  4A0D               	infsnz	strlen@s^0,f,c
 15812  0054B0  2A0E               	incf	(strlen@s+1)^0,f,c
 15813  0054B2                     l5285:
 15814  0054B2  C00D  FFF6         	movff	strlen@s,tblptrl
 15815  0054B6  C00E  FFF7         	movff	strlen@s+1,tblptrh
 15816  0054BA  6AF8               	clrf	tblptru,c
 15817  0054BC  0E05               	movlw	(high __ramtop+-1)
 15818  0054BE  64F7               	cpfsgt	tblptrh,c
 15819  0054C0  D003               	bra	u6127
 15820  0054C2  0008               	tblrd		*
 15821  0054C4  50F5               	movf	tablat,w,c
 15822  0054C6  D005               	bra	u6120
 15823  0054C8                     u6127:
 15824  0054C8  CFF6 FFE1          	movff	tblptrl,fsr1l
 15825  0054CC  CFF7 FFE2          	movff	tblptrh,fsr1h
 15826  0054D0  50E7               	movf	indf1,w,c
 15827  0054D2                     u6120:
 15828  0054D2  0900               	iorlw	0
 15829  0054D4  A4D8               	btfss	status,2,c
 15830  0054D6  EF6F  F02A         	goto	u6131
 15831  0054DA  EF71  F02A         	goto	u6130
 15832  0054DE                     u6131:
 15833  0054DE  EF57  F02A         	goto	l5283
 15834  0054E2                     u6130:
 15835  0054E2  500F               	movf	strlen@a^0,w,c
 15836  0054E4  5C0D               	subwf	strlen@s^0,w,c
 15837  0054E6  6E0D               	movwf	?_strlen^0,c
 15838  0054E8  5010               	movf	(strlen@a+1)^0,w,c
 15839  0054EA  580E               	subwfb	(strlen@s+1)^0,w,c
 15840  0054EC  6E0E               	movwf	(?_strlen+1)^0,c
 15841  0054EE  0012               	return		;funcret
 15842  0054F0                     __end_of_strlen:
 15843                           	opt callstack 0
 15844                           
 15845 ;; *************** function _fputs *****************
 15846 ;; Defined at:
 15847 ;;		line 8 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/nf_fputs.c"
 15848 ;; Parameters:    Size  Location     Type
 15849 ;;  s               2   17[COMRAM] PTR const unsigned char 
 15850 ;;		 -> dbuf(32), 
 15851 ;;  fp              2   19[COMRAM] PTR struct _IO_FILE
 15852 ;;		 -> NULL(0), 
 15853 ;; Auto vars:     Size  Location     Type
 15854 ;;  i               2   22[COMRAM] int 
 15855 ;;  c               1   21[COMRAM] unsigned char 
 15856 ;; Return value:  Size  Location     Type
 15857 ;;                  2   17[COMRAM] int 
 15858 ;; Registers used:
 15859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15860 ;; Tracked objects:
 15861 ;;		On entry : 0/0
 15862 ;;		On exit  : 0/0
 15863 ;;		Unchanged: 0/0
 15864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15865 ;;      Params:         4       0       0       0       0       0       0
 15866 ;;      Locals:         3       0       0       0       0       0       0
 15867 ;;      Temps:          0       0       0       0       0       0       0
 15868 ;;      Totals:         7       0       0       0       0       0       0
 15869 ;;Total ram usage:        7 bytes
 15870 ;; Hardware stack levels used:    1
 15871 ;; Hardware stack levels required when called:    4
 15872 ;; This function calls:
 15873 ;;		_fputc
 15874 ;; This function is called by:
 15875 ;;		_pad
 15876 ;; This function uses a non-reentrant model
 15877 ;;
 15878                           
 15879                           	psect	text53
 15880  005658                     __ptext53:
 15881                           	opt callstack 0
 15882  005658                     _fputs:
 15883                           	opt callstack 19
 15884  005658  0E00               	movlw	0
 15885  00565A  6E18               	movwf	(fputs@i+1)^0,c
 15886  00565C  0E00               	movlw	0
 15887  00565E  6E17               	movwf	fputs@i^0,c
 15888  005660  EF3D  F02B         	goto	l5279
 15889  005664                     l5275:
 15890  005664  C016  F00E         	movff	fputs@c,fputc@c
 15891  005668  6A0F               	clrf	(fputc@c+1)^0,c
 15892  00566A  C014  F010         	movff	fputs@fp,fputc@fp
 15893  00566E  C015  F011         	movff	fputs@fp+1,fputc@fp+1
 15894  005672  EC13  F02C         	call	_fputc	;wreg free
 15895  005676  4A17               	infsnz	fputs@i^0,f,c
 15896  005678  2A18               	incf	(fputs@i+1)^0,f,c
 15897  00567A                     l5279:
 15898  00567A  5017               	movf	fputs@i^0,w,c
 15899  00567C  2412               	addwf	fputs@s^0,w,c
 15900  00567E  6ED9               	movwf	fsr2l,c
 15901  005680  5018               	movf	(fputs@i+1)^0,w,c
 15902  005682  2013               	addwfc	(fputs@s+1)^0,w,c
 15903  005684  6EDA               	movwf	fsr2h,c
 15904  005686  50DF               	movf	indf2,w,c
 15905  005688  6E16               	movwf	fputs@c^0,c
 15906  00568A  5016               	movf	fputs@c^0,w,c
 15907  00568C  A4D8               	btfss	status,2,c
 15908  00568E  EF4B  F02B         	goto	u6111
 15909  005692  EF4D  F02B         	goto	u6110
 15910  005696                     u6111:
 15911  005696  EF32  F02B         	goto	l5275
 15912  00569A                     u6110:
 15913  00569A  0012               	return		;funcret
 15914  00569C                     __end_of_fputs:
 15915                           	opt callstack 0
 15916                           
 15917 ;; *************** function _fputc *****************
 15918 ;; Defined at:
 15919 ;;		line 502 in file "src/main.c"
 15920 ;; Parameters:    Size  Location     Type
 15921 ;;  c               2   13[COMRAM] int 
 15922 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
 15923 ;;		 -> NULL(0), 
 15924 ;; Auto vars:     Size  Location     Type
 15925 ;;		None
 15926 ;; Return value:  Size  Location     Type
 15927 ;;                  2   13[COMRAM] int 
 15928 ;; Registers used:
 15929 ;;		wreg, status,2, status,0, cstack
 15930 ;; Tracked objects:
 15931 ;;		On entry : 0/0
 15932 ;;		On exit  : 0/0
 15933 ;;		Unchanged: 0/0
 15934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15935 ;;      Params:         4       0       0       0       0       0       0
 15936 ;;      Locals:         0       0       0       0       0       0       0
 15937 ;;      Temps:          0       0       0       0       0       0       0
 15938 ;;      Totals:         4       0       0       0       0       0       0
 15939 ;;Total ram usage:        4 bytes
 15940 ;; Hardware stack levels used:    1
 15941 ;; Hardware stack levels required when called:    3
 15942 ;; This function calls:
 15943 ;;		_usart_putc
 15944 ;; This function is called by:
 15945 ;;		_pad
 15946 ;;		_stoa
 15947 ;;		_vfpfcnvrt
 15948 ;;		_fputs
 15949 ;;		_putchar
 15950 ;; This function uses a non-reentrant model
 15951 ;;
 15952                           
 15953                           	psect	text54
 15954  005826                     __ptext54:
 15955                           	opt callstack 0
 15956  005826                     _fputc:
 15957                           	opt callstack 19
 15958  005826                     
 15959                           ;src/main.c: 502: int fputc(int c, FILE *fp);src/main.c: 503: {;src/main.c: 504:     if(
      +                          c == '\n') {
 15960  005826  0E0A               	movlw	10
 15961  005828  180E               	xorwf	fputc@c^0,w,c
 15962  00582A  100F               	iorwf	(fputc@c+1)^0,w,c
 15963  00582C  A4D8               	btfss	status,2,c
 15964  00582E  EF1B  F02C         	goto	u6101
 15965  005832  EF1D  F02C         	goto	u6100
 15966  005836                     u6101:
 15967  005836  EF20  F02C         	goto	l5267
 15968  00583A                     u6100:
 15969  00583A                     
 15970                           ;src/main.c: 505:         usart_putc('\r');
 15971  00583A  0E0D               	movlw	13
 15972  00583C  EC56  F02C         	call	_usart_putc
 15973  005840                     l5267:
 15974                           
 15975                           ;src/main.c: 507:     usart_putc((char)c);
 15976  005840  500E               	movf	fputc@c^0,w,c
 15977  005842  EC56  F02C         	call	_usart_putc
 15978  005846                     
 15979                           ;src/main.c: 509:     return (unsigned char)c;
 15980  005846  C00E  F00E         	movff	fputc@c,?_fputc
 15981  00584A  6A0F               	clrf	(?_fputc+1)^0,c
 15982  00584C  0012               	return		;funcret
 15983  00584E                     __end_of_fputc:
 15984                           	opt callstack 0
 15985                           
 15986 ;; *************** function _usart_putc *****************
 15987 ;; Defined at:
 15988 ;;		line 39 in file "src/driver/usart.c"
 15989 ;; Parameters:    Size  Location     Type
 15990 ;;  c               1    wreg     unsigned char 
 15991 ;; Auto vars:     Size  Location     Type
 15992 ;;  c               1   12[COMRAM] unsigned char 
 15993 ;; Return value:  Size  Location     Type
 15994 ;;                  1    wreg      unsigned char 
 15995 ;; Registers used:
 15996 ;;		wreg
 15997 ;; Tracked objects:
 15998 ;;		On entry : 0/0
 15999 ;;		On exit  : 0/0
 16000 ;;		Unchanged: 0/0
 16001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16002 ;;      Params:         0       0       0       0       0       0       0
 16003 ;;      Locals:         1       0       0       0       0       0       0
 16004 ;;      Temps:          0       0       0       0       0       0       0
 16005 ;;      Totals:         1       0       0       0       0       0       0
 16006 ;;Total ram usage:        1 bytes
 16007 ;; Hardware stack levels used:    1
 16008 ;; Hardware stack levels required when called:    2
 16009 ;; This function calls:
 16010 ;;		Nothing
 16011 ;; This function is called by:
 16012 ;;		_fputc
 16013 ;; This function uses a non-reentrant model
 16014 ;;
 16015                           
 16016                           	psect	text55
 16017  0058AC                     __ptext55:
 16018                           	opt callstack 0
 16019  0058AC                     _usart_putc:
 16020                           	opt callstack 19
 16021                           
 16022                           ;incstack = 0
 16023                           ;usart_putc@c stored from wreg
 16024  0058AC  6E0D               	movwf	usart_putc@c^0,c
 16025  0058AE                     l186:
 16026  0058AE  A2AC               	btfss	172,1,c	;volatile
 16027  0058B0  EF5C  F02C         	goto	u6091
 16028  0058B4  EF5E  F02C         	goto	u6090
 16029  0058B8                     u6091:
 16030  0058B8  EF57  F02C         	goto	l186
 16031  0058BC                     u6090:
 16032  0058BC                     
 16033                           ;src/driver/usart.c: 44:     TXREG = c;
 16034  0058BC  C00D  FFAD         	movff	usart_putc@c,4013	;volatile
 16035  0058C0  0012               	return		;funcret
 16036  0058C2                     __end_of_usart_putc:
 16037                           	opt callstack 0
 16038                           
 16039 ;; *************** function _atoi *****************
 16040 ;; Defined at:
 16041 ;;		line 4 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/atoi.c"
 16042 ;; Parameters:    Size  Location     Type
 16043 ;;  s               2   19[COMRAM] PTR const unsigned char 
 16044 ;;		 -> STR_50(18), STR_49(17), STR_48(19), STR_47(19), 
 16045 ;;		 -> STR_46(17), STR_45(4), STR_44(6), STR_43(18), 
 16046 ;;		 -> STR_42(29), STR_40(16), STR_38(16), STR_36(24), 
 16047 ;;		 -> STR_34(33), STR_33(16), STR_31(33), STR_29(12), 
 16048 ;;		 -> STR_28(10), STR_27(39), STR_26(15), STR_25(6), 
 16049 ;;		 -> STR_24(14), STR_23(19), STR_20(23), STR_18(19), 
 16050 ;;		 -> STR_17(44), STR_16(151), STR_15(91), STR_14(148), 
 16051 ;;		 -> STR_13(61), STR_12(47), STR_11(22), STR_10(28), 
 16052 ;;		 -> STR_9(25), STR_8(55), STR_7(72), STR_6(74), 
 16053 ;;		 -> STR_5(33), STR_4(32), STR_3(34), STR_2(61), 
 16054 ;;		 -> STR_1(34), 
 16055 ;; Auto vars:     Size  Location     Type
 16056 ;;  n               2   32[COMRAM] int 
 16057 ;;  neg             2   25[COMRAM] int 
 16058 ;; Return value:  Size  Location     Type
 16059 ;;                  2   19[COMRAM] int 
 16060 ;; Registers used:
 16061 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16062 ;; Tracked objects:
 16063 ;;		On entry : 0/0
 16064 ;;		On exit  : 0/0
 16065 ;;		Unchanged: 0/0
 16066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16067 ;;      Params:         2       0       0       0       0       0       0
 16068 ;;      Locals:         9       0       0       0       0       0       0
 16069 ;;      Temps:          4       0       0       0       0       0       0
 16070 ;;      Totals:        15       0       0       0       0       0       0
 16071 ;;Total ram usage:       15 bytes
 16072 ;; Hardware stack levels used:    1
 16073 ;; Hardware stack levels required when called:    3
 16074 ;; This function calls:
 16075 ;;		___wmul
 16076 ;;		_isdigit
 16077 ;;		_isspace
 16078 ;; This function is called by:
 16079 ;;		_vfpfcnvrt
 16080 ;; This function uses a non-reentrant model
 16081 ;;
 16082                           
 16083                           	psect	text56
 16084  003692                     __ptext56:
 16085                           	opt callstack 0
 16086  003692                     _atoi:
 16087                           	opt callstack 22
 16088  003692  0E00               	movlw	0
 16089  003694  6E22               	movwf	(atoi@n+1)^0,c
 16090  003696  0E00               	movlw	0
 16091  003698  6E21               	movwf	atoi@n^0,c
 16092  00369A  0E00               	movlw	0
 16093  00369C  6E1B               	movwf	(atoi@neg+1)^0,c
 16094  00369E  0E00               	movlw	0
 16095  0036A0  6E1A               	movwf	atoi@neg^0,c
 16096  0036A2  EF55  F01B         	goto	l5723
 16097  0036A6                     l5721:
 16098  0036A6  4A14               	infsnz	atoi@s^0,f,c
 16099  0036A8  2A15               	incf	(atoi@s+1)^0,f,c
 16100  0036AA                     l5723:
 16101  0036AA  0E01               	movlw	1
 16102  0036AC  6E20               	movwf	_atoi$2851^0,c
 16103  0036AE  C014  FFF6         	movff	atoi@s,tblptrl
 16104  0036B2  C015  FFF7         	movff	atoi@s+1,tblptrh
 16105  0036B6                     	if	0	;tblptru may be non-zero
 16106  0036B6                     	endif
 16107  0036B6                     	if	0	;tblptru may be non-zero
 16108  0036B6                     	endif
 16109  0036B6  0008               	tblrd		*
 16110  0036B8  50F5               	movf	tablat,w,c
 16111  0036BA  0A20               	xorlw	32
 16112  0036BC  B4D8               	btfsc	status,2,c
 16113  0036BE  EF63  F01B         	goto	u7091
 16114  0036C2  EF65  F01B         	goto	u7090
 16115  0036C6                     u7091:
 16116  0036C6  EF82  F01B         	goto	l5731
 16117  0036CA                     u7090:
 16118  0036CA  0EF7               	movlw	247
 16119  0036CC  6E16               	movwf	??_atoi^0,c
 16120  0036CE  0EFF               	movlw	255
 16121  0036D0  6E17               	movwf	(??_atoi+1)^0,c
 16122  0036D2  C014  FFF6         	movff	atoi@s,tblptrl
 16123  0036D6  C015  FFF7         	movff	atoi@s+1,tblptrh
 16124  0036DA                     	if	0	;tblptru may be non-zero
 16125  0036DA                     	endif
 16126  0036DA                     	if	0	;tblptru may be non-zero
 16127  0036DA                     	endif
 16128  0036DA  0008               	tblrd		*
 16129  0036DC  50F5               	movf	tablat,w,c
 16130  0036DE  6E18               	movwf	(??_atoi+2)^0,c
 16131  0036E0  6A19               	clrf	(??_atoi+3)^0,c
 16132  0036E2  5016               	movf	??_atoi^0,w,c
 16133  0036E4  2618               	addwf	(??_atoi+2)^0,f,c
 16134  0036E6  5017               	movf	(??_atoi+1)^0,w,c
 16135  0036E8  2219               	addwfc	(??_atoi+3)^0,f,c
 16136  0036EA  5019               	movf	(??_atoi+3)^0,w,c
 16137  0036EC  E109               	bnz	u7100
 16138  0036EE  0E05               	movlw	5
 16139  0036F0  5C18               	subwf	(??_atoi+2)^0,w,c
 16140  0036F2  A0D8               	btfss	status,0,c
 16141  0036F4  EF7E  F01B         	goto	u7101
 16142  0036F8  EF80  F01B         	goto	u7100
 16143  0036FC                     u7101:
 16144  0036FC  EF82  F01B         	goto	l5731
 16145  003700                     u7100:
 16146  003700  0E00               	movlw	0
 16147  003702  6E20               	movwf	_atoi$2851^0,c
 16148  003704                     l5731:
 16149  003704  C020  F01C         	movff	_atoi$2851,_atoi$2850
 16150  003708  6A1D               	clrf	(_atoi$2850+1)^0,c
 16151  00370A  501C               	movf	_atoi$2850^0,w,c
 16152  00370C  101D               	iorwf	(_atoi$2850+1)^0,w,c
 16153  00370E  A4D8               	btfss	status,2,c
 16154  003710  EF8C  F01B         	goto	u7111
 16155  003714  EF8E  F01B         	goto	u7110
 16156  003718                     u7111:
 16157  003718  EF53  F01B         	goto	l5721
 16158  00371C                     u7110:
 16159  00371C  EF98  F01B         	goto	l5741
 16160  003720                     l5737:
 16161  003720  0E00               	movlw	0
 16162  003722  6E1B               	movwf	(atoi@neg+1)^0,c
 16163  003724  0E01               	movlw	1
 16164  003726  6E1A               	movwf	atoi@neg^0,c
 16165  003728                     l5739:
 16166  003728  4A14               	infsnz	atoi@s^0,f,c
 16167  00372A  2A15               	incf	(atoi@s+1)^0,f,c
 16168  00372C  EFCD  F01B         	goto	l5747
 16169  003730                     l5741:
 16170  003730  C014  FFF6         	movff	atoi@s,tblptrl
 16171  003734  C015  FFF7         	movff	atoi@s+1,tblptrh
 16172  003738                     	if	0	;tblptru may be non-zero
 16173  003738                     	endif
 16174  003738                     	if	0	;tblptru may be non-zero
 16175  003738                     	endif
 16176  003738  0008               	tblrd		*
 16177  00373A  50F5               	movf	tablat,w,c
 16178  00373C  6E16               	movwf	??_atoi^0,c
 16179  00373E  6A17               	clrf	(??_atoi+1)^0,c
 16180                           
 16181                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16182                           ; Switch size 1, requested type "simple"
 16183                           ; Number of cases is 1, Range of values is 0 to 0
 16184                           ; switch strategies available:
 16185                           ; Name         Instructions Cycles
 16186                           ; simple_byte            4     3 (average)
 16187                           ;	Chosen strategy is simple_byte
 16188  003740  5017               	movf	(??_atoi+1)^0,w,c
 16189  003742  0A00               	xorlw	0	; case 0
 16190  003744  B4D8               	btfsc	status,2,c
 16191  003746  EFA7  F01B         	goto	l6945
 16192  00374A  EFCD  F01B         	goto	l5747
 16193  00374E                     l6945:
 16194                           
 16195                           ; Switch size 1, requested type "simple"
 16196                           ; Number of cases is 2, Range of values is 43 to 45
 16197                           ; switch strategies available:
 16198                           ; Name         Instructions Cycles
 16199                           ; simple_byte            7     4 (average)
 16200                           ;	Chosen strategy is simple_byte
 16201  00374E  5016               	movf	??_atoi^0,w,c
 16202  003750  0A2B               	xorlw	43	; case 43
 16203  003752  B4D8               	btfsc	status,2,c
 16204  003754  EF94  F01B         	goto	l5739
 16205  003758  0A06               	xorlw	6	; case 45
 16206  00375A  B4D8               	btfsc	status,2,c
 16207  00375C  EF90  F01B         	goto	l5737
 16208  003760  EFCD  F01B         	goto	l5747
 16209  003764                     l5743:
 16210  003764  C021  F00D         	movff	atoi@n,___wmul@multiplier
 16211  003768  C022  F00E         	movff	atoi@n+1,___wmul@multiplier+1
 16212  00376C  0E00               	movlw	0
 16213  00376E  6E10               	movwf	(___wmul@multiplicand+1)^0,c
 16214  003770  0E0A               	movlw	10
 16215  003772  6E0F               	movwf	___wmul@multiplicand^0,c
 16216  003774  EC27  F02C         	call	___wmul	;wreg free
 16217  003778  C014  FFF6         	movff	atoi@s,tblptrl
 16218  00377C  C015  FFF7         	movff	atoi@s+1,tblptrh
 16219  003780                     	if	0	;tblptru may be non-zero
 16220  003780                     	endif
 16221  003780                     	if	0	;tblptru may be non-zero
 16222  003780                     	endif
 16223  003780  0008               	tblrd		*
 16224  003782  50F5               	movf	tablat,w,c
 16225  003784  5E0D               	subwf	?___wmul^0,f,c
 16226  003786  0E00               	movlw	0
 16227  003788  5A0E               	subwfb	(?___wmul+1)^0,f,c
 16228  00378A  0E30               	movlw	48
 16229  00378C  240D               	addwf	?___wmul^0,w,c
 16230  00378E  6E21               	movwf	atoi@n^0,c
 16231  003790  0E00               	movlw	0
 16232  003792  200E               	addwfc	(?___wmul+1)^0,w,c
 16233  003794  6E22               	movwf	(atoi@n+1)^0,c
 16234  003796  EF94  F01B         	goto	l5739
 16235  00379A                     l5747:
 16236  00379A  0ED0               	movlw	208
 16237  00379C  6E16               	movwf	??_atoi^0,c
 16238  00379E  0EFF               	movlw	255
 16239  0037A0  6E17               	movwf	(??_atoi+1)^0,c
 16240  0037A2  C014  FFF6         	movff	atoi@s,tblptrl
 16241  0037A6  C015  FFF7         	movff	atoi@s+1,tblptrh
 16242  0037AA                     	if	0	;tblptru may be non-zero
 16243  0037AA                     	endif
 16244  0037AA                     	if	0	;tblptru may be non-zero
 16245  0037AA                     	endif
 16246  0037AA  0008               	tblrd		*
 16247  0037AC  50F5               	movf	tablat,w,c
 16248  0037AE  6E18               	movwf	(??_atoi+2)^0,c
 16249  0037B0  6A19               	clrf	(??_atoi+3)^0,c
 16250  0037B2  5016               	movf	??_atoi^0,w,c
 16251  0037B4  2618               	addwf	(??_atoi+2)^0,f,c
 16252  0037B6  5017               	movf	(??_atoi+1)^0,w,c
 16253  0037B8  2219               	addwfc	(??_atoi+3)^0,f,c
 16254  0037BA  5019               	movf	(??_atoi+3)^0,w,c
 16255  0037BC  E10A               	bnz	u7120
 16256  0037BE  0E0A               	movlw	10
 16257  0037C0  5C18               	subwf	(??_atoi+2)^0,w,c
 16258  0037C2  A0D8               	btfss	status,0,c
 16259  0037C4  EFE6  F01B         	goto	u7121
 16260  0037C8  EFE9  F01B         	goto	u7120
 16261  0037CC                     u7121:
 16262  0037CC  0E01               	movlw	1
 16263  0037CE  EFEA  F01B         	goto	u7130
 16264  0037D2                     u7120:
 16265  0037D2  0E00               	movlw	0
 16266  0037D4                     u7130:
 16267  0037D4  6E1E               	movwf	_atoi$2852^0,c
 16268  0037D6  6A1F               	clrf	(_atoi$2852+1)^0,c
 16269  0037D8  501E               	movf	_atoi$2852^0,w,c
 16270  0037DA  101F               	iorwf	(_atoi$2852+1)^0,w,c
 16271  0037DC  A4D8               	btfss	status,2,c
 16272  0037DE  EFF3  F01B         	goto	u7141
 16273  0037E2  EFF5  F01B         	goto	u7140
 16274  0037E6                     u7141:
 16275  0037E6  EFB2  F01B         	goto	l5743
 16276  0037EA                     u7140:
 16277  0037EA  501A               	movf	atoi@neg^0,w,c
 16278  0037EC  101B               	iorwf	(atoi@neg+1)^0,w,c
 16279  0037EE  A4D8               	btfss	status,2,c
 16280  0037F0  EFFC  F01B         	goto	u7151
 16281  0037F4  EFFE  F01B         	goto	u7150
 16282  0037F8                     u7151:
 16283  0037F8  EF0C  F01C         	goto	l1534
 16284  0037FC                     u7150:
 16285  0037FC  C021  F016         	movff	atoi@n,??_atoi
 16286  003800  C022  F017         	movff	atoi@n+1,??_atoi+1
 16287  003804  1E16               	comf	??_atoi^0,f,c
 16288  003806  1E17               	comf	(??_atoi+1)^0,f,c
 16289  003808  4A16               	infsnz	??_atoi^0,f,c
 16290  00380A  2A17               	incf	(??_atoi+1)^0,f,c
 16291  00380C  C016  F014         	movff	??_atoi,?_atoi
 16292  003810  C017  F015         	movff	??_atoi+1,?_atoi+1
 16293  003814  EF10  F01C         	goto	l1537
 16294  003818                     l1534:
 16295  003818  C021  F014         	movff	atoi@n,?_atoi
 16296  00381C  C022  F015         	movff	atoi@n+1,?_atoi+1
 16297  003820                     l1537:
 16298  003820  0012               	return		;funcret
 16299  003822                     __end_of_atoi:
 16300                           	opt callstack 0
 16301                           
 16302 ;; *************** function _isspace *****************
 16303 ;; Defined at:
 16304 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/isspace.c"
 16305 ;; Parameters:    Size  Location     Type
 16306 ;;  c               2   12[COMRAM] int 
 16307 ;; Auto vars:     Size  Location     Type
 16308 ;;		None
 16309 ;; Return value:  Size  Location     Type
 16310 ;;                  2   12[COMRAM] int 
 16311 ;; Registers used:
 16312 ;;		wreg, status,2, status,0
 16313 ;; Tracked objects:
 16314 ;;		On entry : 0/0
 16315 ;;		On exit  : 0/0
 16316 ;;		Unchanged: 0/0
 16317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16318 ;;      Params:         2       0       0       0       0       0       0
 16319 ;;      Locals:         1       0       0       0       0       0       0
 16320 ;;      Temps:          4       0       0       0       0       0       0
 16321 ;;      Totals:         7       0       0       0       0       0       0
 16322 ;;Total ram usage:        7 bytes
 16323 ;; Hardware stack levels used:    1
 16324 ;; Hardware stack levels required when called:    2
 16325 ;; This function calls:
 16326 ;;		Nothing
 16327 ;; This function is called by:
 16328 ;;		_atoi
 16329 ;; This function uses a non-reentrant model
 16330 ;;
 16331                           
 16332                           	psect	text57
 16333  005450                     __ptext57:
 16334                           	opt callstack 0
 16335  005450                     _isspace:
 16336                           	opt callstack 22
 16337  005450  0E01               	movlw	1
 16338  005452  6E13               	movwf	_isspace$2877^0,c
 16339  005454  0E20               	movlw	32
 16340  005456  180D               	xorwf	isspace@c^0,w,c
 16341  005458  100E               	iorwf	(isspace@c+1)^0,w,c
 16342  00545A  B4D8               	btfsc	status,2,c
 16343  00545C  EF32  F02A         	goto	u6501
 16344  005460  EF34  F02A         	goto	u6500
 16345  005464                     u6501:
 16346  005464  EF4D  F02A         	goto	l5475
 16347  005468                     u6500:
 16348  005468  0EF7               	movlw	247
 16349  00546A  6E0F               	movwf	??_isspace^0,c
 16350  00546C  0EFF               	movlw	255
 16351  00546E  6E10               	movwf	(??_isspace+1)^0,c
 16352  005470  C00D  F011         	movff	isspace@c,??_isspace+2
 16353  005474  C00E  F012         	movff	isspace@c+1,??_isspace+3
 16354  005478  500F               	movf	??_isspace^0,w,c
 16355  00547A  2611               	addwf	(??_isspace+2)^0,f,c
 16356  00547C  5010               	movf	(??_isspace+1)^0,w,c
 16357  00547E  2212               	addwfc	(??_isspace+3)^0,f,c
 16358  005480  5012               	movf	(??_isspace+3)^0,w,c
 16359  005482  E109               	bnz	u6510
 16360  005484  0E05               	movlw	5
 16361  005486  5C11               	subwf	(??_isspace+2)^0,w,c
 16362  005488  A0D8               	btfss	status,0,c
 16363  00548A  EF49  F02A         	goto	u6511
 16364  00548E  EF4B  F02A         	goto	u6510
 16365  005492                     u6511:
 16366  005492  EF4D  F02A         	goto	l5475
 16367  005496                     u6510:
 16368  005496  0E00               	movlw	0
 16369  005498  6E13               	movwf	_isspace$2877^0,c
 16370  00549A                     l5475:
 16371  00549A  C013  F00D         	movff	_isspace$2877,?_isspace
 16372  00549E  6A0E               	clrf	(?_isspace+1)^0,c
 16373  0054A0  0012               	return		;funcret
 16374  0054A2                     __end_of_isspace:
 16375                           	opt callstack 0
 16376                           
 16377 ;; *************** function _isdigit *****************
 16378 ;; Defined at:
 16379 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/isdigit.c"
 16380 ;; Parameters:    Size  Location     Type
 16381 ;;  c               2   12[COMRAM] int 
 16382 ;; Auto vars:     Size  Location     Type
 16383 ;;		None
 16384 ;; Return value:  Size  Location     Type
 16385 ;;                  2   12[COMRAM] int 
 16386 ;; Registers used:
 16387 ;;		wreg, status,2, status,0
 16388 ;; Tracked objects:
 16389 ;;		On entry : 0/0
 16390 ;;		On exit  : 0/0
 16391 ;;		Unchanged: 0/0
 16392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16393 ;;      Params:         2       0       0       0       0       0       0
 16394 ;;      Locals:         0       0       0       0       0       0       0
 16395 ;;      Temps:          4       0       0       0       0       0       0
 16396 ;;      Totals:         6       0       0       0       0       0       0
 16397 ;;Total ram usage:        6 bytes
 16398 ;; Hardware stack levels used:    1
 16399 ;; Hardware stack levels required when called:    2
 16400 ;; This function calls:
 16401 ;;		Nothing
 16402 ;; This function is called by:
 16403 ;;		_vfpfcnvrt
 16404 ;;		_atoi
 16405 ;; This function uses a non-reentrant model
 16406 ;;
 16407                           
 16408                           	psect	text58
 16409  0057C6                     __ptext58:
 16410                           	opt callstack 0
 16411  0057C6                     _isdigit:
 16412                           	opt callstack 23
 16413  0057C6  0ED0               	movlw	208
 16414  0057C8  6E0F               	movwf	??_isdigit^0,c
 16415  0057CA  0EFF               	movlw	255
 16416  0057CC  6E10               	movwf	(??_isdigit+1)^0,c
 16417  0057CE  C00D  F011         	movff	isdigit@c,??_isdigit+2
 16418  0057D2  C00E  F012         	movff	isdigit@c+1,??_isdigit+3
 16419  0057D6  500F               	movf	??_isdigit^0,w,c
 16420  0057D8  2611               	addwf	(??_isdigit+2)^0,f,c
 16421  0057DA  5010               	movf	(??_isdigit+1)^0,w,c
 16422  0057DC  2212               	addwfc	(??_isdigit+3)^0,f,c
 16423  0057DE  5012               	movf	(??_isdigit+3)^0,w,c
 16424  0057E0  E10A               	bnz	u6280
 16425  0057E2  0E0A               	movlw	10
 16426  0057E4  5C11               	subwf	(??_isdigit+2)^0,w,c
 16427  0057E6  A0D8               	btfss	status,0,c
 16428  0057E8  EFF8  F02B         	goto	u6281
 16429  0057EC  EFFB  F02B         	goto	u6280
 16430  0057F0                     u6281:
 16431  0057F0  0E01               	movlw	1
 16432  0057F2  EFFC  F02B         	goto	u6290
 16433  0057F6                     u6280:
 16434  0057F6  0E00               	movlw	0
 16435  0057F8                     u6290:
 16436  0057F8  6E0D               	movwf	?_isdigit^0,c
 16437  0057FA  6A0E               	clrf	(?_isdigit+1)^0,c
 16438  0057FC  0012               	return		;funcret
 16439  0057FE                     __end_of_isdigit:
 16440                           	opt callstack 0
 16441                           
 16442 ;; *************** function ___wmul *****************
 16443 ;; Defined at:
 16444 ;;		line 15 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/Umul16.c"
 16445 ;; Parameters:    Size  Location     Type
 16446 ;;  multiplier      2   12[COMRAM] unsigned int 
 16447 ;;  multiplicand    2   14[COMRAM] unsigned int 
 16448 ;; Auto vars:     Size  Location     Type
 16449 ;;  product         2   16[COMRAM] unsigned int 
 16450 ;; Return value:  Size  Location     Type
 16451 ;;                  2   12[COMRAM] unsigned int 
 16452 ;; Registers used:
 16453 ;;		wreg, status,2, status,0, prodl, prodh
 16454 ;; Tracked objects:
 16455 ;;		On entry : 0/0
 16456 ;;		On exit  : 0/0
 16457 ;;		Unchanged: 0/0
 16458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16459 ;;      Params:         4       0       0       0       0       0       0
 16460 ;;      Locals:         2       0       0       0       0       0       0
 16461 ;;      Temps:          0       0       0       0       0       0       0
 16462 ;;      Totals:         6       0       0       0       0       0       0
 16463 ;;Total ram usage:        6 bytes
 16464 ;; Hardware stack levels used:    1
 16465 ;; Hardware stack levels required when called:    2
 16466 ;; This function calls:
 16467 ;;		Nothing
 16468 ;; This function is called by:
 16469 ;;		_atoi
 16470 ;; This function uses a non-reentrant model
 16471 ;;
 16472                           
 16473                           	psect	text59
 16474  00584E                     __ptext59:
 16475                           	opt callstack 0
 16476  00584E                     ___wmul:
 16477                           	opt callstack 22
 16478  00584E  500D               	movf	___wmul@multiplier^0,w,c
 16479  005850  020F               	mulwf	___wmul@multiplicand^0,c
 16480  005852  CFF3 F011          	movff	prodl,___wmul@product
 16481  005856  CFF4 F012          	movff	prodh,___wmul@product+1
 16482  00585A  500D               	movf	___wmul@multiplier^0,w,c
 16483  00585C  0210               	mulwf	(___wmul@multiplicand+1)^0,c
 16484  00585E  50F3               	movf	243,w,c
 16485  005860  2612               	addwf	(___wmul@product+1)^0,f,c
 16486  005862  500E               	movf	(___wmul@multiplier+1)^0,w,c
 16487  005864  020F               	mulwf	___wmul@multiplicand^0,c
 16488  005866  50F3               	movf	243,w,c
 16489  005868  2612               	addwf	(___wmul@product+1)^0,f,c
 16490  00586A  C011  F00D         	movff	___wmul@product,?___wmul
 16491  00586E  C012  F00E         	movff	___wmul@product+1,?___wmul+1
 16492  005872  0012               	return		;funcret
 16493  005874                     __end_of___wmul:
 16494                           	opt callstack 0
 16495                           
 16496 ;; *************** function _adf4351_write_latch *****************
 16497 ;; Defined at:
 16498 ;;		line 405 in file "src/driver/adf4351.c"
 16499 ;; Parameters:    Size  Location     Type
 16500 ;;  value           4   12[COMRAM] unsigned long 
 16501 ;; Auto vars:     Size  Location     Type
 16502 ;;  mask            4   20[COMRAM] unsigned long 
 16503 ;; Return value:  Size  Location     Type
 16504 ;;                  1    wreg      void 
 16505 ;; Registers used:
 16506 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16507 ;; Tracked objects:
 16508 ;;		On entry : 0/0
 16509 ;;		On exit  : 0/0
 16510 ;;		Unchanged: 0/0
 16511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16512 ;;      Params:         4       0       0       0       0       0       0
 16513 ;;      Locals:         4       0       0       0       0       0       0
 16514 ;;      Temps:          4       0       0       0       0       0       0
 16515 ;;      Totals:        12       0       0       0       0       0       0
 16516 ;;Total ram usage:       12 bytes
 16517 ;; Hardware stack levels used:    1
 16518 ;; Hardware stack levels required when called:    2
 16519 ;; This function calls:
 16520 ;;		Nothing
 16521 ;; This function is called by:
 16522 ;;		_adf4351_write_reg0
 16523 ;;		_adf4351_write_reg1
 16524 ;;		_adf4351_write_reg2
 16525 ;;		_adf4351_write_reg3
 16526 ;;		_adf4351_write_reg4
 16527 ;;		_adf4351_write_reg5
 16528 ;; This function uses a non-reentrant model
 16529 ;;
 16530                           
 16531                           	psect	text60
 16532  00318C                     __ptext60:
 16533                           	opt callstack 0
 16534  00318C                     _adf4351_write_latch:
 16535                           	opt callstack 23
 16536  00318C                     
 16537                           ;src/driver/adf4351.c: 405: static void adf4351_write_latch(u32 value);src/driver/adf435
      +                          1.c: 406: {;src/driver/adf4351.c: 408:     u32 mask = 0x80000000ULL;
 16538  00318C  0E00               	movlw	0
 16539  00318E  6E15               	movwf	adf4351_write_latch@mask^0,c
 16540  003190  0E00               	movlw	0
 16541  003192  6E16               	movwf	(adf4351_write_latch@mask+1)^0,c
 16542  003194  0E00               	movlw	0
 16543  003196  6E17               	movwf	(adf4351_write_latch@mask+2)^0,c
 16544  003198  0E80               	movlw	128
 16545  00319A  6E18               	movwf	(adf4351_write_latch@mask+3)^0,c
 16546  00319C                     
 16547                           ;src/driver/adf4351.c: 410:     *((PIN_SIO_CLK)->pPORT) &= ~(PIN_SIO_CLK)->mask;
 16548  00319C  0E06               	movlw	low (_PIN_SIO_CLK_DEF+4)
 16549  00319E  6EF6               	movwf	tblptrl,c
 16550  0031A0  0E7A               	movlw	high (_PIN_SIO_CLK_DEF+4)
 16551  0031A2  6EF7               	movwf	tblptrh,c
 16552  0031A4                     	if	0	;tblptru may be non-zero
 16553  0031A4                     	endif
 16554  0031A4                     	if	0	;tblptru may be non-zero
 16555  0031A4                     	endif
 16556  0031A4  0008               	tblrd		*
 16557  0031A6  50F5               	movf	tablat,w,c
 16558  0031A8  0AFF               	xorlw	255
 16559  0031AA  6E11               	movwf	??_adf4351_write_latch^0,c
 16560  0031AC  0E02               	movlw	low _PIN_SIO_CLK_DEF
 16561  0031AE  6EF6               	movwf	tblptrl,c
 16562  0031B0                     	if	1	;There is more than 1 active tblptr byte
 16563  0031B0  0E7A               	movlw	high _PIN_SIO_CLK_DEF
 16564  0031B2  6EF7               	movwf	tblptrh,c
 16565  0031B4                     	endif
 16566  0031B4                     	if	0	;There are less than 3 active tblptr bytes
 16567  0031B4                     	endif
 16568  0031B4  0009               	tblrd		*+
 16569  0031B6  CFF5 F012          	movff	tablat,??_adf4351_write_latch+1
 16570  0031BA  0009               	tblrd		*+
 16571  0031BC  CFF5 F013          	movff	tablat,??_adf4351_write_latch+2
 16572  0031C0  C012  FFD9         	movff	??_adf4351_write_latch+1,fsr2l
 16573  0031C4  C013  FFDA         	movff	??_adf4351_write_latch+2,fsr2h
 16574  0031C8  5011               	movf	??_adf4351_write_latch^0,w,c
 16575  0031CA  16DF               	andwf	indf2,f,c
 16576  0031CC                     
 16577                           ;src/driver/adf4351.c: 411:     _delay((unsigned long)((1)*(8000000/4000000.0)));
 16578  0031CC  D000               	nop2		;2 cycle nop
 16579                           
 16580                           ;src/driver/adf4351.c: 413:     while(mask) {
 16581  0031CE  EF68  F019         	goto	l5975
 16582  0031D2                     l5961:
 16583                           
 16584                           ;src/driver/adf4351.c: 414:         if(value&mask) {
 16585  0031D2  5015               	movf	adf4351_write_latch@mask^0,w,c
 16586  0031D4  140D               	andwf	adf4351_write_latch@value^0,w,c
 16587  0031D6  6E11               	movwf	??_adf4351_write_latch^0,c
 16588  0031D8  5016               	movf	(adf4351_write_latch@mask+1)^0,w,c
 16589  0031DA  140E               	andwf	(adf4351_write_latch@value+1)^0,w,c
 16590  0031DC  6E12               	movwf	(??_adf4351_write_latch+1)^0,c
 16591  0031DE  5017               	movf	(adf4351_write_latch@mask+2)^0,w,c
 16592  0031E0  140F               	andwf	(adf4351_write_latch@value+2)^0,w,c
 16593  0031E2  6E13               	movwf	(??_adf4351_write_latch+2)^0,c
 16594  0031E4  5018               	movf	(adf4351_write_latch@mask+3)^0,w,c
 16595  0031E6  1410               	andwf	(adf4351_write_latch@value+3)^0,w,c
 16596  0031E8  6E14               	movwf	(??_adf4351_write_latch+3)^0,c
 16597  0031EA  5011               	movf	??_adf4351_write_latch^0,w,c
 16598  0031EC  1012               	iorwf	(??_adf4351_write_latch+1)^0,w,c
 16599  0031EE  1013               	iorwf	(??_adf4351_write_latch+2)^0,w,c
 16600  0031F0  1014               	iorwf	(??_adf4351_write_latch+3)^0,w,c
 16601  0031F2  B4D8               	btfsc	status,2,c
 16602  0031F4  EFFE  F018         	goto	u7391
 16603  0031F8  EF00  F019         	goto	u7390
 16604  0031FC                     u7391:
 16605  0031FC  EF19  F019         	goto	l5965
 16606  003200                     u7390:
 16607  003200                     
 16608                           ;src/driver/adf4351.c: 415:             *((PIN_SIO_DATA)->pPORT) |= (PIN_SIO_DATA)->mask
      +                          ;
 16609  003200  0E0B               	movlw	low (_PIN_SIO_DATA_DEF+4)
 16610  003202  6EF6               	movwf	tblptrl,c
 16611  003204  0E7A               	movlw	high (_PIN_SIO_DATA_DEF+4)
 16612  003206  6EF7               	movwf	tblptrh,c
 16613  003208                     	if	0	;tblptru may be non-zero
 16614  003208                     	endif
 16615  003208                     	if	0	;tblptru may be non-zero
 16616  003208                     	endif
 16617  003208  0008               	tblrd		*
 16618  00320A  CFF5 F011          	movff	tablat,??_adf4351_write_latch
 16619  00320E  0E07               	movlw	low _PIN_SIO_DATA_DEF
 16620  003210  6EF6               	movwf	tblptrl,c
 16621  003212                     	if	1	;There is more than 1 active tblptr byte
 16622  003212  0E7A               	movlw	high _PIN_SIO_DATA_DEF
 16623  003214  6EF7               	movwf	tblptrh,c
 16624  003216                     	endif
 16625  003216                     	if	0	;There are less than 3 active tblptr bytes
 16626  003216                     	endif
 16627  003216  0009               	tblrd		*+
 16628  003218  CFF5 F012          	movff	tablat,??_adf4351_write_latch+1
 16629  00321C  0009               	tblrd		*+
 16630  00321E  CFF5 F013          	movff	tablat,??_adf4351_write_latch+2
 16631  003222  C012  FFD9         	movff	??_adf4351_write_latch+1,fsr2l
 16632  003226  C013  FFDA         	movff	??_adf4351_write_latch+2,fsr2h
 16633  00322A  5011               	movf	??_adf4351_write_latch^0,w,c
 16634  00322C  12DF               	iorwf	indf2,f,c
 16635                           
 16636                           ;src/driver/adf4351.c: 416:         } else {
 16637  00322E  EF31  F019         	goto	l5967
 16638  003232                     l5965:
 16639                           
 16640                           ;src/driver/adf4351.c: 417:             *((PIN_SIO_DATA)->pPORT) &= ~(PIN_SIO_DATA)->mas
      +                          k;
 16641  003232  0E0B               	movlw	low (_PIN_SIO_DATA_DEF+4)
 16642  003234  6EF6               	movwf	tblptrl,c
 16643  003236  0E7A               	movlw	high (_PIN_SIO_DATA_DEF+4)
 16644  003238  6EF7               	movwf	tblptrh,c
 16645  00323A                     	if	0	;tblptru may be non-zero
 16646  00323A                     	endif
 16647  00323A                     	if	0	;tblptru may be non-zero
 16648  00323A                     	endif
 16649  00323A  0008               	tblrd		*
 16650  00323C  50F5               	movf	tablat,w,c
 16651  00323E  0AFF               	xorlw	255
 16652  003240  6E11               	movwf	??_adf4351_write_latch^0,c
 16653  003242  0E07               	movlw	low _PIN_SIO_DATA_DEF
 16654  003244  6EF6               	movwf	tblptrl,c
 16655  003246                     	if	1	;There is more than 1 active tblptr byte
 16656  003246  0E7A               	movlw	high _PIN_SIO_DATA_DEF
 16657  003248  6EF7               	movwf	tblptrh,c
 16658  00324A                     	endif
 16659  00324A                     	if	0	;There are less than 3 active tblptr bytes
 16660  00324A                     	endif
 16661  00324A  0009               	tblrd		*+
 16662  00324C  CFF5 F012          	movff	tablat,??_adf4351_write_latch+1
 16663  003250  0009               	tblrd		*+
 16664  003252  CFF5 F013          	movff	tablat,??_adf4351_write_latch+2
 16665  003256  C012  FFD9         	movff	??_adf4351_write_latch+1,fsr2l
 16666  00325A  C013  FFDA         	movff	??_adf4351_write_latch+2,fsr2h
 16667  00325E  5011               	movf	??_adf4351_write_latch^0,w,c
 16668  003260  16DF               	andwf	indf2,f,c
 16669  003262                     l5967:
 16670                           
 16671                           ;src/driver/adf4351.c: 419:         _delay((unsigned long)((1)*(8000000/4000000.0)));
 16672  003262  D000               	nop2		;2 cycle nop
 16673                           
 16674                           ;src/driver/adf4351.c: 420:         *((PIN_SIO_CLK)->pPORT) |= (PIN_SIO_CLK)->mask;
 16675  003264  0E06               	movlw	low (_PIN_SIO_CLK_DEF+4)
 16676  003266  6EF6               	movwf	tblptrl,c
 16677  003268  0E7A               	movlw	high (_PIN_SIO_CLK_DEF+4)
 16678  00326A  6EF7               	movwf	tblptrh,c
 16679  00326C                     	if	0	;tblptru may be non-zero
 16680  00326C                     	endif
 16681  00326C                     	if	0	;tblptru may be non-zero
 16682  00326C                     	endif
 16683  00326C  0008               	tblrd		*
 16684  00326E  CFF5 F011          	movff	tablat,??_adf4351_write_latch
 16685  003272  0E02               	movlw	low _PIN_SIO_CLK_DEF
 16686  003274  6EF6               	movwf	tblptrl,c
 16687  003276                     	if	1	;There is more than 1 active tblptr byte
 16688  003276  0E7A               	movlw	high _PIN_SIO_CLK_DEF
 16689  003278  6EF7               	movwf	tblptrh,c
 16690  00327A                     	endif
 16691  00327A                     	if	0	;There are less than 3 active tblptr bytes
 16692  00327A                     	endif
 16693  00327A  0009               	tblrd		*+
 16694  00327C  CFF5 F012          	movff	tablat,??_adf4351_write_latch+1
 16695  003280  0009               	tblrd		*+
 16696  003282  CFF5 F013          	movff	tablat,??_adf4351_write_latch+2
 16697  003286  C012  FFD9         	movff	??_adf4351_write_latch+1,fsr2l
 16698  00328A  C013  FFDA         	movff	??_adf4351_write_latch+2,fsr2h
 16699  00328E  5011               	movf	??_adf4351_write_latch^0,w,c
 16700  003290  12DF               	iorwf	indf2,f,c
 16701  003292                     
 16702                           ;src/driver/adf4351.c: 421:         _delay((unsigned long)((1)*(8000000/4000000.0)));
 16703  003292  D000               	nop2		;2 cycle nop
 16704                           
 16705                           ;src/driver/adf4351.c: 422:         *((PIN_SIO_CLK)->pPORT) &= ~(PIN_SIO_CLK)->mask;
 16706  003294  0E06               	movlw	low (_PIN_SIO_CLK_DEF+4)
 16707  003296  6EF6               	movwf	tblptrl,c
 16708  003298  0E7A               	movlw	high (_PIN_SIO_CLK_DEF+4)
 16709  00329A  6EF7               	movwf	tblptrh,c
 16710  00329C                     	if	0	;tblptru may be non-zero
 16711  00329C                     	endif
 16712  00329C                     	if	0	;tblptru may be non-zero
 16713  00329C                     	endif
 16714  00329C  0008               	tblrd		*
 16715  00329E  50F5               	movf	tablat,w,c
 16716  0032A0  0AFF               	xorlw	255
 16717  0032A2  6E11               	movwf	??_adf4351_write_latch^0,c
 16718  0032A4  0E02               	movlw	low _PIN_SIO_CLK_DEF
 16719  0032A6  6EF6               	movwf	tblptrl,c
 16720  0032A8                     	if	1	;There is more than 1 active tblptr byte
 16721  0032A8  0E7A               	movlw	high _PIN_SIO_CLK_DEF
 16722  0032AA  6EF7               	movwf	tblptrh,c
 16723  0032AC                     	endif
 16724  0032AC                     	if	0	;There are less than 3 active tblptr bytes
 16725  0032AC                     	endif
 16726  0032AC  0009               	tblrd		*+
 16727  0032AE  CFF5 F012          	movff	tablat,??_adf4351_write_latch+1
 16728  0032B2  0009               	tblrd		*+
 16729  0032B4  CFF5 F013          	movff	tablat,??_adf4351_write_latch+2
 16730  0032B8  C012  FFD9         	movff	??_adf4351_write_latch+1,fsr2l
 16731  0032BC  C013  FFDA         	movff	??_adf4351_write_latch+2,fsr2h
 16732  0032C0  5011               	movf	??_adf4351_write_latch^0,w,c
 16733  0032C2  16DF               	andwf	indf2,f,c
 16734  0032C4                     
 16735                           ;src/driver/adf4351.c: 423:         _delay((unsigned long)((1)*(8000000/4000000.0)));
 16736  0032C4  D000               	nop2		;2 cycle nop
 16737  0032C6                     
 16738                           ;src/driver/adf4351.c: 425:         mask >>= 1;
 16739  0032C6  90D8               	bcf	status,0,c
 16740  0032C8  3218               	rrcf	(adf4351_write_latch@mask+3)^0,f,c
 16741  0032CA  3217               	rrcf	(adf4351_write_latch@mask+2)^0,f,c
 16742  0032CC  3216               	rrcf	(adf4351_write_latch@mask+1)^0,f,c
 16743  0032CE  3215               	rrcf	adf4351_write_latch@mask^0,f,c
 16744  0032D0                     l5975:
 16745                           
 16746                           ;src/driver/adf4351.c: 413:     while(mask) {
 16747  0032D0  5015               	movf	adf4351_write_latch@mask^0,w,c
 16748  0032D2  1016               	iorwf	(adf4351_write_latch@mask+1)^0,w,c
 16749  0032D4  1017               	iorwf	(adf4351_write_latch@mask+2)^0,w,c
 16750  0032D6  1018               	iorwf	(adf4351_write_latch@mask+3)^0,w,c
 16751  0032D8  A4D8               	btfss	status,2,c
 16752  0032DA  EF71  F019         	goto	u7401
 16753  0032DE  EF73  F019         	goto	u7400
 16754  0032E2                     u7401:
 16755  0032E2  EFE9  F018         	goto	l5961
 16756  0032E6                     u7400:
 16757  0032E6                     
 16758                           ;src/driver/adf4351.c: 429:  *((PIN_ADF_LE)->pPORT) |= (PIN_ADF_LE)->mask;
 16759  0032E6  0E10               	movlw	low (_PIN_ADF_LE_DEF+4)
 16760  0032E8  6EF6               	movwf	tblptrl,c
 16761  0032EA  0E7A               	movlw	high (_PIN_ADF_LE_DEF+4)
 16762  0032EC  6EF7               	movwf	tblptrh,c
 16763  0032EE                     	if	0	;tblptru may be non-zero
 16764  0032EE                     	endif
 16765  0032EE                     	if	0	;tblptru may be non-zero
 16766  0032EE                     	endif
 16767  0032EE  0008               	tblrd		*
 16768  0032F0  CFF5 F011          	movff	tablat,??_adf4351_write_latch
 16769  0032F4  0E0C               	movlw	low _PIN_ADF_LE_DEF
 16770  0032F6  6EF6               	movwf	tblptrl,c
 16771  0032F8                     	if	1	;There is more than 1 active tblptr byte
 16772  0032F8  0E7A               	movlw	high _PIN_ADF_LE_DEF
 16773  0032FA  6EF7               	movwf	tblptrh,c
 16774  0032FC                     	endif
 16775  0032FC                     	if	0	;There are less than 3 active tblptr bytes
 16776  0032FC                     	endif
 16777  0032FC  0009               	tblrd		*+
 16778  0032FE  CFF5 F012          	movff	tablat,??_adf4351_write_latch+1
 16779  003302  0009               	tblrd		*+
 16780  003304  CFF5 F013          	movff	tablat,??_adf4351_write_latch+2
 16781  003308  C012  FFD9         	movff	??_adf4351_write_latch+1,fsr2l
 16782  00330C  C013  FFDA         	movff	??_adf4351_write_latch+2,fsr2h
 16783  003310  5011               	movf	??_adf4351_write_latch^0,w,c
 16784  003312  12DF               	iorwf	indf2,f,c
 16785  003314                     
 16786                           ;src/driver/adf4351.c: 430:  _delay((unsigned long)((1)*(8000000/4000000.0)));
 16787  003314  D000               	nop2		;2 cycle nop
 16788                           
 16789                           ;src/driver/adf4351.c: 431:  *((PIN_ADF_LE)->pPORT) &= ~(PIN_ADF_LE)->mask;
 16790  003316  0E10               	movlw	low (_PIN_ADF_LE_DEF+4)
 16791  003318  6EF6               	movwf	tblptrl,c
 16792  00331A  0E7A               	movlw	high (_PIN_ADF_LE_DEF+4)
 16793  00331C  6EF7               	movwf	tblptrh,c
 16794  00331E                     	if	0	;tblptru may be non-zero
 16795  00331E                     	endif
 16796  00331E                     	if	0	;tblptru may be non-zero
 16797  00331E                     	endif
 16798  00331E  0008               	tblrd		*
 16799  003320  50F5               	movf	tablat,w,c
 16800  003322  0AFF               	xorlw	255
 16801  003324  6E11               	movwf	??_adf4351_write_latch^0,c
 16802  003326  0E0C               	movlw	low _PIN_ADF_LE_DEF
 16803  003328  6EF6               	movwf	tblptrl,c
 16804  00332A                     	if	1	;There is more than 1 active tblptr byte
 16805  00332A  0E7A               	movlw	high _PIN_ADF_LE_DEF
 16806  00332C  6EF7               	movwf	tblptrh,c
 16807  00332E                     	endif
 16808  00332E                     	if	0	;There are less than 3 active tblptr bytes
 16809  00332E                     	endif
 16810  00332E  0009               	tblrd		*+
 16811  003330  CFF5 F012          	movff	tablat,??_adf4351_write_latch+1
 16812  003334  0009               	tblrd		*+
 16813  003336  CFF5 F013          	movff	tablat,??_adf4351_write_latch+2
 16814  00333A  C012  FFD9         	movff	??_adf4351_write_latch+1,fsr2l
 16815  00333E  C013  FFDA         	movff	??_adf4351_write_latch+2,fsr2h
 16816  003342  5011               	movf	??_adf4351_write_latch^0,w,c
 16817  003344  16DF               	andwf	indf2,f,c
 16818  003346                     
 16819                           ;src/driver/adf4351.c: 432:  _delay((unsigned long)((50)*(8000000/4000000.0)));
 16820  003346  0E21               	movlw	33
 16821  003348                     u8917:
 16822  003348  2EE8               	decfsz	wreg,f,c
 16823  00334A  D7FE               	bra	u8917
 16824  00334C  F000               	nop	
 16825  00334E  0012               	return		;funcret
 16826  003350                     __end_of_adf4351_write_latch:
 16827                           	opt callstack 0
 16828                           
 16829 ;; *************** function _adc_voltage *****************
 16830 ;; Defined at:
 16831 ;;		line 46 in file "src/driver/adc.c"
 16832 ;; Parameters:    Size  Location     Type
 16833 ;;  gpio            2   47[COMRAM] PTR const struct gpio_pi
 16834 ;;		 -> PIN_VOLTAGE_DEF(5), PIN_RF_R_DEF(5), PIN_RF_V_DEF(5), 
 16835 ;; Auto vars:     Size  Location     Type
 16836 ;;		None
 16837 ;; Return value:  Size  Location     Type
 16838 ;;                  4   47[COMRAM] unsigned long 
 16839 ;; Registers used:
 16840 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16841 ;; Tracked objects:
 16842 ;;		On entry : 0/0
 16843 ;;		On exit  : 0/0
 16844 ;;		Unchanged: 0/0
 16845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16846 ;;      Params:         4       0       0       0       0       0       0
 16847 ;;      Locals:         0       0       0       0       0       0       0
 16848 ;;      Temps:          0       0       0       0       0       0       0
 16849 ;;      Totals:         4       0       0       0       0       0       0
 16850 ;;Total ram usage:        4 bytes
 16851 ;; Hardware stack levels used:    1
 16852 ;; Hardware stack levels required when called:    4
 16853 ;; This function calls:
 16854 ;;		___lldiv
 16855 ;;		___lmul
 16856 ;;		_adc_sample
 16857 ;; This function is called by:
 16858 ;;		_check_usart
 16859 ;; This function uses a non-reentrant model
 16860 ;;
 16861                           
 16862                           	psect	text61
 16863  0050E4                     __ptext61:
 16864                           	opt callstack 0
 16865  0050E4                     _adc_voltage:
 16866                           	opt callstack 25
 16867  0050E4                     
 16868                           ;src/driver/adc.c: 46: u32 adc_voltage(gpio_pin gpio);src/driver/adc.c: 47: {;src/driver
      +                          /adc.c: 48:     return ((3222656 * (u32)adc_sample(gpio)) + 500) / 1000;
 16869  0050E4  C030  F011         	movff	adc_voltage@gpio,adc_sample@gpio
 16870  0050E8  C031  F012         	movff	adc_voltage@gpio+1,adc_sample@gpio+1
 16871  0050EC  EC10  F029         	call	_adc_sample	;wreg free
 16872  0050F0  C011  F017         	movff	?_adc_sample,___lmul@multiplier
 16873  0050F4  C012  F018         	movff	?_adc_sample+1,___lmul@multiplier+1
 16874  0050F8  6A19               	clrf	(___lmul@multiplier+2)^0,c
 16875  0050FA  6A1A               	clrf	(___lmul@multiplier+3)^0,c
 16876  0050FC  0E80               	movlw	128
 16877  0050FE  6E1B               	movwf	___lmul@multiplicand^0,c
 16878  005100  0E2C               	movlw	44
 16879  005102  6E1C               	movwf	(___lmul@multiplicand+1)^0,c
 16880  005104  0E31               	movlw	49
 16881  005106  6E1D               	movwf	(___lmul@multiplicand+2)^0,c
 16882  005108  0E00               	movlw	0
 16883  00510A  6E1E               	movwf	(___lmul@multiplicand+3)^0,c
 16884  00510C  ECA7  F028         	call	___lmul	;wreg free
 16885  005110  0EF4               	movlw	244
 16886  005112  2417               	addwf	?___lmul^0,w,c
 16887  005114  6E23               	movwf	___lldiv@dividend^0,c
 16888  005116  0E01               	movlw	1
 16889  005118  2018               	addwfc	(?___lmul+1)^0,w,c
 16890  00511A  6E24               	movwf	(___lldiv@dividend+1)^0,c
 16891  00511C  0E00               	movlw	0
 16892  00511E  2019               	addwfc	(?___lmul+2)^0,w,c
 16893  005120  6E25               	movwf	(___lldiv@dividend+2)^0,c
 16894  005122  0E00               	movlw	0
 16895  005124  201A               	addwfc	(?___lmul+3)^0,w,c
 16896  005126  6E26               	movwf	(___lldiv@dividend+3)^0,c
 16897  005128  0EE8               	movlw	232
 16898  00512A  6E27               	movwf	___lldiv@divisor^0,c
 16899  00512C  0E03               	movlw	3
 16900  00512E  6E28               	movwf	(___lldiv@divisor+1)^0,c
 16901  005130  0E00               	movlw	0
 16902  005132  6E29               	movwf	(___lldiv@divisor+2)^0,c
 16903  005134  0E00               	movlw	0
 16904  005136  6E2A               	movwf	(___lldiv@divisor+3)^0,c
 16905  005138  EC89  F025         	call	___lldiv	;wreg free
 16906  00513C  C023  F030         	movff	?___lldiv,?_adc_voltage
 16907  005140  C024  F031         	movff	?___lldiv+1,?_adc_voltage+1
 16908  005144  C025  F032         	movff	?___lldiv+2,?_adc_voltage+2
 16909  005148  C026  F033         	movff	?___lldiv+3,?_adc_voltage+3
 16910  00514C  0012               	return		;funcret
 16911  00514E                     __end_of_adc_voltage:
 16912                           	opt callstack 0
 16913                           
 16914 ;; *************** function _adc_sample *****************
 16915 ;; Defined at:
 16916 ;;		line 28 in file "src/driver/adc.c"
 16917 ;; Parameters:    Size  Location     Type
 16918 ;;  gpio            2   16[COMRAM] PTR const struct gpio_pi
 16919 ;;		 -> PIN_VOLTAGE_DEF(5), PIN_RF_R_DEF(5), PIN_RF_V_DEF(5), PIN_TEMP_DEF(5), 
 16920 ;; Auto vars:     Size  Location     Type
 16921 ;;  ch              2   20[COMRAM] int 
 16922 ;; Return value:  Size  Location     Type
 16923 ;;                  2   16[COMRAM] unsigned short 
 16924 ;; Registers used:
 16925 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16926 ;; Tracked objects:
 16927 ;;		On entry : 0/0
 16928 ;;		On exit  : 0/0
 16929 ;;		Unchanged: 0/0
 16930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16931 ;;      Params:         2       0       0       0       0       0       0
 16932 ;;      Locals:         2       0       0       0       0       0       0
 16933 ;;      Temps:          2       0       0       0       0       0       0
 16934 ;;      Totals:         6       0       0       0       0       0       0
 16935 ;;Total ram usage:        6 bytes
 16936 ;; Hardware stack levels used:    1
 16937 ;; Hardware stack levels required when called:    3
 16938 ;; This function calls:
 16939 ;;		_gpio_to_ch
 16940 ;; This function is called by:
 16941 ;;		_adc_voltage
 16942 ;;		_check_usart
 16943 ;; This function uses a non-reentrant model
 16944 ;;
 16945                           
 16946                           	psect	text62
 16947  005220                     __ptext62:
 16948                           	opt callstack 0
 16949  005220                     _adc_sample:
 16950                           	opt callstack 25
 16951  005220                     
 16952                           ;src/driver/adc.c: 28: u16 adc_sample(gpio_pin gpio);src/driver/adc.c: 29: {;src/driver/
      +                          adc.c: 30:     int ch = gpio_to_ch(gpio);
 16953  005220  C011  F00D         	movff	adc_sample@gpio,gpio_to_ch@gpio
 16954  005224  C012  F00E         	movff	adc_sample@gpio+1,gpio_to_ch@gpio+1
 16955  005228  ECAB  F015         	call	_gpio_to_ch	;wreg free
 16956  00522C  C00D  F015         	movff	?_gpio_to_ch,adc_sample@ch
 16957  005230  C00E  F016         	movff	?_gpio_to_ch+1,adc_sample@ch+1
 16958  005234                     
 16959                           ;src/driver/adc.c: 31:     if(ch>=0) {
 16960  005234  BE16               	btfsc	(adc_sample@ch+1)^0,7,c
 16961  005236  EF1F  F029         	goto	u8231
 16962  00523A  EF21  F029         	goto	u8230
 16963  00523E                     u8231:
 16964  00523E  EF3E  F029         	goto	l6403
 16965  005242                     u8230:
 16966  005242                     
 16967                           ;src/driver/adc.c: 32:         ADCON1bits.PCFG = 0;
 16968  005242  0EF0               	movlw	-16
 16969  005244  16C1               	andwf	193,f,c	;volatile
 16970  005246                     
 16971                           ;src/driver/adc.c: 34:         ADCON0bits.CHS = ch;
 16972  005246  C015  F013         	movff	adc_sample@ch,??_adc_sample
 16973  00524A  4613               	rlncf	??_adc_sample^0,f,c
 16974  00524C  4613               	rlncf	??_adc_sample^0,f,c
 16975  00524E  50C2               	movf	194,w,c	;volatile
 16976  005250  1813               	xorwf	??_adc_sample^0,w,c
 16977  005252  0BC3               	andlw	-61
 16978  005254  1813               	xorwf	??_adc_sample^0,w,c
 16979  005256  6EC2               	movwf	194,c	;volatile
 16980  005258                     
 16981                           ;src/driver/adc.c: 36:         ADCON0bits.GODONE = 1;
 16982  005258  82C2               	bsf	194,1,c	;volatile
 16983  00525A                     l257:
 16984  00525A  B2C2               	btfsc	194,1,c	;volatile
 16985  00525C  EF32  F029         	goto	u8241
 16986  005260  EF34  F029         	goto	u8240
 16987  005264                     u8241:
 16988  005264  EF2D  F029         	goto	l257
 16989  005268                     u8240:
 16990  005268                     
 16991                           ;src/driver/adc.c: 39:         ADCON1bits.PCFG = 0xF;
 16992  005268  0E0F               	movlw	15
 16993  00526A  12C1               	iorwf	193,f,c	;volatile
 16994                           
 16995                           ;src/driver/adc.c: 41:         return (u16)ADRESH<<8 | (u16)ADRESL;
 16996  00526C  50C4               	movf	196,w,c	;volatile
 16997  00526E  6E13               	movwf	??_adc_sample^0,c
 16998  005270  50C3               	movf	195,w,c	;volatile
 16999  005272  6E11               	movwf	?_adc_sample^0,c
 17000  005274  C013  F012         	movff	??_adc_sample,?_adc_sample+1
 17001  005278  EF42  F029         	goto	l260
 17002  00527C                     l6403:
 17003                           
 17004                           ;src/driver/adc.c: 43:     return 0;
 17005  00527C  0E00               	movlw	0
 17006  00527E  6E12               	movwf	(?_adc_sample+1)^0,c
 17007  005280  0E00               	movlw	0
 17008  005282  6E11               	movwf	?_adc_sample^0,c
 17009  005284                     l260:
 17010  005284  0012               	return		;funcret
 17011  005286                     __end_of_adc_sample:
 17012                           	opt callstack 0
 17013                           
 17014 ;; *************** function ___lmul *****************
 17015 ;; Defined at:
 17016 ;;		line 15 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/Umul32.c"
 17017 ;; Parameters:    Size  Location     Type
 17018 ;;  multiplier      4   22[COMRAM] unsigned long 
 17019 ;;  multiplicand    4   26[COMRAM] unsigned long 
 17020 ;; Auto vars:     Size  Location     Type
 17021 ;;  product         4   30[COMRAM] unsigned long 
 17022 ;; Return value:  Size  Location     Type
 17023 ;;                  4   22[COMRAM] unsigned long 
 17024 ;; Registers used:
 17025 ;;		wreg, status,2, status,0
 17026 ;; Tracked objects:
 17027 ;;		On entry : 0/0
 17028 ;;		On exit  : 0/0
 17029 ;;		Unchanged: 0/0
 17030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17031 ;;      Params:         8       0       0       0       0       0       0
 17032 ;;      Locals:         4       0       0       0       0       0       0
 17033 ;;      Temps:          0       0       0       0       0       0       0
 17034 ;;      Totals:        12       0       0       0       0       0       0
 17035 ;;Total ram usage:       12 bytes
 17036 ;; Hardware stack levels used:    1
 17037 ;; Hardware stack levels required when called:    2
 17038 ;; This function calls:
 17039 ;;		Nothing
 17040 ;; This function is called by:
 17041 ;;		_adc_voltage
 17042 ;; This function uses a non-reentrant model
 17043 ;;
 17044                           
 17045                           	psect	text63
 17046  00514E                     __ptext63:
 17047                           	opt callstack 0
 17048  00514E                     ___lmul:
 17049                           	opt callstack 26
 17050  00514E  0E00               	movlw	0
 17051  005150  6E1F               	movwf	___lmul@product^0,c
 17052  005152  0E00               	movlw	0
 17053  005154  6E20               	movwf	(___lmul@product+1)^0,c
 17054  005156  0E00               	movlw	0
 17055  005158  6E21               	movwf	(___lmul@product+2)^0,c
 17056  00515A  0E00               	movlw	0
 17057  00515C  6E22               	movwf	(___lmul@product+3)^0,c
 17058  00515E                     l6419:
 17059  00515E  A017               	btfss	___lmul@multiplier^0,0,c
 17060  005160  EFB4  F028         	goto	u8261
 17061  005164  EFB6  F028         	goto	u8260
 17062  005168                     u8261:
 17063  005168  EFBE  F028         	goto	l6423
 17064  00516C                     u8260:
 17065  00516C  501B               	movf	___lmul@multiplicand^0,w,c
 17066  00516E  261F               	addwf	___lmul@product^0,f,c
 17067  005170  501C               	movf	(___lmul@multiplicand+1)^0,w,c
 17068  005172  2220               	addwfc	(___lmul@product+1)^0,f,c
 17069  005174  501D               	movf	(___lmul@multiplicand+2)^0,w,c
 17070  005176  2221               	addwfc	(___lmul@product+2)^0,f,c
 17071  005178  501E               	movf	(___lmul@multiplicand+3)^0,w,c
 17072  00517A  2222               	addwfc	(___lmul@product+3)^0,f,c
 17073  00517C                     l6423:
 17074  00517C  90D8               	bcf	status,0,c
 17075  00517E  361B               	rlcf	___lmul@multiplicand^0,f,c
 17076  005180  361C               	rlcf	(___lmul@multiplicand+1)^0,f,c
 17077  005182  361D               	rlcf	(___lmul@multiplicand+2)^0,f,c
 17078  005184  361E               	rlcf	(___lmul@multiplicand+3)^0,f,c
 17079  005186  90D8               	bcf	status,0,c
 17080  005188  321A               	rrcf	(___lmul@multiplier+3)^0,f,c
 17081  00518A  3219               	rrcf	(___lmul@multiplier+2)^0,f,c
 17082  00518C  3218               	rrcf	(___lmul@multiplier+1)^0,f,c
 17083  00518E  3217               	rrcf	___lmul@multiplier^0,f,c
 17084  005190  5017               	movf	___lmul@multiplier^0,w,c
 17085  005192  1018               	iorwf	(___lmul@multiplier+1)^0,w,c
 17086  005194  1019               	iorwf	(___lmul@multiplier+2)^0,w,c
 17087  005196  101A               	iorwf	(___lmul@multiplier+3)^0,w,c
 17088  005198  A4D8               	btfss	status,2,c
 17089  00519A  EFD1  F028         	goto	u8271
 17090  00519E  EFD3  F028         	goto	u8270
 17091  0051A2                     u8271:
 17092  0051A2  EFAF  F028         	goto	l6419
 17093  0051A6                     u8270:
 17094  0051A6  C01F  F017         	movff	___lmul@product,?___lmul
 17095  0051AA  C020  F018         	movff	___lmul@product+1,?___lmul+1
 17096  0051AE  C021  F019         	movff	___lmul@product+2,?___lmul+2
 17097  0051B2  C022  F01A         	movff	___lmul@product+3,?___lmul+3
 17098  0051B6  0012               	return		;funcret
 17099  0051B8                     __end_of___lmul:
 17100                           	opt callstack 0
 17101                           
 17102 ;; *************** function ___lldiv *****************
 17103 ;; Defined at:
 17104 ;;		line 7 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/__lldiv.c"
 17105 ;; Parameters:    Size  Location     Type
 17106 ;;  dividend        4   34[COMRAM] unsigned long 
 17107 ;;  divisor         4   38[COMRAM] unsigned long 
 17108 ;; Auto vars:     Size  Location     Type
 17109 ;;  quotient        4   42[COMRAM] unsigned long 
 17110 ;;  counter         1   46[COMRAM] unsigned char 
 17111 ;; Return value:  Size  Location     Type
 17112 ;;                  4   34[COMRAM] unsigned long 
 17113 ;; Registers used:
 17114 ;;		wreg, status,2, status,0
 17115 ;; Tracked objects:
 17116 ;;		On entry : 0/0
 17117 ;;		On exit  : 0/0
 17118 ;;		Unchanged: 0/0
 17119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17120 ;;      Params:         8       0       0       0       0       0       0
 17121 ;;      Locals:         5       0       0       0       0       0       0
 17122 ;;      Temps:          0       0       0       0       0       0       0
 17123 ;;      Totals:        13       0       0       0       0       0       0
 17124 ;;Total ram usage:       13 bytes
 17125 ;; Hardware stack levels used:    1
 17126 ;; Hardware stack levels required when called:    2
 17127 ;; This function calls:
 17128 ;;		Nothing
 17129 ;; This function is called by:
 17130 ;;		_adf4351_calc_counters
 17131 ;;		_adf4351_calc_rcnt_block
 17132 ;;		_usart_init
 17133 ;;		_adc_voltage
 17134 ;;		_check_usart
 17135 ;; This function uses a non-reentrant model
 17136 ;;
 17137                           
 17138                           	psect	text64
 17139  004B12                     __ptext64:
 17140                           	opt callstack 0
 17141  004B12                     ___lldiv:
 17142                           	opt callstack 27
 17143  004B12  0E00               	movlw	0
 17144  004B14  6E2B               	movwf	___lldiv@quotient^0,c
 17145  004B16  0E00               	movlw	0
 17146  004B18  6E2C               	movwf	(___lldiv@quotient+1)^0,c
 17147  004B1A  0E00               	movlw	0
 17148  004B1C  6E2D               	movwf	(___lldiv@quotient+2)^0,c
 17149  004B1E  0E00               	movlw	0
 17150  004B20  6E2E               	movwf	(___lldiv@quotient+3)^0,c
 17151  004B22  5027               	movf	___lldiv@divisor^0,w,c
 17152  004B24  1028               	iorwf	(___lldiv@divisor+1)^0,w,c
 17153  004B26  1029               	iorwf	(___lldiv@divisor+2)^0,w,c
 17154  004B28  102A               	iorwf	(___lldiv@divisor+3)^0,w,c
 17155  004B2A  B4D8               	btfsc	status,2,c
 17156  004B2C  EF9A  F025         	goto	u7841
 17157  004B30  EF9C  F025         	goto	u7840
 17158  004B34                     u7841:
 17159  004B34  EFD2  F025         	goto	l855
 17160  004B38                     u7840:
 17161  004B38  0E01               	movlw	1
 17162  004B3A  6E2F               	movwf	___lldiv@counter^0,c
 17163  004B3C  EFA6  F025         	goto	l6133
 17164  004B40                     l6131:
 17165  004B40  90D8               	bcf	status,0,c
 17166  004B42  3627               	rlcf	___lldiv@divisor^0,f,c
 17167  004B44  3628               	rlcf	(___lldiv@divisor+1)^0,f,c
 17168  004B46  3629               	rlcf	(___lldiv@divisor+2)^0,f,c
 17169  004B48  362A               	rlcf	(___lldiv@divisor+3)^0,f,c
 17170  004B4A  2A2F               	incf	___lldiv@counter^0,f,c
 17171  004B4C                     l6133:
 17172  004B4C  AE2A               	btfss	(___lldiv@divisor+3)^0,7,c
 17173  004B4E  EFAB  F025         	goto	u7851
 17174  004B52  EFAD  F025         	goto	u7850
 17175  004B56                     u7851:
 17176  004B56  EFA0  F025         	goto	l6131
 17177  004B5A                     u7850:
 17178  004B5A                     l6135:
 17179  004B5A  90D8               	bcf	status,0,c
 17180  004B5C  362B               	rlcf	___lldiv@quotient^0,f,c
 17181  004B5E  362C               	rlcf	(___lldiv@quotient+1)^0,f,c
 17182  004B60  362D               	rlcf	(___lldiv@quotient+2)^0,f,c
 17183  004B62  362E               	rlcf	(___lldiv@quotient+3)^0,f,c
 17184  004B64  5027               	movf	___lldiv@divisor^0,w,c
 17185  004B66  5C23               	subwf	___lldiv@dividend^0,w,c
 17186  004B68  5028               	movf	(___lldiv@divisor+1)^0,w,c
 17187  004B6A  5824               	subwfb	(___lldiv@dividend+1)^0,w,c
 17188  004B6C  5029               	movf	(___lldiv@divisor+2)^0,w,c
 17189  004B6E  5825               	subwfb	(___lldiv@dividend+2)^0,w,c
 17190  004B70  502A               	movf	(___lldiv@divisor+3)^0,w,c
 17191  004B72  5826               	subwfb	(___lldiv@dividend+3)^0,w,c
 17192  004B74  A0D8               	btfss	status,0,c
 17193  004B76  EFBF  F025         	goto	u7861
 17194  004B7A  EFC1  F025         	goto	u7860
 17195  004B7E                     u7861:
 17196  004B7E  EFCA  F025         	goto	l6143
 17197  004B82                     u7860:
 17198  004B82  5027               	movf	___lldiv@divisor^0,w,c
 17199  004B84  5E23               	subwf	___lldiv@dividend^0,f,c
 17200  004B86  5028               	movf	(___lldiv@divisor+1)^0,w,c
 17201  004B88  5A24               	subwfb	(___lldiv@dividend+1)^0,f,c
 17202  004B8A  5029               	movf	(___lldiv@divisor+2)^0,w,c
 17203  004B8C  5A25               	subwfb	(___lldiv@dividend+2)^0,f,c
 17204  004B8E  502A               	movf	(___lldiv@divisor+3)^0,w,c
 17205  004B90  5A26               	subwfb	(___lldiv@dividend+3)^0,f,c
 17206  004B92  802B               	bsf	___lldiv@quotient^0,0,c
 17207  004B94                     l6143:
 17208  004B94  90D8               	bcf	status,0,c
 17209  004B96  322A               	rrcf	(___lldiv@divisor+3)^0,f,c
 17210  004B98  3229               	rrcf	(___lldiv@divisor+2)^0,f,c
 17211  004B9A  3228               	rrcf	(___lldiv@divisor+1)^0,f,c
 17212  004B9C  3227               	rrcf	___lldiv@divisor^0,f,c
 17213  004B9E  2E2F               	decfsz	___lldiv@counter^0,f,c
 17214  004BA0  EFAD  F025         	goto	l6135
 17215  004BA4                     l855:
 17216  004BA4  C02B  F023         	movff	___lldiv@quotient,?___lldiv
 17217  004BA8  C02C  F024         	movff	___lldiv@quotient+1,?___lldiv+1
 17218  004BAC  C02D  F025         	movff	___lldiv@quotient+2,?___lldiv+2
 17219  004BB0  C02E  F026         	movff	___lldiv@quotient+3,?___lldiv+3
 17220  004BB4  0012               	return		;funcret
 17221  004BB6                     __end_of___lldiv:
 17222                           	opt callstack 0
 17223                           
 17224 ;; *************** function ___llmod *****************
 17225 ;; Defined at:
 17226 ;;		line 7 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/llmod.c"
 17227 ;; Parameters:    Size  Location     Type
 17228 ;;  dividend        4   12[COMRAM] unsigned long 
 17229 ;;  divisor         4   16[COMRAM] unsigned long 
 17230 ;; Auto vars:     Size  Location     Type
 17231 ;;  counter         1   20[COMRAM] unsigned char 
 17232 ;; Return value:  Size  Location     Type
 17233 ;;                  4   12[COMRAM] unsigned long 
 17234 ;; Registers used:
 17235 ;;		wreg, status,2, status,0
 17236 ;; Tracked objects:
 17237 ;;		On entry : 0/0
 17238 ;;		On exit  : 0/0
 17239 ;;		Unchanged: 0/0
 17240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17241 ;;      Params:         8       0       0       0       0       0       0
 17242 ;;      Locals:         1       0       0       0       0       0       0
 17243 ;;      Temps:          0       0       0       0       0       0       0
 17244 ;;      Totals:         9       0       0       0       0       0       0
 17245 ;;Total ram usage:        9 bytes
 17246 ;; Hardware stack levels used:    1
 17247 ;; Hardware stack levels required when called:    2
 17248 ;; This function calls:
 17249 ;;		Nothing
 17250 ;; This function is called by:
 17251 ;;		_adf4351_calc_counters
 17252 ;;		_adf4351_calc_rcnt_block
 17253 ;;		_gcd
 17254 ;;		_check_usart
 17255 ;; This function uses a non-reentrant model
 17256 ;;
 17257                           
 17258                           	psect	text65
 17259  004D7E                     __ptext65:
 17260                           	opt callstack 0
 17261  004D7E                     ___llmod:
 17262                           	opt callstack 24
 17263  004D7E  5011               	movf	___llmod@divisor^0,w,c
 17264  004D80  1012               	iorwf	(___llmod@divisor+1)^0,w,c
 17265  004D82  1013               	iorwf	(___llmod@divisor+2)^0,w,c
 17266  004D84  1014               	iorwf	(___llmod@divisor+3)^0,w,c
 17267  004D86  B4D8               	btfsc	status,2,c
 17268  004D88  EFC8  F026         	goto	u7411
 17269  004D8C  EFCA  F026         	goto	u7410
 17270  004D90                     u7411:
 17271  004D90  EFFA  F026         	goto	l1248
 17272  004D94                     u7410:
 17273  004D94  0E01               	movlw	1
 17274  004D96  6E15               	movwf	___llmod@counter^0,c
 17275  004D98  EFD4  F026         	goto	l5989
 17276  004D9C                     l5987:
 17277  004D9C  90D8               	bcf	status,0,c
 17278  004D9E  3611               	rlcf	___llmod@divisor^0,f,c
 17279  004DA0  3612               	rlcf	(___llmod@divisor+1)^0,f,c
 17280  004DA2  3613               	rlcf	(___llmod@divisor+2)^0,f,c
 17281  004DA4  3614               	rlcf	(___llmod@divisor+3)^0,f,c
 17282  004DA6  2A15               	incf	___llmod@counter^0,f,c
 17283  004DA8                     l5989:
 17284  004DA8  AE14               	btfss	(___llmod@divisor+3)^0,7,c
 17285  004DAA  EFD9  F026         	goto	u7421
 17286  004DAE  EFDB  F026         	goto	u7420
 17287  004DB2                     u7421:
 17288  004DB2  EFCE  F026         	goto	l5987
 17289  004DB6                     u7420:
 17290  004DB6                     l5991:
 17291  004DB6  5011               	movf	___llmod@divisor^0,w,c
 17292  004DB8  5C0D               	subwf	___llmod@dividend^0,w,c
 17293  004DBA  5012               	movf	(___llmod@divisor+1)^0,w,c
 17294  004DBC  580E               	subwfb	(___llmod@dividend+1)^0,w,c
 17295  004DBE  5013               	movf	(___llmod@divisor+2)^0,w,c
 17296  004DC0  580F               	subwfb	(___llmod@dividend+2)^0,w,c
 17297  004DC2  5014               	movf	(___llmod@divisor+3)^0,w,c
 17298  004DC4  5810               	subwfb	(___llmod@dividend+3)^0,w,c
 17299  004DC6  A0D8               	btfss	status,0,c
 17300  004DC8  EFE8  F026         	goto	u7431
 17301  004DCC  EFEA  F026         	goto	u7430
 17302  004DD0                     u7431:
 17303  004DD0  EFF2  F026         	goto	l5995
 17304  004DD4                     u7430:
 17305  004DD4  5011               	movf	___llmod@divisor^0,w,c
 17306  004DD6  5E0D               	subwf	___llmod@dividend^0,f,c
 17307  004DD8  5012               	movf	(___llmod@divisor+1)^0,w,c
 17308  004DDA  5A0E               	subwfb	(___llmod@dividend+1)^0,f,c
 17309  004DDC  5013               	movf	(___llmod@divisor+2)^0,w,c
 17310  004DDE  5A0F               	subwfb	(___llmod@dividend+2)^0,f,c
 17311  004DE0  5014               	movf	(___llmod@divisor+3)^0,w,c
 17312  004DE2  5A10               	subwfb	(___llmod@dividend+3)^0,f,c
 17313  004DE4                     l5995:
 17314  004DE4  90D8               	bcf	status,0,c
 17315  004DE6  3214               	rrcf	(___llmod@divisor+3)^0,f,c
 17316  004DE8  3213               	rrcf	(___llmod@divisor+2)^0,f,c
 17317  004DEA  3212               	rrcf	(___llmod@divisor+1)^0,f,c
 17318  004DEC  3211               	rrcf	___llmod@divisor^0,f,c
 17319  004DEE  2E15               	decfsz	___llmod@counter^0,f,c
 17320  004DF0  EFDB  F026         	goto	l5991
 17321  004DF4                     l1248:
 17322  004DF4  C00D  F00D         	movff	___llmod@dividend,?___llmod
 17323  004DF8  C00E  F00E         	movff	___llmod@dividend+1,?___llmod+1
 17324  004DFC  C00F  F00F         	movff	___llmod@dividend+2,?___llmod+2
 17325  004E00  C010  F010         	movff	___llmod@dividend+3,?___llmod+3
 17326  004E04  0012               	return		;funcret
 17327  004E06                     __end_of___llmod:
 17328                           	opt callstack 0
 17329                           
 17330 ;; *************** function ___awmod *****************
 17331 ;; Defined at:
 17332 ;;		line 7 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/awmod.c"
 17333 ;; Parameters:    Size  Location     Type
 17334 ;;  dividend        2   12[COMRAM] int 
 17335 ;;  divisor         2   14[COMRAM] int 
 17336 ;; Auto vars:     Size  Location     Type
 17337 ;;  sign            1   17[COMRAM] unsigned char 
 17338 ;;  counter         1   16[COMRAM] unsigned char 
 17339 ;; Return value:  Size  Location     Type
 17340 ;;                  2   12[COMRAM] int 
 17341 ;; Registers used:
 17342 ;;		wreg, status,2, status,0
 17343 ;; Tracked objects:
 17344 ;;		On entry : 0/0
 17345 ;;		On exit  : 0/0
 17346 ;;		Unchanged: 0/0
 17347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17348 ;;      Params:         4       0       0       0       0       0       0
 17349 ;;      Locals:         2       0       0       0       0       0       0
 17350 ;;      Temps:          0       0       0       0       0       0       0
 17351 ;;      Totals:         6       0       0       0       0       0       0
 17352 ;;Total ram usage:        6 bytes
 17353 ;; Hardware stack levels used:    1
 17354 ;; Hardware stack levels required when called:    2
 17355 ;; This function calls:
 17356 ;;		Nothing
 17357 ;; This function is called by:
 17358 ;;		_check_usart
 17359 ;; This function uses a non-reentrant model
 17360 ;;
 17361                           
 17362                           	psect	text66
 17363  004910                     __ptext66:
 17364                           	opt callstack 0
 17365  004910                     ___awmod:
 17366                           	opt callstack 27
 17367  004910  0E00               	movlw	0
 17368  004912  6E12               	movwf	___awmod@sign^0,c
 17369  004914  BE0E               	btfsc	(___awmod@dividend+1)^0,7,c
 17370  004916  EF91  F024         	goto	u8440
 17371  00491A  EF8F  F024         	goto	u8441
 17372  00491E                     u8441:
 17373  00491E  EF97  F024         	goto	l6561
 17374  004922                     u8440:
 17375  004922  6C0D               	negf	___awmod@dividend^0,c
 17376  004924  1E0E               	comf	(___awmod@dividend+1)^0,f,c
 17377  004926  B0D8               	btfsc	status,0,c
 17378  004928  2A0E               	incf	(___awmod@dividend+1)^0,f,c
 17379  00492A  0E01               	movlw	1
 17380  00492C  6E12               	movwf	___awmod@sign^0,c
 17381  00492E                     l6561:
 17382  00492E  BE10               	btfsc	(___awmod@divisor+1)^0,7,c
 17383  004930  EF9E  F024         	goto	u8450
 17384  004934  EF9C  F024         	goto	u8451
 17385  004938                     u8451:
 17386  004938  EFA2  F024         	goto	l6565
 17387  00493C                     u8450:
 17388  00493C  6C0F               	negf	___awmod@divisor^0,c
 17389  00493E  1E10               	comf	(___awmod@divisor+1)^0,f,c
 17390  004940  B0D8               	btfsc	status,0,c
 17391  004942  2A10               	incf	(___awmod@divisor+1)^0,f,c
 17392  004944                     l6565:
 17393  004944  500F               	movf	___awmod@divisor^0,w,c
 17394  004946  1010               	iorwf	(___awmod@divisor+1)^0,w,c
 17395  004948  B4D8               	btfsc	status,2,c
 17396  00494A  EFA9  F024         	goto	u8461
 17397  00494E  EFAB  F024         	goto	u8460
 17398  004952                     u8461:
 17399  004952  EFCF  F024         	goto	l6581
 17400  004956                     u8460:
 17401  004956  0E01               	movlw	1
 17402  004958  6E11               	movwf	___awmod@counter^0,c
 17403  00495A  EFB3  F024         	goto	l6571
 17404  00495E                     l6569:
 17405  00495E  90D8               	bcf	status,0,c
 17406  004960  360F               	rlcf	___awmod@divisor^0,f,c
 17407  004962  3610               	rlcf	(___awmod@divisor+1)^0,f,c
 17408  004964  2A11               	incf	___awmod@counter^0,f,c
 17409  004966                     l6571:
 17410  004966  AE10               	btfss	(___awmod@divisor+1)^0,7,c
 17411  004968  EFB8  F024         	goto	u8471
 17412  00496C  EFBA  F024         	goto	u8470
 17413  004970                     u8471:
 17414  004970  EFAF  F024         	goto	l6569
 17415  004974                     u8470:
 17416  004974                     l6573:
 17417  004974  500F               	movf	___awmod@divisor^0,w,c
 17418  004976  5C0D               	subwf	___awmod@dividend^0,w,c
 17419  004978  5010               	movf	(___awmod@divisor+1)^0,w,c
 17420  00497A  580E               	subwfb	(___awmod@dividend+1)^0,w,c
 17421  00497C  A0D8               	btfss	status,0,c
 17422  00497E  EFC3  F024         	goto	u8481
 17423  004982  EFC5  F024         	goto	u8480
 17424  004986                     u8481:
 17425  004986  EFC9  F024         	goto	l6577
 17426  00498A                     u8480:
 17427  00498A  500F               	movf	___awmod@divisor^0,w,c
 17428  00498C  5E0D               	subwf	___awmod@dividend^0,f,c
 17429  00498E  5010               	movf	(___awmod@divisor+1)^0,w,c
 17430  004990  5A0E               	subwfb	(___awmod@dividend+1)^0,f,c
 17431  004992                     l6577:
 17432  004992  90D8               	bcf	status,0,c
 17433  004994  3210               	rrcf	(___awmod@divisor+1)^0,f,c
 17434  004996  320F               	rrcf	___awmod@divisor^0,f,c
 17435  004998  2E11               	decfsz	___awmod@counter^0,f,c
 17436  00499A  EFBA  F024         	goto	l6573
 17437  00499E                     l6581:
 17438  00499E  5012               	movf	___awmod@sign^0,w,c
 17439  0049A0  B4D8               	btfsc	status,2,c
 17440  0049A2  EFD5  F024         	goto	u8491
 17441  0049A6  EFD7  F024         	goto	u8490
 17442  0049AA                     u8491:
 17443  0049AA  EFDB  F024         	goto	l6585
 17444  0049AE                     u8490:
 17445  0049AE  6C0D               	negf	___awmod@dividend^0,c
 17446  0049B0  1E0E               	comf	(___awmod@dividend+1)^0,f,c
 17447  0049B2  B0D8               	btfsc	status,0,c
 17448  0049B4  2A0E               	incf	(___awmod@dividend+1)^0,f,c
 17449  0049B6                     l6585:
 17450  0049B6  C00D  F00D         	movff	___awmod@dividend,?___awmod
 17451  0049BA  C00E  F00E         	movff	___awmod@dividend+1,?___awmod+1
 17452  0049BE  0012               	return		;funcret
 17453  0049C0                     __end_of___awmod:
 17454                           	opt callstack 0
 17455                           
 17456 ;; *************** function ___awdiv *****************
 17457 ;; Defined at:
 17458 ;;		line 7 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/awdiv.c"
 17459 ;; Parameters:    Size  Location     Type
 17460 ;;  dividend        2   12[COMRAM] int 
 17461 ;;  divisor         2   14[COMRAM] int 
 17462 ;; Auto vars:     Size  Location     Type
 17463 ;;  quotient        2   18[COMRAM] int 
 17464 ;;  sign            1   17[COMRAM] unsigned char 
 17465 ;;  counter         1   16[COMRAM] unsigned char 
 17466 ;; Return value:  Size  Location     Type
 17467 ;;                  2   12[COMRAM] int 
 17468 ;; Registers used:
 17469 ;;		wreg, status,2, status,0
 17470 ;; Tracked objects:
 17471 ;;		On entry : 0/0
 17472 ;;		On exit  : 0/0
 17473 ;;		Unchanged: 0/0
 17474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17475 ;;      Params:         4       0       0       0       0       0       0
 17476 ;;      Locals:         4       0       0       0       0       0       0
 17477 ;;      Temps:          0       0       0       0       0       0       0
 17478 ;;      Totals:         8       0       0       0       0       0       0
 17479 ;;Total ram usage:        8 bytes
 17480 ;; Hardware stack levels used:    1
 17481 ;; Hardware stack levels required when called:    2
 17482 ;; This function calls:
 17483 ;;		Nothing
 17484 ;; This function is called by:
 17485 ;;		_adf4351_calc_rcnt_block
 17486 ;;		_check_usart
 17487 ;; This function uses a non-reentrant model
 17488 ;;
 17489                           
 17490                           	psect	text67
 17491  0046D6                     __ptext67:
 17492                           	opt callstack 0
 17493  0046D6                     ___awdiv:
 17494                           	opt callstack 24
 17495  0046D6  0E00               	movlw	0
 17496  0046D8  6E12               	movwf	___awdiv@sign^0,c
 17497  0046DA  BE10               	btfsc	(___awdiv@divisor+1)^0,7,c
 17498  0046DC  EF74  F023         	goto	u7870
 17499  0046E0  EF72  F023         	goto	u7871
 17500  0046E4                     u7871:
 17501  0046E4  EF7A  F023         	goto	l6155
 17502  0046E8                     u7870:
 17503  0046E8  6C0F               	negf	___awdiv@divisor^0,c
 17504  0046EA  1E10               	comf	(___awdiv@divisor+1)^0,f,c
 17505  0046EC  B0D8               	btfsc	status,0,c
 17506  0046EE  2A10               	incf	(___awdiv@divisor+1)^0,f,c
 17507  0046F0  0E01               	movlw	1
 17508  0046F2  6E12               	movwf	___awdiv@sign^0,c
 17509  0046F4                     l6155:
 17510  0046F4  BE0E               	btfsc	(___awdiv@dividend+1)^0,7,c
 17511  0046F6  EF81  F023         	goto	u7880
 17512  0046FA  EF7F  F023         	goto	u7881
 17513  0046FE                     u7881:
 17514  0046FE  EF87  F023         	goto	l6161
 17515  004702                     u7880:
 17516  004702  6C0D               	negf	___awdiv@dividend^0,c
 17517  004704  1E0E               	comf	(___awdiv@dividend+1)^0,f,c
 17518  004706  B0D8               	btfsc	status,0,c
 17519  004708  2A0E               	incf	(___awdiv@dividend+1)^0,f,c
 17520  00470A  0E01               	movlw	1
 17521  00470C  1A12               	xorwf	___awdiv@sign^0,f,c
 17522  00470E                     l6161:
 17523  00470E  0E00               	movlw	0
 17524  004710  6E14               	movwf	(___awdiv@quotient+1)^0,c
 17525  004712  0E00               	movlw	0
 17526  004714  6E13               	movwf	___awdiv@quotient^0,c
 17527  004716  500F               	movf	___awdiv@divisor^0,w,c
 17528  004718  1010               	iorwf	(___awdiv@divisor+1)^0,w,c
 17529  00471A  B4D8               	btfsc	status,2,c
 17530  00471C  EF92  F023         	goto	u7891
 17531  004720  EF94  F023         	goto	u7890
 17532  004724                     u7891:
 17533  004724  EFBC  F023         	goto	l6183
 17534  004728                     u7890:
 17535  004728  0E01               	movlw	1
 17536  00472A  6E11               	movwf	___awdiv@counter^0,c
 17537  00472C  EF9C  F023         	goto	l6169
 17538  004730                     l6167:
 17539  004730  90D8               	bcf	status,0,c
 17540  004732  360F               	rlcf	___awdiv@divisor^0,f,c
 17541  004734  3610               	rlcf	(___awdiv@divisor+1)^0,f,c
 17542  004736  2A11               	incf	___awdiv@counter^0,f,c
 17543  004738                     l6169:
 17544  004738  AE10               	btfss	(___awdiv@divisor+1)^0,7,c
 17545  00473A  EFA1  F023         	goto	u7901
 17546  00473E  EFA3  F023         	goto	u7900
 17547  004742                     u7901:
 17548  004742  EF98  F023         	goto	l6167
 17549  004746                     u7900:
 17550  004746                     l6171:
 17551  004746  90D8               	bcf	status,0,c
 17552  004748  3613               	rlcf	___awdiv@quotient^0,f,c
 17553  00474A  3614               	rlcf	(___awdiv@quotient+1)^0,f,c
 17554  00474C  500F               	movf	___awdiv@divisor^0,w,c
 17555  00474E  5C0D               	subwf	___awdiv@dividend^0,w,c
 17556  004750  5010               	movf	(___awdiv@divisor+1)^0,w,c
 17557  004752  580E               	subwfb	(___awdiv@dividend+1)^0,w,c
 17558  004754  A0D8               	btfss	status,0,c
 17559  004756  EFAF  F023         	goto	u7911
 17560  00475A  EFB1  F023         	goto	u7910
 17561  00475E                     u7911:
 17562  00475E  EFB6  F023         	goto	l6179
 17563  004762                     u7910:
 17564  004762  500F               	movf	___awdiv@divisor^0,w,c
 17565  004764  5E0D               	subwf	___awdiv@dividend^0,f,c
 17566  004766  5010               	movf	(___awdiv@divisor+1)^0,w,c
 17567  004768  5A0E               	subwfb	(___awdiv@dividend+1)^0,f,c
 17568  00476A  8013               	bsf	___awdiv@quotient^0,0,c
 17569  00476C                     l6179:
 17570  00476C  90D8               	bcf	status,0,c
 17571  00476E  3210               	rrcf	(___awdiv@divisor+1)^0,f,c
 17572  004770  320F               	rrcf	___awdiv@divisor^0,f,c
 17573  004772  2E11               	decfsz	___awdiv@counter^0,f,c
 17574  004774  EFA3  F023         	goto	l6171
 17575  004778                     l6183:
 17576  004778  5012               	movf	___awdiv@sign^0,w,c
 17577  00477A  B4D8               	btfsc	status,2,c
 17578  00477C  EFC2  F023         	goto	u7921
 17579  004780  EFC4  F023         	goto	u7920
 17580  004784                     u7921:
 17581  004784  EFC8  F023         	goto	l6187
 17582  004788                     u7920:
 17583  004788  6C13               	negf	___awdiv@quotient^0,c
 17584  00478A  1E14               	comf	(___awdiv@quotient+1)^0,f,c
 17585  00478C  B0D8               	btfsc	status,0,c
 17586  00478E  2A14               	incf	(___awdiv@quotient+1)^0,f,c
 17587  004790                     l6187:
 17588  004790  C013  F00D         	movff	___awdiv@quotient,?___awdiv
 17589  004794  C014  F00E         	movff	___awdiv@quotient+1,?___awdiv+1
 17590  004798  0012               	return		;funcret
 17591  00479A                     __end_of___awdiv:
 17592                           	opt callstack 0
 17593                           
 17594 ;; *************** function _KTY82_222_Adc2Temperature *****************
 17595 ;; Defined at:
 17596 ;;		line 71 in file "src/driver/kty82.c"
 17597 ;; Parameters:    Size  Location     Type
 17598 ;;  adc_value       2   22[COMRAM] unsigned short 
 17599 ;; Auto vars:     Size  Location     Type
 17600 ;;  res             2   24[COMRAM] short 
 17601 ;; Return value:  Size  Location     Type
 17602 ;;                  2   22[COMRAM] short 
 17603 ;; Registers used:
 17604 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 17605 ;; Tracked objects:
 17606 ;;		On entry : 0/0
 17607 ;;		On exit  : 0/0
 17608 ;;		Unchanged: 0/0
 17609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17610 ;;      Params:         2       0       0       0       0       0       0
 17611 ;;      Locals:         2       0       0       0       0       0       0
 17612 ;;      Temps:          0       0       0       0       0       0       0
 17613 ;;      Totals:         4       0       0       0       0       0       0
 17614 ;;Total ram usage:        4 bytes
 17615 ;; Hardware stack levels used:    1
 17616 ;; Hardware stack levels required when called:    2
 17617 ;; This function calls:
 17618 ;;		Nothing
 17619 ;; This function is called by:
 17620 ;;		_check_usart
 17621 ;; This function uses a non-reentrant model
 17622 ;;
 17623                           
 17624                           	psect	text68
 17625  0055CE                     __ptext68:
 17626                           	opt callstack 0
 17627  0055CE                     _KTY82_222_Adc2Temperature:
 17628                           	opt callstack 27
 17629  0055CE                     
 17630                           ;src/driver/kty82.c: 71: s16 KTY82_222_Adc2Temperature(u16 adc_value);src/driver/kty82.c
      +                          : 72: {;src/driver/kty82.c: 73:     s16 res;;src/driver/kty82.c: 75:     if(adc_value < 
      +                          1024) {
 17631  0055CE  0E04               	movlw	4
 17632  0055D0  5C18               	subwf	(KTY82_222_Adc2Temperature@adc_value+1)^0,w,c
 17633  0055D2  B0D8               	btfsc	status,0,c
 17634  0055D4  EFEE  F02A         	goto	u8361
 17635  0055D8  EFF0  F02A         	goto	u8360
 17636  0055DC                     u8361:
 17637  0055DC  EF01  F02B         	goto	l6479
 17638  0055E0                     u8360:
 17639  0055E0                     
 17640                           ;src/driver/kty82.c: 76:         res = table_220[ adc_value ];
 17641  0055E0  90D8               	bcf	status,0,c
 17642  0055E2  3417               	rlcf	KTY82_222_Adc2Temperature@adc_value^0,w,c
 17643  0055E4  6EF6               	movwf	tblptrl,c
 17644  0055E6  3418               	rlcf	(KTY82_222_Adc2Temperature@adc_value+1)^0,w,c
 17645  0055E8  6EF7               	movwf	tblptrh,c
 17646  0055EA  0E7F               	movlw	low _table_220
 17647  0055EC  26F6               	addwf	tblptrl,f,c
 17648  0055EE  0E71               	movlw	high _table_220
 17649  0055F0  22F7               	addwfc	tblptrh,f,c
 17650  0055F2                     	if	0	;There are less than 3 active tblptr bytes
 17651  0055F2                     	endif
 17652  0055F2  0009               	tblrd		*+
 17653  0055F4  CFF5 F019          	movff	tablat,KTY82_222_Adc2Temperature@res
 17654  0055F8  000A               	tblrd		*-
 17655  0055FA  CFF5 F01A          	movff	tablat,KTY82_222_Adc2Temperature@res+1
 17656                           
 17657                           ;src/driver/kty82.c: 77:     } else {
 17658  0055FE  EF05  F02B         	goto	l6481
 17659  005602                     l6479:
 17660                           
 17661                           ;src/driver/kty82.c: 78:         res = 0;
 17662  005602  0E00               	movlw	0
 17663  005604  6E1A               	movwf	(KTY82_222_Adc2Temperature@res+1)^0,c
 17664  005606  0E00               	movlw	0
 17665  005608  6E19               	movwf	KTY82_222_Adc2Temperature@res^0,c
 17666  00560A                     l6481:
 17667                           
 17668                           ;src/driver/kty82.c: 81:     return res;
 17669  00560A  C019  F017         	movff	KTY82_222_Adc2Temperature@res,?_KTY82_222_Adc2Temperature
 17670  00560E  C01A  F018         	movff	KTY82_222_Adc2Temperature@res+1,?_KTY82_222_Adc2Temperature+1
 17671  005612  0012               	return		;funcret
 17672  005614                     __end_of_KTY82_222_Adc2Temperature:
 17673                           	opt callstack 0
 17674                           
 17675 ;; *************** function _adf4351_init *****************
 17676 ;; Defined at:
 17677 ;;		line 35 in file "src/driver/adf4351.c"
 17678 ;; Parameters:    Size  Location     Type
 17679 ;;  ctx             2   24[COMRAM] PTR struct adf4351_ctx
 17680 ;;		 -> g_adf4351(55), 
 17681 ;;  ref             4   26[COMRAM] unsigned long 
 17682 ;;  pfd             4   30[COMRAM] unsigned long 
 17683 ;; Auto vars:     Size  Location     Type
 17684 ;;		None
 17685 ;; Return value:  Size  Location     Type
 17686 ;;                  1    wreg      void 
 17687 ;; Registers used:
 17688 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17689 ;; Tracked objects:
 17690 ;;		On entry : 0/0
 17691 ;;		On exit  : 0/0
 17692 ;;		Unchanged: 0/0
 17693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17694 ;;      Params:        10       0       0       0       0       0       0
 17695 ;;      Locals:         0       0       0       0       0       0       0
 17696 ;;      Temps:          3       0       0       0       0       0       0
 17697 ;;      Totals:        13       0       0       0       0       0       0
 17698 ;;Total ram usage:       13 bytes
 17699 ;; Hardware stack levels used:    1
 17700 ;; Hardware stack levels required when called:    3
 17701 ;; This function calls:
 17702 ;;		_adf4351_default
 17703 ;;		_memset
 17704 ;; This function is called by:
 17705 ;;		_main
 17706 ;; This function uses a non-reentrant model
 17707 ;;
 17708                           
 17709                           	psect	text69
 17710  00445A                     __ptext69:
 17711                           	opt callstack 0
 17712  00445A                     _adf4351_init:
 17713                           	opt callstack 27
 17714  00445A                     
 17715                           ;src/driver/adf4351.c: 35: void adf4351_init(adf4351_ctx* ctx, u32 ref, u32 pfd);src/dri
      +                          ver/adf4351.c: 36: {;src/driver/adf4351.c: 37:  memset(ctx, 0, sizeof(*ctx));
 17716  00445A  C019  F00D         	movff	adf4351_init@ctx,memset@dest
 17717  00445E  C01A  F00E         	movff	adf4351_init@ctx+1,memset@dest+1
 17718  004462  0E00               	movlw	0
 17719  004464  6E10               	movwf	(memset@c+1)^0,c
 17720  004466  0E00               	movlw	0
 17721  004468  6E0F               	movwf	memset@c^0,c
 17722  00446A  0E00               	movlw	0
 17723  00446C  6E12               	movwf	(memset@n+1)^0,c
 17724  00446E  0E37               	movlw	55
 17725  004470  6E11               	movwf	memset@n^0,c
 17726  004472  ECD5  F01C         	call	_memset	;wreg free
 17727  004476                     
 17728                           ;src/driver/adf4351.c: 40:  ctx->init = 1;
 17729  004476  C019  FFD9         	movff	adf4351_init@ctx,fsr2l
 17730  00447A  C01A  FFDA         	movff	adf4351_init@ctx+1,fsr2h
 17731  00447E  0E01               	movlw	1
 17732  004480  6EDE               	movwf	postinc2,c
 17733  004482  0E00               	movlw	0
 17734  004484  6EDD               	movwf	postdec2,c
 17735  004486                     
 17736                           ;src/driver/adf4351.c: 41:  ctx->ref = ref;
 17737  004486  EE20 F02B          	lfsr	2,43
 17738  00448A  5019               	movf	adf4351_init@ctx^0,w,c
 17739  00448C  26D9               	addwf	fsr2l,f,c
 17740  00448E  501A               	movf	(adf4351_init@ctx+1)^0,w,c
 17741  004490  22DA               	addwfc	fsr2h,f,c
 17742  004492  C01B  FFDE         	movff	adf4351_init@ref,postinc2
 17743  004496  C01C  FFDE         	movff	adf4351_init@ref+1,postinc2
 17744  00449A  C01D  FFDE         	movff	adf4351_init@ref+2,postinc2
 17745  00449E  C01E  FFDE         	movff	adf4351_init@ref+3,postinc2
 17746  0044A2                     
 17747                           ;src/driver/adf4351.c: 42:  ctx->pfd = pfd;
 17748  0044A2  EE20 F02F          	lfsr	2,47
 17749  0044A6  5019               	movf	adf4351_init@ctx^0,w,c
 17750  0044A8  26D9               	addwf	fsr2l,f,c
 17751  0044AA  501A               	movf	(adf4351_init@ctx+1)^0,w,c
 17752  0044AC  22DA               	addwfc	fsr2h,f,c
 17753  0044AE  C01F  FFDE         	movff	adf4351_init@pfd,postinc2
 17754  0044B2  C020  FFDE         	movff	adf4351_init@pfd+1,postinc2
 17755  0044B6  C021  FFDE         	movff	adf4351_init@pfd+2,postinc2
 17756  0044BA  C022  FFDE         	movff	adf4351_init@pfd+3,postinc2
 17757  0044BE                     
 17758                           ;src/driver/adf4351.c: 45:     *((PIN_ADF_LE)->pPORT) &= ~(PIN_ADF_LE)->mask;
 17759  0044BE  0E10               	movlw	low (_PIN_ADF_LE_DEF+4)
 17760  0044C0  6EF6               	movwf	tblptrl,c
 17761  0044C2  0E7A               	movlw	high (_PIN_ADF_LE_DEF+4)
 17762  0044C4  6EF7               	movwf	tblptrh,c
 17763  0044C6                     	if	0	;tblptru may be non-zero
 17764  0044C6                     	endif
 17765  0044C6                     	if	0	;tblptru may be non-zero
 17766  0044C6                     	endif
 17767  0044C6  0008               	tblrd		*
 17768  0044C8  50F5               	movf	tablat,w,c
 17769  0044CA  0AFF               	xorlw	255
 17770  0044CC  6E23               	movwf	??_adf4351_init^0,c
 17771  0044CE  0E0C               	movlw	low _PIN_ADF_LE_DEF
 17772  0044D0  6EF6               	movwf	tblptrl,c
 17773  0044D2                     	if	1	;There is more than 1 active tblptr byte
 17774  0044D2  0E7A               	movlw	high _PIN_ADF_LE_DEF
 17775  0044D4  6EF7               	movwf	tblptrh,c
 17776  0044D6                     	endif
 17777  0044D6                     	if	0	;There are less than 3 active tblptr bytes
 17778  0044D6                     	endif
 17779  0044D6  0009               	tblrd		*+
 17780  0044D8  CFF5 F024          	movff	tablat,??_adf4351_init+1
 17781  0044DC  0009               	tblrd		*+
 17782  0044DE  CFF5 F025          	movff	tablat,??_adf4351_init+2
 17783  0044E2  C024  FFD9         	movff	??_adf4351_init+1,fsr2l
 17784  0044E6  C025  FFDA         	movff	??_adf4351_init+2,fsr2h
 17785  0044EA  5023               	movf	??_adf4351_init^0,w,c
 17786  0044EC  16DF               	andwf	indf2,f,c
 17787  0044EE                     
 17788                           ;src/driver/adf4351.c: 46:     *((PIN_ADF_CE)->pPORT) |= (PIN_ADF_CE)->mask;
 17789  0044EE  0E15               	movlw	low (_PIN_ADF_CE_DEF+4)
 17790  0044F0  6EF6               	movwf	tblptrl,c
 17791  0044F2  0E7A               	movlw	high (_PIN_ADF_CE_DEF+4)
 17792  0044F4  6EF7               	movwf	tblptrh,c
 17793  0044F6                     	if	0	;tblptru may be non-zero
 17794  0044F6                     	endif
 17795  0044F6                     	if	0	;tblptru may be non-zero
 17796  0044F6                     	endif
 17797  0044F6  0008               	tblrd		*
 17798  0044F8  CFF5 F023          	movff	tablat,??_adf4351_init
 17799  0044FC  0E11               	movlw	low _PIN_ADF_CE_DEF
 17800  0044FE  6EF6               	movwf	tblptrl,c
 17801  004500                     	if	1	;There is more than 1 active tblptr byte
 17802  004500  0E7A               	movlw	high _PIN_ADF_CE_DEF
 17803  004502  6EF7               	movwf	tblptrh,c
 17804  004504                     	endif
 17805  004504                     	if	0	;There are less than 3 active tblptr bytes
 17806  004504                     	endif
 17807  004504  0009               	tblrd		*+
 17808  004506  CFF5 F024          	movff	tablat,??_adf4351_init+1
 17809  00450A  0009               	tblrd		*+
 17810  00450C  CFF5 F025          	movff	tablat,??_adf4351_init+2
 17811  004510  C024  FFD9         	movff	??_adf4351_init+1,fsr2l
 17812  004514  C025  FFDA         	movff	??_adf4351_init+2,fsr2h
 17813  004518  5023               	movf	??_adf4351_init^0,w,c
 17814  00451A  12DF               	iorwf	indf2,f,c
 17815  00451C                     
 17816                           ;src/driver/adf4351.c: 49:  adf4351_default(ctx);
 17817  00451C  C019  F00D         	movff	adf4351_init@ctx,adf4351_default@ctx
 17818  004520  C01A  F00E         	movff	adf4351_init@ctx+1,adf4351_default@ctx+1
 17819  004524  EC36  F025         	call	_adf4351_default	;wreg free
 17820  004528                     
 17821                           ;src/driver/adf4351.c: 51:     _delay((unsigned long)((100)*(8000000/4000000.0)));
 17822  004528  0E42               	movlw	66
 17823  00452A                     u8927:
 17824  00452A  2EE8               	decfsz	wreg,f,c
 17825  00452C  D7FE               	bra	u8927
 17826  00452E  D000               	nop2	
 17827  004530  0012               	return		;funcret
 17828  004532                     __end_of_adf4351_init:
 17829                           	opt callstack 0
 17830                           
 17831 ;; *************** function _memset *****************
 17832 ;; Defined at:
 17833 ;;		line 4 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/memset.c"
 17834 ;; Parameters:    Size  Location     Type
 17835 ;;  dest            2   12[COMRAM] PTR void 
 17836 ;;		 -> g_cmd_buf(10), g_adf4351(55), 
 17837 ;;  c               2   14[COMRAM] int 
 17838 ;;  n               2   16[COMRAM] unsigned int 
 17839 ;; Auto vars:     Size  Location     Type
 17840 ;;  s               2   22[COMRAM] PTR unsigned char 
 17841 ;;		 -> g_cmd_buf(10), g_adf4351(55), 
 17842 ;;  k               2   20[COMRAM] unsigned int 
 17843 ;; Return value:  Size  Location     Type
 17844 ;;                  2   12[COMRAM] PTR void 
 17845 ;; Registers used:
 17846 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17847 ;; Tracked objects:
 17848 ;;		On entry : 0/0
 17849 ;;		On exit  : 0/0
 17850 ;;		Unchanged: 0/0
 17851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17852 ;;      Params:         6       0       0       0       0       0       0
 17853 ;;      Locals:         4       0       0       0       0       0       0
 17854 ;;      Temps:          2       0       0       0       0       0       0
 17855 ;;      Totals:        12       0       0       0       0       0       0
 17856 ;;Total ram usage:       12 bytes
 17857 ;; Hardware stack levels used:    1
 17858 ;; Hardware stack levels required when called:    2
 17859 ;; This function calls:
 17860 ;;		Nothing
 17861 ;; This function is called by:
 17862 ;;		_adf4351_init
 17863 ;;		_check_usart
 17864 ;; This function uses a non-reentrant model
 17865 ;;
 17866                           
 17867                           	psect	text70
 17868  0039AA                     __ptext70:
 17869                           	opt callstack 0
 17870  0039AA                     _memset:
 17871                           	opt callstack 27
 17872  0039AA  C00D  F017         	movff	memset@dest,memset@s
 17873  0039AE  C00E  F018         	movff	memset@dest+1,memset@s+1
 17874  0039B2  5011               	movf	memset@n^0,w,c
 17875  0039B4  1012               	iorwf	(memset@n+1)^0,w,c
 17876  0039B6  A4D8               	btfss	status,2,c
 17877  0039B8  EFE0  F01C         	goto	u8281
 17878  0039BC  EFE2  F01C         	goto	u8280
 17879  0039C0                     u8281:
 17880  0039C0  EFE4  F01C         	goto	l6431
 17881  0039C4                     u8280:
 17882  0039C4  EF8F  F01D         	goto	l1567
 17883  0039C8                     l6431:
 17884  0039C8  C017  FFD9         	movff	memset@s,fsr2l
 17885  0039CC  C018  FFDA         	movff	memset@s+1,fsr2h
 17886  0039D0  C00F  FFDF         	movff	memset@c,indf2
 17887  0039D4  5011               	movf	memset@n^0,w,c
 17888  0039D6  2417               	addwf	memset@s^0,w,c
 17889  0039D8  6E13               	movwf	??_memset^0,c
 17890  0039DA  5012               	movf	(memset@n+1)^0,w,c
 17891  0039DC  2018               	addwfc	(memset@s+1)^0,w,c
 17892  0039DE  6E14               	movwf	(??_memset+1)^0,c
 17893  0039E0  0EFF               	movlw	255
 17894  0039E2  2413               	addwf	??_memset^0,w,c
 17895  0039E4  6ED9               	movwf	fsr2l,c
 17896  0039E6  0EFF               	movlw	255
 17897  0039E8  2014               	addwfc	(??_memset+1)^0,w,c
 17898  0039EA  6EDA               	movwf	fsr2h,c
 17899  0039EC  C00F  FFDF         	movff	memset@c,indf2
 17900  0039F0  5012               	movf	(memset@n+1)^0,w,c
 17901  0039F2  E107               	bnz	u8291
 17902  0039F4  0E03               	movlw	3
 17903  0039F6  5C11               	subwf	memset@n^0,w,c
 17904  0039F8  B0D8               	btfsc	status,0,c
 17905  0039FA  EF01  F01D         	goto	u8291
 17906  0039FE  EF03  F01D         	goto	u8290
 17907  003A02                     u8291:
 17908  003A02  EF05  F01D         	goto	l6437
 17909  003A06                     u8290:
 17910  003A06  EF8F  F01D         	goto	l1567
 17911  003A0A                     l6437:
 17912  003A0A  EE20 F001          	lfsr	2,1
 17913  003A0E  5017               	movf	memset@s^0,w,c
 17914  003A10  26D9               	addwf	fsr2l,f,c
 17915  003A12  5018               	movf	(memset@s+1)^0,w,c
 17916  003A14  22DA               	addwfc	fsr2h,f,c
 17917  003A16  C00F  FFDF         	movff	memset@c,indf2
 17918  003A1A  EE20 F002          	lfsr	2,2
 17919  003A1E  5017               	movf	memset@s^0,w,c
 17920  003A20  26D9               	addwf	fsr2l,f,c
 17921  003A22  5018               	movf	(memset@s+1)^0,w,c
 17922  003A24  22DA               	addwfc	fsr2h,f,c
 17923  003A26  C00F  FFDF         	movff	memset@c,indf2
 17924  003A2A  5011               	movf	memset@n^0,w,c
 17925  003A2C  2417               	addwf	memset@s^0,w,c
 17926  003A2E  6E13               	movwf	??_memset^0,c
 17927  003A30  5012               	movf	(memset@n+1)^0,w,c
 17928  003A32  2018               	addwfc	(memset@s+1)^0,w,c
 17929  003A34  6E14               	movwf	(??_memset+1)^0,c
 17930  003A36  0EFE               	movlw	254
 17931  003A38  2413               	addwf	??_memset^0,w,c
 17932  003A3A  6ED9               	movwf	fsr2l,c
 17933  003A3C  0EFF               	movlw	255
 17934  003A3E  2014               	addwfc	(??_memset+1)^0,w,c
 17935  003A40  6EDA               	movwf	fsr2h,c
 17936  003A42  C00F  FFDF         	movff	memset@c,indf2
 17937  003A46  5011               	movf	memset@n^0,w,c
 17938  003A48  2417               	addwf	memset@s^0,w,c
 17939  003A4A  6E13               	movwf	??_memset^0,c
 17940  003A4C  5012               	movf	(memset@n+1)^0,w,c
 17941  003A4E  2018               	addwfc	(memset@s+1)^0,w,c
 17942  003A50  6E14               	movwf	(??_memset+1)^0,c
 17943  003A52  0EFD               	movlw	253
 17944  003A54  2413               	addwf	??_memset^0,w,c
 17945  003A56  6ED9               	movwf	fsr2l,c
 17946  003A58  0EFF               	movlw	255
 17947  003A5A  2014               	addwfc	(??_memset+1)^0,w,c
 17948  003A5C  6EDA               	movwf	fsr2h,c
 17949  003A5E  C00F  FFDF         	movff	memset@c,indf2
 17950  003A62  5012               	movf	(memset@n+1)^0,w,c
 17951  003A64  E107               	bnz	u8301
 17952  003A66  0E07               	movlw	7
 17953  003A68  5C11               	subwf	memset@n^0,w,c
 17954  003A6A  B0D8               	btfsc	status,0,c
 17955  003A6C  EF3A  F01D         	goto	u8301
 17956  003A70  EF3C  F01D         	goto	u8300
 17957  003A74                     u8301:
 17958  003A74  EF3E  F01D         	goto	l6443
 17959  003A78                     u8300:
 17960  003A78  EF8F  F01D         	goto	l1567
 17961  003A7C                     l6443:
 17962  003A7C  EE20 F003          	lfsr	2,3
 17963  003A80  5017               	movf	memset@s^0,w,c
 17964  003A82  26D9               	addwf	fsr2l,f,c
 17965  003A84  5018               	movf	(memset@s+1)^0,w,c
 17966  003A86  22DA               	addwfc	fsr2h,f,c
 17967  003A88  C00F  FFDF         	movff	memset@c,indf2
 17968  003A8C  5011               	movf	memset@n^0,w,c
 17969  003A8E  2417               	addwf	memset@s^0,w,c
 17970  003A90  6E13               	movwf	??_memset^0,c
 17971  003A92  5012               	movf	(memset@n+1)^0,w,c
 17972  003A94  2018               	addwfc	(memset@s+1)^0,w,c
 17973  003A96  6E14               	movwf	(??_memset+1)^0,c
 17974  003A98  0EFC               	movlw	252
 17975  003A9A  2413               	addwf	??_memset^0,w,c
 17976  003A9C  6ED9               	movwf	fsr2l,c
 17977  003A9E  0EFF               	movlw	255
 17978  003AA0  2014               	addwfc	(??_memset+1)^0,w,c
 17979  003AA2  6EDA               	movwf	fsr2h,c
 17980  003AA4  C00F  FFDF         	movff	memset@c,indf2
 17981  003AA8  5012               	movf	(memset@n+1)^0,w,c
 17982  003AAA  E107               	bnz	u8311
 17983  003AAC  0E09               	movlw	9
 17984  003AAE  5C11               	subwf	memset@n^0,w,c
 17985  003AB0  B0D8               	btfsc	status,0,c
 17986  003AB2  EF5D  F01D         	goto	u8311
 17987  003AB6  EF5F  F01D         	goto	u8310
 17988  003ABA                     u8311:
 17989  003ABA  EF61  F01D         	goto	l6449
 17990  003ABE                     u8310:
 17991  003ABE  EF8F  F01D         	goto	l1567
 17992  003AC2                     l6449:
 17993  003AC2  C017  F013         	movff	memset@s,??_memset
 17994  003AC6  C018  F014         	movff	memset@s+1,??_memset+1
 17995  003ACA  1E13               	comf	??_memset^0,f,c
 17996  003ACC  1E14               	comf	(??_memset+1)^0,f,c
 17997  003ACE  4A13               	infsnz	??_memset^0,f,c
 17998  003AD0  2A14               	incf	(??_memset+1)^0,f,c
 17999  003AD2  0E03               	movlw	3
 18000  003AD4  1413               	andwf	??_memset^0,w,c
 18001  003AD6  6E15               	movwf	memset@k^0,c
 18002  003AD8  6A16               	clrf	(memset@k+1)^0,c
 18003  003ADA  5015               	movf	memset@k^0,w,c
 18004  003ADC  2617               	addwf	memset@s^0,f,c
 18005  003ADE  5016               	movf	(memset@k+1)^0,w,c
 18006  003AE0  2218               	addwfc	(memset@s+1)^0,f,c
 18007  003AE2  5015               	movf	memset@k^0,w,c
 18008  003AE4  5E11               	subwf	memset@n^0,f,c
 18009  003AE6  5016               	movf	(memset@k+1)^0,w,c
 18010  003AE8  5A12               	subwfb	(memset@n+1)^0,f,c
 18011  003AEA  0EFC               	movlw	252
 18012  003AEC  1611               	andwf	memset@n^0,f,c
 18013  003AEE  0EFF               	movlw	255
 18014  003AF0  1612               	andwf	(memset@n+1)^0,f,c
 18015  003AF2  EF86  F01D         	goto	l6457
 18016  003AF6                     l6451:
 18017  003AF6  C017  FFD9         	movff	memset@s,fsr2l
 18018  003AFA  C018  FFDA         	movff	memset@s+1,fsr2h
 18019  003AFE  C00F  FFDF         	movff	memset@c,indf2
 18020  003B02  0611               	decf	memset@n^0,f,c
 18021  003B04  A0D8               	btfss	status,0,c
 18022  003B06  0612               	decf	(memset@n+1)^0,f,c
 18023  003B08  4A17               	infsnz	memset@s^0,f,c
 18024  003B0A  2A18               	incf	(memset@s+1)^0,f,c
 18025  003B0C                     l6457:
 18026  003B0C  5011               	movf	memset@n^0,w,c
 18027  003B0E  1012               	iorwf	(memset@n+1)^0,w,c
 18028  003B10  A4D8               	btfss	status,2,c
 18029  003B12  EF8D  F01D         	goto	u8321
 18030  003B16  EF8F  F01D         	goto	u8320
 18031  003B1A                     u8321:
 18032  003B1A  EF7B  F01D         	goto	l6451
 18033  003B1E                     u8320:
 18034  003B1E                     l1567:
 18035  003B1E  0012               	return		;funcret
 18036  003B20                     __end_of_memset:
 18037                           	opt callstack 0
 18038                           
 18039 ;; *************** function _adf4351_default *****************
 18040 ;; Defined at:
 18041 ;;		line 128 in file "src/driver/adf4351.c"
 18042 ;; Parameters:    Size  Location     Type
 18043 ;;  ctx             2   12[COMRAM] PTR struct adf4351_ctx
 18044 ;;		 -> g_adf4351(55), 
 18045 ;; Auto vars:     Size  Location     Type
 18046 ;;		None
 18047 ;; Return value:  Size  Location     Type
 18048 ;;                  1    wreg      void 
 18049 ;; Registers used:
 18050 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18051 ;; Tracked objects:
 18052 ;;		On entry : 0/0
 18053 ;;		On exit  : 0/0
 18054 ;;		Unchanged: 0/0
 18055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18056 ;;      Params:         2       0       0       0       0       0       0
 18057 ;;      Locals:         0       0       0       0       0       0       0
 18058 ;;      Temps:          0       0       0       0       0       0       0
 18059 ;;      Totals:         2       0       0       0       0       0       0
 18060 ;;Total ram usage:        2 bytes
 18061 ;; Hardware stack levels used:    1
 18062 ;; Hardware stack levels required when called:    2
 18063 ;; This function calls:
 18064 ;;		Nothing
 18065 ;; This function is called by:
 18066 ;;		_adf4351_init
 18067 ;; This function uses a non-reentrant model
 18068 ;;
 18069                           
 18070                           	psect	text71
 18071  004A6C                     __ptext71:
 18072                           	opt callstack 0
 18073  004A6C                     _adf4351_default:
 18074                           	opt callstack 27
 18075  004A6C                     
 18076                           ;src/driver/adf4351.c: 128: static void adf4351_default(adf4351_ctx* ctx);src/driver/adf
      +                          4351.c: 129: {;src/driver/adf4351.c: 130:  ctx->reg1.phase = 1;
 18077  004A6C  EE20 F007          	lfsr	2,7
 18078  004A70  500D               	movf	adf4351_default@ctx^0,w,c
 18079  004A72  26D9               	addwf	fsr2l,f,c
 18080  004A74  500E               	movf	(adf4351_default@ctx+1)^0,w,c
 18081  004A76  22DA               	addwfc	fsr2h,f,c
 18082  004A78  0E01               	movlw	1
 18083  004A7A  6EDE               	movwf	postinc2,c
 18084  004A7C  0E00               	movlw	0
 18085  004A7E  6EDD               	movwf	postdec2,c
 18086                           
 18087                           ;src/driver/adf4351.c: 131:  ctx->reg2.muxout = 6;
 18088  004A80  EE20 F00C          	lfsr	2,12
 18089  004A84  500D               	movf	adf4351_default@ctx^0,w,c
 18090  004A86  26D9               	addwf	fsr2l,f,c
 18091  004A88  500E               	movf	(adf4351_default@ctx+1)^0,w,c
 18092  004A8A  22DA               	addwfc	fsr2h,f,c
 18093  004A8C  0E06               	movlw	6
 18094  004A8E  6EDF               	movwf	indf2,c
 18095                           
 18096                           ;src/driver/adf4351.c: 132:  ctx->reg2.cpc = 7;
 18097  004A90  EE20 F012          	lfsr	2,18
 18098  004A94  500D               	movf	adf4351_default@ctx^0,w,c
 18099  004A96  26D9               	addwf	fsr2l,f,c
 18100  004A98  500E               	movf	(adf4351_default@ctx+1)^0,w,c
 18101  004A9A  22DA               	addwfc	fsr2h,f,c
 18102  004A9C  0E07               	movlw	7
 18103  004A9E  6EDF               	movwf	indf2,c
 18104                           
 18105                           ;src/driver/adf4351.c: 133:  ctx->reg2.lownoise = 3;
 18106  004AA0  EE20 F00B          	lfsr	2,11
 18107  004AA4  500D               	movf	adf4351_default@ctx^0,w,c
 18108  004AA6  26D9               	addwf	fsr2l,f,c
 18109  004AA8  500E               	movf	(adf4351_default@ctx+1)^0,w,c
 18110  004AAA  22DA               	addwfc	fsr2h,f,c
 18111  004AAC  0E03               	movlw	3
 18112  004AAE  6EDF               	movwf	indf2,c
 18113                           
 18114                           ;src/driver/adf4351.c: 134:  ctx->reg2.pdpol = 1;
 18115  004AB0  EE20 F015          	lfsr	2,21
 18116  004AB4  500D               	movf	adf4351_default@ctx^0,w,c
 18117  004AB6  26D9               	addwf	fsr2l,f,c
 18118  004AB8  500E               	movf	(adf4351_default@ctx+1)^0,w,c
 18119  004ABA  22DA               	addwfc	fsr2h,f,c
 18120  004ABC  0E01               	movlw	1
 18121  004ABE  6EDF               	movwf	indf2,c
 18122                           
 18123                           ;src/driver/adf4351.c: 135:  ctx->reg4.fbsel = 1;
 18124  004AC0  EE20 F020          	lfsr	2,32
 18125  004AC4  500D               	movf	adf4351_default@ctx^0,w,c
 18126  004AC6  26D9               	addwf	fsr2l,f,c
 18127  004AC8  500E               	movf	(adf4351_default@ctx+1)^0,w,c
 18128  004ACA  22DA               	addwfc	fsr2h,f,c
 18129  004ACC  0E01               	movlw	1
 18130  004ACE  6EDF               	movwf	indf2,c
 18131                           
 18132                           ;src/driver/adf4351.c: 136:  ctx->reg4.rfoutena = 0;
 18133  004AD0  EE20 F028          	lfsr	2,40
 18134  004AD4  500D               	movf	adf4351_default@ctx^0,w,c
 18135  004AD6  26D9               	addwf	fsr2l,f,c
 18136  004AD8  500E               	movf	(adf4351_default@ctx+1)^0,w,c
 18137  004ADA  22DA               	addwfc	fsr2h,f,c
 18138  004ADC  0E00               	movlw	0
 18139  004ADE  6EDF               	movwf	indf2,c
 18140                           
 18141                           ;src/driver/adf4351.c: 137:  ctx->reg4.rfoutpwr = 3;
 18142  004AE0  EE20 F029          	lfsr	2,41
 18143  004AE4  500D               	movf	adf4351_default@ctx^0,w,c
 18144  004AE6  26D9               	addwf	fsr2l,f,c
 18145  004AE8  500E               	movf	(adf4351_default@ctx+1)^0,w,c
 18146  004AEA  22DA               	addwfc	fsr2h,f,c
 18147  004AEC  0E03               	movlw	3
 18148  004AEE  6EDF               	movwf	indf2,c
 18149                           
 18150                           ;src/driver/adf4351.c: 138:     ctx->reg4.vcopd = 1;
 18151  004AF0  EE20 F023          	lfsr	2,35
 18152  004AF4  500D               	movf	adf4351_default@ctx^0,w,c
 18153  004AF6  26D9               	addwf	fsr2l,f,c
 18154  004AF8  500E               	movf	(adf4351_default@ctx+1)^0,w,c
 18155  004AFA  22DA               	addwfc	fsr2h,f,c
 18156  004AFC  0E01               	movlw	1
 18157  004AFE  6EDF               	movwf	indf2,c
 18158                           
 18159                           ;src/driver/adf4351.c: 139:     ctx->reg5.ldpinmod = 1;
 18160  004B00  EE20 F02A          	lfsr	2,42
 18161  004B04  500D               	movf	adf4351_default@ctx^0,w,c
 18162  004B06  26D9               	addwf	fsr2l,f,c
 18163  004B08  500E               	movf	(adf4351_default@ctx+1)^0,w,c
 18164  004B0A  22DA               	addwfc	fsr2h,f,c
 18165  004B0C  0E01               	movlw	1
 18166  004B0E  6EDF               	movwf	indf2,c
 18167  004B10  0012               	return		;funcret
 18168  004B12                     __end_of_adf4351_default:
 18169                           	opt callstack 0
 18170                           
 18171 ;; *************** function _adc_init *****************
 18172 ;; Defined at:
 18173 ;;		line 7 in file "src/driver/adc.c"
 18174 ;; Parameters:    Size  Location     Type
 18175 ;;		None
 18176 ;; Auto vars:     Size  Location     Type
 18177 ;;		None
 18178 ;; Return value:  Size  Location     Type
 18179 ;;                  1    wreg      void 
 18180 ;; Registers used:
 18181 ;;		wreg, status,2
 18182 ;; Tracked objects:
 18183 ;;		On entry : 0/0
 18184 ;;		On exit  : 0/0
 18185 ;;		Unchanged: 0/0
 18186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18187 ;;      Params:         0       0       0       0       0       0       0
 18188 ;;      Locals:         0       0       0       0       0       0       0
 18189 ;;      Temps:          0       0       0       0       0       0       0
 18190 ;;      Totals:         0       0       0       0       0       0       0
 18191 ;;Total ram usage:        0 bytes
 18192 ;; Hardware stack levels used:    1
 18193 ;; Hardware stack levels required when called:    2
 18194 ;; This function calls:
 18195 ;;		Nothing
 18196 ;; This function is called by:
 18197 ;;		_main
 18198 ;; This function uses a non-reentrant model
 18199 ;;
 18200                           
 18201                           	psect	text72
 18202  0058C2                     __ptext72:
 18203                           	opt callstack 0
 18204  0058C2                     _adc_init:
 18205                           	opt callstack 28
 18206  0058C2                     
 18207                           ;src/driver/adc.c: 9:     ADCON1bits.VCFG1 = 0;
 18208  0058C2  9AC1               	bcf	193,5,c	;volatile
 18209                           
 18210                           ;src/driver/adc.c: 10:     ADCON1bits.VCFG0 = 0;
 18211  0058C4  98C1               	bcf	193,4,c	;volatile
 18212  0058C6                     
 18213                           ;src/driver/adc.c: 11:     ADCON1bits.PCFG = 0xF;
 18214  0058C6  0E0F               	movlw	15
 18215  0058C8  12C1               	iorwf	193,f,c	;volatile
 18216  0058CA                     
 18217                           ;src/driver/adc.c: 13:     ADCON2bits.ADFM = 1;
 18218  0058CA  8EC0               	bsf	192,7,c	;volatile
 18219                           
 18220                           ;src/driver/adc.c: 14:     ADCON2bits.ACQT = 7;
 18221  0058CC  0E38               	movlw	56
 18222  0058CE  12C0               	iorwf	192,f,c	;volatile
 18223                           
 18224                           ;src/driver/adc.c: 15:     ADCON2bits.ADCS = 7;
 18225  0058D0  0E07               	movlw	7
 18226  0058D2  12C0               	iorwf	192,f,c	;volatile
 18227  0058D4                     
 18228                           ;src/driver/adc.c: 17:     ADCON0bits.ADON = 1;
 18229  0058D4  80C2               	bsf	194,0,c	;volatile
 18230  0058D6  0012               	return		;funcret
 18231  0058D8                     __end_of_adc_init:
 18232                           	opt callstack 0
 18233                           
 18234 ;; *************** function _adc_cfg_gpio *****************
 18235 ;; Defined at:
 18236 ;;		line 20 in file "src/driver/adc.c"
 18237 ;; Parameters:    Size  Location     Type
 18238 ;;  gpio            2   16[COMRAM] PTR const struct gpio_pi
 18239 ;;		 -> PIN_VOLTAGE_DEF(5), PIN_RF_R_DEF(5), PIN_RF_V_DEF(5), PIN_TEMP_DEF(5), 
 18240 ;; Auto vars:     Size  Location     Type
 18241 ;;		None
 18242 ;; Return value:  Size  Location     Type
 18243 ;;                  2   16[COMRAM] int 
 18244 ;; Registers used:
 18245 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18246 ;; Tracked objects:
 18247 ;;		On entry : 0/0
 18248 ;;		On exit  : 0/0
 18249 ;;		Unchanged: 0/0
 18250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18251 ;;      Params:         2       0       0       0       0       0       0
 18252 ;;      Locals:         0       0       0       0       0       0       0
 18253 ;;      Temps:          5       0       0       0       0       0       0
 18254 ;;      Totals:         7       0       0       0       0       0       0
 18255 ;;Total ram usage:        7 bytes
 18256 ;; Hardware stack levels used:    1
 18257 ;; Hardware stack levels required when called:    3
 18258 ;; This function calls:
 18259 ;;		_gpio_to_ch
 18260 ;; This function is called by:
 18261 ;;		_main
 18262 ;; This function uses a non-reentrant model
 18263 ;;
 18264                           
 18265                           	psect	text73
 18266  005346                     __ptext73:
 18267                           	opt callstack 0
 18268  005346                     _adc_cfg_gpio:
 18269                           	opt callstack 27
 18270  005346                     
 18271                           ;src/driver/adc.c: 20: int adc_cfg_gpio(gpio_pin gpio);src/driver/adc.c: 21: {;src/drive
      +                          r/adc.c: 22:     if(gpio_to_ch(gpio) < 0) return -1;
 18272  005346  C011  F00D         	movff	adc_cfg_gpio@gpio,gpio_to_ch@gpio
 18273  00534A  C012  F00E         	movff	adc_cfg_gpio@gpio+1,gpio_to_ch@gpio+1
 18274  00534E  ECAB  F015         	call	_gpio_to_ch	;wreg free
 18275  005352  BE0E               	btfsc	(?_gpio_to_ch+1)^0,7,c
 18276  005354  EFB0  F029         	goto	u8500
 18277  005358  EFAE  F029         	goto	u8501
 18278  00535C                     u8501:
 18279  00535C  EFB2  F029         	goto	l6641
 18280  005360                     u8500:
 18281  005360  EFD1  F029         	goto	l253
 18282  005364                     l6641:
 18283                           
 18284                           ;src/driver/adc.c: 24:     *((gpio)->pTRIS) |= (gpio)->mask;
 18285  005364  0E04               	movlw	4
 18286  005366  2411               	addwf	adc_cfg_gpio@gpio^0,w,c
 18287  005368  6E13               	movwf	??_adc_cfg_gpio^0,c
 18288  00536A  0E00               	movlw	0
 18289  00536C  2012               	addwfc	(adc_cfg_gpio@gpio+1)^0,w,c
 18290  00536E  6E14               	movwf	(??_adc_cfg_gpio+1)^0,c
 18291  005370  C013  FFF6         	movff	??_adc_cfg_gpio,tblptrl
 18292  005374  C014  FFF7         	movff	??_adc_cfg_gpio+1,tblptrh
 18293  005378                     	if	0	;tblptru may be non-zero
 18294  005378                     	endif
 18295  005378                     	if	0	;tblptru may be non-zero
 18296  005378                     	endif
 18297  005378  0008               	tblrd		*
 18298  00537A  CFF5 F015          	movff	tablat,??_adc_cfg_gpio+2
 18299  00537E  0E02               	movlw	2
 18300  005380  2411               	addwf	adc_cfg_gpio@gpio^0,w,c
 18301  005382  6E16               	movwf	(??_adc_cfg_gpio+3)^0,c
 18302  005384  0E00               	movlw	0
 18303  005386  2012               	addwfc	(adc_cfg_gpio@gpio+1)^0,w,c
 18304  005388  6E17               	movwf	(??_adc_cfg_gpio+4)^0,c
 18305  00538A  C016  FFF6         	movff	??_adc_cfg_gpio+3,tblptrl
 18306  00538E  C017  FFF7         	movff	??_adc_cfg_gpio+4,tblptrh
 18307  005392                     	if	0	;tblptru may be non-zero
 18308  005392                     	endif
 18309  005392                     	if	0	;tblptru may be non-zero
 18310  005392                     	endif
 18311  005392  0009               	tblrd		*+
 18312  005394  CFF5 FFD9          	movff	tablat,fsr2l
 18313  005398  0009               	tblrd		*+
 18314  00539A  CFF5 FFDA          	movff	tablat,fsr2h
 18315  00539E  5015               	movf	(??_adc_cfg_gpio+2)^0,w,c
 18316  0053A0  12DF               	iorwf	indf2,f,c
 18317  0053A2                     l253:
 18318  0053A2  0012               	return		;funcret
 18319  0053A4                     __end_of_adc_cfg_gpio:
 18320                           	opt callstack 0
 18321                           
 18322 ;; *************** function _gpio_to_ch *****************
 18323 ;; Defined at:
 18324 ;;		line 51 in file "src/driver/adc.c"
 18325 ;; Parameters:    Size  Location     Type
 18326 ;;  gpio            2   12[COMRAM] PTR const struct gpio_pi
 18327 ;;		 -> PIN_VOLTAGE_DEF(5), PIN_RF_R_DEF(5), PIN_RF_V_DEF(5), PIN_TEMP_DEF(5), 
 18328 ;; Auto vars:     Size  Location     Type
 18329 ;;		None
 18330 ;; Return value:  Size  Location     Type
 18331 ;;                  2   12[COMRAM] int 
 18332 ;; Registers used:
 18333 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 18334 ;; Tracked objects:
 18335 ;;		On entry : 0/0
 18336 ;;		On exit  : 0/0
 18337 ;;		Unchanged: 0/0
 18338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18339 ;;      Params:         2       0       0       0       0       0       0
 18340 ;;      Locals:         0       0       0       0       0       0       0
 18341 ;;      Temps:          2       0       0       0       0       0       0
 18342 ;;      Totals:         4       0       0       0       0       0       0
 18343 ;;Total ram usage:        4 bytes
 18344 ;; Hardware stack levels used:    1
 18345 ;; Hardware stack levels required when called:    2
 18346 ;; This function calls:
 18347 ;;		Nothing
 18348 ;; This function is called by:
 18349 ;;		_adc_cfg_gpio
 18350 ;;		_adc_sample
 18351 ;; This function uses a non-reentrant model
 18352 ;;
 18353                           
 18354                           	psect	text74
 18355  002B56                     __ptext74:
 18356                           	opt callstack 0
 18357  002B56                     _gpio_to_ch:
 18358                           	opt callstack 25
 18359  002B56                     
 18360                           ;src/driver/adc.c: 51: static __attribute__((inline)) int gpio_to_ch(gpio_pin gpio);src/
      +                          driver/adc.c: 52: {;src/driver/adc.c: 53:     if(gpio->pTRIS == (volatile unsigned char 
      +                          *)&TRISA) {
 18361  002B56  0E02               	movlw	2
 18362  002B58  240D               	addwf	gpio_to_ch@gpio^0,w,c
 18363  002B5A  6E0F               	movwf	??_gpio_to_ch^0,c
 18364  002B5C  0E00               	movlw	0
 18365  002B5E  200E               	addwfc	(gpio_to_ch@gpio+1)^0,w,c
 18366  002B60  6E10               	movwf	(??_gpio_to_ch+1)^0,c
 18367  002B62  C00F  FFF6         	movff	??_gpio_to_ch,tblptrl
 18368  002B66  C010  FFF7         	movff	??_gpio_to_ch+1,tblptrh
 18369  002B6A                     	if	0	;tblptru may be non-zero
 18370  002B6A                     	endif
 18371  002B6A                     	if	0	;tblptru may be non-zero
 18372  002B6A                     	endif
 18373  002B6A  0009               	tblrd		*+
 18374  002B6C  0E92               	movlw	146
 18375  002B6E  18F5               	xorwf	tablat,w,c
 18376  002B70  E108               	bnz	u8051
 18377  002B72  0009               	tblrd		*+
 18378  002B74  0E0F               	movlw	15
 18379  002B76  18F5               	xorwf	tablat,w,c
 18380  002B78  A4D8               	btfss	status,2,c
 18381  002B7A  EFC1  F015         	goto	u8051
 18382  002B7E  EFC3  F015         	goto	u8050
 18383  002B82                     u8051:
 18384  002B82  EF3F  F016         	goto	l6307
 18385  002B86                     u8050:
 18386  002B86                     
 18387                           ;src/driver/adc.c: 54:         if(gpio->mask & 0x01) return 0;
 18388  002B86  0E04               	movlw	4
 18389  002B88  240D               	addwf	gpio_to_ch@gpio^0,w,c
 18390  002B8A  6E0F               	movwf	??_gpio_to_ch^0,c
 18391  002B8C  0E00               	movlw	0
 18392  002B8E  200E               	addwfc	(gpio_to_ch@gpio+1)^0,w,c
 18393  002B90  6E10               	movwf	(??_gpio_to_ch+1)^0,c
 18394  002B92  C00F  FFF6         	movff	??_gpio_to_ch,tblptrl
 18395  002B96  C010  FFF7         	movff	??_gpio_to_ch+1,tblptrh
 18396  002B9A                     	if	0	;tblptru may be non-zero
 18397  002B9A                     	endif
 18398  002B9A                     	if	0	;tblptru may be non-zero
 18399  002B9A                     	endif
 18400  002B9A  0008               	tblrd		*
 18401  002B9C  A0F5               	btfss	tablat,0,c
 18402  002B9E  EFD3  F015         	goto	u8061
 18403  002BA2  EFD5  F015         	goto	u8060
 18404  002BA6                     u8061:
 18405  002BA6  EFDB  F015         	goto	l6283
 18406  002BAA                     u8060:
 18407  002BAA  0E00               	movlw	0
 18408  002BAC  6E0E               	movwf	(?_gpio_to_ch+1)^0,c
 18409  002BAE  0E00               	movlw	0
 18410  002BB0  6E0D               	movwf	?_gpio_to_ch^0,c
 18411  002BB2  EFCD  F016         	goto	l268
 18412  002BB6                     l6283:
 18413                           
 18414                           ;src/driver/adc.c: 55:         if(gpio->mask & 0x02) return 1;
 18415  002BB6  0E04               	movlw	4
 18416  002BB8  240D               	addwf	gpio_to_ch@gpio^0,w,c
 18417  002BBA  6E0F               	movwf	??_gpio_to_ch^0,c
 18418  002BBC  0E00               	movlw	0
 18419  002BBE  200E               	addwfc	(gpio_to_ch@gpio+1)^0,w,c
 18420  002BC0  6E10               	movwf	(??_gpio_to_ch+1)^0,c
 18421  002BC2  C00F  FFF6         	movff	??_gpio_to_ch,tblptrl
 18422  002BC6  C010  FFF7         	movff	??_gpio_to_ch+1,tblptrh
 18423  002BCA                     	if	0	;tblptru may be non-zero
 18424  002BCA                     	endif
 18425  002BCA                     	if	0	;tblptru may be non-zero
 18426  002BCA                     	endif
 18427  002BCA  0008               	tblrd		*
 18428  002BCC  A2F5               	btfss	tablat,1,c
 18429  002BCE  EFEB  F015         	goto	u8071
 18430  002BD2  EFED  F015         	goto	u8070
 18431  002BD6                     u8071:
 18432  002BD6  EFF3  F015         	goto	l6289
 18433  002BDA                     u8070:
 18434  002BDA  0E00               	movlw	0
 18435  002BDC  6E0E               	movwf	(?_gpio_to_ch+1)^0,c
 18436  002BDE  0E01               	movlw	1
 18437  002BE0  6E0D               	movwf	?_gpio_to_ch^0,c
 18438  002BE2  EFCD  F016         	goto	l268
 18439  002BE6                     l6289:
 18440                           
 18441                           ;src/driver/adc.c: 56:         if(gpio->mask & 0x04) return 2;
 18442  002BE6  0E04               	movlw	4
 18443  002BE8  240D               	addwf	gpio_to_ch@gpio^0,w,c
 18444  002BEA  6E0F               	movwf	??_gpio_to_ch^0,c
 18445  002BEC  0E00               	movlw	0
 18446  002BEE  200E               	addwfc	(gpio_to_ch@gpio+1)^0,w,c
 18447  002BF0  6E10               	movwf	(??_gpio_to_ch+1)^0,c
 18448  002BF2  C00F  FFF6         	movff	??_gpio_to_ch,tblptrl
 18449  002BF6  C010  FFF7         	movff	??_gpio_to_ch+1,tblptrh
 18450  002BFA                     	if	0	;tblptru may be non-zero
 18451  002BFA                     	endif
 18452  002BFA                     	if	0	;tblptru may be non-zero
 18453  002BFA                     	endif
 18454  002BFA  0008               	tblrd		*
 18455  002BFC  A4F5               	btfss	tablat,2,c
 18456  002BFE  EF03  F016         	goto	u8081
 18457  002C02  EF05  F016         	goto	u8080
 18458  002C06                     u8081:
 18459  002C06  EF0B  F016         	goto	l6295
 18460  002C0A                     u8080:
 18461  002C0A  0E00               	movlw	0
 18462  002C0C  6E0E               	movwf	(?_gpio_to_ch+1)^0,c
 18463  002C0E  0E02               	movlw	2
 18464  002C10  6E0D               	movwf	?_gpio_to_ch^0,c
 18465  002C12  EFCD  F016         	goto	l268
 18466  002C16                     l6295:
 18467                           
 18468                           ;src/driver/adc.c: 57:         if(gpio->mask & 0x08) return 3;
 18469  002C16  0E04               	movlw	4
 18470  002C18  240D               	addwf	gpio_to_ch@gpio^0,w,c
 18471  002C1A  6E0F               	movwf	??_gpio_to_ch^0,c
 18472  002C1C  0E00               	movlw	0
 18473  002C1E  200E               	addwfc	(gpio_to_ch@gpio+1)^0,w,c
 18474  002C20  6E10               	movwf	(??_gpio_to_ch+1)^0,c
 18475  002C22  C00F  FFF6         	movff	??_gpio_to_ch,tblptrl
 18476  002C26  C010  FFF7         	movff	??_gpio_to_ch+1,tblptrh
 18477  002C2A                     	if	0	;tblptru may be non-zero
 18478  002C2A                     	endif
 18479  002C2A                     	if	0	;tblptru may be non-zero
 18480  002C2A                     	endif
 18481  002C2A  0008               	tblrd		*
 18482  002C2C  A6F5               	btfss	tablat,3,c
 18483  002C2E  EF1B  F016         	goto	u8091
 18484  002C32  EF1D  F016         	goto	u8090
 18485  002C36                     u8091:
 18486  002C36  EF23  F016         	goto	l6301
 18487  002C3A                     u8090:
 18488  002C3A  0E00               	movlw	0
 18489  002C3C  6E0E               	movwf	(?_gpio_to_ch+1)^0,c
 18490  002C3E  0E03               	movlw	3
 18491  002C40  6E0D               	movwf	?_gpio_to_ch^0,c
 18492  002C42  EFCD  F016         	goto	l268
 18493  002C46                     l6301:
 18494                           
 18495                           ;src/driver/adc.c: 58:         if(gpio->mask & 0x20) return 4;
 18496  002C46  0E04               	movlw	4
 18497  002C48  240D               	addwf	gpio_to_ch@gpio^0,w,c
 18498  002C4A  6E0F               	movwf	??_gpio_to_ch^0,c
 18499  002C4C  0E00               	movlw	0
 18500  002C4E  200E               	addwfc	(gpio_to_ch@gpio+1)^0,w,c
 18501  002C50  6E10               	movwf	(??_gpio_to_ch+1)^0,c
 18502  002C52  C00F  FFF6         	movff	??_gpio_to_ch,tblptrl
 18503  002C56  C010  FFF7         	movff	??_gpio_to_ch+1,tblptrh
 18504  002C5A                     	if	0	;tblptru may be non-zero
 18505  002C5A                     	endif
 18506  002C5A                     	if	0	;tblptru may be non-zero
 18507  002C5A                     	endif
 18508  002C5A  0008               	tblrd		*
 18509  002C5C  AAF5               	btfss	tablat,5,c
 18510  002C5E  EF33  F016         	goto	u8101
 18511  002C62  EF35  F016         	goto	u8100
 18512  002C66                     u8101:
 18513  002C66  EF3B  F016         	goto	l272
 18514  002C6A                     u8100:
 18515  002C6A  0E00               	movlw	0
 18516  002C6C  6E0E               	movwf	(?_gpio_to_ch+1)^0,c
 18517  002C6E  0E04               	movlw	4
 18518  002C70  6E0D               	movwf	?_gpio_to_ch^0,c
 18519  002C72  EFCD  F016         	goto	l268
 18520  002C76                     l272:
 18521                           
 18522                           ;src/driver/adc.c: 59:         return -1;
 18523  002C76  680D               	setf	?_gpio_to_ch^0,c
 18524  002C78  680E               	setf	(?_gpio_to_ch+1)^0,c
 18525  002C7A  EFCD  F016         	goto	l268
 18526  002C7E                     l6307:
 18527                           
 18528                           ;src/driver/adc.c: 61:     if(gpio->pTRIS == (volatile unsigned char *)&TRISB) {
 18529  002C7E  0E02               	movlw	2
 18530  002C80  240D               	addwf	gpio_to_ch@gpio^0,w,c
 18531  002C82  6E0F               	movwf	??_gpio_to_ch^0,c
 18532  002C84  0E00               	movlw	0
 18533  002C86  200E               	addwfc	(gpio_to_ch@gpio+1)^0,w,c
 18534  002C88  6E10               	movwf	(??_gpio_to_ch+1)^0,c
 18535  002C8A  C00F  FFF6         	movff	??_gpio_to_ch,tblptrl
 18536  002C8E  C010  FFF7         	movff	??_gpio_to_ch+1,tblptrh
 18537  002C92                     	if	0	;tblptru may be non-zero
 18538  002C92                     	endif
 18539  002C92                     	if	0	;tblptru may be non-zero
 18540  002C92                     	endif
 18541  002C92  0009               	tblrd		*+
 18542  002C94  0E93               	movlw	147
 18543  002C96  18F5               	xorwf	tablat,w,c
 18544  002C98  E108               	bnz	u8111
 18545  002C9A  0009               	tblrd		*+
 18546  002C9C  0E0F               	movlw	15
 18547  002C9E  18F5               	xorwf	tablat,w,c
 18548  002CA0  A4D8               	btfss	status,2,c
 18549  002CA2  EF55  F016         	goto	u8111
 18550  002CA6  EF57  F016         	goto	u8110
 18551  002CAA                     u8111:
 18552  002CAA  EF3B  F016         	goto	l272
 18553  002CAE                     u8110:
 18554  002CAE                     
 18555                           ;src/driver/adc.c: 62:         if(gpio->mask & 0x01) return 12;
 18556  002CAE  0E04               	movlw	4
 18557  002CB0  240D               	addwf	gpio_to_ch@gpio^0,w,c
 18558  002CB2  6E0F               	movwf	??_gpio_to_ch^0,c
 18559  002CB4  0E00               	movlw	0
 18560  002CB6  200E               	addwfc	(gpio_to_ch@gpio+1)^0,w,c
 18561  002CB8  6E10               	movwf	(??_gpio_to_ch+1)^0,c
 18562  002CBA  C00F  FFF6         	movff	??_gpio_to_ch,tblptrl
 18563  002CBE  C010  FFF7         	movff	??_gpio_to_ch+1,tblptrh
 18564  002CC2                     	if	0	;tblptru may be non-zero
 18565  002CC2                     	endif
 18566  002CC2                     	if	0	;tblptru may be non-zero
 18567  002CC2                     	endif
 18568  002CC2  0008               	tblrd		*
 18569  002CC4  A0F5               	btfss	tablat,0,c
 18570  002CC6  EF67  F016         	goto	u8121
 18571  002CCA  EF69  F016         	goto	u8120
 18572  002CCE                     u8121:
 18573  002CCE  EF6F  F016         	goto	l6315
 18574  002CD2                     u8120:
 18575  002CD2  0E00               	movlw	0
 18576  002CD4  6E0E               	movwf	(?_gpio_to_ch+1)^0,c
 18577  002CD6  0E0C               	movlw	12
 18578  002CD8  6E0D               	movwf	?_gpio_to_ch^0,c
 18579  002CDA  EFCD  F016         	goto	l268
 18580  002CDE                     l6315:
 18581                           
 18582                           ;src/driver/adc.c: 63:         if(gpio->mask & 0x02) return 10;
 18583  002CDE  0E04               	movlw	4
 18584  002CE0  240D               	addwf	gpio_to_ch@gpio^0,w,c
 18585  002CE2  6E0F               	movwf	??_gpio_to_ch^0,c
 18586  002CE4  0E00               	movlw	0
 18587  002CE6  200E               	addwfc	(gpio_to_ch@gpio+1)^0,w,c
 18588  002CE8  6E10               	movwf	(??_gpio_to_ch+1)^0,c
 18589  002CEA  C00F  FFF6         	movff	??_gpio_to_ch,tblptrl
 18590  002CEE  C010  FFF7         	movff	??_gpio_to_ch+1,tblptrh
 18591  002CF2                     	if	0	;tblptru may be non-zero
 18592  002CF2                     	endif
 18593  002CF2                     	if	0	;tblptru may be non-zero
 18594  002CF2                     	endif
 18595  002CF2  0008               	tblrd		*
 18596  002CF4  A2F5               	btfss	tablat,1,c
 18597  002CF6  EF7F  F016         	goto	u8131
 18598  002CFA  EF81  F016         	goto	u8130
 18599  002CFE                     u8131:
 18600  002CFE  EF87  F016         	goto	l6321
 18601  002D02                     u8130:
 18602  002D02  0E00               	movlw	0
 18603  002D04  6E0E               	movwf	(?_gpio_to_ch+1)^0,c
 18604  002D06  0E0A               	movlw	10
 18605  002D08  6E0D               	movwf	?_gpio_to_ch^0,c
 18606  002D0A  EFCD  F016         	goto	l268
 18607  002D0E                     l6321:
 18608                           
 18609                           ;src/driver/adc.c: 64:         if(gpio->mask & 0x04) return 8;
 18610  002D0E  0E04               	movlw	4
 18611  002D10  240D               	addwf	gpio_to_ch@gpio^0,w,c
 18612  002D12  6E0F               	movwf	??_gpio_to_ch^0,c
 18613  002D14  0E00               	movlw	0
 18614  002D16  200E               	addwfc	(gpio_to_ch@gpio+1)^0,w,c
 18615  002D18  6E10               	movwf	(??_gpio_to_ch+1)^0,c
 18616  002D1A  C00F  FFF6         	movff	??_gpio_to_ch,tblptrl
 18617  002D1E  C010  FFF7         	movff	??_gpio_to_ch+1,tblptrh
 18618  002D22                     	if	0	;tblptru may be non-zero
 18619  002D22                     	endif
 18620  002D22                     	if	0	;tblptru may be non-zero
 18621  002D22                     	endif
 18622  002D22  0008               	tblrd		*
 18623  002D24  A4F5               	btfss	tablat,2,c
 18624  002D26  EF97  F016         	goto	u8141
 18625  002D2A  EF99  F016         	goto	u8140
 18626  002D2E                     u8141:
 18627  002D2E  EF9F  F016         	goto	l6327
 18628  002D32                     u8140:
 18629  002D32  0E00               	movlw	0
 18630  002D34  6E0E               	movwf	(?_gpio_to_ch+1)^0,c
 18631  002D36  0E08               	movlw	8
 18632  002D38  6E0D               	movwf	?_gpio_to_ch^0,c
 18633  002D3A  EFCD  F016         	goto	l268
 18634  002D3E                     l6327:
 18635                           
 18636                           ;src/driver/adc.c: 65:         if(gpio->mask & 0x08) return 9;
 18637  002D3E  0E04               	movlw	4
 18638  002D40  240D               	addwf	gpio_to_ch@gpio^0,w,c
 18639  002D42  6E0F               	movwf	??_gpio_to_ch^0,c
 18640  002D44  0E00               	movlw	0
 18641  002D46  200E               	addwfc	(gpio_to_ch@gpio+1)^0,w,c
 18642  002D48  6E10               	movwf	(??_gpio_to_ch+1)^0,c
 18643  002D4A  C00F  FFF6         	movff	??_gpio_to_ch,tblptrl
 18644  002D4E  C010  FFF7         	movff	??_gpio_to_ch+1,tblptrh
 18645  002D52                     	if	0	;tblptru may be non-zero
 18646  002D52                     	endif
 18647  002D52                     	if	0	;tblptru may be non-zero
 18648  002D52                     	endif
 18649  002D52  0008               	tblrd		*
 18650  002D54  A6F5               	btfss	tablat,3,c
 18651  002D56  EFAF  F016         	goto	u8151
 18652  002D5A  EFB1  F016         	goto	u8150
 18653  002D5E                     u8151:
 18654  002D5E  EFB7  F016         	goto	l6333
 18655  002D62                     u8150:
 18656  002D62  0E00               	movlw	0
 18657  002D64  6E0E               	movwf	(?_gpio_to_ch+1)^0,c
 18658  002D66  0E09               	movlw	9
 18659  002D68  6E0D               	movwf	?_gpio_to_ch^0,c
 18660  002D6A  EFCD  F016         	goto	l268
 18661  002D6E                     l6333:
 18662                           
 18663                           ;src/driver/adc.c: 66:         if(gpio->mask & 0x10) return 11;
 18664  002D6E  0E04               	movlw	4
 18665  002D70  240D               	addwf	gpio_to_ch@gpio^0,w,c
 18666  002D72  6E0F               	movwf	??_gpio_to_ch^0,c
 18667  002D74  0E00               	movlw	0
 18668  002D76  200E               	addwfc	(gpio_to_ch@gpio+1)^0,w,c
 18669  002D78  6E10               	movwf	(??_gpio_to_ch+1)^0,c
 18670  002D7A  C00F  FFF6         	movff	??_gpio_to_ch,tblptrl
 18671  002D7E  C010  FFF7         	movff	??_gpio_to_ch+1,tblptrh
 18672  002D82                     	if	0	;tblptru may be non-zero
 18673  002D82                     	endif
 18674  002D82                     	if	0	;tblptru may be non-zero
 18675  002D82                     	endif
 18676  002D82  0008               	tblrd		*
 18677  002D84  A8F5               	btfss	tablat,4,c
 18678  002D86  EFC7  F016         	goto	u8161
 18679  002D8A  EFC9  F016         	goto	u8160
 18680  002D8E                     u8161:
 18681  002D8E  EF3B  F016         	goto	l272
 18682  002D92                     u8160:
 18683  002D92  0E00               	movlw	0
 18684  002D94  6E0E               	movwf	(?_gpio_to_ch+1)^0,c
 18685  002D96  0E0B               	movlw	11
 18686  002D98  6E0D               	movwf	?_gpio_to_ch^0,c
 18687  002D9A                     l268:
 18688  002D9A  0012               	return		;funcret
 18689  002D9C                     __end_of_gpio_to_ch:
 18690                           	opt callstack 0
 18691                           
 18692 ;; *************** function _global_irq_handler *****************
 18693 ;; Defined at:
 18694 ;;		line 17 in file "src/driver/irq.c"
 18695 ;; Parameters:    Size  Location     Type
 18696 ;;		None
 18697 ;; Auto vars:     Size  Location     Type
 18698 ;;  dummy           1   11[COMRAM] volatile unsigned char 
 18699 ;; Return value:  Size  Location     Type
 18700 ;;                  1    wreg      void 
 18701 ;; Registers used:
 18702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
 18703 ;; Tracked objects:
 18704 ;;		On entry : 0/0
 18705 ;;		On exit  : 0/0
 18706 ;;		Unchanged: 0/0
 18707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18708 ;;      Params:         0       0       0       0       0       0       0
 18709 ;;      Locals:         1       0       0       0       0       0       0
 18710 ;;      Temps:          4       0       0       0       0       0       0
 18711 ;;      Totals:         5       0       0       0       0       0       0
 18712 ;;Total ram usage:        5 bytes
 18713 ;; Hardware stack levels used:    1
 18714 ;; Hardware stack levels required when called:    1
 18715 ;; This function calls:
 18716 ;;		_usart_rx_irq_handler
 18717 ;; This function is called by:
 18718 ;;		Interrupt level 2
 18719 ;; This function uses a non-reentrant model
 18720 ;;
 18721                           
 18722                           	psect	intcode
 18723  000008                     __pintcode:
 18724                           	opt callstack 0
 18725  000008                     _global_irq_handler:
 18726                           	opt callstack 16
 18727                           
 18728                           ;incstack = 0
 18729  000008  8273               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
 18730  00000A  EDC6  F027         	call	int_func,f	;refresh shadow registers
 18731                           
 18732                           	psect	intcode_body
 18733  004F8C                     __pintcode_body:
 18734                           	opt callstack 16
 18735  004F8C                     int_func:
 18736                           	opt callstack 16
 18737  004F8C  0006               	pop		; remove dummy address from shadow register refresh
 18738  004F8E  CFFA F008          	movff	pclath,??_global_irq_handler
 18739  004F92  CFFB F009          	movff	pclatu,??_global_irq_handler+1
 18740  004F96  CFD9 F00A          	movff	fsr2l,??_global_irq_handler+2
 18741  004F9A  CFDA F00B          	movff	fsr2h,??_global_irq_handler+3
 18742  004F9E                     
 18743                           ;src/driver/irq.c: 19:     if(PIR1bits.RCIF) {
 18744  004F9E  AA9E               	btfss	158,5,c	;volatile
 18745  004FA0  EFD4  F027         	goto	i2u596_41
 18746  004FA4  EFD6  F027         	goto	i2u596_40
 18747  004FA8                     i2u596_41:
 18748  004FA8  EFF1  F027         	goto	i2l5105
 18749  004FAC                     i2u596_40:
 18750  004FAC                     
 18751                           ;src/driver/irq.c: 20:         if(g_irq_handler_info[IRQ_HANDLER_ID_USART].handler) {
 18752  004FAC  0100               	movlb	0	; () banked
 18753  004FAE  51F0               	movf	_g_irq_handler_info& (0+255),w,b
 18754  004FB0  11F1               	iorwf	(_g_irq_handler_info+1)& (0+255),w,b
 18755  004FB2  B4D8               	btfsc	status,2,c
 18756  004FB4  EFDE  F027         	goto	i2u597_41
 18757  004FB8  EFE0  F027         	goto	i2u597_40
 18758  004FBC                     i2u597_41:
 18759  004FBC  EFF1  F027         	goto	i2l5105
 18760  004FC0                     i2u597_40:
 18761  004FC0                     
 18762                           ; BSR set to: 0
 18763                           ;src/driver/irq.c: 21:             g_irq_handler_info[IRQ_HANDLER_ID_USART].handler(g_ir
      +                          q_handler_info[IRQ_HANDLER_ID_USART].udata);
 18764  004FC0  C0F2  F001         	movff	_g_irq_handler_info+2,usart_rx_irq_handler@udata
 18765  004FC4  C0F3  F002         	movff	_g_irq_handler_info+3,usart_rx_irq_handler@udata+1
 18766  004FC8  D802               	call	i2u598_48
 18767  004FCA  EFF1  F027         	goto	i2u598_49
 18768  004FCE                     i2u598_48:
 18769  004FCE  0005               	push	
 18770  004FD0  6EFA               	movwf	pclath,c
 18771  004FD2  51F0               	movf	_g_irq_handler_info& (0+255),w,b
 18772  004FD4  6EFD               	movwf	tosl,c
 18773  004FD6  51F1               	movf	(_g_irq_handler_info+1)& (0+255),w,b
 18774  004FD8  6EFE               	movwf	tosh,c
 18775  004FDA  50F8               	movf	tblptru,w,c
 18776  004FDC  6EFF               	movwf	tosu,c
 18777  004FDE  50FA               	movf	pclath,w,c
 18778  004FE0  0012               	return		;indir
 18779  004FE2                     i2u598_49:
 18780  004FE2                     i2l5105:
 18781                           
 18782                           ;src/driver/irq.c: 25:     if(INTCONbits.RBIF) {
 18783  004FE2  A0F2               	btfss	242,0,c	;volatile
 18784  004FE4  EFF6  F027         	goto	i2u599_41
 18785  004FE8  EFF8  F027         	goto	i2u599_40
 18786  004FEC                     i2u599_41:
 18787  004FEC  EFFB  F027         	goto	i2l223
 18788  004FF0                     i2u599_40:
 18789  004FF0                     
 18790                           ;src/driver/irq.c: 26:         volatile u8 dummy = PORTB;
 18791  004FF0  CF81 F00C          	movff	3969,global_irq_handler@dummy	;volatile
 18792                           
 18793                           ;src/driver/irq.c: 27:         INTCONbits.RBIF = 0;
 18794  004FF4  90F2               	bcf	242,0,c	;volatile
 18795  004FF6                     i2l223:
 18796  004FF6  C00B  FFDA         	movff	??_global_irq_handler+3,fsr2h
 18797  004FFA  C00A  FFD9         	movff	??_global_irq_handler+2,fsr2l
 18798  004FFE  C009  FFFB         	movff	??_global_irq_handler+1,pclatu
 18799  005002  C008  FFFA         	movff	??_global_irq_handler,pclath
 18800  005006  9273               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
 18801  005008  0011               	retfie		f
 18802  00500A                     __end_of_global_irq_handler:
 18803                           	opt callstack 0
 18804                           
 18805 ;; *************** function _usart_rx_irq_handler *****************
 18806 ;; Defined at:
 18807 ;;		line 71 in file "src/driver/usart.c"
 18808 ;; Parameters:    Size  Location     Type
 18809 ;;  udata           2    0[COMRAM] PTR void 
 18810 ;;		 -> NULL(0), 
 18811 ;; Auto vars:     Size  Location     Type
 18812 ;;  wposn           2    5[COMRAM] volatile int 
 18813 ;;  c               1    4[COMRAM] volatile unsigned char 
 18814 ;; Return value:  Size  Location     Type
 18815 ;;                  1    wreg      void 
 18816 ;; Registers used:
 18817 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18818 ;; Tracked objects:
 18819 ;;		On entry : 0/0
 18820 ;;		On exit  : 0/0
 18821 ;;		Unchanged: 0/0
 18822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18823 ;;      Params:         2       0       0       0       0       0       0
 18824 ;;      Locals:         3       0       0       0       0       0       0
 18825 ;;      Temps:          2       0       0       0       0       0       0
 18826 ;;      Totals:         7       0       0       0       0       0       0
 18827 ;;Total ram usage:        7 bytes
 18828 ;; Hardware stack levels used:    1
 18829 ;; This function calls:
 18830 ;;		Nothing
 18831 ;; This function is called by:
 18832 ;;		_usart_init
 18833 ;;		_global_irq_handler
 18834 ;; This function uses a non-reentrant model
 18835 ;;
 18836                           
 18837                           	psect	text76
 18838  004E8A                     __ptext76:
 18839                           	opt callstack 0
 18840  004E8A                     _usart_rx_irq_handler:
 18841                           	opt callstack 16
 18842  004E8A                     
 18843                           ;src/driver/usart.c: 71: static void usart_rx_irq_handler(void *udata);src/driver/usart.
      +                          c: 72: {;src/driver/usart.c: 73:     volatile char c;;src/driver/usart.c: 74:     volati
      +                          le int wposn;;src/driver/usart.c: 77:     if(BAUDCONbits.RCIDL == 0) return;
 18844  004E8A  BCB8               	btfsc	184,6,c	;volatile
 18845  004E8C  EF4A  F027         	goto	i2u560_41
 18846  004E90  EF4C  F027         	goto	i2u560_40
 18847  004E94                     i2u560_41:
 18848  004E94  EF4E  F027         	goto	i2l201
 18849  004E98                     i2u560_40:
 18850  004E98  EF86  F027         	goto	i2l202
 18851  004E9C                     i2l201:
 18852                           
 18853                           ;src/driver/usart.c: 80:  c = RCREG;
 18854  004E9C  CFAE F005          	movff	4014,usart_rx_irq_handler@c	;volatile
 18855                           
 18856                           ;src/driver/usart.c: 83:     if(RCSTAbits.FERR) {
 18857  004EA0  A4AB               	btfss	171,2,c	;volatile
 18858  004EA2  EF55  F027         	goto	i2u561_41
 18859  004EA6  EF57  F027         	goto	i2u561_40
 18860  004EAA                     i2u561_41:
 18861  004EAA  EF59  F027         	goto	i2l203
 18862  004EAE                     i2u561_40:
 18863  004EAE  EF86  F027         	goto	i2l202
 18864  004EB2                     i2l203:
 18865                           
 18866                           ;src/driver/usart.c: 86:     if(RCSTAbits.OERR) {
 18867  004EB2  A2AB               	btfss	171,1,c	;volatile
 18868  004EB4  EF5E  F027         	goto	i2u562_41
 18869  004EB8  EF60  F027         	goto	i2u562_40
 18870  004EBC                     i2u562_41:
 18871  004EBC  EF64  F027         	goto	i2l4853
 18872  004EC0                     i2u562_40:
 18873  004EC0                     
 18874                           ;src/driver/usart.c: 88:         RCSTAbits.CREN = 0;
 18875  004EC0  98AB               	bcf	171,4,c	;volatile
 18876                           
 18877                           ;src/driver/usart.c: 89:         RCSTAbits.CREN = 1;
 18878  004EC2  88AB               	bsf	171,4,c	;volatile
 18879                           
 18880                           ;src/driver/usart.c: 90:         return;
 18881  004EC4  EF86  F027         	goto	i2l202
 18882  004EC8                     i2l4853:
 18883                           
 18884                           ;src/driver/usart.c: 94:  wposn = (g_usart_wpos+1) % sizeof(g_usart_buf);
 18885  004EC8  0E01               	movlw	1
 18886  004ECA  246D               	addwf	_g_usart_wpos^0,w,c	;volatile
 18887  004ECC  6E03               	movwf	??_usart_rx_irq_handler^0,c
 18888  004ECE  0E00               	movlw	0
 18889  004ED0  206E               	addwfc	(_g_usart_wpos+1)^0,w,c	;volatile
 18890  004ED2  6E04               	movwf	(??_usart_rx_irq_handler+1)^0,c
 18891  004ED4  0E7F               	movlw	127
 18892  004ED6  1403               	andwf	??_usart_rx_irq_handler^0,w,c
 18893  004ED8  6E06               	movwf	usart_rx_irq_handler@wposn^0,c	;volatile
 18894  004EDA  6A07               	clrf	(usart_rx_irq_handler@wposn+1)^0,c	;volatile
 18895                           
 18896                           ;src/driver/usart.c: 95:  if(wposn != g_usart_rpos) {
 18897  004EDC  506F               	movf	_g_usart_rpos^0,w,c	;volatile
 18898  004EDE  1806               	xorwf	usart_rx_irq_handler@wposn^0,w,c	;volatile
 18899  004EE0  E109               	bnz	i2u563_40
 18900  004EE2  5070               	movf	(_g_usart_rpos+1)^0,w,c	;volatile
 18901  004EE4  1807               	xorwf	(usart_rx_irq_handler@wposn+1)^0,w,c	;volatile
 18902  004EE6  B4D8               	btfsc	status,2,c
 18903  004EE8  EF78  F027         	goto	i2u563_41
 18904  004EEC  EF7A  F027         	goto	i2u563_40
 18905  004EF0                     i2u563_41:
 18906  004EF0  EF86  F027         	goto	i2l202
 18907  004EF4                     i2u563_40:
 18908  004EF4                     
 18909                           ;src/driver/usart.c: 96:   g_usart_buf[g_usart_wpos] = c;
 18910  004EF4  0E00               	movlw	low _g_usart_buf
 18911  004EF6  246D               	addwf	_g_usart_wpos^0,w,c	;volatile
 18912  004EF8  6ED9               	movwf	fsr2l,c
 18913  004EFA  0E01               	movlw	high _g_usart_buf
 18914  004EFC  206E               	addwfc	(_g_usart_wpos+1)^0,w,c	;volatile
 18915  004EFE  6EDA               	movwf	fsr2h,c
 18916  004F00  C005  FFDF         	movff	usart_rx_irq_handler@c,indf2	;volatile
 18917  004F04                     
 18918                           ;src/driver/usart.c: 97:   g_usart_wpos = wposn;
 18919  004F04  C006  F06D         	movff	usart_rx_irq_handler@wposn,_g_usart_wpos	;volatile
 18920  004F08  C007  F06E         	movff	usart_rx_irq_handler@wposn+1,_g_usart_wpos+1	;volatile
 18921  004F0C                     i2l202:
 18922  004F0C  0012               	return		;funcret
 18923  004F0E                     __end_of_usart_rx_irq_handler:
 18924                           	opt callstack 0
 18925                           
 18926                           	psect	text77
 18927  000000                     __ptext77:
 18928                           	opt callstack 0
 18929  000000                     
 18930                           	psect	rparam
 18931  0000                     
 18932                           	psect	temp
 18933  000073                     btemp:
 18934                           	opt callstack 0
 18935  000073                     	ds	1
 18936  0000                     int$flags	set	btemp
 18937  0000                     wtemp8	set	btemp+1
 18938  0000                     ttemp5	set	btemp+1
 18939  0000                     ttemp6	set	btemp+4
 18940  0000                     ttemp7	set	btemp+8
 18941                           tosu	equ	0xFFF
 18942                           tosh	equ	0xFFE
 18943                           tosl	equ	0xFFD
 18944                           stkptr	equ	0xFFC
 18945                           pclatu	equ	0xFFB
 18946                           pclath	equ	0xFFA
 18947                           pcl	equ	0xFF9
 18948                           tblptru	equ	0xFF8
 18949                           tblptrh	equ	0xFF7
 18950                           tblptrl	equ	0xFF6
 18951                           tablat	equ	0xFF5
 18952                           prodh	equ	0xFF4
 18953                           prodl	equ	0xFF3
 18954                           indf0	equ	0xFEF
 18955                           postinc0	equ	0xFEE
 18956                           postdec0	equ	0xFED
 18957                           preinc0	equ	0xFEC
 18958                           plusw0	equ	0xFEB
 18959                           fsr0h	equ	0xFEA
 18960                           fsr0l	equ	0xFE9
 18961                           wreg	equ	0xFE8
 18962                           indf1	equ	0xFE7
 18963                           postinc1	equ	0xFE6
 18964                           postdec1	equ	0xFE5
 18965                           preinc1	equ	0xFE4
 18966                           plusw1	equ	0xFE3
 18967                           fsr1h	equ	0xFE2
 18968                           fsr1l	equ	0xFE1
 18969                           bsr	equ	0xFE0
 18970                           indf2	equ	0xFDF
 18971                           postinc2	equ	0xFDE
 18972                           postdec2	equ	0xFDD
 18973                           preinc2	equ	0xFDC
 18974                           plusw2	equ	0xFDB
 18975                           fsr2h	equ	0xFDA
 18976                           fsr2l	equ	0xFD9
 18977                           status	equ	0xFD8


Data Sizes:
    Strings     1508
    Constant    2204
    Data        17
    BSS         249
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    102     114
    BANK0           128    103     119
    BANK1           256      0     238
    BANK2           256     22      22
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    usart_rx_irq_handler@udata	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    handler$0	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    adf4351_get_lock@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    S1244$0$0	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_71(CODE[3]), STR_67(CODE[3]), STR_62(CODE[3]), STR_57(CODE[3]), 
		 -> STR_53(CODE[3]), STR_41(CODE[6]), STR_39(CODE[4]), STR_37(CODE[4]), 
		 -> STR_35(CODE[5]), STR_32(CODE[6]), STR_30(CODE[5]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_71(CODE[3]), STR_67(CODE[3]), STR_62(CODE[3]), STR_57(CODE[3]), 
		 -> STR_53(CODE[3]), STR_41(CODE[6]), STR_39(CODE[4]), STR_37(CODE[4]), 
		 -> STR_35(CODE[5]), STR_32(CODE[6]), STR_30(CODE[5]), 

    strncmp@_l	PTR const unsigned char  size(2) Largest target is 151
		 -> STR_50(CODE[18]), STR_49(CODE[17]), STR_48(CODE[19]), STR_47(CODE[19]), 
		 -> STR_46(CODE[17]), STR_45(CODE[4]), STR_44(CODE[6]), STR_43(CODE[18]), 
		 -> STR_42(CODE[29]), STR_40(CODE[16]), STR_38(CODE[16]), STR_36(CODE[24]), 
		 -> STR_34(CODE[33]), STR_33(CODE[16]), STR_31(CODE[33]), g_cmd_buf(BANK1[10]), 
		 -> STR_29(CODE[12]), STR_28(CODE[10]), STR_27(CODE[39]), STR_26(CODE[15]), 
		 -> STR_25(CODE[6]), STR_24(CODE[14]), STR_23(CODE[19]), STR_20(CODE[23]), 
		 -> STR_18(CODE[19]), STR_17(CODE[44]), STR_16(CODE[151]), STR_15(CODE[91]), 
		 -> STR_14(CODE[148]), STR_13(CODE[61]), STR_12(CODE[47]), STR_11(CODE[22]), 
		 -> STR_10(CODE[28]), STR_9(CODE[25]), STR_8(CODE[55]), STR_7(CODE[72]), 
		 -> STR_6(CODE[74]), STR_5(CODE[33]), STR_4(CODE[32]), STR_3(CODE[34]), 
		 -> STR_2(CODE[61]), STR_1(CODE[34]), 

    strncmp@l	PTR const unsigned char  size(2) Largest target is 151
		 -> STR_50(CODE[18]), STR_49(CODE[17]), STR_48(CODE[19]), STR_47(CODE[19]), 
		 -> STR_46(CODE[17]), STR_45(CODE[4]), STR_44(CODE[6]), STR_43(CODE[18]), 
		 -> STR_42(CODE[29]), STR_40(CODE[16]), STR_38(CODE[16]), STR_36(CODE[24]), 
		 -> STR_34(CODE[33]), STR_33(CODE[16]), STR_31(CODE[33]), g_cmd_buf(BANK1[10]), 
		 -> STR_29(CODE[12]), STR_28(CODE[10]), STR_27(CODE[39]), STR_26(CODE[15]), 
		 -> STR_25(CODE[6]), STR_24(CODE[14]), STR_23(CODE[19]), STR_20(CODE[23]), 
		 -> STR_18(CODE[19]), STR_17(CODE[44]), STR_16(CODE[151]), STR_15(CODE[91]), 
		 -> STR_14(CODE[148]), STR_13(CODE[61]), STR_12(CODE[47]), STR_11(CODE[22]), 
		 -> STR_10(CODE[28]), STR_9(CODE[25]), STR_8(CODE[55]), STR_7(CODE[72]), 
		 -> STR_6(CODE[74]), STR_5(CODE[33]), STR_4(CODE[32]), STR_3(CODE[34]), 
		 -> STR_2(CODE[61]), STR_1(CODE[34]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> ?_printf(BANK0[2]), stoa@nuls(COMRAM[7]), dbuf(BANK1[32]), g_adf4351(BANK1[55]), 
		 -> STR_22(CODE[3]), STR_21(CODE[3]), STR_19(CODE[9]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> ?_printf(BANK0[2]), stoa@nuls(COMRAM[7]), dbuf(BANK1[32]), g_adf4351(BANK1[55]), 
		 -> STR_22(CODE[3]), STR_21(CODE[3]), STR_19(CODE[9]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 151
		 -> STR_50(CODE[18]), STR_49(CODE[17]), STR_48(CODE[19]), STR_47(CODE[19]), 
		 -> STR_46(CODE[17]), STR_45(CODE[4]), STR_44(CODE[6]), STR_43(CODE[18]), 
		 -> STR_42(CODE[29]), STR_40(CODE[16]), STR_38(CODE[16]), STR_36(CODE[24]), 
		 -> STR_34(CODE[33]), STR_33(CODE[16]), STR_31(CODE[33]), STR_29(CODE[12]), 
		 -> STR_28(CODE[10]), STR_27(CODE[39]), STR_26(CODE[15]), STR_25(CODE[6]), 
		 -> STR_24(CODE[14]), STR_23(CODE[19]), STR_20(CODE[23]), STR_18(CODE[19]), 
		 -> STR_17(CODE[44]), STR_16(CODE[151]), STR_15(CODE[91]), STR_14(CODE[148]), 
		 -> STR_13(CODE[61]), STR_12(CODE[47]), STR_11(CODE[22]), STR_10(CODE[28]), 
		 -> STR_9(CODE[25]), STR_8(CODE[55]), STR_7(CODE[72]), STR_6(CODE[74]), 
		 -> STR_5(CODE[33]), STR_4(CODE[32]), STR_3(CODE[34]), STR_2(CODE[61]), 
		 -> STR_1(CODE[34]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    memset@dest	PTR void  size(2) Largest target is 55
		 -> g_cmd_buf(BANK1[10]), g_adf4351(BANK1[55]), 

    memset@s	PTR unsigned char  size(2) Largest target is 55
		 -> g_cmd_buf(BANK1[10]), g_adf4351(BANK1[55]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 151
		 -> STR_50(CODE[18]), STR_49(CODE[17]), STR_48(CODE[19]), STR_47(CODE[19]), 
		 -> STR_46(CODE[17]), STR_45(CODE[4]), STR_44(CODE[6]), STR_43(CODE[18]), 
		 -> STR_42(CODE[29]), STR_40(CODE[16]), STR_38(CODE[16]), STR_36(CODE[24]), 
		 -> STR_34(CODE[33]), STR_33(CODE[16]), STR_31(CODE[33]), STR_29(CODE[12]), 
		 -> STR_28(CODE[10]), STR_27(CODE[39]), STR_26(CODE[15]), STR_25(CODE[6]), 
		 -> STR_24(CODE[14]), STR_23(CODE[19]), STR_20(CODE[23]), STR_18(CODE[19]), 
		 -> STR_17(CODE[44]), STR_16(CODE[151]), STR_15(CODE[91]), STR_14(CODE[148]), 
		 -> STR_13(CODE[61]), STR_12(CODE[47]), STR_11(CODE[22]), STR_10(CODE[28]), 
		 -> STR_9(CODE[25]), STR_8(CODE[55]), STR_7(CODE[72]), STR_6(CODE[74]), 
		 -> STR_5(CODE[33]), STR_4(CODE[32]), STR_3(CODE[34]), STR_2(CODE[61]), 
		 -> STR_1(CODE[34]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 151
		 -> STR_50(CODE[18]), STR_49(CODE[17]), STR_48(CODE[19]), STR_47(CODE[19]), 
		 -> STR_46(CODE[17]), STR_45(CODE[4]), STR_44(CODE[6]), STR_43(CODE[18]), 
		 -> STR_42(CODE[29]), STR_40(CODE[16]), STR_38(CODE[16]), STR_36(CODE[24]), 
		 -> STR_34(CODE[33]), STR_33(CODE[16]), STR_31(CODE[33]), STR_29(CODE[12]), 
		 -> STR_28(CODE[10]), STR_27(CODE[39]), STR_26(CODE[15]), STR_25(CODE[6]), 
		 -> STR_24(CODE[14]), STR_23(CODE[19]), STR_20(CODE[23]), STR_18(CODE[19]), 
		 -> STR_17(CODE[44]), STR_16(CODE[151]), STR_15(CODE[91]), STR_14(CODE[148]), 
		 -> STR_13(CODE[61]), STR_12(CODE[47]), STR_11(CODE[22]), STR_10(CODE[28]), 
		 -> STR_9(CODE[25]), STR_8(CODE[55]), STR_7(CODE[72]), STR_6(CODE[74]), 
		 -> STR_5(CODE[33]), STR_4(CODE[32]), STR_3(CODE[34]), STR_2(CODE[61]), 
		 -> STR_1(CODE[34]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 151
		 -> STR_50(CODE[18]), STR_49(CODE[17]), STR_48(CODE[19]), STR_47(CODE[19]), 
		 -> STR_46(CODE[17]), STR_45(CODE[4]), STR_44(CODE[6]), STR_43(CODE[18]), 
		 -> STR_42(CODE[29]), STR_40(CODE[16]), STR_38(CODE[16]), STR_36(CODE[24]), 
		 -> STR_34(CODE[33]), STR_33(CODE[16]), STR_31(CODE[33]), STR_29(CODE[12]), 
		 -> STR_28(CODE[10]), STR_27(CODE[39]), STR_26(CODE[15]), STR_25(CODE[6]), 
		 -> STR_24(CODE[14]), STR_23(CODE[19]), STR_20(CODE[23]), STR_18(CODE[19]), 
		 -> STR_17(CODE[44]), STR_16(CODE[151]), STR_15(CODE[91]), STR_14(CODE[148]), 
		 -> STR_13(CODE[61]), STR_12(CODE[47]), STR_11(CODE[22]), STR_10(CODE[28]), 
		 -> STR_9(CODE[25]), STR_8(CODE[55]), STR_7(CODE[72]), STR_6(CODE[74]), 
		 -> STR_5(CODE[33]), STR_4(CODE[32]), STR_3(CODE[34]), STR_2(CODE[61]), 
		 -> STR_1(CODE[34]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), g_adf4351(BANK1[55]), STR_22(CODE[3]), STR_21(CODE[3]), 
		 -> STR_19(CODE[9]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    xtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    stoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    stoa@s	PTR unsigned char  size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), g_adf4351(BANK1[55]), STR_22(CODE[3]), STR_21(CODE[3]), 
		 -> STR_19(CODE[9]), 

    stoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> ?_printf(BANK0[2]), stoa@nuls(COMRAM[7]), g_adf4351(BANK1[55]), STR_22(CODE[3]), 
		 -> STR_21(CODE[3]), STR_19(CODE[9]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ctoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    PIN_USART_RX_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_USART_RX_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_USART_TX_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_USART_TX_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_POWER_GOOD	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_POWER_GOOD_DEF(CODE[5]), 

    PIN_POWER_GOOD_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_POWER_GOOD_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_PA_ENABLE_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_PA_ENABLE_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LED_PTT_ACTIVE_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_LED_PTT_ACTIVE_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LED_ADF_LOCK_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_LED_ADF_LOCK_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LED_CPU_OK_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_LED_CPU_OK_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_FSW1_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_FSW1_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_FSW0_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_FSW0_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_VOLTAGE_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_VOLTAGE_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_RF_R_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_RF_R_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_RF_V_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_RF_V_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_TEMP_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_TEMP_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_PTT_INPUT_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_PTT_INPUT_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ADF_FREQ_SEL_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_ADF_FREQ_SEL_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_SIO_CLK_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_SIO_CLK_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_SIO_DATA_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_SIO_DATA_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ADF_LE_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_ADF_LE_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ADF_CE_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_ADF_CE_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ADF_LOCK_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_ADF_LOCK_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_USART_RX.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_USART_RX.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_USART_RX	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_USART_RX_DEF(CODE[5]), 

    PIN_USART_TX.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_USART_TX.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_USART_TX	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_USART_TX_DEF(CODE[5]), 

    PIN_LED_ADF_LOCK.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_LED_ADF_LOCK.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LED_ADF_LOCK	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_LED_ADF_LOCK_DEF(CODE[5]), 

    PIN_LED_CPU_OK.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_LED_CPU_OK.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LED_CPU_OK	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_LED_CPU_OK_DEF(CODE[5]), 

    PIN_FSW1.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_FSW1.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_FSW1	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_FSW1_DEF(CODE[5]), 

    PIN_FSW0.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_FSW0.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_FSW0	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_FSW0_DEF(CODE[5]), 

    PIN_PTT_INPUT.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_PTT_INPUT.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_PTT_INPUT	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_PTT_INPUT_DEF(CODE[5]), 

    PIN_LED_PTT_ACTIVE.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_LED_PTT_ACTIVE.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LED_PTT_ACTIVE	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_LED_PTT_ACTIVE_DEF(CODE[5]), 

    PIN_PA_ENABLE.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_PA_ENABLE.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_PA_ENABLE	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_PA_ENABLE_DEF(CODE[5]), 

    main$1993	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_22(CODE[3]), STR_21(CODE[3]), 

    PIN_ADF_FREQ_SEL.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_ADF_FREQ_SEL.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ADF_FREQ_SEL	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_ADF_FREQ_SEL_DEF(CODE[5]), 

    PIN_VOLTAGE	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_VOLTAGE_DEF(CODE[5]), 

    PIN_RF_R	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_RF_R_DEF(CODE[5]), 

    PIN_RF_V	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_RF_V_DEF(CODE[5]), 

    PIN_TEMP	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_TEMP_DEF(CODE[5]), 

    gpio_to_ch@gpio.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    gpio_to_ch@gpio.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    gpio_to_ch@gpio	PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_VOLTAGE_DEF(CODE[5]), PIN_RF_R_DEF(CODE[5]), PIN_RF_V_DEF(CODE[5]), PIN_TEMP_DEF(CODE[5]), 

    adc_voltage@gpio	PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_VOLTAGE_DEF(CODE[5]), PIN_RF_R_DEF(CODE[5]), PIN_RF_V_DEF(CODE[5]), 

    adc_sample@gpio	PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_VOLTAGE_DEF(CODE[5]), PIN_RF_R_DEF(CODE[5]), PIN_RF_V_DEF(CODE[5]), PIN_TEMP_DEF(CODE[5]), 

    adc_cfg_gpio@gpio.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    adc_cfg_gpio@gpio.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    adc_cfg_gpio@gpio	PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_VOLTAGE_DEF(CODE[5]), PIN_RF_R_DEF(CODE[5]), PIN_RF_V_DEF(CODE[5]), PIN_TEMP_DEF(CODE[5]), 

    irq_set_handler@handler	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> usart_rx_irq_handler(), 

    S1244$udata	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    g_irq_handler_info.udata	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S1244$handler	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> usart_rx_irq_handler(), 

    g_irq_handler_info.handler	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> usart_rx_irq_handler(), 

    irq_set_handler@udata	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    PIN_SIO_DATA.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_SIO_DATA.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_SIO_DATA	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_SIO_DATA_DEF(CODE[5]), 

    PIN_SIO_CLK.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_SIO_CLK.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_SIO_CLK	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_SIO_CLK_DEF(CODE[5]), 

    adf4351_write_reg5@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_write_reg4@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_write_reg3@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_write_reg2@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_write_reg1@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_write_reg0@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_calc_vco_core_freq@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_calc_rcnt_block@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_calc_counters@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_setup@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_default@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_set_tune@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_set_mode@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_set_rfout_enable@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    PIN_ADF_LOCK.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_ADF_LOCK.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ADF_LOCK	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_ADF_LOCK_DEF(CODE[5]), 

    adf4351_set_freq@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    PIN_ADF_CE.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_ADF_CE.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ADF_CE	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_ADF_CE_DEF(CODE[5]), 

    S83gpio_pin_def$pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_ADF_LE.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    S83gpio_pin_def$pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ADF_LE.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ADF_LE	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_ADF_LE_DEF(CODE[5]), 

    sp__memset	PTR void  size(2) Largest target is 55
		 -> g_cmd_buf(BANK1[10]), g_adf4351(BANK1[55]), 

    adf4351_init@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 


Critical Paths under _main in COMRAM

    _usart_init->___lldiv
    _update_led->_adf4351_get_lock
    _gcd->___llmod
    _putchar->_fputc
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _vfpfcnvrt->_xtoa
    _xtoa->_pad
    _toupper->_islower
    _utoa->___lodiv
    _stoa->_fputc
    _dtoa->___aodiv
    _abs->___aomod
    _ctoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_usart_putc
    _atoi->_isspace
    _adc_voltage->___lldiv
    _adc_sample->_gpio_to_ch
    ___lmul->_adc_sample
    ___lldiv->___lmul
    _KTY82_222_Adc2Temperature->_adc_sample
    _adf4351_init->_memset
    _adc_cfg_gpio->_gpio_to_ch

Critical Paths under _global_irq_handler in COMRAM

    _global_irq_handler->_usart_rx_irq_handler

Critical Paths under _main in BANK0

    _main->_update_switch
    _update_switch->_handle_cmd
    _pa_update->_pa_mute
    _pa_update->_pa_unmute
    _pa_unmute->_adf4351_set_rfout_enable
    _init_switch->_handle_cmd
    _handle_cmd->_adf4351_set_freq
    _pa_mute->_adf4351_set_rfout_enable
    _adf4351_set_rfout_enable->_adf4351_write_reg2
    _adf4351_set_mode->_adf4351_setup
    _adf4351_set_freq->_adf4351_calc_counters
    _adf4351_calc_rcnt_block->_printf
    _adf4351_calc_counters->_printf
    _check_usart->_apply_ipc
    _apply_ipc->_adf4351_set_tune
    _adf4351_set_tune->_adf4351_setup
    _adf4351_setup->_adf4351_write_reg2
    _adf4351_write_reg5->_printf
    _adf4351_write_reg4->_printf
    _adf4351_write_reg3->_printf
    _adf4351_write_reg2->_printf
    _adf4351_write_reg1->_printf
    _adf4351_write_reg0->_printf
    _vfprintf->_vfpfcnvrt

Critical Paths under _global_irq_handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _global_irq_handler in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_check_usart

Critical Paths under _global_irq_handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _global_irq_handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _global_irq_handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _global_irq_handler in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0 3309448
                                             96 BANK0      7     7      0
                       _adc_cfg_gpio
                           _adc_init
                       _adf4351_init
                   _adf4351_set_tune
                        _check_usart
                         _init_gpios
                        _init_switch
                          _pa_update
                             _printf
                         _update_led
                      _update_switch
                         _usart_init
 ---------------------------------------------------------------------------------
 (1) _usart_init                                           6     2      4    2609
                                             47 COMRAM     6     2      4
                            ___lldiv
                    _irq_set_handler
 ---------------------------------------------------------------------------------
 (2) _irq_set_handler                                      5     1      4     262
                                             12 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _update_switch                                        1     1      0  943459
                                             95 BANK0      1     1      0
                         _handle_cmd
                        _read_switch
 ---------------------------------------------------------------------------------
 (1) _update_led                                           3     3      0     304
                                             17 COMRAM     3     3      0
                   _adf4351_get_lock
 ---------------------------------------------------------------------------------
 (1) _pa_update                                            3     3      0  280498
                                             84 BANK0      3     3      0
                   _adf4351_get_lock
                            _pa_mute
                          _pa_unmute
 ---------------------------------------------------------------------------------
 (2) _pa_unmute                                            3     3      0  140097
                                             81 BANK0      3     3      0
           _adf4351_set_rfout_enable
                             _printf
 ---------------------------------------------------------------------------------
 (1) _init_switch                                          0     0      0  943394
                         _handle_cmd
                        _read_switch
 ---------------------------------------------------------------------------------
 (2) _read_switch                                          5     5      0      46
                                             12 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _handle_cmd                                           6     6      0  943348
                                             89 BANK0      6     6      0
                   _adf4351_get_lock
                   _adf4351_set_freq
                   _adf4351_set_mode
                            _pa_mute
                             _printf
 ---------------------------------------------------------------------------------
 (3) _pa_mute                                              3     3      0  140097
                                             81 BANK0      3     3      0
           _adf4351_set_rfout_enable
                             _printf
 ---------------------------------------------------------------------------------
 (4) _adf4351_set_rfout_enable                             4     0      4   94738
                                             77 BANK0      4     0      4
                 _adf4351_write_reg2
                 _adf4351_write_reg4
 ---------------------------------------------------------------------------------
 (3) _adf4351_set_mode                                     6     2      4  374877
                                             79 BANK0      6     2      4
                      _adf4351_setup
                 _adf4351_write_reg2
                 _adf4351_write_reg4
 ---------------------------------------------------------------------------------
 (3) _adf4351_set_freq                                     8     2      6  382457
                                             81 BANK0      8     2      6
              _adf4351_calc_counters
            _adf4351_calc_rcnt_block
         _adf4351_calc_vco_core_freq
                      _adf4351_setup
 ---------------------------------------------------------------------------------
 (4) _adf4351_calc_vco_core_freq                          12     6      6     397
                                             12 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (4) _adf4351_calc_rcnt_block                              8     6      2   50211
                                             59 BANK0      8     6      2
                            ___awdiv
                            ___lldiv
                            ___llmod
                             _printf
 ---------------------------------------------------------------------------------
 (4) _adf4351_calc_counters                               22    20      2   51257
                                             59 BANK0     22    20      2
                            ___lldiv
                            ___llmod
                                _gcd
                             _printf
 ---------------------------------------------------------------------------------
 (5) _gcd                                                 12     4      8    1548
                                             21 COMRAM    12     4      8
                            ___llmod
 ---------------------------------------------------------------------------------
 (3) _adf4351_get_lock                                     5     3      2     304
                                             12 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _init_gpios                                           3     3      0       0
                                             12 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _check_usart                                         26    26      0  762705
                                             89 BANK0      4     4      0
                                              0 BANK2     22    22      0
          _KTY82_222_Adc2Temperature
                            ___awdiv
                            ___awmod
                            ___lldiv
                            ___llmod
                         _adc_sample
                        _adc_voltage
                   _adf4351_set_tune
                          _apply_ipc
                             _memset
                             _printf
                            _putchar
                            _strncmp
                         _usart_getc
                         _usart_tstc
 ---------------------------------------------------------------------------------
 (2) _usart_tstc                                           2     0      2       0
                                             12 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _usart_getc                                           6     4      2      34
                                             12 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _putchar                                              2     0      2    1872
                                             17 COMRAM     2     0      2
                              _fputc
 ---------------------------------------------------------------------------------
 (2) _apply_ipc                                            2     0      2  373063
                                             87 BANK0      2     0      2
                   _adf4351_set_tune
                             _printf
 ---------------------------------------------------------------------------------
 (3) _adf4351_set_tune                                     8     2      6  327403
                                             79 BANK0      8     2      6
                      _adf4351_setup
                             _printf
 ---------------------------------------------------------------------------------
 (4) _adf4351_setup                                        2     0      2  280195
                                             77 BANK0      2     0      2
                 _adf4351_write_reg0
                 _adf4351_write_reg1
                 _adf4351_write_reg2
                 _adf4351_write_reg3
                 _adf4351_write_reg4
                 _adf4351_write_reg5
 ---------------------------------------------------------------------------------
 (5) _adf4351_write_reg5                                  11     9      2   46249
                                             59 BANK0     11     9      2
                _adf4351_write_latch
                             _printf
 ---------------------------------------------------------------------------------
 (5) _adf4351_write_reg4                                  16    14      2   47014
                                             59 BANK0     16    14      2
                _adf4351_write_latch
                             _printf
 ---------------------------------------------------------------------------------
 (5) _adf4351_write_reg3                                  12    10      2   46574
                                             59 BANK0     12    10      2
                _adf4351_write_latch
                             _printf
 ---------------------------------------------------------------------------------
 (5) _adf4351_write_reg2                                  18    16      2   47209
                                             59 BANK0     18    16      2
                _adf4351_write_latch
                             _printf
 ---------------------------------------------------------------------------------
 (5) _adf4351_write_reg1                                  12    10      2   46379
                                             59 BANK0     12    10      2
                _adf4351_write_latch
                             _printf
 ---------------------------------------------------------------------------------
 (5) _adf4351_write_reg0                                  12    10      2   46314
                                             59 BANK0     12    10      2
                _adf4351_write_latch
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              36     4     32   45359
                                             23 BANK0     36     4     32
                            ___awdiv (ARG)
                            ___lldiv (ARG)
                            ___llmod (ARG)
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             8     2      6   41534
                                             94 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           55    49      6   40917
                                             74 COMRAM    20    14      6
                                              0 BANK0     23    23      0
                               _atoi
                               _ctoa
                               _dtoa
                              _fputc
                            _isdigit
                               _stoa
                            _strncmp
                               _utoa
                               _xtoa
 ---------------------------------------------------------------------------------
 (6) _xtoa                                                39    28     11    7955
                                             35 COMRAM    39    28     11
                            _isalpha
                            _isupper
                                _pad
                            _toupper
 ---------------------------------------------------------------------------------
 (7) _toupper                                              8     6      2     512
                                             18 COMRAM     8     6      2
                            _islower
 ---------------------------------------------------------------------------------
 (8) _islower                                              6     4      2     191
                                             12 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (7) _isupper                                              6     4      2     191
                                             12 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (7) _isalpha                                              6     4      2     191
                                             12 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (6) _utoa                                                32    22     10    6977
                                             37 COMRAM    32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (7) ___lomod                                             17     1     16     412
                                             12 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (7) ___lodiv                                             25     9     16     421
                                             12 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (6) _strncmp                                             11     5      6    3295
                                             12 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (6) _stoa                                                22    18      4    2726
                                             17 COMRAM    22    18      4
                              _fputc
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _dtoa                                                36    26     10    7831
                                             38 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     183
                                             30 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___aomod                                             18     2     16     613
                                             12 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (7) ___aodiv                                             26    10     16     625
                                             12 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (6) _ctoa                                                 7     4      3    5664
                                             35 COMRAM     5     2      3
                                _pad
 ---------------------------------------------------------------------------------
 (7) _pad                                                 11     5      6    5385
                                             24 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (8) _strlen                                               4     2      2     310
                                             12 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _fputs                                                7     3      4    2071
                                             17 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (9) _fputc                                                4     0      4    1571
                                             13 COMRAM     4     0      4
                         _usart_putc
 ---------------------------------------------------------------------------------
 (10) _usart_putc                                          1     1      0      38
                                             12 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _atoi                                                15    13      2    1915
                                             19 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (7) _isspace                                              7     5      2     259
                                             12 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              6     4      2     281
                                             12 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     812
                                             12 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) _adf4351_write_latch                                 12     8      4     639
                                             12 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (2) _adc_voltage                                          4     0      4    3746
                                             47 COMRAM     4     0      4
                            ___lldiv
                             ___lmul
                         _adc_sample
 ---------------------------------------------------------------------------------
 (3) _adc_sample                                           6     4      2     828
                                             16 COMRAM     6     4      2
                         _gpio_to_ch
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     456
                                             22 COMRAM    12     4      8
                         _adc_sample (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8    2161
                                             34 COMRAM    13     5      8
                             ___lmul (ARG)
                         _adc_sample (ARG)
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8    1012
                                             12 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     793
                                             12 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     805
                                             12 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _KTY82_222_Adc2Temperature                            4     2      2     189
                                             22 COMRAM     4     2      2
                         _adc_sample (ARG)
 ---------------------------------------------------------------------------------
 (1) _adf4351_init                                        13     3     10    2610
                                             24 COMRAM    13     3     10
                    _adf4351_default
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                              12     6      6    1557
                                             12 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) _adf4351_default                                      2     0      2     296
                                             12 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_cfg_gpio                                         7     5      2    1005
                                             16 COMRAM     7     5      2
                         _gpio_to_ch
 ---------------------------------------------------------------------------------
 (4) _gpio_to_ch                                           4     2      2     552
                                             12 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (14) _global_irq_handler                                  5     5      0     122
                                              7 COMRAM     5     5      0
               _usart_rx_irq_handler *
 ---------------------------------------------------------------------------------
 (15) _usart_rx_irq_handler                                7     5      2     121
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adc_cfg_gpio
     _gpio_to_ch
   _adc_init
   _adf4351_init
     _adf4351_default
     _memset
   _adf4351_set_tune
     _adf4351_setup
       _adf4351_write_reg0
         _adf4351_write_latch
         _printf
           ___awdiv (ARG)
           ___lldiv (ARG)
             ___lmul (ARG)
               _adc_sample (ARG)
                 _gpio_to_ch
             _adc_sample (ARG)
               _gpio_to_ch
           ___llmod (ARG)
           _vfprintf (ARG)
             _vfpfcnvrt
               _atoi
                 ___wmul
                 _isdigit
                 _isspace
               _ctoa
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _dtoa
                 ___aodiv
                 ___aomod
                 _abs
                   ___aomod (ARG)
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _fputc
                 _usart_putc
               _isdigit
               _stoa
                 _fputc
                   _usart_putc
                 _strlen
               _strncmp
               _utoa
                 ___lodiv
                 ___lomod
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _xtoa
                 _isalpha
                 _isupper
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
                 _toupper
                   _islower
       _adf4351_write_reg1
         _adf4351_write_latch
         _printf
           ___awdiv (ARG)
           ___lldiv (ARG)
             ___lmul (ARG)
               _adc_sample (ARG)
                 _gpio_to_ch
             _adc_sample (ARG)
               _gpio_to_ch
           ___llmod (ARG)
           _vfprintf (ARG)
             _vfpfcnvrt
               _atoi
                 ___wmul
                 _isdigit
                 _isspace
               _ctoa
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _dtoa
                 ___aodiv
                 ___aomod
                 _abs
                   ___aomod (ARG)
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _fputc
                 _usart_putc
               _isdigit
               _stoa
                 _fputc
                   _usart_putc
                 _strlen
               _strncmp
               _utoa
                 ___lodiv
                 ___lomod
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _xtoa
                 _isalpha
                 _isupper
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
                 _toupper
                   _islower
       _adf4351_write_reg2
         _adf4351_write_latch
         _printf
           ___awdiv (ARG)
           ___lldiv (ARG)
             ___lmul (ARG)
               _adc_sample (ARG)
                 _gpio_to_ch
             _adc_sample (ARG)
               _gpio_to_ch
           ___llmod (ARG)
           _vfprintf (ARG)
             _vfpfcnvrt
               _atoi
                 ___wmul
                 _isdigit
                 _isspace
               _ctoa
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _dtoa
                 ___aodiv
                 ___aomod
                 _abs
                   ___aomod (ARG)
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _fputc
                 _usart_putc
               _isdigit
               _stoa
                 _fputc
                   _usart_putc
                 _strlen
               _strncmp
               _utoa
                 ___lodiv
                 ___lomod
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _xtoa
                 _isalpha
                 _isupper
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
                 _toupper
                   _islower
       _adf4351_write_reg3
         _adf4351_write_latch
         _printf
           ___awdiv (ARG)
           ___lldiv (ARG)
             ___lmul (ARG)
               _adc_sample (ARG)
                 _gpio_to_ch
             _adc_sample (ARG)
               _gpio_to_ch
           ___llmod (ARG)
           _vfprintf (ARG)
             _vfpfcnvrt
               _atoi
                 ___wmul
                 _isdigit
                 _isspace
               _ctoa
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _dtoa
                 ___aodiv
                 ___aomod
                 _abs
                   ___aomod (ARG)
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _fputc
                 _usart_putc
               _isdigit
               _stoa
                 _fputc
                   _usart_putc
                 _strlen
               _strncmp
               _utoa
                 ___lodiv
                 ___lomod
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _xtoa
                 _isalpha
                 _isupper
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
                 _toupper
                   _islower
       _adf4351_write_reg4
         _adf4351_write_latch
         _printf
           ___awdiv (ARG)
           ___lldiv (ARG)
             ___lmul (ARG)
               _adc_sample (ARG)
                 _gpio_to_ch
             _adc_sample (ARG)
               _gpio_to_ch
           ___llmod (ARG)
           _vfprintf (ARG)
             _vfpfcnvrt
               _atoi
                 ___wmul
                 _isdigit
                 _isspace
               _ctoa
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _dtoa
                 ___aodiv
                 ___aomod
                 _abs
                   ___aomod (ARG)
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _fputc
                 _usart_putc
               _isdigit
               _stoa
                 _fputc
                   _usart_putc
                 _strlen
               _strncmp
               _utoa
                 ___lodiv
                 ___lomod
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _xtoa
                 _isalpha
                 _isupper
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
                 _toupper
                   _islower
       _adf4351_write_reg5
         _adf4351_write_latch
         _printf
           ___awdiv (ARG)
           ___lldiv (ARG)
             ___lmul (ARG)
               _adc_sample (ARG)
                 _gpio_to_ch
             _adc_sample (ARG)
               _gpio_to_ch
           ___llmod (ARG)
           _vfprintf (ARG)
             _vfpfcnvrt
               _atoi
                 ___wmul
                 _isdigit
                 _isspace
               _ctoa
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _dtoa
                 ___aodiv
                 ___aomod
                 _abs
                   ___aomod (ARG)
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _fputc
                 _usart_putc
               _isdigit
               _stoa
                 _fputc
                   _usart_putc
                 _strlen
               _strncmp
               _utoa
                 ___lodiv
                 ___lomod
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _xtoa
                 _isalpha
                 _isupper
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
                 _toupper
                   _islower
     _printf
       ___awdiv (ARG)
       ___lldiv (ARG)
         ___lmul (ARG)
           _adc_sample (ARG)
             _gpio_to_ch
         _adc_sample (ARG)
           _gpio_to_ch
       ___llmod (ARG)
       _vfprintf (ARG)
         _vfpfcnvrt
           _atoi
             ___wmul
             _isdigit
             _isspace
           _ctoa
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
           _fputc
             _usart_putc
           _isdigit
           _stoa
             _fputc
               _usart_putc
             _strlen
           _strncmp
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
             _toupper
               _islower
   _check_usart
     _KTY82_222_Adc2Temperature
       _adc_sample (ARG)
         _gpio_to_ch
     ___awdiv
     ___awmod
     ___lldiv
       ___lmul (ARG)
         _adc_sample (ARG)
           _gpio_to_ch
       _adc_sample (ARG)
         _gpio_to_ch
     ___llmod
     _adc_sample
       _gpio_to_ch
     _adc_voltage
       ___lldiv
         ___lmul (ARG)
           _adc_sample (ARG)
             _gpio_to_ch
         _adc_sample (ARG)
           _gpio_to_ch
       ___lmul
         _adc_sample (ARG)
           _gpio_to_ch
       _adc_sample
         _gpio_to_ch
     _adf4351_set_tune
       _adf4351_setup
         _adf4351_write_reg0
           _adf4351_write_latch
           _printf
             ___awdiv (ARG)
             ___lldiv (ARG)
               ___lmul (ARG)
                 _adc_sample (ARG)
                   _gpio_to_ch
               _adc_sample (ARG)
                 _gpio_to_ch
             ___llmod (ARG)
             _vfprintf (ARG)
               _vfpfcnvrt
                 _atoi
                   ___wmul
                   _isdigit
                   _isspace
                 _ctoa
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _utoa
                   ___lodiv
                   ___lomod
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
         _adf4351_write_reg1
           _adf4351_write_latch
           _printf
             ___awdiv (ARG)
             ___lldiv (ARG)
               ___lmul (ARG)
                 _adc_sample (ARG)
                   _gpio_to_ch
               _adc_sample (ARG)
                 _gpio_to_ch
             ___llmod (ARG)
             _vfprintf (ARG)
               _vfpfcnvrt
                 _atoi
                   ___wmul
                   _isdigit
                   _isspace
                 _ctoa
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _utoa
                   ___lodiv
                   ___lomod
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
         _adf4351_write_reg2
           _adf4351_write_latch
           _printf
             ___awdiv (ARG)
             ___lldiv (ARG)
               ___lmul (ARG)
                 _adc_sample (ARG)
                   _gpio_to_ch
               _adc_sample (ARG)
                 _gpio_to_ch
             ___llmod (ARG)
             _vfprintf (ARG)
               _vfpfcnvrt
                 _atoi
                   ___wmul
                   _isdigit
                   _isspace
                 _ctoa
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _utoa
                   ___lodiv
                   ___lomod
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
         _adf4351_write_reg3
           _adf4351_write_latch
           _printf
             ___awdiv (ARG)
             ___lldiv (ARG)
               ___lmul (ARG)
                 _adc_sample (ARG)
                   _gpio_to_ch
               _adc_sample (ARG)
                 _gpio_to_ch
             ___llmod (ARG)
             _vfprintf (ARG)
               _vfpfcnvrt
                 _atoi
                   ___wmul
                   _isdigit
                   _isspace
                 _ctoa
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _utoa
                   ___lodiv
                   ___lomod
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
         _adf4351_write_reg4
           _adf4351_write_latch
           _printf
             ___awdiv (ARG)
             ___lldiv (ARG)
               ___lmul (ARG)
                 _adc_sample (ARG)
                   _gpio_to_ch
               _adc_sample (ARG)
                 _gpio_to_ch
             ___llmod (ARG)
             _vfprintf (ARG)
               _vfpfcnvrt
                 _atoi
                   ___wmul
                   _isdigit
                   _isspace
                 _ctoa
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _utoa
                   ___lodiv
                   ___lomod
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
         _adf4351_write_reg5
           _adf4351_write_latch
           _printf
             ___awdiv (ARG)
             ___lldiv (ARG)
               ___lmul (ARG)
                 _adc_sample (ARG)
                   _gpio_to_ch
               _adc_sample (ARG)
                 _gpio_to_ch
             ___llmod (ARG)
             _vfprintf (ARG)
               _vfpfcnvrt
                 _atoi
                   ___wmul
                   _isdigit
                   _isspace
                 _ctoa
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _utoa
                   ___lodiv
                   ___lomod
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
       _printf
         ___awdiv (ARG)
         ___lldiv (ARG)
           ___lmul (ARG)
             _adc_sample (ARG)
               _gpio_to_ch
           _adc_sample (ARG)
             _gpio_to_ch
         ___llmod (ARG)
         _vfprintf (ARG)
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _ctoa
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _fputc
               _usart_putc
             _isdigit
             _stoa
               _fputc
                 _usart_putc
               _strlen
             _strncmp
             _utoa
               ___lodiv
               ___lomod
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _xtoa
               _isalpha
               _isupper
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
               _toupper
                 _islower
     _apply_ipc
       _adf4351_set_tune
         _adf4351_setup
           _adf4351_write_reg0
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg1
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg2
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg3
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg4
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg5
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
         _printf
           ___awdiv (ARG)
           ___lldiv (ARG)
             ___lmul (ARG)
               _adc_sample (ARG)
                 _gpio_to_ch
             _adc_sample (ARG)
               _gpio_to_ch
           ___llmod (ARG)
           _vfprintf (ARG)
             _vfpfcnvrt
               _atoi
                 ___wmul
                 _isdigit
                 _isspace
               _ctoa
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _dtoa
                 ___aodiv
                 ___aomod
                 _abs
                   ___aomod (ARG)
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _fputc
                 _usart_putc
               _isdigit
               _stoa
                 _fputc
                   _usart_putc
                 _strlen
               _strncmp
               _utoa
                 ___lodiv
                 ___lomod
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _xtoa
                 _isalpha
                 _isupper
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
                 _toupper
                   _islower
       _printf
         ___awdiv (ARG)
         ___lldiv (ARG)
           ___lmul (ARG)
             _adc_sample (ARG)
               _gpio_to_ch
           _adc_sample (ARG)
             _gpio_to_ch
         ___llmod (ARG)
         _vfprintf (ARG)
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _ctoa
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _fputc
               _usart_putc
             _isdigit
             _stoa
               _fputc
                 _usart_putc
               _strlen
             _strncmp
             _utoa
               ___lodiv
               ___lomod
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _xtoa
               _isalpha
               _isupper
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
               _toupper
                 _islower
     _memset
     _printf
       ___awdiv (ARG)
       ___lldiv (ARG)
         ___lmul (ARG)
           _adc_sample (ARG)
             _gpio_to_ch
         _adc_sample (ARG)
           _gpio_to_ch
       ___llmod (ARG)
       _vfprintf (ARG)
         _vfpfcnvrt
           _atoi
             ___wmul
             _isdigit
             _isspace
           _ctoa
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
           _fputc
             _usart_putc
           _isdigit
           _stoa
             _fputc
               _usart_putc
             _strlen
           _strncmp
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
           _xtoa
             _isalpha
             _isupper
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
             _toupper
               _islower
     _putchar
       _fputc
         _usart_putc
     _strncmp
     _usart_getc
     _usart_tstc
   _init_gpios
   _init_switch
     _handle_cmd
       _adf4351_get_lock
       _adf4351_set_freq
         _adf4351_calc_counters
           ___lldiv
             ___lmul (ARG)
               _adc_sample (ARG)
                 _gpio_to_ch
             _adc_sample (ARG)
               _gpio_to_ch
           ___llmod
           _gcd
             ___llmod
           _printf
             ___awdiv (ARG)
             ___lldiv (ARG)
               ___lmul (ARG)
                 _adc_sample (ARG)
                   _gpio_to_ch
               _adc_sample (ARG)
                 _gpio_to_ch
             ___llmod (ARG)
             _vfprintf (ARG)
               _vfpfcnvrt
                 _atoi
                   ___wmul
                   _isdigit
                   _isspace
                 _ctoa
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _utoa
                   ___lodiv
                   ___lomod
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
         _adf4351_calc_rcnt_block
           ___awdiv
           ___lldiv
             ___lmul (ARG)
               _adc_sample (ARG)
                 _gpio_to_ch
             _adc_sample (ARG)
               _gpio_to_ch
           ___llmod
           _printf
             ___awdiv (ARG)
             ___lldiv (ARG)
               ___lmul (ARG)
                 _adc_sample (ARG)
                   _gpio_to_ch
               _adc_sample (ARG)
                 _gpio_to_ch
             ___llmod (ARG)
             _vfprintf (ARG)
               _vfpfcnvrt
                 _atoi
                   ___wmul
                   _isdigit
                   _isspace
                 _ctoa
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _utoa
                   ___lodiv
                   ___lomod
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
         _adf4351_calc_vco_core_freq
         _adf4351_setup
           _adf4351_write_reg0
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg1
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg2
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg3
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg4
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg5
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
       _adf4351_set_mode
         _adf4351_setup
           _adf4351_write_reg0
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg1
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg2
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg3
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg4
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg5
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
         _adf4351_write_reg2
           _adf4351_write_latch
           _printf
             ___awdiv (ARG)
             ___lldiv (ARG)
               ___lmul (ARG)
                 _adc_sample (ARG)
                   _gpio_to_ch
               _adc_sample (ARG)
                 _gpio_to_ch
             ___llmod (ARG)
             _vfprintf (ARG)
               _vfpfcnvrt
                 _atoi
                   ___wmul
                   _isdigit
                   _isspace
                 _ctoa
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _utoa
                   ___lodiv
                   ___lomod
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
         _adf4351_write_reg4
           _adf4351_write_latch
           _printf
             ___awdiv (ARG)
             ___lldiv (ARG)
               ___lmul (ARG)
                 _adc_sample (ARG)
                   _gpio_to_ch
               _adc_sample (ARG)
                 _gpio_to_ch
             ___llmod (ARG)
             _vfprintf (ARG)
               _vfpfcnvrt
                 _atoi
                   ___wmul
                   _isdigit
                   _isspace
                 _ctoa
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _utoa
                   ___lodiv
                   ___lomod
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
       _pa_mute
         _adf4351_set_rfout_enable
           _adf4351_write_reg2
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg4
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
         _printf
           ___awdiv (ARG)
           ___lldiv (ARG)
             ___lmul (ARG)
               _adc_sample (ARG)
                 _gpio_to_ch
             _adc_sample (ARG)
               _gpio_to_ch
           ___llmod (ARG)
           _vfprintf (ARG)
             _vfpfcnvrt
               _atoi
                 ___wmul
                 _isdigit
                 _isspace
               _ctoa
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _dtoa
                 ___aodiv
                 ___aomod
                 _abs
                   ___aomod (ARG)
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _fputc
                 _usart_putc
               _isdigit
               _stoa
                 _fputc
                   _usart_putc
                 _strlen
               _strncmp
               _utoa
                 ___lodiv
                 ___lomod
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _xtoa
                 _isalpha
                 _isupper
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
                 _toupper
                   _islower
       _printf
         ___awdiv (ARG)
         ___lldiv (ARG)
           ___lmul (ARG)
             _adc_sample (ARG)
               _gpio_to_ch
           _adc_sample (ARG)
             _gpio_to_ch
         ___llmod (ARG)
         _vfprintf (ARG)
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _ctoa
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _fputc
               _usart_putc
             _isdigit
             _stoa
               _fputc
                 _usart_putc
               _strlen
             _strncmp
             _utoa
               ___lodiv
               ___lomod
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _xtoa
               _isalpha
               _isupper
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
               _toupper
                 _islower
     _read_switch
   _pa_update
     _adf4351_get_lock
     _pa_mute
       _adf4351_set_rfout_enable
         _adf4351_write_reg2
           _adf4351_write_latch
           _printf
             ___awdiv (ARG)
             ___lldiv (ARG)
               ___lmul (ARG)
                 _adc_sample (ARG)
                   _gpio_to_ch
               _adc_sample (ARG)
                 _gpio_to_ch
             ___llmod (ARG)
             _vfprintf (ARG)
               _vfpfcnvrt
                 _atoi
                   ___wmul
                   _isdigit
                   _isspace
                 _ctoa
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _utoa
                   ___lodiv
                   ___lomod
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
         _adf4351_write_reg4
           _adf4351_write_latch
           _printf
             ___awdiv (ARG)
             ___lldiv (ARG)
               ___lmul (ARG)
                 _adc_sample (ARG)
                   _gpio_to_ch
               _adc_sample (ARG)
                 _gpio_to_ch
             ___llmod (ARG)
             _vfprintf (ARG)
               _vfpfcnvrt
                 _atoi
                   ___wmul
                   _isdigit
                   _isspace
                 _ctoa
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _utoa
                   ___lodiv
                   ___lomod
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
       _printf
         ___awdiv (ARG)
         ___lldiv (ARG)
           ___lmul (ARG)
             _adc_sample (ARG)
               _gpio_to_ch
           _adc_sample (ARG)
             _gpio_to_ch
         ___llmod (ARG)
         _vfprintf (ARG)
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _ctoa
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _fputc
               _usart_putc
             _isdigit
             _stoa
               _fputc
                 _usart_putc
               _strlen
             _strncmp
             _utoa
               ___lodiv
               ___lomod
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _xtoa
               _isalpha
               _isupper
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
               _toupper
                 _islower
     _pa_unmute
       _adf4351_set_rfout_enable
         _adf4351_write_reg2
           _adf4351_write_latch
           _printf
             ___awdiv (ARG)
             ___lldiv (ARG)
               ___lmul (ARG)
                 _adc_sample (ARG)
                   _gpio_to_ch
               _adc_sample (ARG)
                 _gpio_to_ch
             ___llmod (ARG)
             _vfprintf (ARG)
               _vfpfcnvrt
                 _atoi
                   ___wmul
                   _isdigit
                   _isspace
                 _ctoa
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _utoa
                   ___lodiv
                   ___lomod
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
         _adf4351_write_reg4
           _adf4351_write_latch
           _printf
             ___awdiv (ARG)
             ___lldiv (ARG)
               ___lmul (ARG)
                 _adc_sample (ARG)
                   _gpio_to_ch
               _adc_sample (ARG)
                 _gpio_to_ch
             ___llmod (ARG)
             _vfprintf (ARG)
               _vfpfcnvrt
                 _atoi
                   ___wmul
                   _isdigit
                   _isspace
                 _ctoa
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _utoa
                   ___lodiv
                   ___lomod
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
       _printf
         ___awdiv (ARG)
         ___lldiv (ARG)
           ___lmul (ARG)
             _adc_sample (ARG)
               _gpio_to_ch
           _adc_sample (ARG)
             _gpio_to_ch
         ___llmod (ARG)
         _vfprintf (ARG)
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _ctoa
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _fputc
               _usart_putc
             _isdigit
             _stoa
               _fputc
                 _usart_putc
               _strlen
             _strncmp
             _utoa
               ___lodiv
               ___lomod
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _xtoa
               _isalpha
               _isupper
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
               _toupper
                 _islower
   _printf
     ___awdiv (ARG)
     ___lldiv (ARG)
       ___lmul (ARG)
         _adc_sample (ARG)
           _gpio_to_ch
       _adc_sample (ARG)
         _gpio_to_ch
     ___llmod (ARG)
     _vfprintf (ARG)
       _vfpfcnvrt
         _atoi
           ___wmul
           _isdigit
           _isspace
         _ctoa
           _pad
             _fputc
               _usart_putc
             _fputs
               _fputc
                 _usart_putc
             _strlen
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _usart_putc
             _fputs
               _fputc
                 _usart_putc
             _strlen
         _fputc
           _usart_putc
         _isdigit
         _stoa
           _fputc
             _usart_putc
           _strlen
         _strncmp
         _utoa
           ___lodiv
           ___lomod
           _pad
             _fputc
               _usart_putc
             _fputs
               _fputc
                 _usart_putc
             _strlen
         _xtoa
           _isalpha
           _isupper
           _pad
             _fputc
               _usart_putc
             _fputs
               _fputc
                 _usart_putc
             _strlen
           _toupper
             _islower
   _update_led
     _adf4351_get_lock
   _update_switch
     _handle_cmd
       _adf4351_get_lock
       _adf4351_set_freq
         _adf4351_calc_counters
           ___lldiv
             ___lmul (ARG)
               _adc_sample (ARG)
                 _gpio_to_ch
             _adc_sample (ARG)
               _gpio_to_ch
           ___llmod
           _gcd
             ___llmod
           _printf
             ___awdiv (ARG)
             ___lldiv (ARG)
               ___lmul (ARG)
                 _adc_sample (ARG)
                   _gpio_to_ch
               _adc_sample (ARG)
                 _gpio_to_ch
             ___llmod (ARG)
             _vfprintf (ARG)
               _vfpfcnvrt
                 _atoi
                   ___wmul
                   _isdigit
                   _isspace
                 _ctoa
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _utoa
                   ___lodiv
                   ___lomod
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
         _adf4351_calc_rcnt_block
           ___awdiv
           ___lldiv
             ___lmul (ARG)
               _adc_sample (ARG)
                 _gpio_to_ch
             _adc_sample (ARG)
               _gpio_to_ch
           ___llmod
           _printf
             ___awdiv (ARG)
             ___lldiv (ARG)
               ___lmul (ARG)
                 _adc_sample (ARG)
                   _gpio_to_ch
               _adc_sample (ARG)
                 _gpio_to_ch
             ___llmod (ARG)
             _vfprintf (ARG)
               _vfpfcnvrt
                 _atoi
                   ___wmul
                   _isdigit
                   _isspace
                 _ctoa
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _utoa
                   ___lodiv
                   ___lomod
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
         _adf4351_calc_vco_core_freq
         _adf4351_setup
           _adf4351_write_reg0
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg1
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg2
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg3
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg4
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg5
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
       _adf4351_set_mode
         _adf4351_setup
           _adf4351_write_reg0
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg1
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg2
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg3
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg4
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg5
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
         _adf4351_write_reg2
           _adf4351_write_latch
           _printf
             ___awdiv (ARG)
             ___lldiv (ARG)
               ___lmul (ARG)
                 _adc_sample (ARG)
                   _gpio_to_ch
               _adc_sample (ARG)
                 _gpio_to_ch
             ___llmod (ARG)
             _vfprintf (ARG)
               _vfpfcnvrt
                 _atoi
                   ___wmul
                   _isdigit
                   _isspace
                 _ctoa
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _utoa
                   ___lodiv
                   ___lomod
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
         _adf4351_write_reg4
           _adf4351_write_latch
           _printf
             ___awdiv (ARG)
             ___lldiv (ARG)
               ___lmul (ARG)
                 _adc_sample (ARG)
                   _gpio_to_ch
               _adc_sample (ARG)
                 _gpio_to_ch
             ___llmod (ARG)
             _vfprintf (ARG)
               _vfpfcnvrt
                 _atoi
                   ___wmul
                   _isdigit
                   _isspace
                 _ctoa
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _isdigit
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _utoa
                   ___lodiv
                   ___lomod
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _xtoa
                   _isalpha
                   _isupper
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                   _toupper
                     _islower
       _pa_mute
         _adf4351_set_rfout_enable
           _adf4351_write_reg2
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
           _adf4351_write_reg4
             _adf4351_write_latch
             _printf
               ___awdiv (ARG)
               ___lldiv (ARG)
                 ___lmul (ARG)
                   _adc_sample (ARG)
                     _gpio_to_ch
                 _adc_sample (ARG)
                   _gpio_to_ch
               ___llmod (ARG)
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _ctoa
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _fputc
                     _usart_putc
                   _isdigit
                   _stoa
                     _fputc
                       _usart_putc
                     _strlen
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                   _xtoa
                     _isalpha
                     _isupper
                     _pad
                       _fputc
                         _usart_putc
                       _fputs
                         _fputc
                           _usart_putc
                       _strlen
                     _toupper
                       _islower
         _printf
           ___awdiv (ARG)
           ___lldiv (ARG)
             ___lmul (ARG)
               _adc_sample (ARG)
                 _gpio_to_ch
             _adc_sample (ARG)
               _gpio_to_ch
           ___llmod (ARG)
           _vfprintf (ARG)
             _vfpfcnvrt
               _atoi
                 ___wmul
                 _isdigit
                 _isspace
               _ctoa
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _dtoa
                 ___aodiv
                 ___aomod
                 _abs
                   ___aomod (ARG)
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _fputc
                 _usart_putc
               _isdigit
               _stoa
                 _fputc
                   _usart_putc
                 _strlen
               _strncmp
               _utoa
                 ___lodiv
                 ___lomod
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _xtoa
                 _isalpha
                 _isupper
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
                 _toupper
                   _islower
       _printf
         ___awdiv (ARG)
         ___lldiv (ARG)
           ___lmul (ARG)
             _adc_sample (ARG)
               _gpio_to_ch
           _adc_sample (ARG)
             _gpio_to_ch
         ___llmod (ARG)
         _vfprintf (ARG)
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _ctoa
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _fputc
               _usart_putc
             _isdigit
             _stoa
               _fputc
                 _usart_putc
               _strlen
             _strncmp
             _utoa
               ___lodiv
               ___lomod
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _xtoa
               _isalpha
               _isupper
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
               _toupper
                 _islower
     _read_switch
   _usart_init
     ___lldiv
       ___lmul (ARG)
         _adc_sample (ARG)
           _gpio_to_ch
       _adc_sample (ARG)
         _gpio_to_ch
     _irq_set_handler

 _global_irq_handler (ROOT)
   _usart_rx_irq_handler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     16      16       9        8.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      EE       7       93.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     67      77       5       93.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     66      72       1       90.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1ED      15        0.0%
DATA                 0      0     1ED       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sat Nov 30 10:23:22 2019

                __end_of_adf4351_setup 5586              adf4351_calc_counters@frac 00CD  
     __size_of_adf4351_calc_rcnt_block 02E4                                     l45 4530  
                                   l53 55CC                                     l62 4CEC  
                                   l72 4A6A                                     l81 1E36  
                                   l49 4F8A                                     l58 544E  
                                   l75 4B10                                     l84 2058  
                                   l93 233C                                     l78 5584  
                                   l94 21A0                                     l96 2210  
                         ___awdiv@sign 0012                    ___wmul@multiplicand 000F  
                          __CFG_BORV$3 000000                         _PIN_LED_CPU_OK 7997  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                        _update_switch 500A                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000               __end_of_adf4351_set_freq 4F8C  
             __end_of_adf4351_set_mode 4CEE                                    l102 405A  
                                  l122 3C86                                    l130 2B54  
                                  l141 440E                                    l230 5612  
                                  l118 4282                                    l126 14C4  
                                  l134 1CFE                                    l142 4378  
                                  l143 43CA                                    l145 4448  
                                  l217 5656                                    l154 334E  
                                  l138 490E                                    l146 4458  
                                  l260 5284                                    l253 53A2  
                                  l501 4D7C                                    l263 514C  
                                  l183 521E                                    l415 2FA4  
                                  l272 2C76                                    l192 5894  
                                  l504 58E4                                    l520 3F3E  
                                  l512 5076                                    l424 3160  
                                  l249 58D6                                    l257 525A  
                                  l186 58AE                                    l531 34F8  
                                  l268 2D9A                                    l189 58C0  
                                  l429 5718                                    l461 50E2  
                                  l198 553A                                    l534 194C  
                                  l456 4604                                    l449 4C50  
                                  l538 584C                                    l730 3690  
                                  l714 357A                                    l802 09B8  
                                  l707 261A                                    l716 3582  
                                  l492 1010                                    l725 3640  
                                  l726 3688                                    l750 2652  
                                  l735 2DD2                                    l840 51B6  
                                  l672 4820                                    l752 265A  
                                  l824 52DE                                    l681 53FC  
                                  l745 2F9A                                    l737 2DDA  
                                  l825 52E6                                    l674 485A  
                                  l498 1010                                    l828 5872  
                                  l669 47DE                                    l773 288C  
             __end_of_adf4351_set_tune 4A6C                                    l862 4BB4  
                                  l942 39A8                                    l855 4BA4  
                                  l839 51A6                                    l687 23DC  
                                  l775 28EE                                    l759 26F0  
                                  l689 23E4                                    l955 3DEA  
                                  l789 0104                           __CFG_CPB$OFF 000000  
                         __CFG_CPD$OFF 000000                  __size_of_adc_cfg_gpio 005E  
                                  _abs 569C                                    _gcd 4374  
                                  _pad 479A                           ___awmod@sign 0012  
                                  prod 000FF3                                    tosl 000FFD  
                                  wreg 000FE8                       _PIN_LED_ADF_LOCK 7995  
              __end_of_irq_set_handler 5658                           __CFG_LVP$OFF 000000  
                 __size_of_adc_voltage 006A                           __CFG_WDT$OFF 000000  
                                 ?_abs 001F                                   l1072 49BE  
                                 l1059 4798                                   ?_gcd 0016  
                                 l1255 4E04                                   l1503 56D2  
                                 l1248 4DF4                                   l1273 4372  
                                 l1506 56DA                                   l1266 4352  
                                 l1603 4174                                   l1283 46D4  
                                 l1276 46B4                                   l1540 5754  
                                 l1613 533C                                   l1534 3818  
                                 l1560 57C4                                   l1624 578C  
                                 l1537 3820                                   l1546 57FC  
                                 l1554 54A0                                   l1618 5344  
                                 l1581 569A                                   l1567 3B1E  
                                 l6001 1968                                   l1593 58AA  
                                 l6011 1A76                                   l6003 197A  
                                 l1588 5824                                   l5301 47CA  
                                 l6101 3C18                                   l6021 1BB2  
                                 l6013 1AB6                                   l6005 19BA  
                                 l1599 54EE                                   l5311 482E  
                                 l5303 47D6                                   l6111 41E8  
                                 l6103 3C72                                   l6031 103E  
                                 l6023 1BF2                                   l6015 1AF6  
                                 l6007 19FA                                   l5071 3E54  
                                 l5313 4842                                   l5305 47EA  
                                 l5401 3CBE                                   l5321 578E  
                                 l6113 422A                                   l6105 4176  
                                 l6041 117E                                   l6033 107E  
                                 l6025 1CEA                                   l6017 1B36  
                                 l6009 1A3A                                   l6121 43A6  
                                 l4361 3F48                                   l5081 3F0E  
                                 l5073 3E88                                   l6131 4B40  
                                 l5307 47FE                                   l5411 3D26  
                                 l5403 3CCC                                   l6115 426E  
                                 l6107 4190                                   l6051 12B8  
                                 l6043 11BA                                   l6035 10BE  
                                 l6027 1012                                   l6019 1B72  
                                 l6123 43DA                                   l6211 2272  
                                 l6203 21AE                                   l4371 3FB2  
                                 l5075 3EB6                                   l5067 3DEC  
                                 l6301 2C46                                   l6141 4B92  
                                 l6133 4B4C                                   l6125 4B12  
                                 l5309 4802                                   l5501 53B6  
                                 l5413 3D34                                   l5421 3D9A  
                                 l5405 3CEC                                   l5317 569C  
                                 l5325 571A                                   l5333 531E  
                                 l6109 41A2                                   l6053 12F8  
                                 l6045 11FA                                   l6037 10FE  
                                 l6029 102C                                   l6061 485C  
                                 l6117 4374                                   l6213 2288  
                                 l6205 21D8                                   l4373 3FD0  
                                 l4365 3F6A                                   l5069 3E16  
                                 l5077 3EBE                                   ?_pad 0019  
                                 l6311 2CD2                                   l6303 2C6A  
                                 l6151 46E8                                   l6143 4B94  
                                 l6135 4B5A                                   l6127 4B22  
                                 l5343 584E                                   l5263 5826  
                                 l5503 53C2                                   l5351 3826  
                                 l5423 3DAA                                   l5415 3D62  
                                 l5407 3D0A                                   l5319 56B6  
                                 l5431 4290                                   l5335 5330  
                                 l6055 1338                                   l6047 123A  
                                 l6039 113E                                   l6071 28F0  
                                 l6063 4876                                   l6119 4388  
                                 l6231 1E02                                   l6223 232C  
                                 l6215 2298                                   l6207 21EC  
                                 l4375 3FF0                                   l4367 3F78  
                                 l4359 3F40                                   l5079 3EDC  
                                 l6321 2D0E                                   l6161 470E  
                                 l6153 46F0                                   l6145 4B9E  
                                 l6137 4B64                                   l6129 4B38  
                                 l5345 586A                                   l5257 58AE  
                                 l5265 583A                                   l5273 5658  
                                 l5281 54A2                                   l5505 53CE  
                                 l5361 3886                                   l5353 3834  
                                 l5425 3DCA                                   l5417 3D82  
                                 l5409 3D12                                   l5521 23B4  
                                 l5513 233E                                   l5601 35E6  
                                 l5441 42EA                                   l5433 42AE  
                                 l5329 52E8                                   l6057 1378  
                                 l6049 1280                                   l6081 29E2  
                                 l6073 290A                                   l6065 4888  
                                 l6241 1EA6                                   l6233 1E1E  
                                 l6217 22EA                                   l6209 2220  
                                 l4377 400C                                   l4369 3F96  
                                 l6323 2D32                                   l6315 2CDE  
                                 l6307 2C7E                                   l6171 4746  
                                 l6163 4716                                   l6155 46F4  
                                 l6147 46D6                                   l6139 4B82  
                                 l6403 527C                                   l5339 57C6  
                                 l5259 58BC                                   l5267 5840  
                                 l5275 5664                                   l5283 54AE  
                                 l5507 53D2                                   l5371 38D0  
                                 l5363 388A                                   l5355 3854  
                                 l5419 3D94                                   l5531 240C  
                                 l5523 23B6                                   l5515 235E  
                                 l5611 3652                                   l5603 361A  
                                 l5443 4318                                   l5435 42B6  
                                 l5451 4606                                   l5291 5756  
                                 l6091 3B20                                   l6059 14B0  
                                 l6083 2A22                                   l6075 291C  
                                 l6067 48C8                                   l4547 5586  
                                 l6251 1FC4                                   l6243 1EC0  
                                 l6235 1E46                                   l6227 1D00  
                                 l6219 2300                                   l4379 404A  
                                 l6411 4BE8                                   l6333 2D6E  
                                 l6317 2D02                                   l6309 2CAE  
                                 l6181 4772                                   l6173 474C  
                                 l6165 4728                                   l6157 4702  
                                 l6149 46DA                                   l6421 516C  
                                 l5269 5846                                   l5277 5676  
                                 l5285 54B2                                   l5509 53D8  
                                 l5381 3940                                   l5373 38DE  
                                 l5365 3896                                   l5357 3858  
                                 l5349 3822                                   l5541 24AC  
                                 l5533 2412                                   l5525 23D0  
                                 l5517 2386                                   l5613 3666  
                                 l5605 361E                                   l5445 4338  
                                 l5437 42CA                                   l5429 4284  
                                 l5461 467C                                   l5453 4624  
                                 l5621 2DAC                                   l5701 282C  
                                 l6093 3B3A                                   l6085 2A62  
                                 l6077 2962                                   l6069 48FA  
                                 l4901 16CA                                   l6253 1FF2  
                                 l6245 1EEC                                   l6237 1E62  
                                 l6229 1D9C                                   l6413 4C1A  
                                 l4717 4CEE                                   l6501 4576  
                                 l6335 2D92                                   l6327 2D3E  
                                 l4655 4A6C                                   l6431 39C8  
                                 l6175 4762                                   l6167 4730  
                                 l6183 4778                                   l6159 470A  
                                 l6423 517C                                   l5471 5468  
                                 l5279 567A                                   l5287 54E2  
                                 l5295 479A                                   l5383 3952  
                                 l5375 38F0                                   l5367 38B4  
                                 l5359 3866                                   l5551 2554  
                                 l5543 24B2                                   l5535 241A  
                                 l5527 23EC                                   l5519 23A6  
                                 l5615 366A                                   l5607 3622  
                                 l5447 433A                                   l5439 42D8  
                                 l5463 469C                                   l5455 462C  
                                 l5631 2E1A                                   l5623 2DC6  
                                 l5711 28A0                                   l5703 284A  
                                 l6095 3B4C                                   l6087 2AA2  
                                 l6079 29A2                                   l6263 553C  
                                 l6511 5896                                   l4911 1774  
                                 l4903 16F8                                   l6255 2008  
                                 l6247 1F04                                   l6239 1E92  
                                 l6191 205A                                   l6351 4F7E  
                                 l6343 4F2C                                   l6271 5436  
                                 l6415 4C48                                   l6407 4BB6  
                                 l4719 4D76                                   l6503 457E  
                                 l6329 2D62                                   l6433 39D4  
                                 l6601 451C                                   l6185 4788  
                                 l6177 476A                                   l6169 4738  
                                 l6425 5186                                   l6417 514E  
                                 l5473 5496                                   l5721 36A6  
                                 l5297 47A8                                   l5377 391E  
                                 l5369 38BC                                   l5385 3958  
                                 l5393 3C88                                   l5561 25B6  
                                 l5553 256E                                   l5545 24B8  
                                 l5537 2424                                   l5529 23FE  
                                 l5481 4086                                   l5449 434C  
                                 l5465 46AE                                   l5457 4640  
                                 l5641 2F12                                   l5633 2E90  
                                 l5625 2E02                                   l5617 2D9C  
                                 l5713 28B0                                   l5705 2864  
                                 l5801 0114                                   l6097 3B92  
                                 l6089 2B40                                   l4921 1852  
                                 l4913 17A2                                   l4905 16FA  
                                 l6257 201C                                   l6249 1FA4  
                                 l6193 20F4                                   l6345 4F48  
                                 l6361 4C84                                   l6273 5442  
                                 l6265 53FE                                   l6409 4BC6  
                                 l6521 3380                                   l6505 45AC  
                                 l4657 5616                                   l6291 2C0A  
                                 l6283 2BB6                                   l6275 2B56  
                                 l6451 3AF6                                   l6443 3A7C  
                                 l6427 39AA                                   l6603 4528  
                                 l6187 4790                                   l6179 476C  
                                 l6419 515E                                   l5475 549A  
                                 l5467 5450                                   l5731 3704  
                                 l5723 36AA                                   l5299 47BC  
                                 l5387 3968                                   l5379 393E  
                                 l5395 3C8C                                   l5563 25BC  
                                 l5571 25F2                                   l5555 2588  
                                 l5539 242A                                   l5547 251C  
                                 l5491 40EC                                   l5459 464E  
                                 l5643 2F30                                   l5635 2E96  
                                 l5627 2E0A                                   l5619 2DAA  
                                 l5715 28C6                                   l5707 287E  
                                 l5811 01AA                                   l5803 0138  
                                 l6099 3BD8                                   l6371 49C0  
                                 l4931 1926                                   l4923 1882  
                                 l4915 17D2                                   l4907 1720  
                                 l6259 2030                                   l6347 4F54  
                                 l6339 4F0E                                   l6363 4CA4  
                                 l6355 4C52                                   l6267 5412  
                                 l6531 33EA                                   l6523 3384  
                                 l6515 3354                                   l6507 45DC  
                                 l4659 5626                                   l6611 51D2  
                                 l6285 2BDA                                   l6277 2B86  
                                 l4861 58C6                                   l6453 3B02  
                                 l6445 3AA8                                   l6437 3A0A  
                                 l5469 5454                                   l5741 3730  
                                 l5725 36AE                                   l5389 3988  
                                 l5397 3C9A                                   l5565 25CE  
                                 l5549 2536                                   l5557 2596  
                                 l5581 3526                                   l5493 40FE  
                                 l5485 4092                                   l5645 2F4A  
                                 l5637 2E9C                                   l5629 2E14  
                                 l5709 289A                                   l5661 2670  
                                 l5653 261C                                   l5901 0890  
                                 l5821 0236                                   l5813 01B8  
                                 l5805 016E                                   l6381 4A22  
                                 l6373 49EA                                   l6701 0C0A  
                                 l4925 18AA                                   l4917 17FA  
                                 l4909 174E                                   l6197 213E  
                                 l6349 4F60                                   l6365 4CB4  
                                 l6269 5426                                   l6541 3456  
                                 l6533 3404                                   l6525 3398  
                                 l6517 3368                                   l6509 45EE  
                                 l6621 51DC                                   l6613 51D4  
                                 l6605 51B8                                   l6295 2C16  
                                 l6279 2BAA                                   l4863 58CA  
                                 l6455 3B08                                   l6439 3A62  
                                 l6391 5234                                   l5751 37D8  
                                 l5743 3764                                   l5735 370A  
                                 l5727 36CA                                   l5719 3692  
                                 l5399 3CBA                                   l5567 25DA  
                                 l5559 25A8                                   l5583 352E  
                                 l5575 34FA                                   l5495 413C  
                                 l5487 40A0                                   l5479 405C  
                                 l5647 2F64                                   l5639 2F00  
                                 l5671 26B0                                   l5663 2678  
                                 l5655 262A                                   l5911 0948  
                                 l5903 08DA                                   l5831 02CC  
                                 l5823 0268                                   l5807 017C  
                                 l6383 4A32                                   l6375 49FE  
                                 l6471 5532                                   l6463 54F0  
                                 l6711 0CD8                                   l6703 0C2A  
                                 l4927 18D8                                   l4919 182A  
                                 l6199 2158                                   l6367 4CD4  
                                 l6359 4C70                                   l6551 34E6  
                                 l6543 3472                                   l6535 340A  
                                 l6527 33A6                                   l6519 3378  
                                 l6631 5218                                   l6623 51DE  
                                 l6615 51D6                                   l6607 51CE  
                                 l6297 2C3A                                   l6289 2BE6  
                                 l6641 5364                                   l4865 58D4  
                                 l6457 3B0C                                   l6449 3AC2  
                                 l6481 560A                                   l6561 492E  
                                 l6553 4910                                   l6393 5242  
                                 l5753 37EA                                   l5737 3720  
                                 l5729 3700                                   l5569 25E2  
                                 l5593 35A4                                   l5585 3542  
                                 l5577 350C                                   l5489 40D0  
                                 l5649 2F72                                   l5681 2724  
                                 l5673 26B8                                   l5665 2698  
                                 l5657 262C                                   l5913 095C  
                                 l5841 03B8                                   l5833 0314  
                                 l5817 0200                                   l5809 018A  
                                 l5761 0012                                   l6385 4A42  
                                 l6377 4A0A                                   l6465 54F0  
                                 l6721 0DC0                                   l6713 0D16  
                                 l6705 0C58                                   l4929 1900  
                                 l4881 1520                                   l6369 4CE0  
                                 l6545 347E                                   l6537 341C  
                                 l6529 33DC                                   l6633 521A  
                                 l6625 51E0                                   l6617 51D8  
                                 l6609 51D0                                   l6801 2FBE  
                                 l4859 58C2                                   l6475 55CE  
                                 l6571 4966                                   l6563 493C  
                                 l6555 4914                                   l6395 5246  
                                 l5755 37FC                                   l5747 379A  
                                 l5739 3728                                   l5499 53A4  
                                 l5595 35B8                                   l5587 354A  
                                 l5579 3514                                   l5683 2736  
                                 l5691 2796                                   l5675 26D4  
                                 l5667 26A0                                   l5659 2646  
                                 l5907 0916                                   l5851 04E2  
                                 l5843 043A                                   l5827 0284  
                                 l5819 0212                                   l5771 0066  
                                 l5763 0036                                   l5923 0982  
                                 l6387 4A5E                                   l6379 4A12  
                                 l6491 56E4                                   l6467 5508  
                                 l6459 5874                                   l6731 0F04  
                                 l6723 0DE2                                   l6715 0D38  
                                 l6707 0C8E                                   l6651 09D0  
                                 l4891 15F8                                   l4883 1548  
                                 l4875 14C6                                   l6547 34B2  
                                 l6539 343A                                   l6635 521C  
                                 l6627 5210                                   l6619 51DA  
                                 l6811 2FF2                                   l6803 2FC2  
                                 l6637 5346                                   l6477 55E0  
                                 l6573 4974                                   l6581 499E  
                                 l6565 4944                                   l6557 4922  
                                 l6397 5258                                   l6389 5220  
                                 l6485 50E4                                   l5597 35BC  
                                 l5589 3558                                   l5693 27A6  
                                 l5677 26E4                                   l5669 26AA  
                                 l5925 09A6                                   l5909 093A  
                                 l5917 0968                                   l5837 034C  
                                 l5829 02A8                                   l5773 0068  
                                 l5765 0044                                   l5941 5286  
                                 l6469 551E                                   l6741 0F5E  
                                 l6725 0E10                                   l6717 0D66  
                                 l6709 0CBC                                   l6733 0F12  
                                 l6661 0A44                                   l6653 09DC  
                                 l4893 1628                                   l4885 1578  
                                 l4877 14CA                                   l6549 34E2  
                                 l6645 58D8                                   l6493 4532  
                                 l6629 5214                                   l6821 3082  
                                 l6813 3006                                   l6805 2FCE  
                                 l6591 4476                                   l6479 5602  
                                 l6583 49AE                                   l6575 498A  
                                 l6567 4956                                   l6559 492A  
                                 l6399 5268                                   l5599 35DA  
                                 l5695 27AC                                   l5687 2770  
                                 l5919 0976                                   l5871 0640  
                                 l5863 0598                                   l5855 051E  
                                 l5847 0472                                   l5839 0382  
                                 l5791 0092                                   l5783 0086  
                                 l5775 007A                                   l5767 0054  
                                 l5943 528E                                   l5951 5808  
                                 l6751 0FB2                                   l6743 0F7A  
                                 l6735 0F2E                                   l6727 0E56  
                                 l6719 0D82                                   l6671 0A9C  
                                 l6663 0A56                                   l6655 09F2  
                                 l4895 1650                                   l4887 15A0  
                                 l4879 14F0                                   l6647 58DE  
                                 l6495 454E                                   l6831 310E  
                                 l6823 308A                                   l6815 304E  
                                 l6807 2FDA                                   l6593 4486  
                                 l6585 49B6                                   l6577 4992  
                                 l6569 495E                                   l5961 31D2  
                                 l5697 27B2                                   l5689 2782  
                                 l5881 072C                                   l5873 0676  
                                 l5865 05BC                                   l5857 0542  
                                 l5849 0496                                   l5769 0058  
                                 l5945 529C                                   l6489 56DC  
                                 l6753 0FB6                                   l6745 0F80  
                                 l6737 0F38                                   l6729 0E8A  
                                 l6673 0AB2                                   l6665 0A66  
                                 l6681 0B00                                   l6657 0A0A  
                                 l6649 09BA                                   l4897 1676  
                                 l4889 15D0                                   l6497 4558  
                                 l6761 500A                                   l6841 314E  
                                 l6833 311C                                   l6825 309E  
                                 l6817 3062                                   l6809 2FE6  
                                 l6595 44A2                                   l6579 4998  
                                 l5971 32C4                                   l5963 3200  
                                 l5955 318C                                   l5699 2810  
                                 l5883 0750                                   l5875 06D0  
                                 l5867 0608                                   l5859 0578  
                                 l5795 009E                                   l5787 008C  
                                 l5779 0080                                   l5947 52C2  
                                 l6755 0FD4                                   l6747 0F90  
                                 l6691 0B7A                                   l6683 0B2E  
                                 l6675 0AC2                                   l6667 0A7C  
                                 l6659 0A16                                   l6739 0F48  
                                 l4899 16A4                                   l6499 456A  
                                 l6771 5050                                   l6763 5012  
                                 l6851 316A                                   l6843 3150  
                                 l6835 313A                                   l6827 30B2  
                                 l6819 3076                                   l6597 44BE  
                                 l6589 445A                                   l5981 3346  
                                 l5973 32C6                                   l5965 3232  
                                 l5957 319C                                   l5885 0766  
                                 l5893 07EE                                   l5797 00F2  
                                 l5949 57FE                                   l6757 0FF0  
                                 l6749 0FA0                                   l6685 0B40  
                                 l6693 0B94                                   l6677 0AD2  
                                 l6669 0A8C                                   l6781 5096  
                                 l6773 505A                                   l6765 5024  
                                 l6853 3172                                   l6845 3152  
                                 l6837 3148                                   l6829 30E2  
                                 l6599 44EE                                   l5991 4DB6  
                                 l5983 4D7E                                   l5967 3262  
                                 l5975 32D0                                   l5959 31CC  
                                 l5895 0824                                   l5887 0774  
                                 l5879 0708                                   l5799 0112  
                                 l6943 00C4                                   l6759 1000  
                                 l6687 0B50                                   l6695 0BAC  
                                 l6679 0AE8                                   l6783 50D6  
                                 l6775 506C                                   l6767 5028  
                                 l6847 3162                                   l6839 314C  
                                 l5993 4DD4                                   l5985 4D94  
                                 l5977 32E6                                   l5969 3292  
                                 l6945 374E                                   l5897 085A  
                                 l5889 07B2                                   l6697 0BDA  
                                 l6689 0B5E                                   l6785 50DE  
                                 l6769 5036                                   l6849 3166  
                                 l5995 4DE4                                   l5987 4D9C  
                                 l5979 3314                                   l5899 0880  
                                 l6699 0BFA                                   l6779 5078  
                                 l6795 2F9C                                   l5997 4DEE  
                                 l5989 4DA8                                   l6797 2FB2  
                                 l5999 194E                                   l6799 2FBA  
                                 STR_1 7D88                                   STR_2 7C70  
                                 STR_3 7D66                                   STR_4 7E0D  
                                 STR_5 7DEC                                   STR_6 7BA1  
                                 STR_7 7BEB                                   STR_8 7CAD  
                                 STR_9 7E66                                   _PIE1 000F9D  
                                 _PIE2 000FA0                                   u6100 583A  
                                 u5220 55C6                                   u6101 5836  
                                 u5221 55C0                                   u6110 569A  
                                 u5230 55C8                                   u6111 5696  
                                 u6120 54D2                                   u6200 56B6  
                                 u7000 276C                                   u6201 56B2  
                                 u6130 54E2                                   u6210 57BE  
                                 u7010 2782                                   u6131 54DE  
                                 u6211 57B8                                   u7011 277E  
                                 u7100 3700                                   u6300 3834  
                                 u6220 57C0                                   u6140 5786  
                                 u7020 27EA                                   u7101 36FC  
                                 u6301 3830                                   u6141 5780  
                                 u7110 371C                                   u6310 3866  
                                 u6230 574E                                   u6150 5788  
                                 u7030 282C                                   u7111 3718  
                                 u6127 54C8                                   u6311 3862  
                                 u6231 5748                                   u7031 2828  
                                 u7120 37D2                                   u6160 47A8  
                                 u6400 3D34                                   u6240 5750  
                                 u7040 284A                                   u7200 017C  
                                 u8000 1EC0                                   u7121 37CC  
                                 u6161 47A4                                   u6321 3890  
                                 u6401 3D30                                   u7041 2846  
                                 u7025 27D8                                   u7201 0178  
                                 u8001 1EBC                                   u7130 37D4  
                                 u6090 58BC                                   u6170 47CA  
                                 u6330 38B4                                   u6410 3D62  
                                 u6250 5318                                   u7050 2864  
                                 u7210 01F8                                   u8010 1F04  
                                 u5450 4D2E                                   u6091 58B8  
                                 u6171 47C6                                   u6331 38B0  
                                 u6411 3D5E                                   u6251 5312  
                                 u7051 2860                                   u7211 01F2  
                                 u8011 1F00                                   u5451 4D28  
                                 u8100 2C6A                                   u6500 5468  
                                 u7140 37EA                                   u6180 4820  
                                 u6340 38DE                                   u6420 3DAA  
                                 u6260 531A                                   u7060 287E  
                                 u7300 0542                                   u7220 01FA  
                                 u8020 2054                                   u4900 3F96  
                                 u5460 4D30                                   u5380 5626  
                                 u8101 2C66                                   u6501 5464  
                                 u7141 37E6                                   u6181 481C  
                                 u6341 38DA                                   u6421 3DA6  
                                 u7061 287A                                   u7301 053E  
                                 u8021 204E                                   u4901 3F92  
                                 u5381 5622                                   u8110 2CAE  
                                 u6510 5496                                   u7150 37FC  
                                 u6190 482E                                   u6350 391E  
                                 u6270 5330                                   u7070 288C  
                                 u7310 05BC                                   u7230 0212  
                                 u8030 2056                                   u4910 3FB2  
                                 u5470 4D72                                   u8111 2CAA  
                                 u6511 5492                                   u7151 37F8  
                                 u6191 482A                                   u6351 391A  
                                 u6431 428A                                   u6271 532C  
                                 u7071 2888                                   u7311 05B8  
                                 u7231 020E                                   u4911 3FAE  
                                 u5471 4D6C                                   u8120 2CD2  
                                 u7400 32E6                                   u6280 57F6  
                                 u6360 3968                                   u6600 236E  
                                 u6520 4086                                   u6440 42AE  
                                 u7080 289A                                   u7320 0676  
                                 u7240 0236                                   u7160 0036  
                                 u4920 3FD0                                   u8200 4C84  
                                 u8040 5412                                   u5480 4D74  
                                 u8121 2CCE                                   u7401 32E2  
                                 u6281 57F0                                   u6361 3964  
                                 u6601 2368                                   u6521 4082  
                                 u6441 42AA                                   u7081 2896  
                                 u7321 0672                                   u7241 0232  
                                 u7161 0032                                   u4921 3FCC  
                                 u8201 4C80                                   u8041 540E  
                                 u8130 2D02                                   u8050 2B86  
                                 u7410 4D94                                   u6290 57F8  
                                 u7090 36CA                                   u6370 3C9A  
                                 u6610 2370                                   u6530 40C0  
                                 u6450 42D8                                   u7330 072C  
                                 u7250 02A8                                   u7170 0104  
                                 u8210 49FE                                   u4930 3FEC  
                                 u8131 2CFE                                   u8051 2B82  
                                 u7411 4D90                                   u7091 36C6  
                                 u6371 3C96                                   u6451 42D4  
                                 u7331 0728                                   u7251 02A4  
                                 u7171 0100                                   u8211 49FA  
                                 u4931 3FE8                                   u8140 2D32  
                                 u8060 2BAA                                   u8300 3A78  
                                 u7420 4DB6                                   u6380 3CCC  
                                 u6700 2588                                   u6620 2386  
                                 u6540 40D0                                   u6460 4318  
                                 u7340 0750                                   u7260 02CC  
                                 u7180 0112                                   u8220 4A5E  
                                 u4940 4046                                   u5900 3E16  
                                 u8141 2D2E                                   u8061 2BA6  
                                 u8301 3A74                                   u7421 4DB2  
                                 u6381 3CC8                                   u6701 2584  
                                 u6621 2382                                   u6541 40CC  
                                 u6461 4314                                   u7341 074C  
                                 u7261 02C8                                   u7181 010E  
                                 u8221 4A5A                                   u4941 4040  
                                 u5901 3E12                                   u8150 2D62  
                                 u8070 2BDA                                   u8310 3ABE  
                                 u7430 4DD4                                   u8230 5242  
                                 u6390 3D0A                                   u6710 2596  
                                 u6630 23B4                                   u6550 40EC  
                                 u6470 4624                                   u7350 0824  
                                 u7270 0382                                   u7190 0138  
                                 u4950 4048                                   u5910 3E54  
                                 u8151 2D5E                                   u8071 2BD6  
                                 u8311 3ABA                                   u7431 4DD0  
                                 u8231 523E                                   u6391 3D06  
                                 u6711 2592                                   u6631 23B0  
                                 u6551 40E8                                   u6471 4620  
                                 u7351 0820                                   u7271 037E  
                                 u7191 0134                                   u5911 3E50  
                                 u8160 2D92                                   u8080 2C0A  
                                 u8320 3B1E                                   u8240 5268  
                                 u6720 25A8                                   u6640 23D0  
                                 u6800 35DA                                   u6560 40FE  
                                 u6480 464E                                   u7360 085A  
                                 u7280 03B8                                   u7440 1968  
                                 u8400 3378                                   u5920 3EDC  
                                 u8161 2D8E                                   u8081 2C06  
                                 u8321 3B1A                                   u8241 5264  
                                 u6721 25A4                                   u6641 23CC  
                                 u6801 35D6                                   u6561 40FA  
                                 u6537 40B6                                   u6481 464A  
                                 u7361 0856                                   u7281 03B4  
                                 u7505 1B16                                   u7441 1964  
                                 u8401 3374                                   u5921 3ED8  
                                 u8090 2C3A                                   u6730 25B6  
                                 u6650 23FE                                   u6810 3606  
                                 u6570 413C                                   u6490 467C  
                                 u7370 093A                                   u7290 0496  
                                 u8330 588E                                   u4890 3F66  
                                 u8170 4F28                                   u8250 4BC6  
                                 u8410 343A                                   u8091 2C36  
                                 u6731 25B2                                   u6651 23FA  
                                 u6571 4138                                   u6491 4678  
                                 u7371 0936                                   u7291 0492  
                                 u7515 1B52                                   u8331 5888  
                                 u4891 3F62                                   u8171 4F24  
                                 u8251 4BC2                                   u8411 3436  
                                 u8500 5360                                   u8260 516C  
                                 u6740 25CE                                   u6660 240C  
                                 u6820 3640                                   u6580 415C  
                                 u6900 2F64                                   u7380 52DE  
                                 u7540 102C                                   u8340 5890  
                                 u8180 4F7E                                   u8420 3456  
                                 u8501 535C                                   u8261 5168  
                                 u6741 25CA                                   u6661 2408  
                                 u6821 363C                                   u6901 2F60  
                                 u7381 52DA                                   u7605 11DA  
                                 u7541 1028                                   u7525 1B92  
                                 u8181 4F7A                                   u8421 3452  
                                 u8270 51A6                                   u7390 3200  
                                 u6590 53B6                                   u6670 2536  
                                 u6830 364E                                   u6910 2F72  
                                 u8350 5508                                   u8510 09D0  
                                 u8190 4C6C                                   u8430 3472  
                                 u8271 51A2                                   u7391 31FC  
                                 u6591 53B2                                   u6671 2532  
                                 u6831 364A                                   u6751 3504  
                                 u6575 412C                                   u6911 2F6E  
                                 u7615 121A                                   u7535 1BD2  
                                 u7455 199A                                   u8351 5504  
                                 u8511 09CC                                   u8191 4C68  
                                 u8431 346E                                   u8280 39C4  
                                 u8360 55E0                                   u8440 4922  
                                 u6680 2554                                   u6840 3688  
                                 u6760 3526                                   u6920 262A  
                                 u8600 0AD2                                   u8520 09F2  
                                 u8281 39C0                                   u8361 55DC  
                                 u8441 491E                                   u6681 2550  
                                 u6841 3684                                   u6817 35FC  
                                 u6761 3522                                   u6577 4122  
                                 u6921 2626                                   u7625 1260  
                                 u7705 2982                                   u7465 19DA  
                                 u8601 0ACE                                   u8521 09EE  
                                 u8290 3A06                                   u8450 493C  
                                 u6690 256E                                   u6770 3558  
                                 u6850 2DAA                                   u6930 2646  
                                 u8610 0B2E                                   u8530 0A0A  
                                 u8370 454E                                   u8291 3A02  
                                 u8451 4938                                   u6691 256A  
                                 u6771 3554                                   u6587 4152  
                                 u6851 2DA6                                   u6931 2642  
                                 u7635 12D8                                   u7555 105E  
                                 u7715 29C2                                   u7475 1A1A  
                                 u8611 0B2A                                   u8531 0A06  
                                 u8371 454A                                   u7900 4746  
                                 u8460 4956                                   u6780 3576  
                                 u6860 2DC6                                   u6940 2670  
                                 u7660 4876                                   u8700 0F7A  
                                 u8620 0B40                                   u8540 0A44  
                                 u7820 43A6                                   u8380 456A  
                                 u7901 4742                                   u8461 4952  
                                 u6781 3572                                   u6861 2DC2  
                                 u6941 266C                                   u7805 41C8  
                                 u7645 1318                                   u7565 109E  
                                 u7725 2A02                                   u7485 1A96  
                                 u7661 4872                                   u8701 0F76  
                                 u8621 0B3C                                   u8541 0A40  
                                 u7821 43A2                                   u8381 4566  
                                 u7910 4762                                   u8470 4974  
                                 u6790 35A0                                   u6870 2F12  
                                 u6950 26D4                                   u7750 3B3A  
                                 u8710 0FD4                                   u8630 0B50  
                                 u8550 0A56                                   u7830 4448  
                                 u8390 3368                                   u7911 475E  
                                 u8471 4970                                   u6791 359C  
                                 u6871 2F0E                                   u6951 26D0  
                                 u7815 420A                                   u7751 3B36  
                                 u7655 1358                                   u7575 10DE  
                                 u7735 2A42                                   u7495 1AD6  
                                 u8711 0FD0                                   u8631 0B4C  
                                 u8551 0A52                                   u7831 4444  
                                 u8391 3364                                   u7920 4788  
                                 u8480 498A                                   u7840 4B38  
                                 u6880 2F30                                   u6960 271E  
                                 u7680 290A                                   u8720 0FF0  
                                 u8640 0BDA                                   u8560 0A66  
                                 u8800 3048                                   u7921 4784  
                                 u8481 4986                                   u7841 4B34  
                                 u6881 2F2C                                   u6961 2718  
                                 u7585 111E                                   u7745 2A82  
                                 u7681 2906                                   u8721 0FEC  
                                 u8641 0BD6                                   u8561 0A62  
                                 u8801 3042                                   u8490 49AE  
                                 u7850 4B5A                                   u6890 2F4A  
                                 u6970 2720                                   u8650 0C0A  
                                 u8570 0A8C                                   u7930 20F4  
                                 u8730 5024                                   u8810 304A  
                                 u8491 49AA                                   u7851 4B56  
                                 u6891 2F46                                   u7595 115E  
                                 u7675 48A8                                   u8651 0C06  
                                 u8571 0A88                                   u7931 20F0  
                                 u8731 5020                                   u7860 4B82  
                                 u6980 2736                                   u8660 0CBC  
                                 u8580 0A9C                                   u7940 2158  
                                 u8740 5050                                   u8820 3076  
                                 u7861 4B7E                                   u6981 2732  
                                 u7765 3B72                                   u8661 0CB8  
                                 u8581 0A98                                   u7941 2154  
                                 u8741 504C                                   u8821 3072  
                                 u7870 46E8                                   u6990 276A  
                                 u7790 4190                                   u8670 0D66  
                                 u8590 0AC2                                   u7950 21AE  
                                 u8750 506C                                   u8830 30B2  
                                 u7871 46E4                                   u6991 2764  
                                 u7791 418C                                   u7775 3BB8  
                                 u7695 2942                                   u8671 0D62  
                                 u8591 0ABE                                   u7951 21AA  
                                 u8751 5068                                   u8831 30AE  
                                 u7880 4702                                   u8680 0E10  
                                 u7960 2288                                   u8760 5096  
                                 u7881 46FE                                   u7785 3BF8  
                                 u8681 0E0C                                   u7961 2284  
                                 u8761 5092                                   u7890 4728  
                                 u8690 0F5E                                   u7970 2300  
                                 u8770 50D6                                   u7891 4724  
                                 u8691 0F5A                                   u7971 22FC  
                                 u8907 3412                                   u8771 50D2  
                                 u7980 1E1E                                   u8917 3348  
                                 u7981 1E1A                                   u7990 1E32  
                                 u8790 2FB2                                   u8927 452A  
                                 u7991 1E2E                                   u8791 2FAE  
                                 u8887 317A                                   u8897 45E4  
              adf4351_write_latch@mask 0015             __end_of_PIN_LED_PTT_ACTIVE 79A1  
                                 abs@a 001F                                   _dbuf 01BD  
                                 gcd@a 0016                                   gcd@b 001A  
                                 gcd@c 001E                                   _atoi 3692  
                                 _ctoa 53A4                                   _main 2F9C  
                                 _dtoa 233E                                   _prec 0069  
                                 _nout 0180                                   pad@i 0020  
                                 pad@p 001D                                   fsr1h 000FE2  
                                 fsr2h 000FDA                                   indf1 000FE7  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 pad@w 0022                                   fsr2l 000FD9  
                                 _stoa 34FA                                   btemp 0073  
                                 _utoa 2D9C                                   _xtoa 261C  
                                 prodh 000FF4                                   prodl 000FF3  
                __end_of_PIN_PA_ENABLE 79A3                                   start 000E  
                        __CFG_IESO$OFF 000000                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000                 __end_of_PIN_LED_CPU_OK 7999  
                         _adc_cfg_gpio 5346                                  ??_abs 0021  
                                ??_gcd 001E                                  ??_pad 001F  
                      read_switch@fsw0 0010                        read_switch@fsw1 0011  
            _KTY82_222_Adc2Temperature 55CE                         ?_update_switch 0001  
                      __end_of___aodiv 39AA                                  ?_atoi 0014  
                                ?_ctoa 0024                                  ?_main 0001  
                                ?_dtoa 0027                        __end_of___aomod 3DEC  
                      __end_of___awdiv 479A                                  STR_10 7E4A  
                                STR_11 7EAE                                  STR_20 7E97  
                                STR_12 7CE4                                  STR_21 7FF9  
                                STR_13 7C33                                  STR_22 7FFC  
                                STR_30 7FD4                                  STR_14 7AB2  
                                STR_23 7EEA                                  STR_31 7DCB  
                                STR_15 7B46                                  STR_32 7FC8  
                                STR_24 7F95                                  STR_40 7F66  
                                STR_16 7A1B                                  STR_41 7FCE  
                                STR_25 7FC2                                  STR_33 7F56  
                                STR_17 7D13                                  STR_26 7F86  
                                STR_50 7F10                                  STR_18 7EC4  
                                STR_42 7E2D                                  STR_34 7DAA  
                                STR_51 7FED                                  STR_35 7FD9  
                                STR_19 7FB9                                  STR_43 7F22  
                                STR_27 7D3F                                  STR_44 7FC2  
                                STR_60 7FF3                                  STR_28 7FAF  
                                STR_36 7E7F                        __end_of___awmod 49C0  
                                STR_53 7FED                                  STR_37 7FE6  
                                STR_45 7FDE                                  STR_29 7FA3  
                                STR_62 7FF3                                  STR_38 7F76  
                                STR_46 7F34                                  STR_71 7FEA  
                                STR_55 7FF0                                  STR_39 7FE2  
                                STR_47 7EFD                                  STR_48 7ED7  
                                STR_57 7FF0                                  STR_65 7FF6  
                                STR_49 7F45                                  STR_67 7FF6  
                                STR_69 7FEA                                  ?_stoa 0012  
                      __end_of___lldiv 4BB6                                  ?_utoa 0026  
                      __end_of___lodiv 4374                        ___awdiv@divisor 000F  
                                ?_xtoa 0024                        __end_of___llmod 4E06  
                      __end_of___lomod 46D6                                  i2l201 4E9C  
                                i2l202 4F0C                                  i2l203 4EB2  
                                i2l223 4FF6                        ___awdiv@counter 0011  
                                _RCREG 000FAE                           vfpfcnvrt@fmt 004D  
                         vfpfcnvrt@llu 008F                                  _SPBRG 000FAF  
                                _PORTA 000F80                                  _PORTB 000F81  
                                _PORTC 000F82                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TXREG 000FAD                       __end_of_PIN_FSW0 799D  
                     __end_of_PIN_FSW1 799B                          __CFG_PWRT$OFF 000000  
             adf4351_write_latch@value 000D                       __end_of_PIN_TEMP 79AD  
                        __CFG_WRT0$OFF 000000                       __end_of_PIN_RF_R 79A9  
                     __end_of_PIN_RF_V 79AB                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                    ___lmul@multiplicand 001B  
                        __CFG_WRT3$OFF 000000                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                   irq_set_handler@udata 000F  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000     KTY82_222_Adc2Temperature@adc_value 0017  
                         ?_init_switch 0001                          __CFG_WRTB$OFF 000000  
                         apply_ipc@ipc 00D7                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                  __end_of_PIN_PTT_INPUT 799F  
                       __CFG_EBTRB$OFF 000000                                  _g_ipc 00EB  
                                _flags 006B                        __end_of_pa_mute 4C52  
                                _fputc 5826                        __end_of_isalpha 5756  
                                _fputs 5658                        __end_of_isdigit 57FE  
                 __size_of_check_usart 0658                                  atoi@n 0021  
                                pad@fp 0019                                  atoi@s 0014  
                                _width 0067                                  ctoa@c 0026  
                         ?_read_switch 0001                                  ctoa@w 0027  
                                dtoa@d 0029                                  dtoa@i 0049  
                                dtoa@n 0041                                  dtoa@p 003B  
                                dtoa@s 003F                                  dtoa@w 003D  
                      __end_of_islower 578E                        __end_of_isspace 54A2  
                       _PIN_POWER_GOOD 798F                        __end_of_isupper 57C6  
                                pclath 000FFA                                  tablat 000FF5  
                                plusw1 000FE3                                  plusw2 000FDB  
                                stoa@i 001E                                  stoa@l 0026  
                                stoa@p 0024                                  stoa@s 0014  
                                stoa@w 0020                                  ttemp5 0074  
                                ttemp6 0077                                  ttemp7 007B  
                      __end_of_putchar 58AC                                  utoa@d 0028  
                                utoa@i 0044                                  utoa@n 003C  
                                utoa@p 0038                                  utoa@w 003A  
                                status 000FD8                                  wtemp8 0074  
                                xtoa@c 0049                                  xtoa@d 0026  
                                xtoa@i 0047                                  xtoa@n 003F  
                                xtoa@p 003B                                  xtoa@w 003D  
                                xtoa@x 002E                        __end_of_strncmp 4176  
                      __end_of_toupper 5346                       ___lodiv@dividend 000D  
                     ?_adf4351_default 000D                         __CFG_PBADEN$ON 000000  
                         _toupper$2949 0019                 _g_cmd_debounce_counter 00ED  
                      __initialization 4E06           KTY82_222_Adc2Temperature@res 0019  
                         __end_of_atoi 3822                           __end_of_ctoa 53FE  
                         __end_of_main 318C                           __end_of_dtoa 261C  
                         __end_of_stoa 3692                           __end_of_utoa 2F9C  
                         __end_of_xtoa 28F0      __size_of_adf4351_set_rfout_enable 0052  
                usart_rx_irq_handler@c 0005              ?_adf4351_set_rfout_enable 00CD  
                               ??_atoi 0016                                 ??_ctoa 0027  
                               ??_main 00E0                                 ??_dtoa 0031  
                usart_init@spbrg_value 0034                                 ??_stoa 0016  
                               ??_utoa 0030                                 ??_xtoa 002F  
                        __activetblptr 000002                fp__usart_rx_irq_handler 0000  
                      adc_voltage@gpio 0030                       ___lodiv@quotient 001D  
                     ?_irq_set_handler 000D                      handle_cmd@timeout 00DC  
              ??_adf4351_calc_counters 0067                 __end_of_PIN_POWER_GOOD 7991  
                               ?_fputc 000E                       ___llmod@dividend 000D  
                               ?_fputs 0012                                 _ADRESH 000FC4  
                               _ADRESL 000FC3                       ___awdiv@dividend 000D  
                    _PIN_PTT_INPUT_DEF 79F8                       __end_of_adc_init 58D8  
                               i2l5101 4FAC                                 i2l5103 4FC0  
                               i2l5105 4FE2                                 i2l5107 4FF0  
                               i2l5099 4F9E                                 i2l4851 4EC0  
                               i2l4853 4EC8                                 i2l4845 4E8A  
                               i2l4855 4EF4                                 i2l4857 4F04  
                               _OSCCON 000FD3                          vfpfcnvrt@done 0082  
                       __CFG_WDTPS$256 000000                                 _SPBRGH 000FB0  
                       __CFG_XINST$OFF 000000                _adf4351_calc_rcnt_block 205A  
                         vfprintf@cfmt 0065                                 ___lmul 514E  
                            ??___aodiv 001D                              ??___aomod 001D  
                               ___wmul 584E                              ??___awdiv 0011  
                       __CFG_STVREN$ON 000000                              ??___awmod 0011  
                      ??_update_switch 0067                              ??___lldiv 002B  
                            ??___lodiv 001D                              ??___llmod 0015  
                            ??___lomod 001D                                 _g_pout 00E9  
          __size_of_global_irq_handler 5002                       _check_usart$2056 0208  
                     _check_usart$3214 020E                                 _memset 39AA  
                               clear_0 4E5E                                 clear_1 4E6A  
                               clear_2 4E76                       ___awdiv@quotient 0013  
                      ___awmod@divisor 000F            ?_adf4351_calc_vco_core_freq 000D  
                      ___awmod@counter 0011                                 _printf 57FE  
                               pad@buf 001B           __size_of_adf4351_write_latch 01C4  
                               ctoa@fp 0024                                 dtoa@fp 0027  
                               _strlen 54A2                        _PIN_SIO_CLK_DEF 7A02  
                            ??_pa_mute 00D1                     _g_irq_handler_info 00F0  
                               fputc@c 000E                     _adf4351_write_reg0 4176  
                   _adf4351_write_reg1 3B20                     _adf4351_write_reg2 1012  
                   _adf4351_write_reg3 28F0                     _adf4351_write_reg4 194E  
                   _adf4351_write_reg5 485C                                 fputs@c 0016  
                               fputs@i 0017                           __pdataCOMRAM 0072  
                               fputs@s 0012                              ??_isalpha 000F  
                            ??_isdigit 000F                     _PIN_LED_CPU_OK_DEF 79D5  
                            ??_islower 000F                           __mediumconst 717E  
                            ??_isspace 000F                                 tblptrh 000FF7  
                            ??_isupper 000F                                 tblptrl 000FF6  
                               tblptru 000FF8              __end_of_PIN_PTT_INPUT_DEF 79FD  
                               stoa@cp 0022                                 stoa@fp 0012  
                     __end_of_vfprintf 52E8                                 utoa@fp 0026  
                            ??_putchar 0014                                 xtoa@fp 0024  
                  ?_adf4351_write_reg0 00BB                    ?_adf4351_write_reg1 00BB  
                  ?_adf4351_write_reg2 00BB                    ?_adf4351_write_reg3 00BB  
                            ??_strncmp 0013                    ?_adf4351_write_reg4 00BB  
                  ?_adf4351_write_reg5 00BB                              ??_toupper 0015  
                           __accesstop 0080                __end_of__initialization 4E7C  
                        ___rparam_used 000001                      ?_adf4351_get_lock 000D  
             __end_of_PIN_LED_ADF_LOCK 7997                          ?_adf4351_init 0019  
                       __pcstackCOMRAM 0001                           __pidataBANK0 58E6  
                         __pidataBANK1 58EF                     ??_adf4351_get_lock 000F  
                 ??_adf4351_write_reg0 00BD                   ??_adf4351_write_reg1 00BD  
                 ??_adf4351_write_reg2 00BD                   ??_adf4351_write_reg3 00BD  
                 ??_adf4351_write_reg4 00BD                   ??_adf4351_write_reg5 00BD  
                        __end_of_fputc 584E                          __end_of_fputs 569C  
                           _adc_sample 5220                        _PIN_VOLTAGE_DEF 79E4  
        __size_of_usart_rx_irq_handler 0084                      ?_adf4351_set_freq 00D1  
                    ?_adf4351_set_mode 00CF                      ?_adf4351_set_tune 00CF  
                   ??_adf4351_set_freq 00D7                     ??_adf4351_set_mode 00D3  
                   ??_adf4351_set_tune 0067                     __size_of_apply_ipc 003E  
                              ??_fputc 0012                                ??_fputs 0016  
                 __size_of_init_switch 000E                             __pbssBANK0 00F0  
                           __pbssBANK1 0100                        check_usart@temp 0212  
                 __size_of_read_switch 0090                     __size_of_pa_update 006C  
                   __size_of_pa_unmute 00D4              ??_adf4351_calc_rcnt_block 0067  
         __end_of_PIN_LED_ADF_LOCK_DEF 79D5                         ??_adf4351_init 0023  
                              ?___lmul 0017                __end_of_PIN_SIO_CLK_DEF 7A07  
                              ?___wmul 000D                     _PIN_LED_PTT_ACTIVE 799F  
                              ?_memset 000D                             _handle_cmd 3350  
                       ___lmul@product 001F                         usart_init@baud 0030  
        adf4351_calc_rcnt_block@bscdiv 00BD                                ?_printf 0097  
                            ?_adc_init 0001                           adc_sample@ch 0015  
                              ?_strlen 000D                          ??_adc_voltage 0034  
                   __size_of_vfpfcnvrt 09A8                                _OSCTUNE 000F9B  
                   __end_of_PIN_ADF_CE 79B5                     __end_of_PIN_ADF_LE 79B7  
               __size_of_adf4351_setup 004A                       ___lomod@dividend 000D  
               irq_set_handler@handler 000D                   _g_cpu_led_update_cnt 0184  
     __end_of_adf4351_set_rfout_enable 5450    __size_of_adf4351_calc_vco_core_freq 011C  
                           _freq_table 797F                                __Hparam 0000  
                       gpio_to_ch@gpio 000D                __end_of_PIN_VOLTAGE_DEF 79E9  
                              __Lparam 0000                             _gpio_to_ch 2B56  
                              ___aodiv 3822                      __end_of_apply_ipc 571A  
                              ___aomod 3C88                                ___awdiv 46D6  
                      __size_of___lmul 006A                                ___awmod 4910  
                              ___lldiv 4B12                        __size_of___wmul 0026  
                              ___lodiv 4284                                ___llmod 4D7E  
                              ___lomod 4606                            ?_adc_sample 0011  
                            ?_vfprintf 005F                         adc_sample@gpio 0011  
                           _init_gpios 14C6                                __pcinit 4E06  
                      __size_of_memset 0176                                __ramtop 0600  
                           ??_adc_init 000D                                __ptext0 2F9C  
                              __ptext1 51B8                                __ptext2 5614  
                              __ptext3 500A                                __ptext4 3DEC  
                              __ptext5 5078                                __ptext6 4532  
                              __ptext7 58D8                                __ptext8 4CEE  
                              __ptext9 3350                        __size_of_printf 0028  
                    __end_of_pa_update 50E4                        __size_of_strlen 004E  
                    __end_of_pa_unmute 4606                                _pa_mute 4BB6  
                         __size_of_abs 0040                           __size_of_gcd 00E6  
                         __size_of_pad 00C2                                _isalpha 571A  
                              _isdigit 57C6                      __end_of_table_220 797F  
                     ___awmod@dividend 000D                          ??_check_usart 00D9  
                              _islower 5756                                _isspace 5450  
                              _isupper 578E                       _PIN_SIO_DATA_DEF 7A07  
                              atoi@neg 001A                                _putchar 5896  
                              main@ref 00E5                                _strncmp 405C  
                       __pintcode_body 4F8C                                _toupper 52E8  
       __size_of_adf4351_calc_counters 035A                   end_of_initialization 4E7C  
        __end_of_adf4351_calc_counters 205A                           _g_usart_rpos 006F  
                         _g_usart_wpos 006D                    __end_of_adc_voltage 514E  
                     update_switch@cmd 00DF                                fputc@fp 0010  
                              memset@c 000F                                memset@k 0015  
                              memset@n 0011                                memset@s 0017  
                        __Lmediumconst 717E                    _adf4351_write_latch 318C  
                              int_func 4F8C                                fputs@fp 0014  
                  adf4351_get_lock@ctx 000D                        ___lldiv@divisor 0027  
                      ___lldiv@counter 002F                      __end_of_vfpfcnvrt 09BA  
                    _PIN_PA_ENABLE_DEF 79C6                              _RCSTAbits 000FAB  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc1 000FE6  
                              postinc2 000FDE                          _adf4351_setup 553C  
                           ??_vfprintf 0065                 _PIN_LED_PTT_ACTIVE_DEF 79CB  
             __size_of_adf4351_default 00A6                            ?_handle_cmd 0001  
                              strlen@a 000F                                strlen@s 000D  
                 ?_adf4351_write_latch 000D                   __end_of_PIN_ADF_LOCK 79B3  
                        _g_cmd_buf_pos 00F4             __end_of_PIN_POWER_GOOD_DEF 79C6  
                 __end_of_adf4351_init 4532                   _PIN_LED_ADF_LOCK_DEF 79D0  
                           _update_led 3DEC         adf4351_calc_counters@remainder 00BD  
               adf4351_write_reg0@data 00C3                 adf4351_write_reg1@data 00C3  
               adf4351_write_reg2@data 00C9                 adf4351_write_reg3@data 00C3  
               adf4351_write_reg4@data 00C7                 adf4351_write_reg5@data 00C2  
                  __end_of_check_usart 1012                    __size_of_adc_sample 0066  
             adf4351_set_tune@lownoise 00D3               __size_of_irq_set_handler 0044  
                 __end_of_PIN_FSW0_DEF 79E4                   __end_of_PIN_FSW1_DEF 79DF  
                            _TXSTAbits 000FAC                       adc_cfg_gpio@gpio 0011  
                           _usart_getc 54F0                             _usart_init 51B8  
                           _usart_putc 58AC                             _usart_tstc 5874  
            __end_of_PIN_PA_ENABLE_DEF 79CB                          _PIN_PA_ENABLE 79A1  
                          ?_gpio_to_ch 000D             __end_of_global_irq_handler 500A  
                       ?_adf4351_setup 00CD               _adf4351_set_rfout_enable 53FE  
                 __end_of_PIN_TEMP_DEF 79F8                   __end_of_PIN_SIO_DATA 79AF  
                       __end_of___lmul 51B8                   __end_of_PIN_RF_R_DEF 79EE  
                          vfpfcnvrt@ap 004F                            vfpfcnvrt@cp 0080  
                          vfpfcnvrt@fp 004B                            vfpfcnvrt@ll 0086  
                 __end_of_PIN_RF_V_DEF 79F3                         __end_of___wmul 5874  
                          ?_init_gpios 0001                  __end_of_update_switch 5078  
                          _BAUDCONbits 000FB8                          __pidataCOMRAM 58F6  
                ??_adf4351_write_latch 0011            adf4351_set_rfout_enable@ctx 00CD  
                 __end_of_PIN_USART_RX 7993                   __end_of_PIN_USART_TX 7995  
                       __end_of_memset 3B20                         __end_of_printf 5826  
                       __end_of_strlen 54F0              __size_of_adf4351_get_lock 0048  
                  start_initialization 4E06                        ___lodiv@divisor 0015  
                        _g_applied_cmd 00EF                        ___lodiv@counter 0025  
                          _adc_voltage 50E4                global_irq_handler@dummy 000C  
                     _PIN_USART_RX_DEF 79B7                            __end_of_abs 56DC  
                          __end_of_gcd 445A                       _PIN_USART_TX_DEF 79BC  
                          __end_of_pad 485C                          _PIN_PTT_INPUT 799D  
         __end_of_usart_rx_irq_handler 4F0E                    __size_of_handle_cmd 01AA  
            __size_of_adf4351_set_freq 007E              __size_of_adf4351_set_mode 009C  
                      ___llmod@divisor 0011                       __CFG_OSC$INTIO67 000000  
            __size_of_adf4351_set_tune 00AC                        ___llmod@counter 0015  
                 _adf4351_set_tune$431 00D5                            vfprintf@fmt 0061  
                             ??___lmul 001F                          ?_adc_cfg_gpio 0011  
                             ??___wmul 0011            __size_of_adf4351_write_reg0 010E  
          __size_of_adf4351_write_reg1 0168            __size_of_adf4351_write_reg2 04B4  
          __size_of_adf4351_write_reg3 0266            __size_of_adf4351_write_reg4 03B2  
          __size_of_adf4351_write_reg5 00B4                            __pdataBANK0 00E7  
                          __pdataBANK1 01E7                       __CFG_LPT1OSC$OFF 000000  
                             ??_memset 0013                             memset@dest 000D  
                             ??_printf 0067                               ??_strlen 000F  
                    __size_of_adc_init 0016                            __pbssCOMRAM 0067  
                    ??_adf4351_default 000F                          __pcstackBANK0 0080  
                        __pcstackBANK2 0200                     adf4351_default@ctx 000D  
                     check_usart@power 020A                            _check_usart 09BA  
                        ??_init_switch 0067                       ___aodiv@dividend 000D  
                          ?_update_led 0001                      irq_set_handler@id 0011  
                            _g_adf4351 0186                    __size_of_gpio_to_ch 0246  
                        ??_read_switch 000D                    __size_of_init_gpios 0488  
                            _g_cmd_buf 01DD                         check_usart@dbm 0200  
                            _atoi$2850 001C                              _atoi$2851 0020  
                            _atoi$2852 001E                            ?_usart_getc 000D  
                          ?_usart_init 0030                            ?_usart_putc 0001  
                          ?_usart_tstc 000D                        ??_adf4351_setup 0067  
                        usart_getc@res 0011                              _main$1993 00E3  
                         check_usart@c 0214                              _dtoa$2324 0039  
                    __CFG_CCP2MX$PORTC 000000               __end_of_PIN_SIO_DATA_DEF 7A0C  
                       ??_adc_cfg_gpio 0013                              __pintcode 0008  
                    ??_irq_set_handler 0011                          __pmediumconst 717E  
                             ?___aodiv 000D                               ?___aomod 000D  
                             ?___awdiv 000D                       ___aodiv@quotient 001F  
                             ?___awmod 000D                            usart_putc@c 000D  
                             ?___lldiv 0023                               ?___lodiv 000D  
                             ?___llmod 000D                               ?___lomod 000D  
                         ??_adc_sample 0013                       _PIN_ADF_FREQ_SEL 79A3  
                            _apply_ipc 56DC                  __size_of_adf4351_init 00D8  
                    __size_of_vfprintf 0062                       _PIN_ADF_LOCK_DEF 7A16  
                      ___lomod@divisor 0015                               ?_pa_mute 0001  
                      ___lomod@counter 001D                               ?_isalpha 000D  
                             ?_isdigit 000D                               ?_islower 000D  
                             ?_isspace 000D                               ?_isupper 000D  
                            _pa_update 5078                              _pa_unmute 4532  
                             ?_putchar 0012                          _g_pending_cmd 0072  
                            _table_220 717F               adf4351_calc_counters@div 00C1  
                       __size_of_fputc 0028               adf4351_calc_counters@ctx 00BB  
                       __size_of_fputs 0044               adf4351_calc_counters@mod 00C9  
                             ?_strncmp 000D                               ?_toupper 0013  
   __size_of_KTY82_222_Adc2Temperature 0046                   adf4351_set_freq@freq 00D3  
             ?_adf4351_calc_rcnt_block 00BB             ?_KTY82_222_Adc2Temperature 0017  
                  __end_of_init_switch 58E6                     __end_of_adc_sample 5286  
                       ___wmul@product 0011                            _g_usart_buf 0100  
                             _PIE1bits 000F9D                    __end_of_read_switch 4D7E  
                         _PIN_ADF_LOCK 79B1                               _PIR1bits 000F9E  
                             i2u560_40 4E98                               i2u560_41 4E94  
                             i2u561_40 4EAE                               i2u561_41 4EAA  
                             i2u562_40 4EC0                               i2u562_41 4EBC  
                             i2u563_40 4EF4                               i2u563_41 4EF0  
                             i2u596_40 4FAC                               i2u596_41 4FA8  
                             i2u597_40 4FC0                               i2u597_41 4FBC  
                             _PIN_FSW0 799B                               _PIN_FSW1 7999  
                             i2u599_40 4FF0                               i2u598_48 4FCE  
                             i2u599_41 4FEC                               i2u598_49 4FE2  
                         _adf4351_init 445A                               _PIN_TEMP 79AB  
                             _RCONbits 000FD0                               _PIN_RF_R 79A7  
                             _PIN_RF_V 79A9                    __size_of_update_led 0154  
                     adf4351_setup@ctx 00CD                           ??_handle_cmd 00D9  
                            _vfpfcnvrt 0012                              _xtoa$2351 0037  
                            _xtoa$2352 0039                             ?_apply_ipc 00D7  
                 _usart_rx_irq_handler 4E8A                             _ADCON0bits 000FC2  
         ??_adf4351_calc_vco_core_freq 0013                             _ADCON1bits 000FC1  
                           _ADCON2bits 000FC0                      ___wmul@multiplier 000D  
         __end_of_PIN_ADF_FREQ_SEL_DEF 7A02                           _PIN_FSW0_DEF 79DF  
                adf4351_write_reg0@ctx 00BB                           _PIN_FSW1_DEF 79DA  
                adf4351_write_reg1@ctx 00BB                  adf4351_write_reg2@ctx 00BB  
                adf4351_write_reg3@ctx 00BB                  adf4351_write_reg4@ctx 00BB  
                adf4351_write_reg5@ctx 00BB                       _adf4351_get_lock 5586  
                  __size_of_usart_getc 004C                    __size_of_usart_init 0068  
                  __size_of_usart_putc 0016                    __size_of_usart_tstc 0022  
                           ?_pa_update 0001                           _isspace$2877 0013  
                           ?_pa_unmute 0001                    __end_of_PIN_SIO_CLK 79B1  
                           vfpfcnvrt@c 008E                           _PIN_TEMP_DEF 79F3  
                    ___lmul@multiplier 0017                            _INTCON2bits 000FF1  
                  __end_of_PIN_VOLTAGE 79A7                              copy_data0 4E1A  
                            copy_data1 4E3A                           _PIN_SIO_DATA 79AD  
                         _PIN_RF_R_DEF 79E9                           _PIN_RF_V_DEF 79EE  
                 adf4351_set_tune@pout 00D2      __end_of_KTY82_222_Adc2Temperature 5614  
           ??_adf4351_set_rfout_enable 0067                           _PIN_USART_RX 7991  
                         _PIN_USART_TX 7993                       _adf4351_set_freq 4F0E  
                     _adf4351_set_mode 4C52                  _adf4351_calc_counters 1D00  
                     _adf4351_set_tune 49C0                     __end_of_handle_cmd 34FA  
                   _PIN_POWER_GOOD_DEF 79C1         __end_of_PIN_LED_PTT_ACTIVE_DEF 79D0  
                             __Hrparam 0000                             vfprintf@ap 0063  
                             __Lrparam 0000                             vfprintf@fp 005F  
                         ??_gpio_to_ch 000F               __end_of_PIN_USART_RX_DEF 79BC  
                   __CFG_BOREN$SBORDIS 000000               __end_of_PIN_USART_TX_DEF 79C1  
         check_adf4351_lock@timespan2s 0182                 _g_ptt_debounce_counter 00E7  
adf4351_calc_vco_core_freq@rf_out_freq 000F                       __size_of___aodiv 0188  
                     __size_of___aomod 0164                       __size_of___awdiv 00C4  
                     __size_of___awmod 00B0                           ??_init_gpios 000D  
                     __size_of___lldiv 00A4                       __size_of___lodiv 00F0  
                     __size_of___llmod 0088                       __size_of___lomod 00D0  
                           ?_vfpfcnvrt 004B                  ?_usart_rx_irq_handler 0001  
                      ___aodiv@divisor 0015                               _adc_init 58C2  
                      ___aodiv@counter 001D                          handle_cmd@cmd 00DE  
         adf4351_calc_counters@integer 00C5                     _global_irq_handler 0008  
                     __size_of_pa_mute 009C                           ?_adc_voltage 0030  
                     __size_of_isalpha 003C                       __size_of_isdigit 0038  
      __end_of_adf4351_calc_rcnt_block 233E           check_adf4351_lock@unlock_cnt 0071  
                   __end_of_freq_table 798F                            _init_switch 58D8  
                     __size_of_islower 0038                       __size_of_isspace 0052  
                             __ptext10 4BB6                               __ptext11 53FE  
                             __ptext20 09BA                               __ptext12 4C52  
                             __ptext21 5874                               __ptext13 4F0E  
                             __ptext30 1012                               __ptext22 54F0  
                             __ptext14 3F40                               __ptext31 3B20  
                             __ptext23 5896                               __ptext15 205A  
                             __ptext40 571A                               __ptext32 4176  
                             __ptext24 56DC                               __ptext16 1D00  
                             __ptext41 2D9C                               __ptext33 57FE  
                             __ptext25 49C0                               __ptext17 4374  
                             __ptext50 53A4                               __ptext42 4606  
                             __ptext34 5286                               __ptext26 553C  
                             __ptext18 5586                               __ptext51 479A  
                             __ptext43 4284                               __ptext35 0012  
                             __ptext27 485C                               __ptext19 14C6  
                             __ptext60 318C                               __ptext52 54A2  
                             __ptext44 405C                               __ptext36 261C  
                             __ptext28 194E                               __ptext61 50E4  
                             __ptext53 5658                               __ptext45 34FA  
                             __ptext37 52E8                               __ptext29 28F0  
                             __ptext70 39AA                               __ptext62 5220  
                             __ptext54 5826                               __ptext46 233E  
                             __ptext38 5756                               __ptext71 4A6C  
                             __ptext63 514E                               __ptext55 58AC  
                             __ptext47 569C                               __ptext39 578E  
                             __ptext72 58C2                               __ptext64 4B12  
                             __ptext56 3692                               __ptext48 3C88  
                             __ptext73 5346                               __ptext65 4D7E  
                             __ptext57 5450                               __ptext49 3822  
                             __ptext74 2B56                               __ptext66 4910  
                             __ptext58 57C6                               __ptext67 46D6  
                             __ptext59 584E                               __ptext76 4E8A  
                             __ptext68 55CE                               __ptext77 0000  
                             __ptext69 445A                       __size_of_isupper 0038  
                 __end_of_adc_cfg_gpio 53A4                     __end_of_gpio_to_ch 2D9C  
                     __size_of_putchar 0016                            _read_switch 4CEE  
                  ?_global_irq_handler 0001                       __size_of_strncmp 011A  
                     __size_of_toupper 005E                        adf4351_init@ctx 0019  
                      adf4351_init@pfd 001F                        adf4351_init@ref 001B  
                        __size_of_atoi 0190                          __size_of_ctoa 005A  
                        __size_of_main 01F0                          __size_of_dtoa 02DE  
                   __end_of_init_gpios 194E                          __size_of_stoa 0198  
                        __size_of_utoa 0200                          __size_of_xtoa 02D4  
                  adf4351_set_freq@ctx 00D1            check_adf4351_lock@last_lock 00F6  
        adf4351_calc_vco_core_freq@div 0017          adf4351_calc_vco_core_freq@ctx 000D  
                  adf4351_set_mode@ctx 00CF            __end_of_adf4351_write_latch 3350  
                            stoa@F1144 01E7                               int$flags 0073  
                      _adf4351_default 4A6C                   ??_global_irq_handler 0008  
                             _vfprintf 5286                              printf@fmt 0097  
                          ??_apply_ipc 0067                       ___aomod@dividend 000D  
                          _PIN_SIO_CLK 79AF                    adf4351_set_tune@icp 00D1  
                  adf4351_set_tune@ctx 00CF                            _PIN_VOLTAGE 79A5  
                       _vfpfcnvrt$2366 0084                             _INTCONbits 000FF2  
                         ?_check_usart 0001                           ??_update_led 0012  
                          ??_pa_update 00D4             adf4351_calc_rcnt_block@div 00C1  
                             isalpha@c 000D             adf4351_calc_rcnt_block@ctx 00BB  
                             isdigit@c 000D                            ??_pa_unmute 00D1  
               adf4351_set_mode@enable 00D1                               intlevel2 0000  
               ?_adf4351_calc_counters 00BB                        _irq_set_handler 5614  
             __end_of_PIN_ADF_FREQ_SEL 79A5                         _PIN_ADF_CE_DEF 7A11  
                             islower@c 000D                               isspace@c 000D  
               __size_of_update_switch 006E                       ___lldiv@dividend 0023  
                       _PIN_ADF_LE_DEF 7A0C               __end_of_PIN_ADF_LOCK_DEF 7A1B  
                         ??_usart_getc 000F                           ??_usart_init 0034  
                         ??_usart_putc 000D                           ??_usart_tstc 000F  
                 _PIN_ADF_FREQ_SEL_DEF 79FD                               isupper@c 000D  
                            strncmp@_l 000D                              strncmp@_r 000F  
                           _OSCCONbits 000FD3                             _PIN_ADF_CE 79B3  
                           _PIN_ADF_LE 79B5             __end_of_adf4351_write_reg0 4284  
           __end_of_adf4351_write_reg1 3C88             __end_of_adf4351_write_reg2 14C6  
           __end_of_adf4351_write_reg3 2B56             __end_of_adf4351_write_reg4 1D00  
           __end_of_adf4351_write_reg5 4910             __end_of_PIN_LED_CPU_OK_DEF 79DA  
       adf4351_set_rfout_enable@enable 00CF                               printf@ap 00B9  
                   __end_of_update_led 3F40                 ??_usart_rx_irq_handler 0003  
                      ___aomod@divisor 0015                            ??_vfpfcnvrt 0051  
                             stoa@nuls 0017                        ___aomod@counter 001D  
   __end_of_adf4351_calc_vco_core_freq 405C             _adf4351_calc_vco_core_freq 3F40  
                             putchar@c 0012                       ___lldiv@quotient 002B  
                             strncmp@l 0014                               strncmp@n 0011  
                             strncmp@r 0016                               toupper@c 0013  
                   __end_of_usart_getc 553C                     __end_of_usart_init 5220  
                   __end_of_usart_putc 58C2                     __end_of_usart_tstc 5896  
               __end_of_PIN_ADF_CE_DEF 7A16                           ___aodiv@sign 001E  
               __end_of_PIN_ADF_LE_DEF 7A11            ??_KTY82_222_Adc2Temperature 0019  
            usart_rx_irq_handler@udata 0001              usart_rx_irq_handler@wposn 0006  
              __end_of_adf4351_default 4B12                           ___aomod@sign 001E  
             __end_of_adf4351_get_lock 55CE                    check_usart@dbm_2062 0204  
