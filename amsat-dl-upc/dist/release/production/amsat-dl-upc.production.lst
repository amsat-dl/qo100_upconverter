

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Fri May 29 12:04:43 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	18F2520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1,inline
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=2
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=2
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1,group=2
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=2
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=2
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1,group=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=2
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1
   100                           	psect	text80,global,reloc=2,class=CODE,delta=1,inline
   101                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   102                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   105                           	psect	text83,global,reloc=2,class=CODE,delta=1
   106                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   107                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   108  0000                     
   109                           ; Version 2.10
   110                           ; Generated 31/07/2019 GMT
   111                           ; 
   112                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
   113                           ; All rights reserved.
   114                           ; 
   115                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   116                           ; 
   117                           ; Redistribution and use in source and binary forms, with or without modification, are
   118                           ; permitted provided that the following conditions are met:
   119                           ; 
   120                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   121                           ;        conditions and the following disclaimer.
   122                           ; 
   123                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   124                           ;        of conditions and the following disclaimer in the documentation and/or other
   125                           ;        materials provided with the distribution.
   126                           ; 
   127                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   128                           ;        software without specific prior written permission.
   129                           ; 
   130                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   131                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   132                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   133                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   134                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   135                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   136                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   137                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   138                           ; 
   139                           ; 
   140                           ; Code-generator required, PIC18F2520 Definitions
   141                           ; 
   142                           ; SFR Addresses
   143  0000                     
   144                           	psect	idataCOMRAM
   145  004F68                     __pidataCOMRAM:
   146                           	opt callstack 0
   147                           
   148                           ;initializer for _g_pending_cmd
   149  004F68  FF                 	db	255
   150                           
   151                           	psect	idataBANK0
   152  004F3A                     __pidataBANK0:
   153                           	opt callstack 0
   154                           
   155                           ;initializer for stoa@F1139
   156  004F3A  28                 	db	40
   157  004F3B  6E                 	db	110
   158  004F3C  75                 	db	117
   159  004F3D  6C                 	db	108
   160  004F3E  6C                 	db	108
   161  004F3F  29                 	db	41
   162  004F40  00                 	db	0
   163                           
   164                           ;initializer for _g_ptt_debounce_counter
   165  004F41  000A               	dw	10
   166                           
   167                           ;initializer for _g_pout
   168  004F43  0001               	dw	1
   169                           
   170                           ;initializer for _g_ipc
   171  004F45  0005               	dw	5
   172                           
   173                           ;initializer for _g_cmd_debounce_counter
   174  004F47  000A               	dw	10
   175                           
   176                           ;initializer for setPTT_LED@old_onoff
   177  004F49  FF                 	db	255
   178                           
   179                           ;initializer for setLOCK_LED@old_onoff
   180  004F4A  FF                 	db	255
   181                           
   182                           ;initializer for _g_applied_cmd
   183  004F4B  FF                 	db	255
   184                           
   185                           ;initializer for adf4351_get_lock@lastlock
   186  004F4C  FF                 	db	255
   187                           
   188                           	psect	idataBANK1
   189  004C4C                     __pidataBANK1:
   190                           	opt callstack 0
   191                           
   192                           ;initializer for _temptab
   193  004C4C  C000               	dw	49152
   194  004C4E  44CB               	dw	17611
   195  004C50  4000               	dw	16384
   196  004C52  44D7               	dw	17623
   197  004C54  4000               	dw	16384
   198  004C56  44F0               	dw	17648
   199  004C58  0000               	dw	0
   200  004C5A  4502               	dw	17666
   201  004C5C  5000               	dw	20480
   202  004C5E  450C               	dw	17676
   203  004C60  1000               	dw	4096
   204  004C62  4517               	dw	17687
   205  004C64  5000               	dw	20480
   206  004C66  4522               	dw	17698
   207  004C68  1000               	dw	4096
   208  004C6A  452E               	dw	17710
   209  004C6C  4000               	dw	16384
   210  004C6E  453A               	dw	17722
   211  004C70  E000               	dw	57344
   212  004C72  4546               	dw	17734
   213  004C74  0000               	dw	0
   214  004C76  4554               	dw	17748
   215  004C78  7000               	dw	28672
   216  004C7A  4561               	dw	17761
   217  004C7C  9000               	dw	36864
   218  004C7E  456E               	dw	17774
   219  004C80  8000               	dw	32768
   220  004C82  457A               	dw	17786
   221  004C84  3000               	dw	12288
   222  004C86  4582               	dw	17794
   223  004C88  C000               	dw	49152
   224  004C8A  4585               	dw	17797
   225  004C8C  0000               	dw	0
   226  004C8E  BF80               	dw	49024
   227                           
   228                           	psect	mediumconst
   229  007C76                     __pmediumconst:
   230                           	opt callstack 0
   231  007C76  00                 	db	0
   232  007C77                     _freq_table:
   233                           	opt callstack 0
   234  007C77  0F50               	dw	3920
   235  007C79  001E               	dw	30
   236  007C7B  FBC8               	dw	64456
   237  007C7D  001D               	dw	29
   238  007C7F  F4D0               	dw	62672
   239  007C81  0017               	dw	23
   240  007C83  EFF0               	dw	61424
   241  007C85  0010               	dw	16
   242  007C87                     __end_of_freq_table:
   243                           	opt callstack 0
   244  007C87                     _PIN_POWER_GOOD:
   245                           	opt callstack 0
   246  007C87  BB                 	db	low _PIN_POWER_GOOD_DEF
   247  007C88  7C                 	db	high _PIN_POWER_GOOD_DEF
   248  007C89                     __end_of_PIN_POWER_GOOD:
   249                           	opt callstack 0
   250  007C89  B1                 	db	low _PIN_USART_RX_DEF
   251  007C8A  7C                 	db	high _PIN_USART_RX_DEF
   252  007C8B                     __end_of_PIN_USART_RX:
   253                           	opt callstack 0
   254  007C8B  B6                 	db	low _PIN_USART_TX_DEF
   255  007C8C  7C                 	db	high _PIN_USART_TX_DEF
   256  007C8D                     __end_of_PIN_USART_TX:
   257                           	opt callstack 0
   258  007C8D  C5                 	db	low _PIN_ALARM_OUTPUT_DEF
   259  007C8E  7C                 	db	high _PIN_ALARM_OUTPUT_DEF
   260  007C8F                     __end_of_PIN_ALARM_OUTPUT:
   261                           	opt callstack 0
   262  007C8F  D4                 	db	low _PIN_LED_CPU_OK_DEF
   263  007C90  7C                 	db	high _PIN_LED_CPU_OK_DEF
   264  007C91                     __end_of_PIN_LED_CPU_OK:
   265                           	opt callstack 0
   266  007C91  D9                 	db	low _PIN_FSW1_DEF
   267  007C92  7C                 	db	high _PIN_FSW1_DEF
   268  007C93                     __end_of_PIN_FSW1:
   269                           	opt callstack 0
   270  007C93  DE                 	db	low _PIN_FSW0_DEF
   271  007C94  7C                 	db	high _PIN_FSW0_DEF
   272  007C95                     __end_of_PIN_FSW0:
   273                           	opt callstack 0
   274  007C95  F7                 	db	low _PIN_PTT_INPUT_DEF
   275  007C96  7C                 	db	high _PIN_PTT_INPUT_DEF
   276  007C97                     __end_of_PIN_PTT_INPUT:
   277                           	opt callstack 0
   278  007C97  CA                 	db	low _PIN_LED_PTT_ACTIVE_DEF
   279  007C98  7C                 	db	high _PIN_LED_PTT_ACTIVE_DEF
   280  007C99                     __end_of_PIN_LED_PTT_ACTIVE:
   281                           	opt callstack 0
   282  007C99  CF                 	db	low _PIN_LED_ADF_LOCK_DEF
   283  007C9A  7C                 	db	high _PIN_LED_ADF_LOCK_DEF
   284  007C9B                     __end_of_PIN_LED_ADF_LOCK:
   285                           	opt callstack 0
   286  007C9B  C0                 	db	low _PIN_PA_ENABLE_DEF
   287  007C9C  7C                 	db	high _PIN_PA_ENABLE_DEF
   288  007C9D                     __end_of_PIN_PA_ENABLE:
   289                           	opt callstack 0
   290  007C9D  FC                 	db	low _PIN_ADF_FREQ_SEL_DEF
   291  007C9E  7C                 	db	high _PIN_ADF_FREQ_SEL_DEF
   292  007C9F                     __end_of_PIN_ADF_FREQ_SEL:
   293                           	opt callstack 0
   294  007C9F  ED                 	db	low _PIN_RF_R_DEF
   295  007CA0  7C                 	db	high _PIN_RF_R_DEF
   296  007CA1                     __end_of_PIN_RF_R:
   297                           	opt callstack 0
   298  007CA1  E8                 	db	low _PIN_RF_V_DEF
   299  007CA2  7C                 	db	high _PIN_RF_V_DEF
   300  007CA3                     __end_of_PIN_RF_V:
   301                           	opt callstack 0
   302  007CA3  E3                 	db	low _PIN_VOLTAGE_DEF
   303  007CA4  7C                 	db	high _PIN_VOLTAGE_DEF
   304  007CA5                     __end_of_PIN_VOLTAGE:
   305                           	opt callstack 0
   306  007CA5  F2                 	db	low _PIN_TEMP_DEF
   307  007CA6  7C                 	db	high _PIN_TEMP_DEF
   308  007CA7                     __end_of_PIN_TEMP:
   309                           	opt callstack 0
   310  007CA7  06                 	db	low _PIN_SIO_DATA_DEF
   311  007CA8  7D                 	db	high _PIN_SIO_DATA_DEF
   312  007CA9                     __end_of_PIN_SIO_DATA:
   313                           	opt callstack 0
   314  007CA9  01                 	db	low _PIN_SIO_CLK_DEF
   315  007CAA  7D                 	db	high _PIN_SIO_CLK_DEF
   316  007CAB                     __end_of_PIN_SIO_CLK:
   317                           	opt callstack 0
   318  007CAB  15                 	db	low _PIN_ADF_LOCK_DEF
   319  007CAC  7D                 	db	high _PIN_ADF_LOCK_DEF
   320  007CAD                     __end_of_PIN_ADF_LOCK:
   321                           	opt callstack 0
   322  007CAD  10                 	db	low _PIN_ADF_CE_DEF
   323  007CAE  7D                 	db	high _PIN_ADF_CE_DEF
   324  007CAF                     __end_of_PIN_ADF_CE:
   325                           	opt callstack 0
   326  007CAF  0B                 	db	low _PIN_ADF_LE_DEF
   327  007CB0  7D                 	db	high _PIN_ADF_LE_DEF
   328  007CB1                     __end_of_PIN_ADF_LE:
   329                           	opt callstack 0
   330  007CB1                     _PIN_USART_RX_DEF:
   331                           	opt callstack 0
   332  007CB1  82                 	db	130
   333  007CB2  0F                 	db	15
   334  007CB3  94                 	db	148
   335  007CB4  0F                 	db	15
   336  007CB5  80                 	db	128
   337  007CB6                     __end_of_PIN_USART_RX_DEF:
   338                           	opt callstack 0
   339  007CB6                     _PIN_USART_TX_DEF:
   340                           	opt callstack 0
   341  007CB6  82                 	db	130
   342  007CB7  0F                 	db	15
   343  007CB8  94                 	db	148
   344  007CB9  0F                 	db	15
   345  007CBA  40                 	db	64
   346  007CBB                     __end_of_PIN_USART_TX_DEF:
   347                           	opt callstack 0
   348  007CBB                     _PIN_POWER_GOOD_DEF:
   349  007CBB  82                 	db	130
   350  007CBC  0F                 	db	15
   351  007CBD  94                 	db	148
   352  007CBE  0F                 	db	15
   353  007CBF  20                 	db	32
   354  007CC0                     __end_of_PIN_POWER_GOOD_DEF:
   355                           	opt callstack 0
   356  007CC0                     _PIN_PA_ENABLE_DEF:
   357                           	opt callstack 0
   358  007CC0  82                 	db	130
   359  007CC1  0F                 	db	15
   360  007CC2  94                 	db	148
   361  007CC3  0F                 	db	15
   362  007CC4  10                 	db	16
   363  007CC5                     __end_of_PIN_PA_ENABLE_DEF:
   364                           	opt callstack 0
   365  007CC5                     _PIN_ALARM_OUTPUT_DEF:
   366                           	opt callstack 0
   367  007CC5  82                 	db	130
   368  007CC6  0F                 	db	15
   369  007CC7  94                 	db	148
   370  007CC8  0F                 	db	15
   371  007CC9  08                 	db	8
   372  007CCA                     __end_of_PIN_ALARM_OUTPUT_DEF:
   373                           	opt callstack 0
   374  007CCA                     _PIN_LED_PTT_ACTIVE_DEF:
   375                           	opt callstack 0
   376  007CCA  82                 	db	130
   377  007CCB  0F                 	db	15
   378  007CCC  94                 	db	148
   379  007CCD  0F                 	db	15
   380  007CCE  04                 	db	4
   381  007CCF                     __end_of_PIN_LED_PTT_ACTIVE_DEF:
   382                           	opt callstack 0
   383  007CCF                     _PIN_LED_ADF_LOCK_DEF:
   384                           	opt callstack 0
   385  007CCF  82                 	db	130
   386  007CD0  0F                 	db	15
   387  007CD1  94                 	db	148
   388  007CD2  0F                 	db	15
   389  007CD3  02                 	db	2
   390  007CD4                     __end_of_PIN_LED_ADF_LOCK_DEF:
   391                           	opt callstack 0
   392  007CD4                     _PIN_LED_CPU_OK_DEF:
   393                           	opt callstack 0
   394  007CD4  82                 	db	130
   395  007CD5  0F                 	db	15
   396  007CD6  94                 	db	148
   397  007CD7  0F                 	db	15
   398  007CD8  01                 	db	1
   399  007CD9                     __end_of_PIN_LED_CPU_OK_DEF:
   400                           	opt callstack 0
   401  007CD9                     _PIN_FSW1_DEF:
   402                           	opt callstack 0
   403  007CD9  81                 	db	129
   404  007CDA  0F                 	db	15
   405  007CDB  93                 	db	147
   406  007CDC  0F                 	db	15
   407  007CDD  20                 	db	32
   408  007CDE                     __end_of_PIN_FSW1_DEF:
   409                           	opt callstack 0
   410  007CDE                     _PIN_FSW0_DEF:
   411                           	opt callstack 0
   412  007CDE  81                 	db	129
   413  007CDF  0F                 	db	15
   414  007CE0  93                 	db	147
   415  007CE1  0F                 	db	15
   416  007CE2  10                 	db	16
   417  007CE3                     __end_of_PIN_FSW0_DEF:
   418                           	opt callstack 0
   419  007CE3                     _PIN_VOLTAGE_DEF:
   420                           	opt callstack 0
   421  007CE3  81                 	db	129
   422  007CE4  0F                 	db	15
   423  007CE5  93                 	db	147
   424  007CE6  0F                 	db	15
   425  007CE7  08                 	db	8
   426  007CE8                     __end_of_PIN_VOLTAGE_DEF:
   427                           	opt callstack 0
   428  007CE8                     _PIN_RF_V_DEF:
   429                           	opt callstack 0
   430  007CE8  81                 	db	129
   431  007CE9  0F                 	db	15
   432  007CEA  93                 	db	147
   433  007CEB  0F                 	db	15
   434  007CEC  04                 	db	4
   435  007CED                     __end_of_PIN_RF_V_DEF:
   436                           	opt callstack 0
   437  007CED                     _PIN_RF_R_DEF:
   438                           	opt callstack 0
   439  007CED  81                 	db	129
   440  007CEE  0F                 	db	15
   441  007CEF  93                 	db	147
   442  007CF0  0F                 	db	15
   443  007CF1  02                 	db	2
   444  007CF2                     __end_of_PIN_RF_R_DEF:
   445                           	opt callstack 0
   446  007CF2                     _PIN_TEMP_DEF:
   447                           	opt callstack 0
   448  007CF2  81                 	db	129
   449  007CF3  0F                 	db	15
   450  007CF4  93                 	db	147
   451  007CF5  0F                 	db	15
   452  007CF6  01                 	db	1
   453  007CF7                     __end_of_PIN_TEMP_DEF:
   454                           	opt callstack 0
   455  007CF7                     _PIN_PTT_INPUT_DEF:
   456                           	opt callstack 0
   457  007CF7  80                 	db	128
   458  007CF8  0F                 	db	15
   459  007CF9  92                 	db	146
   460  007CFA  0F                 	db	15
   461  007CFB  80                 	db	128
   462  007CFC                     __end_of_PIN_PTT_INPUT_DEF:
   463                           	opt callstack 0
   464  007CFC                     _PIN_ADF_FREQ_SEL_DEF:
   465                           	opt callstack 0
   466  007CFC  80                 	db	128
   467  007CFD  0F                 	db	15
   468  007CFE  92                 	db	146
   469  007CFF  0F                 	db	15
   470  007D00  40                 	db	64
   471  007D01                     __end_of_PIN_ADF_FREQ_SEL_DEF:
   472                           	opt callstack 0
   473  007D01                     _PIN_SIO_CLK_DEF:
   474                           	opt callstack 0
   475  007D01  80                 	db	128
   476  007D02  0F                 	db	15
   477  007D03  92                 	db	146
   478  007D04  0F                 	db	15
   479  007D05  10                 	db	16
   480  007D06                     __end_of_PIN_SIO_CLK_DEF:
   481                           	opt callstack 0
   482  007D06                     _PIN_SIO_DATA_DEF:
   483                           	opt callstack 0
   484  007D06  80                 	db	128
   485  007D07  0F                 	db	15
   486  007D08  92                 	db	146
   487  007D09  0F                 	db	15
   488  007D0A  08                 	db	8
   489  007D0B                     __end_of_PIN_SIO_DATA_DEF:
   490                           	opt callstack 0
   491  007D0B                     _PIN_ADF_LE_DEF:
   492                           	opt callstack 0
   493  007D0B  80                 	db	128
   494  007D0C  0F                 	db	15
   495  007D0D  92                 	db	146
   496  007D0E  0F                 	db	15
   497  007D0F  04                 	db	4
   498  007D10                     __end_of_PIN_ADF_LE_DEF:
   499                           	opt callstack 0
   500  007D10                     _PIN_ADF_CE_DEF:
   501                           	opt callstack 0
   502  007D10  80                 	db	128
   503  007D11  0F                 	db	15
   504  007D12  92                 	db	146
   505  007D13  0F                 	db	15
   506  007D14  02                 	db	2
   507  007D15                     __end_of_PIN_ADF_CE_DEF:
   508                           	opt callstack 0
   509  007D15                     _PIN_ADF_LOCK_DEF:
   510                           	opt callstack 0
   511  007D15  80                 	db	128
   512  007D16  0F                 	db	15
   513  007D17  92                 	db	146
   514  007D18  0F                 	db	15
   515  007D19  01                 	db	1
   516  007D1A                     __end_of_PIN_ADF_LOCK_DEF:
   517                           	opt callstack 0
   518  0000                     _INTCON2bits	set	4081
   519  0000                     _RCONbits	set	4048
   520  0000                     _PIE2	set	4000
   521  0000                     _PIE1	set	3997
   522  0000                     _OSCCONbits	set	4051
   523  0000                     _OSCCON	set	4051
   524  0000                     _OSCTUNE	set	3995
   525  0000                     _ADRESL	set	4035
   526  0000                     _ADRESH	set	4036
   527  0000                     _ADCON0bits	set	4034
   528  0000                     _ADCON2bits	set	4032
   529  0000                     _ADCON1bits	set	4033
   530  0000                     _INTCONbits	set	4082
   531  0000                     _PIR1bits	set	3998
   532  0000                     _RCREG	set	4014
   533  0000                     _TXREG	set	4013
   534  0000                     _PIE1bits	set	3997
   535  0000                     _SPBRG	set	4015
   536  0000                     _SPBRGH	set	4016
   537  0000                     _BAUDCONbits	set	4024
   538  0000                     _RCSTAbits	set	4011
   539  0000                     _TXSTAbits	set	4012
   540  0000                     _TRISC	set	3988
   541  0000                     _PORTC	set	3970
   542  0000                     _PORTA	set	3968
   543  0000                     _TRISB	set	3987
   544  0000                     _TRISA	set	3986
   545  0000                     _PORTB	set	3969
   546  007D1A                     STR_4:
   547                           
   548                           ; BSR set to: 0
   549  007D1A  41                 	db	65	;'A'
   550  007D1B  44                 	db	68	;'D'
   551  007D1C  46                 	db	70	;'F'
   552  007D1D  34                 	db	52	;'4'
   553  007D1E  33                 	db	51	;'3'
   554  007D1F  35                 	db	53	;'5'
   555  007D20  31                 	db	49	;'1'
   556  007D21  3A                 	db	58	;':'
   557  007D22  20                 	db	32
   558  007D23  43                 	db	67	;'C'
   559  007D24  61                 	db	97	;'a'
   560  007D25  6E                 	db	110	;'n'
   561  007D26  6E                 	db	110	;'n'
   562  007D27  6F                 	db	111	;'o'
   563  007D28  74                 	db	116	;'t'
   564  007D29  20                 	db	32
   565  007D2A  72                 	db	114	;'r'
   566  007D2B  65                 	db	101	;'e'
   567  007D2C  61                 	db	97	;'a'
   568  007D2D  63                 	db	99	;'c'
   569  007D2E  68                 	db	104	;'h'
   570  007D2F  20                 	db	32
   571  007D30  50                 	db	80	;'P'
   572  007D31  46                 	db	70	;'F'
   573  007D32  44                 	db	68	;'D'
   574  007D33  20                 	db	32
   575  007D34  6F                 	db	111	;'o'
   576  007D35  66                 	db	102	;'f'
   577  007D36  20                 	db	32
   578  007D37  25                 	db	37
   579  007D38  69                 	db	105	;'i'
   580  007D39  20                 	db	32
   581  007D3A  6B                 	db	107	;'k'
   582  007D3B  48                 	db	72	;'H'
   583  007D3C  7A                 	db	122	;'z'
   584  007D3D  20                 	db	32
   585  007D3E  77                 	db	119	;'w'
   586  007D3F  69                 	db	105	;'i'
   587  007D40  74                 	db	116	;'t'
   588  007D41  68                 	db	104	;'h'
   589  007D42  20                 	db	32
   590  007D43  52                 	db	82	;'R'
   591  007D44  45                 	db	69	;'E'
   592  007D45  46                 	db	70	;'F'
   593  007D46  20                 	db	32
   594  007D47  6F                 	db	111	;'o'
   595  007D48  66                 	db	102	;'f'
   596  007D49  20                 	db	32
   597  007D4A  25                 	db	37
   598  007D4B  69                 	db	105	;'i'
   599  007D4C  20                 	db	32
   600  007D4D  6B                 	db	107	;'k'
   601  007D4E  48                 	db	72	;'H'
   602  007D4F  7A                 	db	122	;'z'
   603  007D50  20                 	db	32
   604  007D51  28                 	db	40
   605  007D52  6E                 	db	110	;'n'
   606  007D53  6F                 	db	111	;'o'
   607  007D54  74                 	db	116	;'t'
   608  007D55  20                 	db	32
   609  007D56  64                 	db	100	;'d'
   610  007D57  69                 	db	105	;'i'
   611  007D58  76                 	db	118	;'v'
   612  007D59  69                 	db	105	;'i'
   613  007D5A  64                 	db	100	;'d'
   614  007D5B  65                 	db	101	;'e'
   615  007D5C  61                 	db	97	;'a'
   616  007D5D  62                 	db	98	;'b'
   617  007D5E  6C                 	db	108	;'l'
   618  007D5F  65                 	db	101	;'e'
   619  007D60  29                 	db	41
   620  007D61  2E                 	db	46
   621  007D62  0A                 	db	10
   622  007D63  00                 	db	0
   623  007D64                     STR_5:
   624                           
   625                           ; BSR set to: 0
   626  007D64  41                 	db	65	;'A'
   627  007D65  44                 	db	68	;'D'
   628  007D66  46                 	db	70	;'F'
   629  007D67  34                 	db	52	;'4'
   630  007D68  33                 	db	51	;'3'
   631  007D69  35                 	db	53	;'5'
   632  007D6A  31                 	db	49	;'1'
   633  007D6B  3A                 	db	58	;':'
   634  007D6C  20                 	db	32
   635  007D6D  43                 	db	67	;'C'
   636  007D6E  61                 	db	97	;'a'
   637  007D6F  6E                 	db	110	;'n'
   638  007D70  6E                 	db	110	;'n'
   639  007D71  6F                 	db	111	;'o'
   640  007D72  74                 	db	116	;'t'
   641  007D73  20                 	db	32
   642  007D74  72                 	db	114	;'r'
   643  007D75  65                 	db	101	;'e'
   644  007D76  61                 	db	97	;'a'
   645  007D77  63                 	db	99	;'c'
   646  007D78  68                 	db	104	;'h'
   647  007D79  20                 	db	32
   648  007D7A  50                 	db	80	;'P'
   649  007D7B  46                 	db	70	;'F'
   650  007D7C  44                 	db	68	;'D'
   651  007D7D  20                 	db	32
   652  007D7E  6F                 	db	111	;'o'
   653  007D7F  66                 	db	102	;'f'
   654  007D80  20                 	db	32
   655  007D81  25                 	db	37
   656  007D82  69                 	db	105	;'i'
   657  007D83  20                 	db	32
   658  007D84  6B                 	db	107	;'k'
   659  007D85  48                 	db	72	;'H'
   660  007D86  7A                 	db	122	;'z'
   661  007D87  20                 	db	32
   662  007D88  77                 	db	119	;'w'
   663  007D89  69                 	db	105	;'i'
   664  007D8A  74                 	db	116	;'t'
   665  007D8B  68                 	db	104	;'h'
   666  007D8C  20                 	db	32
   667  007D8D  52                 	db	82	;'R'
   668  007D8E  45                 	db	69	;'E'
   669  007D8F  46                 	db	70	;'F'
   670  007D90  20                 	db	32
   671  007D91  6F                 	db	111	;'o'
   672  007D92  66                 	db	102	;'f'
   673  007D93  20                 	db	32
   674  007D94  25                 	db	37
   675  007D95  69                 	db	105	;'i'
   676  007D96  20                 	db	32
   677  007D97  6B                 	db	107	;'k'
   678  007D98  48                 	db	72	;'H'
   679  007D99  7A                 	db	122	;'z'
   680  007D9A  20                 	db	32
   681  007D9B  28                 	db	40
   682  007D9C  64                 	db	100	;'d'
   683  007D9D  69                 	db	105	;'i'
   684  007D9E  76                 	db	118	;'v'
   685  007D9F  20                 	db	32
   686  007DA0  74                 	db	116	;'t'
   687  007DA1  6F                 	db	111	;'o'
   688  007DA2  6F                 	db	111	;'o'
   689  007DA3  20                 	db	32
   690  007DA4  68                 	db	104	;'h'
   691  007DA5  69                 	db	105	;'i'
   692  007DA6  67                 	db	103	;'g'
   693  007DA7  68                 	db	104	;'h'
   694  007DA8  29                 	db	41
   695  007DA9  2E                 	db	46
   696  007DAA  0A                 	db	10
   697  007DAB  00                 	db	0
   698  007DAC                     STR_6:
   699                           
   700                           ; BSR set to: 0
   701  007DAC  41                 	db	65	;'A'
   702  007DAD  44                 	db	68	;'D'
   703  007DAE  46                 	db	70	;'F'
   704  007DAF  34                 	db	52	;'4'
   705  007DB0  33                 	db	51	;'3'
   706  007DB1  35                 	db	53	;'5'
   707  007DB2  31                 	db	49	;'1'
   708  007DB3  3A                 	db	58	;':'
   709  007DB4  20                 	db	32
   710  007DB5  43                 	db	67	;'C'
   711  007DB6  61                 	db	97	;'a'
   712  007DB7  6E                 	db	110	;'n'
   713  007DB8  6E                 	db	110	;'n'
   714  007DB9  6F                 	db	111	;'o'
   715  007DBA  74                 	db	116	;'t'
   716  007DBB  20                 	db	32
   717  007DBC  75                 	db	117	;'u'
   718  007DBD  73                 	db	115	;'s'
   719  007DBE  65                 	db	101	;'e'
   720  007DBF  20                 	db	32
   721  007DC0  70                 	db	112	;'p'
   722  007DC1  66                 	db	102	;'f'
   723  007DC2  64                 	db	100	;'d'
   724  007DC3  20                 	db	32
   725  007DC4  6F                 	db	111	;'o'
   726  007DC5  66                 	db	102	;'f'
   727  007DC6  20                 	db	32
   728  007DC7  25                 	db	37
   729  007DC8  6C                 	db	108	;'l'
   730  007DC9  75                 	db	117	;'u'
   731  007DCA  20                 	db	32
   732  007DCB  6B                 	db	107	;'k'
   733  007DCC  48                 	db	72	;'H'
   734  007DCD  7A                 	db	122	;'z'
   735  007DCE  20                 	db	32
   736  007DCF  28                 	db	40
   737  007DD0  62                 	db	98	;'b'
   738  007DD1  73                 	db	115	;'s'
   739  007DD2  63                 	db	99	;'c'
   740  007DD3  64                 	db	100	;'d'
   741  007DD4  69                 	db	105	;'i'
   742  007DD5  76                 	db	118	;'v'
   743  007DD6  20                 	db	32
   744  007DD7  74                 	db	116	;'t'
   745  007DD8  6F                 	db	111	;'o'
   746  007DD9  6F                 	db	111	;'o'
   747  007DDA  20                 	db	32
   748  007DDB  68                 	db	104	;'h'
   749  007DDC  69                 	db	105	;'i'
   750  007DDD  67                 	db	103	;'g'
   751  007DDE  68                 	db	104	;'h'
   752  007DDF  29                 	db	41
   753  007DE0  2E                 	db	46
   754  007DE1  0A                 	db	10
   755  007DE2  00                 	db	0
   756  007DE3                     STR_11:
   757                           
   758                           ; BSR set to: 0
   759  007DE3  55                 	db	85	;'U'
   760  007DE4  50                 	db	80	;'P'
   761  007DE5  43                 	db	67	;'C'
   762  007DE6  20                 	db	32
   763  007DE7  30                 	db	48	;'0'
   764  007DE8  30                 	db	48	;'0'
   765  007DE9  20                 	db	32
   766  007DEA  30                 	db	48	;'0'
   767  007DEB  37                 	db	55	;'7'
   768  007DEC  20                 	db	32
   769  007DED  41                 	db	65	;'A'
   770  007DEE  4D                 	db	77	;'M'
   771  007DEF  53                 	db	83	;'S'
   772  007DF0  41                 	db	65	;'A'
   773  007DF1  54                 	db	84	;'T'
   774  007DF2  2D                 	db	45
   775  007DF3  44                 	db	68	;'D'
   776  007DF4  4C                 	db	76	;'L'
   777  007DF5  20                 	db	32
   778  007DF6  55                 	db	85	;'U'
   779  007DF7  70                 	db	112	;'p'
   780  007DF8  63                 	db	99	;'c'
   781  007DF9  6F                 	db	111	;'o'
   782  007DFA  6E                 	db	110	;'n'
   783  007DFB  76                 	db	118	;'v'
   784  007DFC  65                 	db	101	;'e'
   785  007DFD  72                 	db	114	;'r'
   786  007DFE  74                 	db	116	;'t'
   787  007DFF  65                 	db	101	;'e'
   788  007E00  72                 	db	114	;'r'
   789  007E01  20                 	db	32
   790  007E02  48                 	db	72	;'H'
   791  007E03  57                 	db	87	;'W'
   792  007E04  3A                 	db	58	;':'
   793  007E05  25                 	db	37
   794  007E06  73                 	db	115	;'s'
   795  007E07  20                 	db	32
   796  007E08  46                 	db	70	;'F'
   797  007E09  57                 	db	87	;'W'
   798  007E0A  3A                 	db	58	;':'
   799  007E0B  25                 	db	37
   800  007E0C  73                 	db	115	;'s'
   801  007E0D  0A                 	db	10
   802  007E0E  00                 	db	0
   803  007E0F                     STR_19:
   804                           
   805                           ; BSR set to: 0
   806  007E0F  41                 	db	65	;'A'
   807  007E10  44                 	db	68	;'D'
   808  007E11  46                 	db	70	;'F'
   809  007E12  34                 	db	52	;'4'
   810  007E13  33                 	db	51	;'3'
   811  007E14  35                 	db	53	;'5'
   812  007E15  31                 	db	49	;'1'
   813  007E16  20                 	db	32
   814  007E17  52                 	db	82	;'R'
   815  007E18  45                 	db	69	;'E'
   816  007E19  2D                 	db	45
   817  007E1A  49                 	db	73	;'I'
   818  007E1B  4E                 	db	78	;'N'
   819  007E1C  49                 	db	73	;'I'
   820  007E1D  54                 	db	84	;'T'
   821  007E1E  49                 	db	73	;'I'
   822  007E1F  41                 	db	65	;'A'
   823  007E20  4C                 	db	76	;'L'
   824  007E21  49                 	db	73	;'I'
   825  007E22  5A                 	db	90	;'Z'
   826  007E23  45                 	db	69	;'E'
   827  007E24  2C                 	db	44
   828  007E25  20                 	db	32
   829  007E26  75                 	db	117	;'u'
   830  007E27  6E                 	db	110	;'n'
   831  007E28  6C                 	db	108	;'l'
   832  007E29  6F                 	db	111	;'o'
   833  007E2A  63                 	db	99	;'c'
   834  007E2B  6B                 	db	107	;'k'
   835  007E2C  5F                 	db	95	;'_'
   836  007E2D  63                 	db	99	;'c'
   837  007E2E  6E                 	db	110	;'n'
   838  007E2F  74                 	db	116	;'t'
   839  007E30  3A                 	db	58	;':'
   840  007E31  25                 	db	37
   841  007E32  64                 	db	100	;'d'
   842  007E33  0D                 	db	13
   843  007E34  0A                 	db	10
   844  007E35  00                 	db	0
   845  007E36                     STR_8:
   846                           
   847                           ; BSR set to: 0
   848  007E36  0A                 	db	10
   849  007E37  41                 	db	65	;'A'
   850  007E38  4D                 	db	77	;'M'
   851  007E39  53                 	db	83	;'S'
   852  007E3A  41                 	db	65	;'A'
   853  007E3B  54                 	db	84	;'T'
   854  007E3C  20                 	db	32
   855  007E3D  44                 	db	68	;'D'
   856  007E3E  4C                 	db	76	;'L'
   857  007E3F  20                 	db	32
   858  007E40  55                 	db	85	;'U'
   859  007E41  70                 	db	112	;'p'
   860  007E42  43                 	db	67	;'C'
   861  007E43  6F                 	db	111	;'o'
   862  007E44  6E                 	db	110	;'n'
   863  007E45  76                 	db	118	;'v'
   864  007E46  65                 	db	101	;'e'
   865  007E47  72                 	db	114	;'r'
   866  007E48  74                 	db	116	;'t'
   867  007E49  65                 	db	101	;'e'
   868  007E4A  72                 	db	114	;'r'
   869  007E4B  20                 	db	32
   870  007E4C  48                 	db	72	;'H'
   871  007E4D  57                 	db	87	;'W'
   872  007E4E  3A                 	db	58	;':'
   873  007E4F  25                 	db	37
   874  007E50  73                 	db	115	;'s'
   875  007E51  20                 	db	32
   876  007E52  46                 	db	70	;'F'
   877  007E53  57                 	db	87	;'W'
   878  007E54  3A                 	db	58	;':'
   879  007E55  25                 	db	37
   880  007E56  73                 	db	115	;'s'
   881  007E57  0A                 	db	10
   882  007E58  0A                 	db	10
   883  007E59  00                 	db	0
   884  007E5A                     STR_37:
   885                           
   886                           ; BSR set to: 0
   887  007E5A  55                 	db	85	;'U'
   888  007E5B  50                 	db	80	;'P'
   889  007E5C  43                 	db	67	;'C'
   890  007E5D  20                 	db	32
   891  007E5E  30                 	db	48	;'0'
   892  007E5F  30                 	db	48	;'0'
   893  007E60  20                 	db	32
   894  007E61  31                 	db	49	;'1'
   895  007E62  32                 	db	50	;'2'
   896  007E63  20                 	db	32
   897  007E64  73                 	db	115	;'s'
   898  007E65  75                 	db	117	;'u'
   899  007E66  70                 	db	112	;'p'
   900  007E67  70                 	db	112	;'p'
   901  007E68  6C                 	db	108	;'l'
   902  007E69  79                 	db	121	;'y'
   903  007E6A  20                 	db	32
   904  007E6B  76                 	db	118	;'v'
   905  007E6C  6F                 	db	111	;'o'
   906  007E6D  6C                 	db	108	;'l'
   907  007E6E  74                 	db	116	;'t'
   908  007E6F  61                 	db	97	;'a'
   909  007E70  67                 	db	103	;'g'
   910  007E71  65                 	db	101	;'e'
   911  007E72  20                 	db	32
   912  007E73  4F                 	db	79	;'O'
   913  007E74  4B                 	db	75	;'K'
   914  007E75  20                 	db	32
   915  007E76  25                 	db	37
   916  007E77  64                 	db	100	;'d'
   917  007E78  20                 	db	32
   918  007E79  6D                 	db	109	;'m'
   919  007E7A  56                 	db	86	;'V'
   920  007E7B  0A                 	db	10
   921  007E7C  00                 	db	0
   922  007E7D                     STR_29:
   923                           
   924                           ; BSR set to: 0
   925  007E7D  6F                 	db	111	;'o'
   926  007E7E  76                 	db	118	;'v'
   927  007E7F  65                 	db	101	;'e'
   928  007E80  72                 	db	114	;'r'
   929  007E81  20                 	db	32
   930  007E82  74                 	db	116	;'t'
   931  007E83  65                 	db	101	;'e'
   932  007E84  6D                 	db	109	;'m'
   933  007E85  70                 	db	112	;'p'
   934  007E86  65                 	db	101	;'e'
   935  007E87  72                 	db	114	;'r'
   936  007E88  61                 	db	97	;'a'
   937  007E89  74                 	db	116	;'t'
   938  007E8A  75                 	db	117	;'u'
   939  007E8B  72                 	db	114	;'r'
   940  007E8C  65                 	db	101	;'e'
   941  007E8D  20                 	db	32
   942  007E8E  61                 	db	97	;'a'
   943  007E8F  6C                 	db	108	;'l'
   944  007E90  61                 	db	97	;'a'
   945  007E91  72                 	db	114	;'r'
   946  007E92  6D                 	db	109	;'m'
   947  007E93  3A                 	db	58	;':'
   948  007E94  20                 	db	32
   949  007E95  25                 	db	37
   950  007E96  73                 	db	115	;'s'
   951  007E97  20                 	db	32
   952  007E98  54                 	db	84	;'T'
   953  007E99  3D                 	db	61	;'='
   954  007E9A  25                 	db	37
   955  007E9B  64                 	db	100	;'d'
   956  007E9C  0A                 	db	10
   957  007E9D  00                 	db	0
   958  007E9E                     STR_35:
   959                           
   960                           ; BSR set to: 0
   961  007E9E  55                 	db	85	;'U'
   962  007E9F  50                 	db	80	;'P'
   963  007EA0  43                 	db	67	;'C'
   964  007EA1  20                 	db	32
   965  007EA2  30                 	db	48	;'0'
   966  007EA3  30                 	db	48	;'0'
   967  007EA4  20                 	db	32
   968  007EA5  31                 	db	49	;'1'
   969  007EA6  32                 	db	50	;'2'
   970  007EA7  20                 	db	32
   971  007EA8  75                 	db	117	;'u'
   972  007EA9  6E                 	db	110	;'n'
   973  007EAA  64                 	db	100	;'d'
   974  007EAB  65                 	db	101	;'e'
   975  007EAC  72                 	db	114	;'r'
   976  007EAD  20                 	db	32
   977  007EAE  76                 	db	118	;'v'
   978  007EAF  6F                 	db	111	;'o'
   979  007EB0  6C                 	db	108	;'l'
   980  007EB1  74                 	db	116	;'t'
   981  007EB2  61                 	db	97	;'a'
   982  007EB3  67                 	db	103	;'g'
   983  007EB4  65                 	db	101	;'e'
   984  007EB5  20                 	db	32
   985  007EB6  25                 	db	37
   986  007EB7  64                 	db	100	;'d'
   987  007EB8  20                 	db	32
   988  007EB9  6D                 	db	109	;'m'
   989  007EBA  56                 	db	86	;'V'
   990  007EBB  0A                 	db	10
   991  007EBC  00                 	db	0
   992  007EBD                     STR_36:
   993                           
   994                           ; BSR set to: 0
   995  007EBD  55                 	db	85	;'U'
   996  007EBE  50                 	db	80	;'P'
   997  007EBF  43                 	db	67	;'C'
   998  007EC0  20                 	db	32
   999  007EC1  30                 	db	48	;'0'
  1000  007EC2  30                 	db	48	;'0'
  1001  007EC3  20                 	db	32
  1002  007EC4  31                 	db	49	;'1'
  1003  007EC5  33                 	db	51	;'3'
  1004  007EC6  20                 	db	32
  1005  007EC7  6F                 	db	111	;'o'
  1006  007EC8  76                 	db	118	;'v'
  1007  007EC9  65                 	db	101	;'e'
  1008  007ECA  72                 	db	114	;'r'
  1009  007ECB  20                 	db	32
  1010  007ECC  76                 	db	118	;'v'
  1011  007ECD  6F                 	db	111	;'o'
  1012  007ECE  6C                 	db	108	;'l'
  1013  007ECF  74                 	db	116	;'t'
  1014  007ED0  61                 	db	97	;'a'
  1015  007ED1  67                 	db	103	;'g'
  1016  007ED2  65                 	db	101	;'e'
  1017  007ED3  20                 	db	32
  1018  007ED4  25                 	db	37
  1019  007ED5  64                 	db	100	;'d'
  1020  007ED6  20                 	db	32
  1021  007ED7  6D                 	db	109	;'m'
  1022  007ED8  56                 	db	86	;'V'
  1023  007ED9  0A                 	db	10
  1024  007EDA  00                 	db	0
  1025  007EDB                     STR_20:
  1026                           
  1027                           ; BSR set to: 0
  1028  007EDB  55                 	db	85	;'U'
  1029  007EDC  50                 	db	80	;'P'
  1030  007EDD  43                 	db	67	;'C'
  1031  007EDE  20                 	db	32
  1032  007EDF  30                 	db	48	;'0'
  1033  007EE0  30                 	db	48	;'0'
  1034  007EE1  20                 	db	32
  1035  007EE2  30                 	db	48	;'0'
  1036  007EE3  38                 	db	56	;'8'
  1037  007EE4  20                 	db	32
  1038  007EE5  41                 	db	65	;'A'
  1039  007EE6  44                 	db	68	;'D'
  1040  007EE7  46                 	db	70	;'F'
  1041  007EE8  34                 	db	52	;'4'
  1042  007EE9  33                 	db	51	;'3'
  1043  007EEA  35                 	db	53	;'5'
  1044  007EEB  31                 	db	49	;'1'
  1045  007EEC  20                 	db	32
  1046  007EED  52                 	db	82	;'R'
  1047  007EEE  65                 	db	101	;'e'
  1048  007EEF  2D                 	db	45
  1049  007EF0  49                 	db	73	;'I'
  1050  007EF1  6E                 	db	110	;'n'
  1051  007EF2  69                 	db	105	;'i'
  1052  007EF3  74                 	db	116	;'t'
  1053  007EF4  0A                 	db	10
  1054  007EF5  00                 	db	0
  1055  007EF6                     STR_14:
  1056                           
  1057                           ; BSR set to: 0
  1058  007EF6  41                 	db	65	;'A'
  1059  007EF7  44                 	db	68	;'D'
  1060  007EF8  46                 	db	70	;'F'
  1061  007EF9  34                 	db	52	;'4'
  1062  007EFA  33                 	db	51	;'3'
  1063  007EFB  35                 	db	53	;'5'
  1064  007EFC  31                 	db	49	;'1'
  1065  007EFD  20                 	db	32
  1066  007EFE  49                 	db	73	;'I'
  1067  007EFF  4E                 	db	78	;'N'
  1068  007F00  49                 	db	73	;'I'
  1069  007F01  54                 	db	84	;'T'
  1070  007F02  20                 	db	32
  1071  007F03  28                 	db	40
  1072  007F04  25                 	db	37
  1073  007F05  73                 	db	115	;'s'
  1074  007F06  4D                 	db	77	;'M'
  1075  007F07  48                 	db	72	;'H'
  1076  007F08  7A                 	db	122	;'z'
  1077  007F09  29                 	db	41
  1078  007F0A  0D                 	db	13
  1079  007F0B  0A                 	db	10
  1080  007F0C  00                 	db	0
  1081  007F0D                     STR_1:
  1082                           
  1083                           ; BSR set to: 0
  1084  007F0D  55                 	db	85	;'U'
  1085  007F0E  50                 	db	80	;'P'
  1086  007F0F  43                 	db	67	;'C'
  1087  007F10  20                 	db	32
  1088  007F11  30                 	db	48	;'0'
  1089  007F12  30                 	db	48	;'0'
  1090  007F13  20                 	db	32
  1091  007F14  30                 	db	48	;'0'
  1092  007F15  39                 	db	57	;'9'
  1093  007F16  20                 	db	32
  1094  007F17  41                 	db	65	;'A'
  1095  007F18  44                 	db	68	;'D'
  1096  007F19  46                 	db	70	;'F'
  1097  007F1A  34                 	db	52	;'4'
  1098  007F1B  33                 	db	51	;'3'
  1099  007F1C  35                 	db	53	;'5'
  1100  007F1D  31                 	db	49	;'1'
  1101  007F1E  20                 	db	32
  1102  007F1F  25                 	db	37
  1103  007F20  73                 	db	115	;'s'
  1104  007F21  0A                 	db	10
  1105  007F22  00                 	db	0
  1106  007F23                     STR_32:
  1107                           
  1108                           ; BSR set to: 0
  1109  007F23  55                 	db	85	;'U'
  1110  007F24  50                 	db	80	;'P'
  1111  007F25  43                 	db	67	;'C'
  1112  007F26  20                 	db	32
  1113  007F27  30                 	db	48	;'0'
  1114  007F28  30                 	db	48	;'0'
  1115  007F29  20                 	db	32
  1116  007F2A  31                 	db	49	;'1'
  1117  007F2B  31                 	db	49	;'1'
  1118  007F2C  20                 	db	32
  1119  007F2D  25                 	db	37
  1120  007F2E  73                 	db	115	;'s'
  1121  007F2F  20                 	db	32
  1122  007F30  54                 	db	84	;'T'
  1123  007F31  3D                 	db	61	;'='
  1124  007F32  25                 	db	37
  1125  007F33  64                 	db	100	;'d'
  1126  007F34  0A                 	db	10
  1127  007F35  00                 	db	0
  1128  007F36                     STR_17:
  1129                           
  1130                           ; BSR set to: 0
  1131  007F36  41                 	db	65	;'A'
  1132  007F37  44                 	db	68	;'D'
  1133  007F38  46                 	db	70	;'F'
  1134  007F39  34                 	db	52	;'4'
  1135  007F3A  33                 	db	51	;'3'
  1136  007F3B  35                 	db	53	;'5'
  1137  007F3C  31                 	db	49	;'1'
  1138  007F3D  20                 	db	32
  1139  007F3E  53                 	db	83	;'S'
  1140  007F3F  45                 	db	69	;'E'
  1141  007F40  54                 	db	84	;'T'
  1142  007F41  20                 	db	32
  1143  007F42  54                 	db	84	;'T'
  1144  007F43  55                 	db	85	;'U'
  1145  007F44  4E                 	db	78	;'N'
  1146  007F45  45                 	db	69	;'E'
  1147  007F46  0D                 	db	13
  1148  007F47  0A                 	db	10
  1149  007F48  00                 	db	0
  1150  007F49                     STR_28:
  1151                           
  1152                           ; BSR set to: 0
  1153  007F49  55                 	db	85	;'U'
  1154  007F4A  50                 	db	80	;'P'
  1155  007F4B  43                 	db	67	;'C'
  1156  007F4C  20                 	db	32
  1157  007F4D  30                 	db	48	;'0'
  1158  007F4E  30                 	db	48	;'0'
  1159  007F4F  20                 	db	32
  1160  007F50  30                 	db	48	;'0'
  1161  007F51  32                 	db	50	;'2'
  1162  007F52  20                 	db	32
  1163  007F53  25                 	db	37
  1164  007F54  64                 	db	100	;'d'
  1165  007F55  20                 	db	32
  1166  007F56  25                 	db	37
  1167  007F57  64                 	db	100	;'d'
  1168  007F58  0A                 	db	10
  1169  007F59  00                 	db	0
  1170  007F5A                     STR_25:
  1171                           
  1172                           ; BSR set to: 0
  1173  007F5A  6C                 	db	108	;'l'
  1174  007F5B  6F                 	db	111	;'o'
  1175  007F5C  63                 	db	99	;'c'
  1176  007F5D  6B                 	db	107	;'k'
  1177  007F5E  20                 	db	32
  1178  007F5F  74                 	db	116	;'t'
  1179  007F60  69                 	db	105	;'i'
  1180  007F61  6D                 	db	109	;'m'
  1181  007F62  65                 	db	101	;'e'
  1182  007F63  64                 	db	100	;'d'
  1183  007F64  20                 	db	32
  1184  007F65  6F                 	db	111	;'o'
  1185  007F66  75                 	db	117	;'u'
  1186  007F67  74                 	db	116	;'t'
  1187  007F68  21                 	db	33
  1188  007F69  0A                 	db	10
  1189  007F6A  00                 	db	0
  1190  007F6B                     STR_24:
  1191                           
  1192                           ; BSR set to: 0
  1193  007F6B  55                 	db	85	;'U'
  1194  007F6C  50                 	db	80	;'P'
  1195  007F6D  43                 	db	67	;'C'
  1196  007F6E  20                 	db	32
  1197  007F6F  30                 	db	48	;'0'
  1198  007F70  30                 	db	48	;'0'
  1199  007F71  20                 	db	32
  1200  007F72  31                 	db	49	;'1'
  1201  007F73  30                 	db	48	;'0'
  1202  007F74  20                 	db	32
  1203  007F75  25                 	db	37
  1204  007F76  6C                 	db	108	;'l'
  1205  007F77  64                 	db	100	;'d'
  1206  007F78  0A                 	db	10
  1207  007F79  00                 	db	0
  1208  007F7A                     STR_23:
  1209                           
  1210                           ; BSR set to: 0
  1211  007F7A  55                 	db	85	;'U'
  1212  007F7B  50                 	db	80	;'P'
  1213  007F7C  43                 	db	67	;'C'
  1214  007F7D  20                 	db	32
  1215  007F7E  30                 	db	48	;'0'
  1216  007F7F  30                 	db	48	;'0'
  1217  007F80  20                 	db	32
  1218  007F81  30                 	db	48	;'0'
  1219  007F82  35                 	db	53	;'5'
  1220  007F83  20                 	db	32
  1221  007F84  25                 	db	37
  1222  007F85  6C                 	db	108	;'l'
  1223  007F86  64                 	db	100	;'d'
  1224  007F87  0A                 	db	10
  1225  007F88  00                 	db	0
  1226  007F89                     STR_26:
  1227                           
  1228                           ; BSR set to: 0
  1229  007F89  55                 	db	85	;'U'
  1230  007F8A  50                 	db	80	;'P'
  1231  007F8B  43                 	db	67	;'C'
  1232  007F8C  20                 	db	32
  1233  007F8D  30                 	db	48	;'0'
  1234  007F8E  30                 	db	48	;'0'
  1235  007F8F  20                 	db	32
  1236  007F90  30                 	db	48	;'0'
  1237  007F91  30                 	db	48	;'0'
  1238  007F92  20                 	db	32
  1239  007F93  25                 	db	37
  1240  007F94  64                 	db	100	;'d'
  1241  007F95  0A                 	db	10
  1242  007F96  00                 	db	0
  1243  007F97                     STR_27:
  1244                           
  1245                           ; BSR set to: 0
  1246  007F97  55                 	db	85	;'U'
  1247  007F98  50                 	db	80	;'P'
  1248  007F99  43                 	db	67	;'C'
  1249  007F9A  20                 	db	32
  1250  007F9B  30                 	db	48	;'0'
  1251  007F9C  30                 	db	48	;'0'
  1252  007F9D  20                 	db	32
  1253  007F9E  30                 	db	48	;'0'
  1254  007F9F  31                 	db	49	;'1'
  1255  007FA0  20                 	db	32
  1256  007FA1  25                 	db	37
  1257  007FA2  64                 	db	100	;'d'
  1258  007FA3  0A                 	db	10
  1259  007FA4  00                 	db	0
  1260  007FA5                     STR_18:
  1261                           
  1262                           ; BSR set to: 0
  1263  007FA5  49                 	db	73	;'I'
  1264  007FA6  4E                 	db	78	;'N'
  1265  007FA7  49                 	db	73	;'I'
  1266  007FA8  54                 	db	84	;'T'
  1267  007FA9  20                 	db	32
  1268  007FAA  53                 	db	83	;'S'
  1269  007FAB  57                 	db	87	;'W'
  1270  007FAC  49                 	db	73	;'I'
  1271  007FAD  54                 	db	84	;'T'
  1272  007FAE  43                 	db	67	;'C'
  1273  007FAF  48                 	db	72	;'H'
  1274  007FB0  0D                 	db	13
  1275  007FB1  0A                 	db	10
  1276  007FB2  00                 	db	0
  1277  007FB3                     STR_21:
  1278                           
  1279                           ; BSR set to: 0
  1280  007FB3  55                 	db	85	;'U'
  1281  007FB4  50                 	db	80	;'P'
  1282  007FB5  43                 	db	67	;'C'
  1283  007FB6  20                 	db	32
  1284  007FB7  30                 	db	48	;'0'
  1285  007FB8  30                 	db	48	;'0'
  1286  007FB9  20                 	db	32
  1287  007FBA  30                 	db	48	;'0'
  1288  007FBB  34                 	db	52	;'4'
  1289  007FBC  20                 	db	32
  1290  007FBD  25                 	db	37
  1291  007FBE  64                 	db	100	;'d'
  1292  007FBF  0A                 	db	10
  1293  007FC0  00                 	db	0
  1294  007FC1                     STR_22:
  1295                           
  1296                           ; BSR set to: 0
  1297  007FC1  55                 	db	85	;'U'
  1298  007FC2  50                 	db	80	;'P'
  1299  007FC3  43                 	db	67	;'C'
  1300  007FC4  20                 	db	32
  1301  007FC5  30                 	db	48	;'0'
  1302  007FC6  30                 	db	48	;'0'
  1303  007FC7  20                 	db	32
  1304  007FC8  30                 	db	48	;'0'
  1305  007FC9  36                 	db	54	;'6'
  1306  007FCA  20                 	db	32
  1307  007FCB  25                 	db	37
  1308  007FCC  64                 	db	100	;'d'
  1309  007FCD  0A                 	db	10
  1310  007FCE  00                 	db	0
  1311  007FCF                     STR_3:
  1312                           
  1313                           ; BSR set to: 0
  1314  007FCF  55                 	db	85	;'U'
  1315  007FD0  4E                 	db	78	;'N'
  1316  007FD1  4C                 	db	76	;'L'
  1317  007FD2  4F                 	db	79	;'O'
  1318  007FD3  43                 	db	67	;'C'
  1319  007FD4  4B                 	db	75	;'K'
  1320  007FD5  45                 	db	69	;'E'
  1321  007FD6  44                 	db	68	;'D'
  1322  007FD7  00                 	db	0
  1323  007FD8                     STR_7:
  1324                           
  1325                           ; BSR set to: 0
  1326  007FD8  4F                 	db	79	;'O'
  1327  007FD9  4C                 	db	76	;'L'
  1328  007FDA  44                 	db	68	;'D'
  1329  007FDB  20                 	db	32
  1330  007FDC  25                 	db	37
  1331  007FDD  73                 	db	115	;'s'
  1332  007FDE  00                 	db	0
  1333  007FDF                     STR_10:
  1334                           
  1335                           ; BSR set to: 0
  1336  007FDF  56                 	db	86	;'V'
  1337  007FE0  31                 	db	49	;'1'
  1338  007FE1  2E                 	db	46
  1339  007FE2  30                 	db	48	;'0'
  1340  007FE3  00                 	db	0
  1341  007FE4                     STR_9:
  1342                           
  1343                           ; BSR set to: 0
  1344  007FE4  56                 	db	86	;'V'
  1345  007FE5  34                 	db	52	;'4'
  1346  007FE6  2E                 	db	46
  1347  007FE7  32                 	db	50	;'2'
  1348  007FE8  00                 	db	0
  1349  007FE9                     STR_31:
  1350                           
  1351                           ; BSR set to: 0
  1352  007FE9  4F                 	db	79	;'O'
  1353  007FEA  46                 	db	70	;'F'
  1354  007FEB  46                 	db	70	;'F'
  1355  007FEC  00                 	db	0
  1356  007FED                     STR_38:
  1357                           
  1358                           ; BSR set to: 0
  1359  007FED  6C                 	db	108	;'l'
  1360  007FEE  64                 	db	100	;'d'
  1361  007FEF  00                 	db	0
  1362  007FF0                     STR_42:
  1363                           
  1364                           ; BSR set to: 0
  1365  007FF0  6C                 	db	108	;'l'
  1366  007FF1  69                 	db	105	;'i'
  1367  007FF2  00                 	db	0
  1368  007FF3                     STR_47:
  1369                           
  1370                           ; BSR set to: 0
  1371  007FF3  6C                 	db	108	;'l'
  1372  007FF4  75                 	db	117	;'u'
  1373  007FF5  00                 	db	0
  1374  007FF6                     STR_30:
  1375                           
  1376                           ; BSR set to: 0
  1377  007FF6  4F                 	db	79	;'O'
  1378  007FF7  4E                 	db	78	;'N'
  1379  007FF8  00                 	db	0
  1380  007FF9                     STR_15:
  1381                           
  1382                           ; BSR set to: 0
  1383  007FF9  31                 	db	49	;'1'
  1384  007FFA  30                 	db	48	;'0'
  1385  007FFB  00                 	db	0
  1386  007FFC                     STR_16:
  1387                           
  1388                           ; BSR set to: 0
  1389  007FFC  34                 	db	52	;'4'
  1390  007FFD  30                 	db	48	;'0'
  1391  007FFE  00                 	db	0
  1392  0000                     
  1393                           ; #config settings
  1394  007FFF  00                 	db	0	; dummy byte at the end
  1395  0000                     
  1396                           	psect	cinit
  1397  004030                     __pcinit:
  1398                           	opt callstack 0
  1399  004030                     start_initialization:
  1400                           	opt callstack 0
  1401  004030                     __initialization:
  1402                           	opt callstack 0
  1403                           
  1404                           ; Initialize objects allocated to BANK1 (68 bytes)
  1405                           ; load TBLPTR registers with __pidataBANK1
  1406  004030  0E4C               	movlw	low __pidataBANK1
  1407  004032  6EF6               	movwf	tblptrl,c
  1408  004034  0E4C               	movlw	high __pidataBANK1
  1409  004036  6EF7               	movwf	tblptrh,c
  1410  004038  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1411  00403A  6EF8               	movwf	tblptru,c
  1412  00403C  EE01  F09C         	lfsr	0,__pdataBANK1
  1413  004040  EE10 F044          	lfsr	1,68
  1414  004044                     copy_data0:
  1415  004044  0009               	tblrd		*+
  1416  004046  CFF5 FFEE          	movff	tablat,postinc0
  1417  00404A  50E5               	movf	postdec1,w,c
  1418  00404C  50E1               	movf	fsr1l,w,c
  1419  00404E  E1FA               	bnz	copy_data0
  1420                           
  1421                           ; Initialize objects allocated to BANK0 (19 bytes)
  1422                           ; load TBLPTR registers with __pidataBANK0
  1423  004050  0E3A               	movlw	low __pidataBANK0
  1424  004052  6EF6               	movwf	tblptrl,c
  1425  004054  0E4F               	movlw	high __pidataBANK0
  1426  004056  6EF7               	movwf	tblptrh,c
  1427  004058  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1428  00405A  6EF8               	movwf	tblptru,c
  1429  00405C  EE00  F0ED         	lfsr	0,__pdataBANK0
  1430  004060  EE10 F013          	lfsr	1,19
  1431  004064                     copy_data1:
  1432  004064  0009               	tblrd		*+
  1433  004066  CFF5 FFEE          	movff	tablat,postinc0
  1434  00406A  50E5               	movf	postdec1,w,c
  1435  00406C  50E1               	movf	fsr1l,w,c
  1436  00406E  E1FA               	bnz	copy_data1
  1437                           
  1438                           ; Initialize objects allocated to COMRAM (1 bytes)
  1439                           ; load TBLPTR registers with __pidataCOMRAM
  1440  004070  0E68               	movlw	low __pidataCOMRAM
  1441  004072  6EF6               	movwf	tblptrl,c
  1442  004074  0E4F               	movlw	high __pidataCOMRAM
  1443  004076  6EF7               	movwf	tblptrh,c
  1444  004078  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1445  00407A  6EF8               	movwf	tblptru,c
  1446  00407C  0009               	tblrd		*+	;fetch initializer
  1447  00407E  CFF5 F072          	movff	tablat,__pdataCOMRAM
  1448                           
  1449                           ; Clear objects allocated to BANK2 (256 bytes)
  1450  004082  EE02  F000         	lfsr	0,__pbssBANK2
  1451  004086  EE11 F000          	lfsr	1,256
  1452  00408A                     clear_0:
  1453  00408A  6AEE               	clrf	postinc0,c
  1454  00408C  50E5               	movf	postdec1,w,c
  1455  00408E  50E1               	movf	fsr1l,w,c
  1456  004090  E1FC               	bnz	clear_0
  1457  004092  50E2               	movf	fsr1h,w,c
  1458  004094  E1FA               	bnz	clear_0
  1459                           
  1460                           ; Clear objects allocated to BANK1 (156 bytes)
  1461  004096  EE01  F000         	lfsr	0,__pbssBANK1
  1462  00409A  0E9C               	movlw	156
  1463  00409C                     clear_1:
  1464  00409C  6AEE               	clrf	postinc0,c
  1465  00409E  06E8               	decf	wreg,f,c
  1466  0040A0  E1FD               	bnz	clear_1
  1467                           
  1468                           ; Clear objects allocated to BANK0 (57 bytes)
  1469  0040A2  EE00  F080         	lfsr	0,__pbssBANK0
  1470  0040A6  0E39               	movlw	57
  1471  0040A8                     clear_2:
  1472  0040A8  6AEE               	clrf	postinc0,c
  1473  0040AA  06E8               	decf	wreg,f,c
  1474  0040AC  E1FD               	bnz	clear_2
  1475                           
  1476                           ; Clear objects allocated to COMRAM (11 bytes)
  1477  0040AE  EE00  F067         	lfsr	0,__pbssCOMRAM
  1478  0040B2  0E0B               	movlw	11
  1479  0040B4                     clear_3:
  1480  0040B4  6AEE               	clrf	postinc0,c
  1481  0040B6  06E8               	decf	wreg,f,c
  1482  0040B8  E1FD               	bnz	clear_3
  1483  0040BA                     end_of_initialization:
  1484                           	opt callstack 0
  1485  0040BA                     __end_of__initialization:
  1486                           	opt callstack 0
  1487  0040BA  9073               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1488  0040BC  9273               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1489  0040BE  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1490  0040C0  6EF8               	movwf	tblptru,c
  1491  0040C2  0100               	movlb	0
  1492  0040C4  EF06  F012         	goto	_main	;jump to C main() function
  1493                           
  1494                           	psect	bssCOMRAM
  1495  000067                     __pbssCOMRAM:
  1496                           	opt callstack 0
  1497  000067                     _width:
  1498                           	opt callstack 0
  1499  000067                     	ds	2
  1500  000069                     _prec:
  1501                           	opt callstack 0
  1502  000069                     	ds	2
  1503  00006B                     _flags:
  1504                           	opt callstack 0
  1505  00006B                     	ds	2
  1506  00006D                     _g_usart_wpos:
  1507                           	opt callstack 0
  1508  00006D                     	ds	2
  1509  00006F                     _g_usart_rpos:
  1510                           	opt callstack 0
  1511  00006F                     	ds	2
  1512  000071                     	ds	1
  1513                           
  1514                           	psect	dataCOMRAM
  1515  000072                     __pdataCOMRAM:
  1516                           	opt callstack 0
  1517  000072                     _g_pending_cmd:
  1518                           	opt callstack 0
  1519  000072                     	ds	1
  1520                           
  1521                           	psect	bssBANK0
  1522  000080                     __pbssBANK0:
  1523                           	opt callstack 0
  1524  000080                     _g_irq_handler_info:
  1525                           	opt callstack 0
  1526  000080                     	ds	4
  1527  000084                     _nout:
  1528                           	opt callstack 0
  1529  000084                     	ds	2
  1530  000086                     check_adf4351_lock@timespan_s:
  1531                           	opt callstack 0
  1532  000086                     	ds	2
  1533  000088                     _g_cpu_led_update_cnt:
  1534                           	opt callstack 0
  1535  000088                     	ds	2
  1536  00008A                     alarm@old_supplyvoltage_alarm:
  1537                           	opt callstack 0
  1538  00008A                     	ds	1
  1539  00008B                     alarm@old_overtemp_alarm:
  1540                           	opt callstack 0
  1541  00008B                     	ds	1
  1542  00008C                     _supplyvoltage_alarm:
  1543                           	opt callstack 0
  1544  00008C                     	ds	1
  1545  00008D                     _revpwr_alarm:
  1546                           	opt callstack 0
  1547  00008D                     	ds	1
  1548  00008E                     _overtemp_alarm:
  1549                           	opt callstack 0
  1550  00008E                     	ds	1
  1551  00008F                     _power_dBm:
  1552                           	opt callstack 0
  1553  00008F                     	ds	1
  1554  000090                     update_led@pause:
  1555                           	opt callstack 0
  1556  000090                     	ds	1
  1557  000091                     update_led@blinkstat:
  1558                           	opt callstack 0
  1559  000091                     	ds	1
  1560  000092                     update_led@blinkcnt:
  1561                           	opt callstack 0
  1562  000092                     	ds	1
  1563  000093                     check_adf4351_lock@unlock_cnt:
  1564                           	opt callstack 0
  1565  000093                     	ds	1
  1566  000094                     check_adf4351_lock@last_lock:
  1567                           	opt callstack 0
  1568  000094                     	ds	1
  1569  000095                     _ptt_status:
  1570                           	opt callstack 0
  1571  000095                     	ds	1
  1572  000096                     _power_blink:
  1573                           	opt callstack 0
  1574  000096                     	ds	1
  1575  000097                     receive_downconverter_data@idx:
  1576                           	opt callstack 0
  1577  000097                     	ds	1
  1578  000098                     _down_rxidx:
  1579                           	opt callstack 0
  1580  000098                     	ds	1
  1581  000099                     _dbuf:
  1582                           	opt callstack 0
  1583  000099                     	ds	32
  1584                           
  1585                           	psect	dataBANK0
  1586  0000ED                     __pdataBANK0:
  1587                           	opt callstack 0
  1588  0000ED                     stoa@F1139:
  1589                           	opt callstack 0
  1590  0000ED                     	ds	7
  1591  0000F4                     _g_ptt_debounce_counter:
  1592                           	opt callstack 0
  1593  0000F4                     	ds	2
  1594  0000F6                     	ds	2
  1595  0000F8                     	ds	2
  1596  0000FA                     _g_cmd_debounce_counter:
  1597                           	opt callstack 0
  1598  0000FA                     	ds	2
  1599  0000FC                     setPTT_LED@old_onoff:
  1600                           	opt callstack 0
  1601  0000FC                     	ds	1
  1602  0000FD                     setLOCK_LED@old_onoff:
  1603                           	opt callstack 0
  1604  0000FD                     	ds	1
  1605  0000FE                     _g_applied_cmd:
  1606                           	opt callstack 0
  1607  0000FE                     	ds	1
  1608  0000FF                     adf4351_get_lock@lastlock:
  1609                           	opt callstack 0
  1610  0000FF                     	ds	1
  1611                           
  1612                           	psect	bssBANK1
  1613  000100                     __pbssBANK1:
  1614                           	opt callstack 0
  1615  000100                     _down_rxbuf:
  1616                           	opt callstack 0
  1617  000100                     	ds	101
  1618  000165                     _g_adf4351:
  1619                           	opt callstack 0
  1620  000165                     	ds	55
  1621                           
  1622                           	psect	dataBANK1
  1623  00019C                     __pdataBANK1:
  1624                           	opt callstack 0
  1625  00019C                     _temptab:
  1626                           	opt callstack 0
  1627  00019C                     	ds	68
  1628                           
  1629                           	psect	bssBANK2
  1630  000200                     __pbssBANK2:
  1631                           	opt callstack 0
  1632  000200                     _g_usart_buf:
  1633                           	opt callstack 0
  1634  000200                     	ds	256
  1635                           
  1636                           	psect	cstackBANK1
  1637  0001E0                     __pcstackBANK1:
  1638                           	opt callstack 0
  1639  0001E0                     ??_main:
  1640                           
  1641                           ; 1 bytes @ 0x0
  1642  0001E0                     	ds	3
  1643  0001E3                     _main$1985:
  1644                           	opt callstack 0
  1645                           
  1646                           ; 2 bytes @ 0x3
  1647  0001E3                     	ds	2
  1648  0001E5                     main@ref:
  1649                           	opt callstack 0
  1650                           
  1651                           ; 2 bytes @ 0x5
  1652  0001E5                     	ds	2
  1653  0001E7                     main@i:
  1654                           	opt callstack 0
  1655                           
  1656                           ; 2 bytes @ 0x7
  1657  0001E7                     	ds	2
  1658                           
  1659                           	psect	cstackBANK0
  1660  0000B9                     __pcstackBANK0:
  1661                           	opt callstack 0
  1662  0000B9                     vfpfcnvrt@cp:
  1663                           	opt callstack 0
  1664                           
  1665                           ; 2 bytes @ 0x0
  1666  0000B9                     	ds	2
  1667  0000BB                     vfpfcnvrt@ll:
  1668                           	opt callstack 0
  1669                           
  1670                           ; 8 bytes @ 0x2
  1671  0000BB                     	ds	8
  1672  0000C3                     vfpfcnvrt@llu:
  1673                           	opt callstack 0
  1674                           
  1675                           ; 8 bytes @ 0xA
  1676  0000C3                     	ds	8
  1677  0000CB                     ?_printf:
  1678                           	opt callstack 0
  1679  0000CB                     printf@fmt:
  1680                           	opt callstack 0
  1681                           
  1682                           ; 2 bytes @ 0x12
  1683  0000CB                     	ds	10
  1684  0000D5                     ??_alarm:
  1685  0000D5                     ??_setPTT_LED:
  1686  0000D5                     ??_receive_downconverter_data:
  1687  0000D5                     ??_setLOCK_LED:
  1688  0000D5                     ?_adf4351_get_lock:
  1689                           	opt callstack 0
  1690  0000D5                     adf4351_get_lock@ctx:
  1691                           	opt callstack 0
  1692  0000D5                     adf4351_calc_rcnt_block@ctx:
  1693                           	opt callstack 0
  1694                           
  1695                           ; 2 bytes @ 0x1C
  1696  0000D5                     	ds	2
  1697  0000D7                     ??_adf4351_get_lock:
  1698  0000D7                     check_usart@c:
  1699                           	opt callstack 0
  1700  0000D7                     adf4351_calc_rcnt_block@bscdiv:
  1701                           	opt callstack 0
  1702                           
  1703                           ; 4 bytes @ 0x1E
  1704  0000D7                     	ds	1
  1705  0000D8                     ??_pa_mute:
  1706  0000D8                     ??_pa_unmute:
  1707  0000D8                     alarm@rev:
  1708                           	opt callstack 0
  1709                           
  1710                           ; 2 bytes @ 0x1F
  1711  0000D8                     	ds	2
  1712  0000DA                     _adf4351_get_lock$290:
  1713                           	opt callstack 0
  1714  0000DA                     _alarm$2272:
  1715                           	opt callstack 0
  1716                           
  1717                           ; 2 bytes @ 0x21
  1718  0000DA                     	ds	1
  1719  0000DB                     adf4351_calc_rcnt_block@div:
  1720                           	opt callstack 0
  1721                           
  1722                           ; 2 bytes @ 0x22
  1723  0000DB                     	ds	1
  1724  0000DC                     adf4351_get_lock@lock:
  1725                           	opt callstack 0
  1726  0000DC                     _alarm$2277:
  1727                           	opt callstack 0
  1728                           
  1729                           ; 2 bytes @ 0x23
  1730  0000DC                     	ds	1
  1731  0000DD                     ??_update_led:
  1732  0000DD                     ??_pa_update:
  1733  0000DD                     adf4351_set_freq@ctx:
  1734                           	opt callstack 0
  1735                           
  1736                           ; 2 bytes @ 0x24
  1737  0000DD                     	ds	1
  1738  0000DE                     alarm@fwd:
  1739                           	opt callstack 0
  1740                           
  1741                           ; 2 bytes @ 0x25
  1742  0000DE                     	ds	1
  1743  0000DF                     adf4351_set_freq@freq:
  1744                           	opt callstack 0
  1745                           
  1746                           ; 4 bytes @ 0x26
  1747  0000DF                     	ds	1
  1748  0000E0                     update_led@updatetime:
  1749                           	opt callstack 0
  1750  0000E0                     alarm@temperature:
  1751                           	opt callstack 0
  1752                           
  1753                           ; 2 bytes @ 0x27
  1754  0000E0                     	ds	2
  1755  0000E2                     alarm@voltage:
  1756                           	opt callstack 0
  1757                           
  1758                           ; 2 bytes @ 0x29
  1759  0000E2                     	ds	1
  1760  0000E3                     
  1761                           ; 1 bytes @ 0x2A
  1762  0000E3                     	ds	2
  1763  0000E5                     ??_handle_cmd:
  1764                           
  1765                           ; 1 bytes @ 0x2C
  1766  0000E5                     	ds	4
  1767  0000E9                     handle_cmd@timeout:
  1768                           	opt callstack 0
  1769                           
  1770                           ; 2 bytes @ 0x30
  1771  0000E9                     	ds	2
  1772  0000EB                     handle_cmd@cmd:
  1773                           	opt callstack 0
  1774                           
  1775                           ; 1 bytes @ 0x32
  1776  0000EB                     	ds	1
  1777  0000EC                     update_switch@cmd:
  1778                           	opt callstack 0
  1779                           
  1780                           ; 1 bytes @ 0x33
  1781  0000EC                     	ds	1
  1782                           
  1783                           	psect	cstackCOMRAM
  1784  000001                     __pcstackCOMRAM:
  1785                           	opt callstack 0
  1786  000001                     usart_rx_irq_handler@udata:
  1787                           	opt callstack 0
  1788                           
  1789                           ; 2 bytes @ 0x0
  1790  000001                     	ds	2
  1791  000003                     ??_usart_rx_irq_handler:
  1792                           
  1793                           ; 1 bytes @ 0x2
  1794  000003                     	ds	2
  1795  000005                     usart_rx_irq_handler@c:
  1796                           	opt callstack 0
  1797                           
  1798                           ; 1 bytes @ 0x4
  1799  000005                     	ds	1
  1800  000006                     usart_rx_irq_handler@wposn:
  1801                           	opt callstack 0
  1802                           
  1803                           ; 2 bytes @ 0x5
  1804  000006                     	ds	2
  1805  000008                     ??_global_irq_handler:
  1806                           
  1807                           ; 1 bytes @ 0x7
  1808  000008                     	ds	4
  1809  00000C                     global_irq_handler@dummy:
  1810                           	opt callstack 0
  1811                           
  1812                           ; 1 bytes @ 0xB
  1813  00000C                     	ds	1
  1814  00000D                     ??_init_gpios:
  1815  00000D                     ??_read_switch:
  1816  00000D                     ?_gpio_to_ch:
  1817                           	opt callstack 0
  1818  00000D                     ?_strlen:
  1819                           	opt callstack 0
  1820  00000D                     ?_strncmp:
  1821                           	opt callstack 0
  1822  00000D                     ?_usart_tstc:
  1823                           	opt callstack 0
  1824  00000D                     ?_usart_getc:
  1825                           	opt callstack 0
  1826  00000D                     ?___awdiv:
  1827                           	opt callstack 0
  1828  00000D                     ?___fladd:
  1829                           	opt callstack 0
  1830  00000D                     ?___flmul:
  1831                           	opt callstack 0
  1832  00000D                     ?___lmul:
  1833                           	opt callstack 0
  1834  00000D                     ?___lldiv:
  1835                           	opt callstack 0
  1836  00000D                     ?___aldiv:
  1837                           	opt callstack 0
  1838  00000D                     ?___llmod:
  1839                           	opt callstack 0
  1840  00000D                     ?___xxtofl:
  1841                           	opt callstack 0
  1842  00000D                     ?___aodiv:
  1843                           	opt callstack 0
  1844  00000D                     ?___aomod:
  1845                           	opt callstack 0
  1846  00000D                     ?___lodiv:
  1847                           	opt callstack 0
  1848  00000D                     ?___lomod:
  1849                           	opt callstack 0
  1850  00000D                     usart_putc@c:
  1851                           	opt callstack 0
  1852  00000D                     adf4351_default@ctx:
  1853                           	opt callstack 0
  1854  00000D                     adf4351_calc_vco_core_freq@ctx:
  1855                           	opt callstack 0
  1856  00000D                     irq_set_handler@handler:
  1857                           	opt callstack 0
  1858  00000D                     gpio_to_ch@gpio:
  1859                           	opt callstack 0
  1860  00000D                     ___awdiv@dividend:
  1861                           	opt callstack 0
  1862  00000D                     memset@dest:
  1863                           	opt callstack 0
  1864  00000D                     strlen@s:
  1865                           	opt callstack 0
  1866  00000D                     strncmp@_l:
  1867                           	opt callstack 0
  1868  00000D                     adf4351_write_latch@value:
  1869                           	opt callstack 0
  1870  00000D                     ___lmul@multiplier:
  1871                           	opt callstack 0
  1872  00000D                     ___lldiv@dividend:
  1873                           	opt callstack 0
  1874  00000D                     ___aldiv@dividend:
  1875                           	opt callstack 0
  1876  00000D                     ___fleq@ff1:
  1877                           	opt callstack 0
  1878  00000D                     ___flge@ff1:
  1879                           	opt callstack 0
  1880  00000D                     ___llmod@dividend:
  1881                           	opt callstack 0
  1882  00000D                     ___fladd@b:
  1883                           	opt callstack 0
  1884  00000D                     ___flmul@b:
  1885                           	opt callstack 0
  1886  00000D                     ___xxtofl@val:
  1887                           	opt callstack 0
  1888  00000D                     ___aodiv@dividend:
  1889                           	opt callstack 0
  1890  00000D                     ___aomod@dividend:
  1891                           	opt callstack 0
  1892  00000D                     ___lodiv@dividend:
  1893                           	opt callstack 0
  1894  00000D                     ___lomod@dividend:
  1895                           	opt callstack 0
  1896                           
  1897                           ; 8 bytes @ 0xC
  1898  00000D                     	ds	1
  1899  00000E                     fputc@c:
  1900                           	opt callstack 0
  1901                           
  1902                           ; 2 bytes @ 0xD
  1903  00000E                     	ds	1
  1904  00000F                     ??_gpio_to_ch:
  1905  00000F                     ??_usart_getc:
  1906  00000F                     irq_set_handler@udata:
  1907                           	opt callstack 0
  1908  00000F                     ___awdiv@divisor:
  1909                           	opt callstack 0
  1910  00000F                     memset@c:
  1911                           	opt callstack 0
  1912  00000F                     strlen@a:
  1913                           	opt callstack 0
  1914  00000F                     strncmp@_r:
  1915                           	opt callstack 0
  1916  00000F                     adf4351_calc_vco_core_freq@rf_out_freq:
  1917                           	opt callstack 0
  1918                           
  1919                           ; 4 bytes @ 0xE
  1920  00000F                     	ds	1
  1921  000010                     read_switch@fsw0:
  1922                           	opt callstack 0
  1923  000010                     fputc@fp:
  1924                           	opt callstack 0
  1925                           
  1926                           ; 2 bytes @ 0xF
  1927  000010                     	ds	1
  1928  000011                     ??_adf4351_write_latch:
  1929  000011                     ??___xxtofl:
  1930  000011                     ?_adc_sample:
  1931                           	opt callstack 0
  1932  000011                     irq_set_handler@id:
  1933                           	opt callstack 0
  1934  000011                     read_switch@fsw1:
  1935                           	opt callstack 0
  1936  000011                     ___awdiv@counter:
  1937                           	opt callstack 0
  1938  000011                     usart_getc@res:
  1939                           	opt callstack 0
  1940  000011                     adc_cfg_gpio@gpio:
  1941                           	opt callstack 0
  1942  000011                     adc_sample@gpio:
  1943                           	opt callstack 0
  1944  000011                     memset@n:
  1945                           	opt callstack 0
  1946  000011                     strncmp@n:
  1947                           	opt callstack 0
  1948  000011                     ___lmul@multiplicand:
  1949                           	opt callstack 0
  1950  000011                     ___lldiv@divisor:
  1951                           	opt callstack 0
  1952  000011                     ___aldiv@divisor:
  1953                           	opt callstack 0
  1954  000011                     ___fleq@ff2:
  1955                           	opt callstack 0
  1956  000011                     ___flge@ff2:
  1957                           	opt callstack 0
  1958  000011                     ___llmod@divisor:
  1959                           	opt callstack 0
  1960  000011                     ___fladd@a:
  1961                           	opt callstack 0
  1962  000011                     ___flmul@a:
  1963                           	opt callstack 0
  1964                           
  1965                           ; 4 bytes @ 0x10
  1966  000011                     	ds	1
  1967  000012                     ?_stoa:
  1968                           	opt callstack 0
  1969  000012                     ___awdiv@sign:
  1970                           	opt callstack 0
  1971  000012                     fputs@s:
  1972                           	opt callstack 0
  1973  000012                     stoa@fp:
  1974                           	opt callstack 0
  1975                           
  1976                           ; 2 bytes @ 0x11
  1977  000012                     	ds	1
  1978  000013                     ??_memset:
  1979  000013                     ??_strncmp:
  1980  000013                     ??_adc_cfg_gpio:
  1981  000013                     ??_adc_sample:
  1982  000013                     ___awdiv@quotient:
  1983                           	opt callstack 0
  1984  000013                     fputs@fp:
  1985                           	opt callstack 0
  1986                           
  1987                           ; 2 bytes @ 0x12
  1988  000013                     	ds	1
  1989  000014                     stoa@s:
  1990                           	opt callstack 0
  1991  000014                     strncmp@l:
  1992                           	opt callstack 0
  1993                           
  1994                           ; 2 bytes @ 0x13
  1995  000014                     	ds	1
  1996  000015                     ??___fladd:
  1997  000015                     ??___flmul:
  1998  000015                     ??___fleq:
  1999  000015                     ??___flge:
  2000  000015                     ___aldiv@counter:
  2001                           	opt callstack 0
  2002  000015                     ___llmod@counter:
  2003                           	opt callstack 0
  2004  000015                     ___xxtofl@sign:
  2005                           	opt callstack 0
  2006  000015                     fputs@c:
  2007                           	opt callstack 0
  2008  000015                     adc_sample@result:
  2009                           	opt callstack 0
  2010  000015                     memset@k:
  2011                           	opt callstack 0
  2012  000015                     adf4351_write_latch@mask:
  2013                           	opt callstack 0
  2014  000015                     ___lmul@product:
  2015                           	opt callstack 0
  2016  000015                     ___lldiv@quotient:
  2017                           	opt callstack 0
  2018  000015                     ___aodiv@divisor:
  2019                           	opt callstack 0
  2020  000015                     ___aomod@divisor:
  2021                           	opt callstack 0
  2022  000015                     ___lodiv@divisor:
  2023                           	opt callstack 0
  2024  000015                     ___lomod@divisor:
  2025                           	opt callstack 0
  2026                           
  2027                           ; 8 bytes @ 0x14
  2028  000015                     	ds	1
  2029  000016                     ??_stoa:
  2030  000016                     ?_gcd:
  2031                           	opt callstack 0
  2032  000016                     ___aldiv@sign:
  2033                           	opt callstack 0
  2034  000016                     ___xxtofl@exp:
  2035                           	opt callstack 0
  2036  000016                     fputs@i:
  2037                           	opt callstack 0
  2038  000016                     strncmp@r:
  2039                           	opt callstack 0
  2040  000016                     gcd@a:
  2041                           	opt callstack 0
  2042                           
  2043                           ; 4 bytes @ 0x15
  2044  000016                     	ds	1
  2045  000017                     adf4351_calc_vco_core_freq@div:
  2046                           	opt callstack 0
  2047  000017                     adc_sample@ch:
  2048                           	opt callstack 0
  2049  000017                     memset@s:
  2050                           	opt callstack 0
  2051  000017                     ___aldiv@quotient:
  2052                           	opt callstack 0
  2053  000017                     ___xxtofl@arg:
  2054                           	opt callstack 0
  2055  000017                     stoa@nuls:
  2056                           	opt callstack 0
  2057                           
  2058                           ; 7 bytes @ 0x16
  2059  000017                     	ds	1
  2060  000018                     ?_pad:
  2061                           	opt callstack 0
  2062  000018                     pad@fp:
  2063                           	opt callstack 0
  2064                           
  2065                           ; 2 bytes @ 0x17
  2066  000018                     	ds	1
  2067  000019                     ?_adc_voltage:
  2068                           	opt callstack 0
  2069  000019                     ___lldiv@counter:
  2070                           	opt callstack 0
  2071  000019                     ___fladd@signs:
  2072                           	opt callstack 0
  2073  000019                     ___flmul@sign:
  2074                           	opt callstack 0
  2075  000019                     adf4351_init@ctx:
  2076                           	opt callstack 0
  2077  000019                     adf4351_write_reg0@ctx:
  2078                           	opt callstack 0
  2079  000019                     adf4351_write_reg1@ctx:
  2080                           	opt callstack 0
  2081  000019                     adf4351_write_reg2@ctx:
  2082                           	opt callstack 0
  2083  000019                     adf4351_write_reg3@ctx:
  2084                           	opt callstack 0
  2085  000019                     adf4351_write_reg4@ctx:
  2086                           	opt callstack 0
  2087  000019                     adf4351_write_reg5@ctx:
  2088                           	opt callstack 0
  2089  000019                     adc_voltage@gpio:
  2090                           	opt callstack 0
  2091                           
  2092                           ; 2 bytes @ 0x18
  2093  000019                     	ds	1
  2094  00001A                     pad@buf:
  2095                           	opt callstack 0
  2096  00001A                     ___fladd@aexp:
  2097                           	opt callstack 0
  2098  00001A                     ___flmul@aexp:
  2099                           	opt callstack 0
  2100  00001A                     gcd@b:
  2101                           	opt callstack 0
  2102  00001A                     usart_init@baud:
  2103                           	opt callstack 0
  2104                           
  2105                           ; 4 bytes @ 0x19
  2106  00001A                     	ds	1
  2107  00001B                     ??_adf4351_write_reg4:
  2108  00001B                     ??_adf4351_write_reg2:
  2109  00001B                     ??_adf4351_write_reg5:
  2110  00001B                     ??_adf4351_write_reg3:
  2111  00001B                     ??_adf4351_write_reg1:
  2112  00001B                     ??_adf4351_write_reg0:
  2113  00001B                     ___fladd@bexp:
  2114                           	opt callstack 0
  2115  00001B                     ___flmul@bexp:
  2116                           	opt callstack 0
  2117  00001B                     calc_power@v:
  2118                           	opt callstack 0
  2119  00001B                     pad@p:
  2120                           	opt callstack 0
  2121  00001B                     adf4351_init@ref:
  2122                           	opt callstack 0
  2123                           
  2124                           ; 4 bytes @ 0x1A
  2125  00001B                     	ds	1
  2126  00001C                     ___fladd@grs:
  2127                           	opt callstack 0
  2128  00001C                     ___flmul@grs:
  2129                           	opt callstack 0
  2130                           
  2131                           ; 4 bytes @ 0x1B
  2132  00001C                     	ds	1
  2133  00001D                     ??_calc_power:
  2134  00001D                     ??_pad:
  2135  00001D                     ?___flsub:
  2136                           	opt callstack 0
  2137  00001D                     ___aodiv@counter:
  2138                           	opt callstack 0
  2139  00001D                     ___aomod@counter:
  2140                           	opt callstack 0
  2141  00001D                     ___lomod@counter:
  2142                           	opt callstack 0
  2143  00001D                     adc_voltage@adcval:
  2144                           	opt callstack 0
  2145  00001D                     ___flsub@b:
  2146                           	opt callstack 0
  2147  00001D                     ___lodiv@quotient:
  2148                           	opt callstack 0
  2149                           
  2150                           ; 8 bytes @ 0x1C
  2151  00001D                     	ds	1
  2152  00001E                     ___aodiv@sign:
  2153                           	opt callstack 0
  2154  00001E                     ___aomod@sign:
  2155                           	opt callstack 0
  2156  00001E                     usart_init@spbrg_value:
  2157                           	opt callstack 0
  2158  00001E                     pad@i:
  2159                           	opt callstack 0
  2160  00001E                     stoa@i:
  2161                           	opt callstack 0
  2162  00001E                     gcd@c:
  2163                           	opt callstack 0
  2164                           
  2165                           ; 4 bytes @ 0x1D
  2166  00001E                     	ds	1
  2167  00001F                     ?_abs:
  2168                           	opt callstack 0
  2169  00001F                     abs@a:
  2170                           	opt callstack 0
  2171  00001F                     adf4351_init@pfd:
  2172                           	opt callstack 0
  2173  00001F                     ___aodiv@quotient:
  2174                           	opt callstack 0
  2175                           
  2176                           ; 8 bytes @ 0x1E
  2177  00001F                     	ds	1
  2178  000020                     pad@w:
  2179                           	opt callstack 0
  2180  000020                     stoa@w:
  2181                           	opt callstack 0
  2182  000020                     adf4351_write_reg4@data:
  2183                           	opt callstack 0
  2184  000020                     adf4351_write_reg5@data:
  2185                           	opt callstack 0
  2186  000020                     ___flmul@prod:
  2187                           	opt callstack 0
  2188                           
  2189                           ; 4 bytes @ 0x1F
  2190  000020                     	ds	1
  2191  000021                     ??_abs:
  2192  000021                     adf4351_write_reg0@data:
  2193                           	opt callstack 0
  2194  000021                     adf4351_write_reg1@data:
  2195                           	opt callstack 0
  2196  000021                     adf4351_write_reg2@data:
  2197                           	opt callstack 0
  2198  000021                     adf4351_write_reg3@data:
  2199                           	opt callstack 0
  2200  000021                     adc_voltage@mV:
  2201                           	opt callstack 0
  2202  000021                     calc_power@dBm:
  2203                           	opt callstack 0
  2204  000021                     ___flsub@a:
  2205                           	opt callstack 0
  2206                           
  2207                           ; 4 bytes @ 0x20
  2208  000021                     	ds	1
  2209  000022                     adf4351_calc_counters@ctx:
  2210                           	opt callstack 0
  2211  000022                     stoa@cp:
  2212                           	opt callstack 0
  2213                           
  2214                           ; 2 bytes @ 0x21
  2215  000022                     	ds	1
  2216  000023                     ??_adf4351_init:
  2217                           
  2218                           ; 1 bytes @ 0x22
  2219  000023                     	ds	1
  2220  000024                     stoa@p:
  2221                           	opt callstack 0
  2222  000024                     ___flmul@temp:
  2223                           	opt callstack 0
  2224  000024                     adf4351_calc_counters@remainder:
  2225                           	opt callstack 0
  2226                           
  2227                           ; 4 bytes @ 0x23
  2228  000024                     	ds	1
  2229  000025                     ?_readPowerVoltage:
  2230                           	opt callstack 0
  2231  000025                     ?_readFWD:
  2232                           	opt callstack 0
  2233  000025                     ___lodiv@counter:
  2234                           	opt callstack 0
  2235  000025                     adf4351_set_rfout_enable@ctx:
  2236                           	opt callstack 0
  2237  000025                     adf4351_setup@ctx:
  2238                           	opt callstack 0
  2239                           
  2240                           ; 2 bytes @ 0x24
  2241  000025                     	ds	1
  2242  000026                     ?_utoa:
  2243                           	opt callstack 0
  2244  000026                     ?___fldiv:
  2245                           	opt callstack 0
  2246  000026                     ?___fltol:
  2247                           	opt callstack 0
  2248  000026                     stoa@l:
  2249                           	opt callstack 0
  2250  000026                     utoa@fp:
  2251                           	opt callstack 0
  2252  000026                     ___fltol@f1:
  2253                           	opt callstack 0
  2254  000026                     ___fldiv@b:
  2255                           	opt callstack 0
  2256                           
  2257                           ; 4 bytes @ 0x25
  2258  000026                     	ds	1
  2259  000027                     ?_dtoa:
  2260                           	opt callstack 0
  2261  000027                     adf4351_set_rfout_enable@enable:
  2262                           	opt callstack 0
  2263  000027                     adf4351_set_mode@ctx:
  2264                           	opt callstack 0
  2265  000027                     adf4351_set_tune@ctx:
  2266                           	opt callstack 0
  2267  000027                     dtoa@fp:
  2268                           	opt callstack 0
  2269  000027                     readPowerVoltage@v:
  2270                           	opt callstack 0
  2271  000027                     readFWD@fwd_volt:
  2272                           	opt callstack 0
  2273                           
  2274                           ; 4 bytes @ 0x26
  2275  000027                     	ds	1
  2276  000028                     adf4351_calc_counters@div:
  2277                           	opt callstack 0
  2278  000028                     utoa@d:
  2279                           	opt callstack 0
  2280                           
  2281                           ; 8 bytes @ 0x27
  2282  000028                     	ds	1
  2283  000029                     adf4351_set_tune@icp:
  2284                           	opt callstack 0
  2285  000029                     adf4351_set_mode@enable:
  2286                           	opt callstack 0
  2287  000029                     dtoa@d:
  2288                           	opt callstack 0
  2289                           
  2290                           ; 8 bytes @ 0x28
  2291  000029                     	ds	1
  2292  00002A                     ??___fltol:
  2293  00002A                     adf4351_set_tune@pout:
  2294                           	opt callstack 0
  2295  00002A                     ___fldiv@a:
  2296                           	opt callstack 0
  2297                           
  2298                           ; 4 bytes @ 0x29
  2299  00002A                     	ds	1
  2300  00002B                     adf4351_set_tune@lownoise:
  2301                           	opt callstack 0
  2302                           
  2303                           ; 2 bytes @ 0x2A
  2304  00002B                     	ds	1
  2305  00002C                     adf4351_calc_counters@integer:
  2306                           	opt callstack 0
  2307                           
  2308                           ; 4 bytes @ 0x2B
  2309  00002C                     	ds	1
  2310  00002D                     _adf4351_set_tune$437:
  2311                           	opt callstack 0
  2312                           
  2313                           ; 2 bytes @ 0x2C
  2314  00002D                     	ds	1
  2315  00002E                     ??___fldiv:
  2316  00002E                     ___fltol@sign1:
  2317                           	opt callstack 0
  2318                           
  2319                           ; 1 bytes @ 0x2D
  2320  00002E                     	ds	1
  2321  00002F                     ___fltol@exp1:
  2322                           	opt callstack 0
  2323                           
  2324                           ; 1 bytes @ 0x2E
  2325  00002F                     	ds	1
  2326  000030                     ??_utoa:
  2327  000030                     adf4351_calc_counters@mod:
  2328                           	opt callstack 0
  2329                           
  2330                           ; 4 bytes @ 0x2F
  2331  000030                     	ds	1
  2332  000031                     ??_dtoa:
  2333                           
  2334                           ; 1 bytes @ 0x30
  2335  000031                     	ds	1
  2336  000032                     ___fldiv@rem:
  2337                           	opt callstack 0
  2338                           
  2339                           ; 4 bytes @ 0x31
  2340  000032                     	ds	2
  2341  000034                     adf4351_calc_counters@frac:
  2342                           	opt callstack 0
  2343                           
  2344                           ; 4 bytes @ 0x33
  2345  000034                     	ds	2
  2346  000036                     ___fldiv@sign:
  2347                           	opt callstack 0
  2348                           
  2349                           ; 1 bytes @ 0x35
  2350  000036                     	ds	1
  2351  000037                     ___fldiv@new_exp:
  2352                           	opt callstack 0
  2353                           
  2354                           ; 2 bytes @ 0x36
  2355  000037                     	ds	1
  2356  000038                     utoa@p:
  2357                           	opt callstack 0
  2358                           
  2359                           ; 2 bytes @ 0x37
  2360  000038                     	ds	1
  2361  000039                     _dtoa$2337:
  2362                           	opt callstack 0
  2363  000039                     ___fldiv@grs:
  2364                           	opt callstack 0
  2365                           
  2366                           ; 4 bytes @ 0x38
  2367  000039                     	ds	1
  2368  00003A                     utoa@w:
  2369                           	opt callstack 0
  2370                           
  2371                           ; 2 bytes @ 0x39
  2372  00003A                     	ds	1
  2373  00003B                     dtoa@p:
  2374                           	opt callstack 0
  2375                           
  2376                           ; 2 bytes @ 0x3A
  2377  00003B                     	ds	1
  2378  00003C                     utoa@n:
  2379                           	opt callstack 0
  2380                           
  2381                           ; 8 bytes @ 0x3B
  2382  00003C                     	ds	1
  2383  00003D                     ___fldiv@bexp:
  2384                           	opt callstack 0
  2385  00003D                     dtoa@w:
  2386                           	opt callstack 0
  2387                           
  2388                           ; 2 bytes @ 0x3C
  2389  00003D                     	ds	1
  2390  00003E                     ___fldiv@aexp:
  2391                           	opt callstack 0
  2392                           
  2393                           ; 1 bytes @ 0x3D
  2394  00003E                     	ds	1
  2395  00003F                     ?_KTY82_222_Adc2Temperature:
  2396                           	opt callstack 0
  2397  00003F                     KTY82_222_Adc2Temperature@adc_value:
  2398                           	opt callstack 0
  2399  00003F                     dtoa@s:
  2400                           	opt callstack 0
  2401                           
  2402                           ; 2 bytes @ 0x3E
  2403  00003F                     	ds	2
  2404  000041                     ??_KTY82_222_Adc2Temperature:
  2405  000041                     dtoa@n:
  2406                           	opt callstack 0
  2407                           
  2408                           ; 8 bytes @ 0x40
  2409  000041                     	ds	3
  2410  000044                     utoa@i:
  2411                           	opt callstack 0
  2412                           
  2413                           ; 2 bytes @ 0x43
  2414  000044                     	ds	5
  2415  000049                     dtoa@i:
  2416                           	opt callstack 0
  2417  000049                     KTY82_222_Adc2Temperature@x:
  2418                           	opt callstack 0
  2419                           
  2420                           ; 4 bytes @ 0x48
  2421  000049                     	ds	2
  2422  00004B                     ?_vfpfcnvrt:
  2423                           	opt callstack 0
  2424  00004B                     vfpfcnvrt@fp:
  2425                           	opt callstack 0
  2426                           
  2427                           ; 2 bytes @ 0x4A
  2428  00004B                     	ds	2
  2429  00004D                     vfpfcnvrt@fmt:
  2430                           	opt callstack 0
  2431  00004D                     _KTY82_222_Adc2Temperature$3105:
  2432                           	opt callstack 0
  2433                           
  2434                           ; 4 bytes @ 0x4C
  2435  00004D                     	ds	1
  2436  00004E                     vfpfcnvrt@ap:
  2437                           	opt callstack 0
  2438                           
  2439                           ; 1 bytes @ 0x4D
  2440  00004E                     	ds	1
  2441  00004F                     ??_vfpfcnvrt:
  2442                           
  2443                           ; 1 bytes @ 0x4E
  2444  00004F                     	ds	2
  2445  000051                     KTY82_222_Adc2Temperature@Umess:
  2446                           	opt callstack 0
  2447                           
  2448                           ; 4 bytes @ 0x50
  2449  000051                     	ds	4
  2450  000055                     KTY82_222_Adc2Temperature@Rptc:
  2451                           	opt callstack 0
  2452                           
  2453                           ; 4 bytes @ 0x54
  2454  000055                     	ds	4
  2455  000059                     KTY82_222_Adc2Temperature@i:
  2456                           	opt callstack 0
  2457                           
  2458                           ; 2 bytes @ 0x58
  2459  000059                     	ds	2
  2460  00005B                     ?_readKTY82:
  2461                           	opt callstack 0
  2462                           
  2463                           ; 2 bytes @ 0x5A
  2464  00005B                     	ds	1
  2465  00005C                     ?_vfprintf:
  2466                           	opt callstack 0
  2467  00005C                     vfprintf@fp:
  2468                           	opt callstack 0
  2469                           
  2470                           ; 2 bytes @ 0x5B
  2471  00005C                     	ds	1
  2472  00005D                     
  2473                           ; 1 bytes @ 0x5C
  2474  00005D                     	ds	1
  2475  00005E                     vfprintf@fmt:
  2476                           	opt callstack 0
  2477                           
  2478                           ; 2 bytes @ 0x5D
  2479  00005E                     	ds	2
  2480  000060                     vfprintf@ap:
  2481                           	opt callstack 0
  2482                           
  2483                           ; 1 bytes @ 0x5F
  2484  000060                     	ds	1
  2485  000061                     vfprintf@cfmt:
  2486                           	opt callstack 0
  2487                           
  2488                           ; 2 bytes @ 0x60
  2489  000061                     	ds	2
  2490  000063                     
  2491                           ; 1 bytes @ 0x62
  2492  000063                     	ds	2
  2493  000065                     printf@ap:
  2494                           	opt callstack 0
  2495                           
  2496                           ; 1 bytes @ 0x64
  2497  000065                     	ds	1
  2498  000066                     receive_downconverter_data@rxdatabyte:
  2499                           	opt callstack 0
  2500  000066                     check_adf4351_lock@lock:
  2501                           	opt callstack 0
  2502  000066                     setLOCK_LED@onoff:
  2503                           	opt callstack 0
  2504  000066                     setPTT_LED@onoff:
  2505                           	opt callstack 0
  2506                           
  2507                           ; 1 bytes @ 0x65
  2508  000066                     	ds	1
  2509  000067                     
  2510                           ; 1 bytes @ 0x66
  2511 ;;
  2512 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  2513 ;;
  2514 ;; *************** function _main *****************
  2515 ;; Defined at:
  2516 ;;		line 145 in file "src/main.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;		None
  2519 ;; Auto vars:     Size  Location     Type
  2520 ;;  i               2    7[BANK1 ] int 
  2521 ;;  ref             2    5[BANK1 ] int 
  2522 ;; Return value:  Size  Location     Type
  2523 ;;                  1    wreg      void 
  2524 ;; Registers used:
  2525 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2526 ;; Tracked objects:
  2527 ;;		On entry : 0/0
  2528 ;;		On exit  : 3F/1
  2529 ;;		Unchanged: 0/0
  2530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2531 ;;      Params:         0       0       0       0       0       0       0
  2532 ;;      Locals:         0       0       6       0       0       0       0
  2533 ;;      Temps:          0       0       3       0       0       0       0
  2534 ;;      Totals:         0       0       9       0       0       0       0
  2535 ;;Total ram usage:        9 bytes
  2536 ;; Hardware stack levels required when called:   14
  2537 ;; This function calls:
  2538 ;;		_adc_cfg_gpio
  2539 ;;		_adc_init
  2540 ;;		_adf4351_init
  2541 ;;		_adf4351_set_tune
  2542 ;;		_check_adf4351_lock
  2543 ;;		_check_usart
  2544 ;;		_init_gpios
  2545 ;;		_init_switch
  2546 ;;		_pa_update
  2547 ;;		_printf
  2548 ;;		_update_led
  2549 ;;		_update_switch
  2550 ;;		_usart_init
  2551 ;; This function is called by:
  2552 ;;		Startup code after reset
  2553 ;; This function uses a non-reentrant model
  2554 ;;
  2555                           
  2556                           	psect	text0
  2557  00240C                     __ptext0:
  2558                           	opt callstack 0
  2559  00240C                     _main:
  2560                           	opt callstack 17
  2561                           
  2562                           ;src/main.c: 147:     int ref;;src/main.c: 149:     OSCTUNE = 0x80;
  2563                           
  2564                           ;incstack = 0
  2565  00240C  0E80               	movlw	128
  2566  00240E  6E9B               	movwf	155,c	;volatile
  2567                           
  2568                           ;src/main.c: 150:     OSCCON = 0xF2;
  2569  002410  0EF2               	movlw	242
  2570  002412  6ED3               	movwf	211,c	;volatile
  2571  002414                     l471:
  2572  002414  A4D3               	btfss	211,2,c	;volatile
  2573  002416  D7FE               	goto	l471
  2574                           
  2575                           ;src/main.c: 156:     PIE1 = 0;
  2576  002418  0E00               	movlw	0
  2577  00241A  6E9D               	movwf	157,c	;volatile
  2578                           
  2579                           ;src/main.c: 157:     PIE2 = 0;
  2580  00241C  0E00               	movlw	0
  2581  00241E  6EA0               	movwf	160,c	;volatile
  2582                           
  2583                           ;src/main.c: 159:     init_gpios();
  2584  002420  EC09  F000         	call	_init_gpios	;wreg free
  2585                           
  2586                           ;src/main.c: 161:     adc_init();
  2587  002424  EC88  F027         	call	_adc_init	;wreg free
  2588                           
  2589                           ;src/main.c: 162:     adc_cfg_gpio(PIN_TEMP);
  2590  002428  0EF2               	movlw	low _PIN_TEMP_DEF
  2591  00242A  6E11               	movwf	adc_cfg_gpio@gpio^0,c
  2592  00242C  0E7C               	movlw	high _PIN_TEMP_DEF
  2593  00242E  6E12               	movwf	(adc_cfg_gpio@gpio+1)^0,c
  2594  002430  EC68  F025         	call	_adc_cfg_gpio	;wreg free
  2595                           
  2596                           ;src/main.c: 163:     adc_cfg_gpio(PIN_RF_V);
  2597  002434  0EE8               	movlw	low _PIN_RF_V_DEF
  2598  002436  6E11               	movwf	adc_cfg_gpio@gpio^0,c
  2599  002438  0E7C               	movlw	high _PIN_RF_V_DEF
  2600  00243A  6E12               	movwf	(adc_cfg_gpio@gpio+1)^0,c
  2601  00243C  EC68  F025         	call	_adc_cfg_gpio	;wreg free
  2602                           
  2603                           ;src/main.c: 164:     adc_cfg_gpio(PIN_RF_R);
  2604  002440  0EED               	movlw	low _PIN_RF_R_DEF
  2605  002442  6E11               	movwf	adc_cfg_gpio@gpio^0,c
  2606  002444  0E7C               	movlw	high _PIN_RF_R_DEF
  2607  002446  6E12               	movwf	(adc_cfg_gpio@gpio+1)^0,c
  2608  002448  EC68  F025         	call	_adc_cfg_gpio	;wreg free
  2609                           
  2610                           ;src/main.c: 165:     adc_cfg_gpio(PIN_VOLTAGE);
  2611  00244C  0EE3               	movlw	low _PIN_VOLTAGE_DEF
  2612  00244E  6E11               	movwf	adc_cfg_gpio@gpio^0,c
  2613  002450  0E7C               	movlw	high _PIN_VOLTAGE_DEF
  2614  002452  6E12               	movwf	(adc_cfg_gpio@gpio+1)^0,c
  2615  002454  EC68  F025         	call	_adc_cfg_gpio	;wreg free
  2616                           
  2617                           ;src/main.c: 167:     usart_init(9600);
  2618  002458  0E80               	movlw	128
  2619  00245A  6E1A               	movwf	usart_init@baud^0,c
  2620  00245C  0E25               	movlw	37
  2621  00245E  6E1B               	movwf	(usart_init@baud+1)^0,c
  2622  002460  0E00               	movlw	0
  2623  002462  6E1C               	movwf	(usart_init@baud+2)^0,c
  2624  002464  0E00               	movlw	0
  2625  002466  6E1D               	movwf	(usart_init@baud+3)^0,c
  2626  002468  ECB8  F023         	call	_usart_init	;wreg free
  2627                           
  2628                           ;src/main.c: 169:     ref = ((*((PIN_ADF_FREQ_SEL)->pPORT) & (PIN_ADF_FREQ_SEL)->mask) !
      +                          = 0) ? 0 : 1;
  2629  00246C  0E00               	movlw	low (_PIN_ADF_FREQ_SEL_DEF+4)
  2630  00246E  6EF6               	movwf	tblptrl,c
  2631  002470  0E7D               	movlw	high (_PIN_ADF_FREQ_SEL_DEF+4)
  2632  002472  6EF7               	movwf	tblptrh,c
  2633  002474                     	if	0	;tblptru may be non-zero
  2634  002474                     	endif
  2635  002474                     	if	0	;tblptru may be non-zero
  2636  002474                     	endif
  2637  002474  0008               	tblrd		*
  2638  002476  CFF5 F1E0          	movff	tablat,??_main
  2639  00247A  0EFC               	movlw	low _PIN_ADF_FREQ_SEL_DEF
  2640  00247C  6EF6               	movwf	tblptrl,c
  2641  00247E                     	if	1	;There is more than 1 active tblptr byte
  2642  00247E  0E7C               	movlw	high _PIN_ADF_FREQ_SEL_DEF
  2643  002480  6EF7               	movwf	tblptrh,c
  2644  002482                     	endif
  2645  002482                     	if	0	;There are less than 3 active tblptr bytes
  2646  002482                     	endif
  2647  002482  0009               	tblrd		*+
  2648  002484  CFF5 F1E1          	movff	tablat,??_main+1
  2649  002488  0009               	tblrd		*+
  2650  00248A  CFF5 F1E2          	movff	tablat,??_main+2
  2651  00248E  C1E1  FFD9         	movff	??_main+1,fsr2l
  2652  002492  C1E2  FFDA         	movff	??_main+2,fsr2h
  2653  002496  50DF               	movf	indf2,w,c
  2654  002498  0101               	movlb	1	; () banked
  2655  00249A  15E0               	andwf	??_main& (0+255),w,b
  2656  00249C  0900               	iorlw	0
  2657  00249E  A4D8               	btfss	status,2,c
  2658  0024A0  D002               	goto	u11280
  2659  0024A2  0E01               	movlw	1
  2660  0024A4  D001               	goto	u11290
  2661  0024A6                     u11280:
  2662  0024A6  0E00               	movlw	0
  2663  0024A8                     u11290:
  2664  0024A8  6FE5               	movwf	main@ref& (0+255),b
  2665  0024AA  6BE6               	clrf	(main@ref+1)& (0+255),b
  2666                           
  2667                           ; BSR set to: 1
  2668                           ;src/main.c: 172:     printf("\nAMSAT DL UpConverter HW:%s FW:%s\n\n","V4.2","V1.0");
  2669  0024AC  0E36               	movlw	low STR_8
  2670  0024AE  0100               	movlb	0	; () banked
  2671  0024B0  6FCB               	movwf	printf@fmt& (0+255),b
  2672  0024B2  0E7E               	movlw	high STR_8
  2673  0024B4  6FCC               	movwf	(printf@fmt+1)& (0+255),b
  2674  0024B6  0EE4               	movlw	low STR_9
  2675  0024B8  6FCD               	movwf	(?_printf+2)& (0+255),b
  2676  0024BA  0E7F               	movlw	high STR_9
  2677  0024BC  6FCE               	movwf	(?_printf+3)& (0+255),b
  2678  0024BE  0EDF               	movlw	low STR_10
  2679  0024C0  6FCF               	movwf	(?_printf+4)& (0+255),b
  2680  0024C2  0E7F               	movlw	high STR_10
  2681  0024C4  6FD0               	movwf	(?_printf+5)& (0+255),b
  2682  0024C6  EC60  F027         	call	_printf	;wreg free
  2683                           
  2684                           ; BSR set to: 0
  2685                           ;src/main.c: 173:  printf("UPC 00 07 AMSAT-DL Upconverter HW:%s FW:%s\n","V4.2","V1.0");
  2686  0024CA  0EE3               	movlw	low STR_11
  2687  0024CC  6FCB               	movwf	printf@fmt& (0+255),b
  2688  0024CE  0E7D               	movlw	high STR_11
  2689  0024D0  6FCC               	movwf	(printf@fmt+1)& (0+255),b
  2690  0024D2  0EE4               	movlw	low STR_9
  2691  0024D4  6FCD               	movwf	(?_printf+2)& (0+255),b
  2692  0024D6  0E7F               	movlw	high STR_9
  2693  0024D8  6FCE               	movwf	(?_printf+3)& (0+255),b
  2694  0024DA  0EDF               	movlw	low STR_10
  2695  0024DC  6FCF               	movwf	(?_printf+4)& (0+255),b
  2696  0024DE  0E7F               	movlw	high STR_10
  2697  0024E0  6FD0               	movwf	(?_printf+5)& (0+255),b
  2698  0024E2  EC60  F027         	call	_printf	;wreg free
  2699                           
  2700                           ; BSR set to: 0
  2701                           ;src/main.c: 175:     printf("ADF4351 INIT (%sMHz)\r\n", (ref)?"10":"40");
  2702  0024E6  0101               	movlb	1	; () banked
  2703  0024E8  51E5               	movf	main@ref& (0+255),w,b
  2704  0024EA  11E6               	iorwf	(main@ref+1)& (0+255),w,b
  2705  0024EC  A4D8               	btfss	status,2,c
  2706  0024EE  D004               	goto	l8415
  2707                           
  2708                           ; BSR set to: 1
  2709  0024F0  0EFC               	movlw	low STR_16
  2710  0024F2  6FE3               	movwf	_main$1985& (0+255),b
  2711  0024F4  0E7F               	movlw	high STR_16
  2712  0024F6  D003               	goto	L1
  2713  0024F8                     l8415:
  2714                           
  2715                           ; BSR set to: 1
  2716  0024F8  0EF9               	movlw	low STR_15
  2717  0024FA  6FE3               	movwf	_main$1985& (0+255),b
  2718  0024FC  0E7F               	movlw	high STR_15
  2719  0024FE                     L1:
  2720  0024FE  6FE4               	movwf	(_main$1985+1)& (0+255),b
  2721                           
  2722                           ; BSR set to: 1
  2723  002500  0EF6               	movlw	low STR_14
  2724  002502  0100               	movlb	0	; () banked
  2725  002504  6FCB               	movwf	printf@fmt& (0+255),b
  2726  002506  0E7E               	movlw	high STR_14
  2727  002508  6FCC               	movwf	(printf@fmt+1)& (0+255),b
  2728  00250A  C1E3  F0CD         	movff	_main$1985,?_printf+2
  2729  00250E  C1E4  F0CE         	movff	_main$1985+1,?_printf+3
  2730  002512  EC60  F027         	call	_printf	;wreg free
  2731                           
  2732                           ; BSR set to: 0
  2733                           ;src/main.c: 176:     if(ref) {
  2734  002516  0101               	movlb	1	; () banked
  2735  002518  51E5               	movf	main@ref& (0+255),w,b
  2736  00251A  11E6               	iorwf	(main@ref+1)& (0+255),w,b
  2737  00251C  B4D8               	btfsc	status,2,c
  2738  00251E  D017               	goto	l8423
  2739                           
  2740                           ; BSR set to: 1
  2741                           ;src/main.c: 177:         adf4351_init(&g_adf4351, 10000UL, 10000UL);
  2742  002520  0E65               	movlw	low _g_adf4351
  2743  002522  6E19               	movwf	adf4351_init@ctx^0,c
  2744  002524  0E01               	movlw	high _g_adf4351
  2745  002526  6E1A               	movwf	(adf4351_init@ctx+1)^0,c
  2746  002528  0E10               	movlw	16
  2747  00252A  6E1B               	movwf	adf4351_init@ref^0,c
  2748  00252C  0E27               	movlw	39
  2749  00252E  6E1C               	movwf	(adf4351_init@ref+1)^0,c
  2750  002530  0E00               	movlw	0
  2751  002532  6E1D               	movwf	(adf4351_init@ref+2)^0,c
  2752  002534  0E00               	movlw	0
  2753  002536  6E1E               	movwf	(adf4351_init@ref+3)^0,c
  2754  002538  0E10               	movlw	16
  2755  00253A  6E1F               	movwf	adf4351_init@pfd^0,c
  2756  00253C  0E27               	movlw	39
  2757  00253E  6E20               	movwf	(adf4351_init@pfd+1)^0,c
  2758  002540  0E00               	movlw	0
  2759  002542  6E21               	movwf	(adf4351_init@pfd+2)^0,c
  2760  002544  0E00               	movlw	0
  2761  002546  6E22               	movwf	(adf4351_init@pfd+3)^0,c
  2762  002548  EC02  F01C         	call	_adf4351_init	;wreg free
  2763                           
  2764                           ;src/main.c: 178:     } else {
  2765  00254C  D016               	goto	l8425
  2766  00254E                     l8423:
  2767                           
  2768                           ; BSR set to: 1
  2769                           ;src/main.c: 179:         adf4351_init(&g_adf4351, 40000UL, 10000UL);
  2770  00254E  0E65               	movlw	low _g_adf4351
  2771  002550  6E19               	movwf	adf4351_init@ctx^0,c
  2772  002552  0E01               	movlw	high _g_adf4351
  2773  002554  6E1A               	movwf	(adf4351_init@ctx+1)^0,c
  2774  002556  0E40               	movlw	64
  2775  002558  6E1B               	movwf	adf4351_init@ref^0,c
  2776  00255A  0E9C               	movlw	156
  2777  00255C  6E1C               	movwf	(adf4351_init@ref+1)^0,c
  2778  00255E  0E00               	movlw	0
  2779  002560  6E1D               	movwf	(adf4351_init@ref+2)^0,c
  2780  002562  0E00               	movlw	0
  2781  002564  6E1E               	movwf	(adf4351_init@ref+3)^0,c
  2782  002566  0E10               	movlw	16
  2783  002568  6E1F               	movwf	adf4351_init@pfd^0,c
  2784  00256A  0E27               	movlw	39
  2785  00256C  6E20               	movwf	(adf4351_init@pfd+1)^0,c
  2786  00256E  0E00               	movlw	0
  2787  002570  6E21               	movwf	(adf4351_init@pfd+2)^0,c
  2788  002572  0E00               	movlw	0
  2789  002574  6E22               	movwf	(adf4351_init@pfd+3)^0,c
  2790  002576  EC02  F01C         	call	_adf4351_init	;wreg free
  2791  00257A                     l8425:
  2792                           
  2793                           ;src/main.c: 181:     printf("ADF4351 SET TUNE\r\n");
  2794  00257A  0E36               	movlw	low STR_17
  2795  00257C  0100               	movlb	0	; () banked
  2796  00257E  6FCB               	movwf	printf@fmt& (0+255),b
  2797  002580  0E7F               	movlw	high STR_17
  2798  002582  6FCC               	movwf	(printf@fmt+1)& (0+255),b
  2799  002584  EC60  F027         	call	_printf	;wreg free
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;src/main.c: 182:     adf4351_set_tune(&g_adf4351, g_ipc, g_pout, 1);
  2803  002588  0E65               	movlw	low _g_adf4351
  2804  00258A  6E27               	movwf	adf4351_set_tune@ctx^0,c
  2805  00258C  0E01               	movlw	high _g_adf4351
  2806  00258E  6E28               	movwf	(adf4351_set_tune@ctx+1)^0,c
  2807  002590  0E05               	movlw	5
  2808  002592  6E29               	movwf	adf4351_set_tune@icp^0,c
  2809  002594  0E01               	movlw	1
  2810  002596  6E2A               	movwf	adf4351_set_tune@pout^0,c
  2811  002598  0E00               	movlw	0
  2812  00259A  6E2C               	movwf	(adf4351_set_tune@lownoise+1)^0,c
  2813  00259C  0E01               	movlw	1
  2814  00259E  6E2B               	movwf	adf4351_set_tune@lownoise^0,c
  2815  0025A0  ECEC  F023         	call	_adf4351_set_tune	;wreg free
  2816                           
  2817                           ;src/main.c: 183:     printf("INIT SWITCH\r\n");
  2818  0025A4  0EA5               	movlw	low STR_18
  2819  0025A6  0100               	movlb	0	; () banked
  2820  0025A8  6FCB               	movwf	printf@fmt& (0+255),b
  2821  0025AA  0E7F               	movlw	high STR_18
  2822  0025AC  6FCC               	movwf	(printf@fmt+1)& (0+255),b
  2823  0025AE  EC60  F027         	call	_printf	;wreg free
  2824                           
  2825                           ; BSR set to: 0
  2826                           ;src/main.c: 184:     init_switch();
  2827  0025B2  ECA7  F027         	call	_init_switch	;wreg free
  2828                           
  2829                           ; BSR set to: 0
  2830                           ;src/main.c: 187:     RCONbits.IPEN = 0;
  2831  0025B6  9ED0               	bcf	208,7,c	;volatile
  2832                           
  2833                           ; BSR set to: 0
  2834                           ;src/main.c: 189:     INTCONbits.PEIE = 1;
  2835  0025B8  8CF2               	bsf	242,6,c	;volatile
  2836                           
  2837                           ; BSR set to: 0
  2838                           ;src/main.c: 191:     INTCONbits.GIE = 1;
  2839  0025BA  8EF2               	bsf	242,7,c	;volatile
  2840  0025BC                     l480:
  2841  0025BC  0004               	clrwdt		;# 
  2842                           
  2843                           ;src/main.c: 196:   check_adf4351_lock();
  2844  0025BE  ECAB  F020         	call	_check_adf4351_lock	;wreg free
  2845                           
  2846                           ; BSR set to: 0
  2847                           ;src/main.c: 197:         update_switch();
  2848  0025C2  EC48  F026         	call	_update_switch	;wreg free
  2849                           
  2850                           ; BSR set to: 0
  2851                           ;src/main.c: 198:         update_led();
  2852  0025C6  EC1E  F01B         	call	_update_led	;wreg free
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;src/main.c: 199:         pa_update();
  2856  0025CA  EC86  F024         	call	_pa_update	;wreg free
  2857                           
  2858                           ;src/main.c: 201:   for(int i=0; i<10; i++)
  2859  0025CE  0E00               	movlw	0
  2860  0025D0  0101               	movlb	1	; () banked
  2861  0025D2  6FE8               	movwf	(main@i+1)& (0+255),b
  2862  0025D4  0E00               	movlw	0
  2863  0025D6  6FE7               	movwf	main@i& (0+255),b
  2864  0025D8                     l8451:
  2865                           
  2866                           ; BSR set to: 1
  2867                           ;src/main.c: 202:   {;src/main.c: 203:    _delay((unsigned long)((1)*(8000000/4000.0)));
  2868  0025D8  0E03               	movlw	3
  2869  0025DA  0101               	movlb	1	; () banked
  2870  0025DC  6FE0               	movwf	??_main& (0+255),b
  2871  0025DE  0E97               	movlw	151
  2872  0025E0                     u11337:
  2873  0025E0  2EE8               	decfsz	wreg,f,c
  2874  0025E2  D7FE               	bra	u11337
  2875  0025E4  2FE0               	decfsz	??_main& (0+255),f,b
  2876  0025E6  D7FC               	bra	u11337
  2877  0025E8  D000               	nop2	
  2878                           
  2879                           ;src/main.c: 204:    check_usart();
  2880  0025EA  EC3E  F027         	call	_check_usart	;wreg free
  2881                           
  2882                           ;src/main.c: 205:   }
  2883  0025EE  0101               	movlb	1	; () banked
  2884  0025F0  4BE7               	infsnz	main@i& (0+255),f,b
  2885  0025F2  2BE8               	incf	(main@i+1)& (0+255),f,b
  2886                           
  2887                           ; BSR set to: 1
  2888  0025F4  BFE8               	btfsc	(main@i+1)& (0+255),7,b
  2889  0025F6  D7F0               	goto	l8451
  2890  0025F8  51E8               	movf	(main@i+1)& (0+255),w,b
  2891  0025FA  E1E0               	bnz	l480
  2892  0025FC  0E0A               	movlw	10
  2893  0025FE  5DE7               	subwf	main@i& (0+255),w,b
  2894  002600  B0D8               	btfsc	status,0,c
  2895  002602  D7DC               	goto	l480
  2896  002604  D7E9               	goto	l8451
  2897  002606                     __end_of_main:
  2898                           	opt callstack 0
  2899                           
  2900 ;; *************** function _usart_init *****************
  2901 ;; Defined at:
  2902 ;;		line 26 in file "src/driver/usart.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;  baud            4   25[COMRAM] unsigned long 
  2905 ;; Auto vars:     Size  Location     Type
  2906 ;;  spbrg_value     2   29[COMRAM] unsigned short 
  2907 ;; Return value:  Size  Location     Type
  2908 ;;                  1    wreg      void 
  2909 ;; Registers used:
  2910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2911 ;; Tracked objects:
  2912 ;;		On entry : 0/0
  2913 ;;		On exit  : 0/0
  2914 ;;		Unchanged: 0/0
  2915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2916 ;;      Params:         4       0       0       0       0       0       0
  2917 ;;      Locals:         2       0       0       0       0       0       0
  2918 ;;      Temps:          0       0       0       0       0       0       0
  2919 ;;      Totals:         6       0       0       0       0       0       0
  2920 ;;Total ram usage:        6 bytes
  2921 ;; Hardware stack levels used:    1
  2922 ;; Hardware stack levels required when called:    3
  2923 ;; This function calls:
  2924 ;;		___lldiv
  2925 ;;		_irq_set_handler
  2926 ;; This function is called by:
  2927 ;;		_main
  2928 ;; This function uses a non-reentrant model
  2929 ;;
  2930                           
  2931                           	psect	text1
  2932  004770                     __ptext1:
  2933                           	opt callstack 0
  2934  004770                     _usart_init:
  2935                           	opt callstack 27
  2936                           
  2937                           ;src/driver/usart.c: 26: void usart_init(u32 baud);src/driver/usart.c: 27: {;src/driver/
      +                          usart.c: 28:     irq_set_handler(IRQ_HANDLER_ID_USART, usart_rx_irq_handler, ((void*)0))
      +                          ;
  2938                           
  2939                           ; BSR set to: 1
  2940                           ;incstack = 0
  2941  004770  0E20               	movlw	low _usart_rx_irq_handler
  2942  004772  6E0D               	movwf	irq_set_handler@handler^0,c
  2943  004774  0E4B               	movlw	high _usart_rx_irq_handler
  2944  004776  6E0E               	movwf	(irq_set_handler@handler+1)^0,c
  2945  004778  0E00               	movlw	0
  2946  00477A  6E0F               	movwf	irq_set_handler@udata^0,c
  2947  00477C  0E00               	movlw	0
  2948  00477E  6E10               	movwf	(irq_set_handler@udata+1)^0,c
  2949  004780  0E00               	movlw	0
  2950  004782  ECE5  F026         	call	_irq_set_handler
  2951                           
  2952                           ;src/driver/usart.c: 29:     TXSTAbits.TX9 = 0;
  2953  004786  9CAC               	bcf	172,6,c	;volatile
  2954                           
  2955                           ;src/driver/usart.c: 30:     TXSTAbits.SENDB = 0;
  2956  004788  96AC               	bcf	172,3,c	;volatile
  2957                           
  2958                           ;src/driver/usart.c: 31:     TXSTAbits.BRGH = 1;
  2959  00478A  84AC               	bsf	172,2,c	;volatile
  2960                           
  2961                           ;src/driver/usart.c: 32:     TXSTAbits.TXEN = 1;
  2962  00478C  8AAC               	bsf	172,5,c	;volatile
  2963                           
  2964                           ;src/driver/usart.c: 35:     RCSTAbits.RX9 = 0;
  2965  00478E  9CAB               	bcf	171,6,c	;volatile
  2966                           
  2967                           ;src/driver/usart.c: 36:     RCSTAbits.CREN = 1;
  2968  004790  88AB               	bsf	171,4,c	;volatile
  2969                           
  2970                           ;src/driver/usart.c: 37:     RCSTAbits.ADDEN = 0;
  2971  004792  96AB               	bcf	171,3,c	;volatile
  2972                           
  2973                           ;src/driver/usart.c: 39:     BAUDCONbits.BRG16 = 1;
  2974  004794  86B8               	bsf	184,3,c	;volatile
  2975                           
  2976                           ;src/driver/usart.c: 40:     BAUDCONbits.ABDEN = 0;
  2977  004796  90B8               	bcf	184,0,c	;volatile
  2978                           
  2979                           ;src/driver/usart.c: 42:     u16 spbrg_value = ((8000000/4) / baud) - 1;
  2980  004798  0E80               	movlw	128
  2981  00479A  6E0D               	movwf	___lldiv@dividend^0,c
  2982  00479C  0E84               	movlw	132
  2983  00479E  6E0E               	movwf	(___lldiv@dividend+1)^0,c
  2984  0047A0  0E1E               	movlw	30
  2985  0047A2  6E0F               	movwf	(___lldiv@dividend+2)^0,c
  2986  0047A4  0E00               	movlw	0
  2987  0047A6  6E10               	movwf	(___lldiv@dividend+3)^0,c
  2988  0047A8  C01A  F011         	movff	usart_init@baud,___lldiv@divisor
  2989  0047AC  C01B  F012         	movff	usart_init@baud+1,___lldiv@divisor+1
  2990  0047B0  C01C  F013         	movff	usart_init@baud+2,___lldiv@divisor+2
  2991  0047B4  C01D  F014         	movff	usart_init@baud+3,___lldiv@divisor+3
  2992  0047B8  EC48  F022         	call	___lldiv	;wreg free
  2993  0047BC  0EFF               	movlw	255
  2994  0047BE  240D               	addwf	?___lldiv^0,w,c
  2995  0047C0  6E1E               	movwf	usart_init@spbrg_value^0,c
  2996  0047C2  0EFF               	movlw	255
  2997  0047C4  200E               	addwfc	(?___lldiv+1)^0,w,c
  2998  0047C6  6E1F               	movwf	(usart_init@spbrg_value+1)^0,c
  2999                           
  3000                           ;src/driver/usart.c: 44:     SPBRGH = (spbrg_value>>8)&0xFF;
  3001  0047C8  C01F  FFB0         	movff	usart_init@spbrg_value+1,4016	;volatile
  3002                           
  3003                           ;src/driver/usart.c: 45:     SPBRG = (spbrg_value>>0)&0xFF;
  3004  0047CC  C01E  FFAF         	movff	usart_init@spbrg_value,4015	;volatile
  3005                           
  3006                           ;src/driver/usart.c: 47:     TXSTAbits.SYNC = 0;
  3007  0047D0  98AC               	bcf	172,4,c	;volatile
  3008                           
  3009                           ;src/driver/usart.c: 48:     RCSTAbits.SPEN = 1;
  3010  0047D2  8EAB               	bsf	171,7,c	;volatile
  3011                           
  3012                           ;src/driver/usart.c: 50:     PIE1bits.RCIE = 1;
  3013  0047D4  8A9D               	bsf	157,5,c	;volatile
  3014  0047D6  0012               	return		;funcret
  3015  0047D8                     __end_of_usart_init:
  3016                           	opt callstack 0
  3017                           
  3018 ;; *************** function _irq_set_handler *****************
  3019 ;; Defined at:
  3020 ;;		line 23 in file "src/driver/irq.c"
  3021 ;; Parameters:    Size  Location     Type
  3022 ;;  id              1    wreg     enum E2251
  3023 ;;  handler         2   12[COMRAM] PTR FTN(PTR void ,)void 
  3024 ;;		 -> usart_rx_irq_handler(1), 
  3025 ;;  udata           2   14[COMRAM] PTR void 
  3026 ;;		 -> NULL(0), 
  3027 ;; Auto vars:     Size  Location     Type
  3028 ;;  id              1   16[COMRAM] enum E2251
  3029 ;; Return value:  Size  Location     Type
  3030 ;;                  1    wreg      void 
  3031 ;; Registers used:
  3032 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3033 ;; Tracked objects:
  3034 ;;		On entry : 0/0
  3035 ;;		On exit  : 0/0
  3036 ;;		Unchanged: 0/0
  3037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3038 ;;      Params:         4       0       0       0       0       0       0
  3039 ;;      Locals:         1       0       0       0       0       0       0
  3040 ;;      Temps:          0       0       0       0       0       0       0
  3041 ;;      Totals:         5       0       0       0       0       0       0
  3042 ;;Total ram usage:        5 bytes
  3043 ;; Hardware stack levels used:    1
  3044 ;; Hardware stack levels required when called:    2
  3045 ;; This function calls:
  3046 ;;		Nothing
  3047 ;; This function is called by:
  3048 ;;		_usart_init
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           	psect	text2
  3053  004DCA                     __ptext2:
  3054                           	opt callstack 0
  3055  004DCA                     _irq_set_handler:
  3056                           	opt callstack 27
  3057                           
  3058                           ;incstack = 0
  3059                           ;irq_set_handler@id stored from wreg
  3060  004DCA  6E11               	movwf	irq_set_handler@id^0,c
  3061                           
  3062                           ;src/driver/irq.c: 23: void irq_set_handler(IRQ_HANDLER_ID id, irq_handler_func handler,
      +                           void *udata);src/driver/irq.c: 24: {;src/driver/irq.c: 25:     if(id < IRQ_HANDLER_ID_C
      +                          NT) {
  3063  004DCC  5011               	movf	irq_set_handler@id^0,w,c
  3064  004DCE  A4D8               	btfss	status,2,c
  3065  004DD0  0012               	return	
  3066                           
  3067                           ;src/driver/irq.c: 26:         g_irq_handler_info[id].udata = udata;
  3068  004DD2  5011               	movf	irq_set_handler@id^0,w,c
  3069  004DD4  0D04               	mullw	4
  3070  004DD6  50F3               	movf	243,w,c
  3071  004DD8  0F82               	addlw	low (_g_irq_handler_info+2)
  3072  004DDA  6ED9               	movwf	fsr2l,c
  3073  004DDC  6ADA               	clrf	fsr2h,c
  3074  004DDE  C00F  FFDE         	movff	irq_set_handler@udata,postinc2
  3075  004DE2  C010  FFDD         	movff	irq_set_handler@udata+1,postdec2
  3076                           
  3077                           ;src/driver/irq.c: 27:         g_irq_handler_info[id].handler = handler;
  3078  004DE6  5011               	movf	irq_set_handler@id^0,w,c
  3079  004DE8  0D04               	mullw	4
  3080  004DEA  50F3               	movf	243,w,c
  3081  004DEC  0F80               	addlw	low _g_irq_handler_info
  3082  004DEE  6ED9               	movwf	fsr2l,c
  3083  004DF0  6ADA               	clrf	fsr2h,c
  3084  004DF2  C00D  FFDE         	movff	irq_set_handler@handler,postinc2
  3085  004DF6  C00E  FFDD         	movff	irq_set_handler@handler+1,postdec2
  3086  004DFA  0012               	return		;funcret
  3087  004DFC                     __end_of_irq_set_handler:
  3088                           	opt callstack 0
  3089                           
  3090 ;; *************** function _update_switch *****************
  3091 ;; Defined at:
  3092 ;;		line 393 in file "src/main.c"
  3093 ;; Parameters:    Size  Location     Type
  3094 ;;		None
  3095 ;; Auto vars:     Size  Location     Type
  3096 ;;  cmd             1   51[BANK0 ] unsigned char 
  3097 ;; Return value:  Size  Location     Type
  3098 ;;                  1    wreg      void 
  3099 ;; Registers used:
  3100 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3101 ;; Tracked objects:
  3102 ;;		On entry : 3F/0
  3103 ;;		On exit  : 3F/0
  3104 ;;		Unchanged: 0/0
  3105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3106 ;;      Params:         0       0       0       0       0       0       0
  3107 ;;      Locals:         0       1       0       0       0       0       0
  3108 ;;      Temps:          0       0       0       0       0       0       0
  3109 ;;      Totals:         0       1       0       0       0       0       0
  3110 ;;Total ram usage:        1 bytes
  3111 ;; Hardware stack levels used:    1
  3112 ;; Hardware stack levels required when called:   13
  3113 ;; This function calls:
  3114 ;;		_handle_cmd
  3115 ;;		_read_switch
  3116 ;; This function is called by:
  3117 ;;		_main
  3118 ;; This function uses a non-reentrant model
  3119 ;;
  3120                           
  3121                           	psect	text3
  3122  004C90                     __ptext3:
  3123                           	opt callstack 0
  3124  004C90                     _update_switch:
  3125                           	opt callstack 17
  3126                           
  3127                           ; BSR set to: 0
  3128                           ;src/main.c: 395:     u8 cmd = read_switch();
  3129                           
  3130                           ;incstack = 0
  3131  004C90  EC89  F022         	call	_read_switch	;wreg free
  3132  004C94  6FEC               	movwf	update_switch@cmd& (0+255),b
  3133                           
  3134                           ; BSR set to: 0
  3135                           ;src/main.c: 398:     if(cmd != g_pending_cmd) {
  3136  004C96  5072               	movf	_g_pending_cmd^0,w,c
  3137  004C98  19EC               	xorwf	update_switch@cmd& (0+255),w,b
  3138  004C9A  B4D8               	btfsc	status,2,c
  3139  004C9C  D007               	goto	l8317
  3140                           
  3141                           ; BSR set to: 0
  3142                           ;src/main.c: 399:         g_pending_cmd = cmd;
  3143  004C9E  C0EC  F072         	movff	update_switch@cmd,_g_pending_cmd
  3144  004CA2                     l8315:
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;src/main.c: 400:         g_cmd_debounce_counter = 10;
  3148  004CA2  0E00               	movlw	0
  3149  004CA4  6FFB               	movwf	(_g_cmd_debounce_counter+1)& (0+255),b
  3150  004CA6  0E0A               	movlw	10
  3151  004CA8  6FFA               	movwf	_g_cmd_debounce_counter& (0+255),b
  3152                           
  3153                           ;src/main.c: 401:     } else {
  3154  004CAA  0012               	return	
  3155  004CAC                     l8317:
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;src/main.c: 402:         if(g_cmd_debounce_counter > 0) {
  3159  004CAC  BFFB               	btfsc	(_g_cmd_debounce_counter+1)& (0+255),7,b
  3160  004CAE  D009               	goto	l8321
  3161  004CB0  51FB               	movf	(_g_cmd_debounce_counter+1)& (0+255),w,b
  3162  004CB2  E103               	bnz	u11140
  3163  004CB4  05FA               	decf	_g_cmd_debounce_counter& (0+255),w,b
  3164  004CB6  A0D8               	btfss	status,0,c
  3165  004CB8  D004               	goto	l8321
  3166  004CBA                     u11140:
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;src/main.c: 403:             g_cmd_debounce_counter--;
  3170  004CBA  07FA               	decf	_g_cmd_debounce_counter& (0+255),f,b
  3171  004CBC  A0D8               	btfss	status,0,c
  3172  004CBE  07FB               	decf	(_g_cmd_debounce_counter+1)& (0+255),f,b
  3173                           
  3174                           ;src/main.c: 404:         } else if(g_cmd_debounce_counter == 0) {
  3175  004CC0  0012               	return	
  3176  004CC2                     l8321:
  3177                           
  3178                           ; BSR set to: 0
  3179  004CC2  51FA               	movf	_g_cmd_debounce_counter& (0+255),w,b
  3180  004CC4  11FB               	iorwf	(_g_cmd_debounce_counter+1)& (0+255),w,b
  3181  004CC6  A4D8               	btfss	status,2,c
  3182  004CC8  0012               	return	
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;src/main.c: 405:             handle_cmd(g_pending_cmd);
  3186  004CCA  5072               	movf	_g_pending_cmd^0,w,c
  3187  004CCC  EC5F  F016         	call	_handle_cmd
  3188  004CD0  D7E8               	goto	l8315
  3189  004CD2                     __end_of_update_switch:
  3190                           	opt callstack 0
  3191                           
  3192 ;; *************** function _update_led *****************
  3193 ;; Defined at:
  3194 ;;		line 411 in file "src/main.c"
  3195 ;; Parameters:    Size  Location     Type
  3196 ;;		None
  3197 ;; Auto vars:     Size  Location     Type
  3198 ;;  updatetime      2   39[BANK0 ] unsigned short 
  3199 ;; Return value:  Size  Location     Type
  3200 ;;                  1    wreg      void 
  3201 ;; Registers used:
  3202 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3203 ;; Tracked objects:
  3204 ;;		On entry : 3F/0
  3205 ;;		On exit  : 3F/0
  3206 ;;		Unchanged: 0/0
  3207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3208 ;;      Params:         0       0       0       0       0       0       0
  3209 ;;      Locals:         0       2       0       0       0       0       0
  3210 ;;      Temps:          0       3       0       0       0       0       0
  3211 ;;      Totals:         0       5       0       0       0       0       0
  3212 ;;Total ram usage:        5 bytes
  3213 ;; Hardware stack levels used:    1
  3214 ;; Hardware stack levels required when called:   11
  3215 ;; This function calls:
  3216 ;;		_adf4351_get_lock
  3217 ;;		_setLOCK_LED
  3218 ;; This function is called by:
  3219 ;;		_main
  3220 ;; This function uses a non-reentrant model
  3221 ;;
  3222                           
  3223                           	psect	text4
  3224  00363C                     __ptext4:
  3225                           	opt callstack 0
  3226  00363C                     _update_led:
  3227                           	opt callstack 19
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;src/main.c: 413: static u8 blinkcnt = 0;;src/main.c: 414: static u8 blinkstat = 0;;src/
      +                          main.c: 415: u16 updatetime = 50;
  3231                           
  3232                           ; BSR set to: 0
  3233                           ;incstack = 0
  3234  00363C  0E00               	movlw	0
  3235  00363E  6FE1               	movwf	(update_led@updatetime+1)& (0+255),b
  3236  003640  0E32               	movlw	50
  3237  003642  6FE0               	movwf	update_led@updatetime& (0+255),b
  3238                           
  3239                           ; BSR set to: 0
  3240                           ;src/main.c: 416: static u8 pause = 0;;src/main.c: 418:  if(power_blink > 1)
  3241  003644  0E01               	movlw	1
  3242  003646  6596               	cpfsgt	_power_blink& (0+255),b
  3243  003648  D003               	goto	l8333
  3244                           
  3245                           ; BSR set to: 0
  3246                           ;src/main.c: 419:   updatetime /= 2;
  3247  00364A  90D8               	bcf	status,0,c
  3248  00364C  33E1               	rrcf	(update_led@updatetime+1)& (0+255),f,b
  3249  00364E  33E0               	rrcf	update_led@updatetime& (0+255),f,b
  3250  003650                     l8333:
  3251                           
  3252                           ; BSR set to: 0
  3253                           ;src/main.c: 422:     if(g_cpu_led_update_cnt++ >= updatetime)
  3254  003650  5188               	movf	_g_cpu_led_update_cnt& (0+255),w,b
  3255  003652  6FDD               	movwf	??_update_led& (0+255),b
  3256  003654  5189               	movf	(_g_cpu_led_update_cnt+1)& (0+255),w,b
  3257  003656  6FDE               	movwf	(??_update_led+1)& (0+255),b
  3258  003658  4B88               	infsnz	_g_cpu_led_update_cnt& (0+255),f,b
  3259  00365A  2B89               	incf	(_g_cpu_led_update_cnt+1)& (0+255),f,b
  3260  00365C  51E0               	movf	update_led@updatetime& (0+255),w,b
  3261  00365E  5DDD               	subwf	??_update_led& (0+255),w,b
  3262  003660  51E1               	movf	(update_led@updatetime+1)& (0+255),w,b
  3263  003662  59DE               	subwfb	(??_update_led+1)& (0+255),w,b
  3264  003664  A0D8               	btfss	status,0,c
  3265  003666  D050               	goto	l8361
  3266                           
  3267                           ; BSR set to: 0
  3268                           ;src/main.c: 423:  {;src/main.c: 424:         if(blinkstat == 0)
  3269  003668  5191               	movf	update_led@blinkstat& (0+255),w,b
  3270  00366A  A4D8               	btfss	status,2,c
  3271  00366C  D030               	goto	l8355
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;src/main.c: 425:   {;src/main.c: 426:    blinkstat = 1;
  3275  00366E  0E01               	movlw	1
  3276  003670  6F91               	movwf	update_led@blinkstat& (0+255),b
  3277                           
  3278                           ; BSR set to: 0
  3279                           ;src/main.c: 427:    if(power_blink > 1 && ++blinkcnt > power_blink)
  3280  003672  0E01               	movlw	1
  3281  003674  6596               	cpfsgt	_power_blink& (0+255),b
  3282  003676  D00A               	goto	l8347
  3283                           
  3284                           ; BSR set to: 0
  3285  003678  2B92               	incf	update_led@blinkcnt& (0+255),f,b
  3286  00367A  5192               	movf	update_led@blinkcnt& (0+255),w,b
  3287  00367C  5D96               	subwf	_power_blink& (0+255),w,b
  3288  00367E  B0D8               	btfsc	status,0,c
  3289  003680  D005               	goto	l8347
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;src/main.c: 428:    {;src/main.c: 429:     blinkcnt = 0;
  3293  003682  0E00               	movlw	0
  3294  003684  6F92               	movwf	update_led@blinkcnt& (0+255),b
  3295                           
  3296                           ;src/main.c: 430:     pause = 1;
  3297  003686  0E01               	movlw	1
  3298  003688  6F90               	movwf	update_led@pause& (0+255),b
  3299  00368A  0012               	return	
  3300  00368C                     l8347:
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;src/main.c: 433:    if(pause)
  3304  00368C  5190               	movf	update_led@pause& (0+255),w,b
  3305  00368E  B4D8               	btfsc	status,2,c
  3306  003690  D005               	goto	l8353
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;src/main.c: 434:    {;src/main.c: 435:     if(--pause == 0)
  3310  003692  2F90               	decfsz	update_led@pause& (0+255),f,b
  3311  003694  D035               	goto	l8359
  3312                           
  3313                           ; BSR set to: 0
  3314                           ;src/main.c: 436:      blinkcnt = 0;
  3315  003696  0E00               	movlw	0
  3316  003698  6F92               	movwf	update_led@blinkcnt& (0+255),b
  3317  00369A  D032               	goto	l8359
  3318  00369C                     l8353:
  3319                           
  3320                           ; BSR set to: 0
  3321                           ;src/main.c: 439:     *((PIN_LED_CPU_OK)->pPORT) &= ~(PIN_LED_CPU_OK)->mask;
  3322  00369C  0ED8               	movlw	low (_PIN_LED_CPU_OK_DEF+4)
  3323  00369E  6EF6               	movwf	tblptrl,c
  3324  0036A0  0E7C               	movlw	high (_PIN_LED_CPU_OK_DEF+4)
  3325  0036A2  6EF7               	movwf	tblptrh,c
  3326  0036A4                     	if	0	;tblptru may be non-zero
  3327  0036A4                     	endif
  3328  0036A4                     	if	0	;tblptru may be non-zero
  3329  0036A4                     	endif
  3330  0036A4  0008               	tblrd		*
  3331  0036A6  50F5               	movf	tablat,w,c
  3332  0036A8  0AFF               	xorlw	255
  3333  0036AA  6FDD               	movwf	??_update_led& (0+255),b
  3334  0036AC  0ED4               	movlw	low _PIN_LED_CPU_OK_DEF
  3335  0036AE  6EF6               	movwf	tblptrl,c
  3336  0036B0                     	if	1	;There is more than 1 active tblptr byte
  3337  0036B0  0E7C               	movlw	high _PIN_LED_CPU_OK_DEF
  3338  0036B2  6EF7               	movwf	tblptrh,c
  3339  0036B4                     	endif
  3340  0036B4                     	if	0	;There are less than 3 active tblptr bytes
  3341  0036B4                     	endif
  3342  0036B4  0009               	tblrd		*+
  3343  0036B6  CFF5 F0DE          	movff	tablat,??_update_led+1
  3344  0036BA  0009               	tblrd		*+
  3345  0036BC  CFF5 F0DF          	movff	tablat,??_update_led+2
  3346  0036C0  C0DE  FFD9         	movff	??_update_led+1,fsr2l
  3347  0036C4  C0DF  FFDA         	movff	??_update_led+2,fsr2h
  3348  0036C8  51DD               	movf	??_update_led& (0+255),w,b
  3349  0036CA  16DF               	andwf	indf2,f,c
  3350  0036CC  D019               	goto	l8359
  3351  0036CE                     l8355:
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;src/main.c: 442:   {;src/main.c: 443:    blinkstat = 0;
  3355  0036CE  0E00               	movlw	0
  3356  0036D0  6F91               	movwf	update_led@blinkstat& (0+255),b
  3357                           
  3358                           ; BSR set to: 0
  3359                           ;src/main.c: 444:             *((PIN_LED_CPU_OK)->pPORT) |= (PIN_LED_CPU_OK)->mask;
  3360  0036D2  0ED8               	movlw	low (_PIN_LED_CPU_OK_DEF+4)
  3361  0036D4  6EF6               	movwf	tblptrl,c
  3362  0036D6  0E7C               	movlw	high (_PIN_LED_CPU_OK_DEF+4)
  3363  0036D8  6EF7               	movwf	tblptrh,c
  3364  0036DA                     	if	0	;tblptru may be non-zero
  3365  0036DA                     	endif
  3366  0036DA                     	if	0	;tblptru may be non-zero
  3367  0036DA                     	endif
  3368  0036DA  0008               	tblrd		*
  3369  0036DC  CFF5 F0DD          	movff	tablat,??_update_led
  3370  0036E0  0ED4               	movlw	low _PIN_LED_CPU_OK_DEF
  3371  0036E2  6EF6               	movwf	tblptrl,c
  3372  0036E4                     	if	1	;There is more than 1 active tblptr byte
  3373  0036E4  0E7C               	movlw	high _PIN_LED_CPU_OK_DEF
  3374  0036E6  6EF7               	movwf	tblptrh,c
  3375  0036E8                     	endif
  3376  0036E8                     	if	0	;There are less than 3 active tblptr bytes
  3377  0036E8                     	endif
  3378  0036E8  0009               	tblrd		*+
  3379  0036EA  CFF5 F0DE          	movff	tablat,??_update_led+1
  3380  0036EE  0009               	tblrd		*+
  3381  0036F0  CFF5 F0DF          	movff	tablat,??_update_led+2
  3382  0036F4  C0DE  FFD9         	movff	??_update_led+1,fsr2l
  3383  0036F8  C0DF  FFDA         	movff	??_update_led+2,fsr2h
  3384  0036FC  51DD               	movf	??_update_led& (0+255),w,b
  3385  0036FE  12DF               	iorwf	indf2,f,c
  3386  003700                     l8359:
  3387                           
  3388                           ; BSR set to: 0
  3389                           ;src/main.c: 447:         g_cpu_led_update_cnt = 0;
  3390  003700  0E00               	movlw	0
  3391  003702  6F89               	movwf	(_g_cpu_led_update_cnt+1)& (0+255),b
  3392  003704  0E00               	movlw	0
  3393  003706  6F88               	movwf	_g_cpu_led_update_cnt& (0+255),b
  3394  003708                     l8361:
  3395                           
  3396                           ; BSR set to: 0
  3397                           ;src/main.c: 451:     if(adf4351_get_lock(&g_adf4351) == 0) {
  3398  003708  0E65               	movlw	low _g_adf4351
  3399  00370A  6FD5               	movwf	adf4351_get_lock@ctx& (0+255),b
  3400  00370C  0E01               	movlw	high _g_adf4351
  3401  00370E  6FD6               	movwf	(adf4351_get_lock@ctx+1)& (0+255),b
  3402  003710  EC09  F023         	call	_adf4351_get_lock	;wreg free
  3403  003714  51D5               	movf	?_adf4351_get_lock& (0+255),w,b
  3404  003716  11D6               	iorwf	(?_adf4351_get_lock+1)& (0+255),w,b
  3405  003718  A4D8               	btfss	status,2,c
  3406  00371A  D004               	goto	l8365
  3407                           
  3408                           ; BSR set to: 0
  3409                           ;src/main.c: 452:         setLOCK_LED(0);
  3410  00371C  0E00               	movlw	0
  3411  00371E  EC7C  F021         	call	_setLOCK_LED
  3412                           
  3413                           ;src/main.c: 453:     } else {
  3414  003722  0012               	return	
  3415  003724                     l8365:
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;src/main.c: 454:         setLOCK_LED(1);
  3419  003724  0E01               	movlw	1
  3420  003726  EC7C  F021         	call	_setLOCK_LED
  3421                           
  3422                           ; BSR set to: 0
  3423  00372A  0012               	return		;funcret
  3424  00372C                     __end_of_update_led:
  3425                           	opt callstack 0
  3426                           
  3427 ;; *************** function _pa_update *****************
  3428 ;; Defined at:
  3429 ;;		line 342 in file "src/main.c"
  3430 ;; Parameters:    Size  Location     Type
  3431 ;;		None
  3432 ;; Auto vars:     Size  Location     Type
  3433 ;;		None
  3434 ;; Return value:  Size  Location     Type
  3435 ;;                  1    wreg      void 
  3436 ;; Registers used:
  3437 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3438 ;; Tracked objects:
  3439 ;;		On entry : 3F/0
  3440 ;;		On exit  : 0/0
  3441 ;;		Unchanged: 0/0
  3442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3443 ;;      Params:         0       0       0       0       0       0       0
  3444 ;;      Locals:         0       0       0       0       0       0       0
  3445 ;;      Temps:          0       3       0       0       0       0       0
  3446 ;;      Totals:         0       3       0       0       0       0       0
  3447 ;;Total ram usage:        3 bytes
  3448 ;; Hardware stack levels used:    1
  3449 ;; Hardware stack levels required when called:   12
  3450 ;; This function calls:
  3451 ;;		_adf4351_get_lock
  3452 ;;		_pa_alarm
  3453 ;;		_pa_mute
  3454 ;;		_pa_unmute
  3455 ;; This function is called by:
  3456 ;;		_main
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           	psect	text5
  3461  00490C                     __ptext5:
  3462                           	opt callstack 0
  3463  00490C                     _pa_update:
  3464                           	opt callstack 18
  3465                           
  3466                           ; BSR set to: 0
  3467                           ;src/main.c: 344:  if(pa_alarm())
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;incstack = 0
  3471  00490C  EC93  F027         	call	_pa_alarm	;wreg free
  3472  004910  0900               	iorlw	0
  3473  004912  B4D8               	btfsc	status,2,c
  3474  004914  D003               	goto	l8373
  3475  004916                     u11230:
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;src/main.c: 345:  {;src/main.c: 346:   pa_mute();
  3479  004916  ECE4  F024         	call	_pa_mute	;wreg free
  3480  00491A  0012               	return	
  3481  00491C                     l8373:
  3482                           
  3483                           ; BSR set to: 0
  3484                           ;src/main.c: 350:     if((adf4351_get_lock(&g_adf4351) != 0) && (((*((PIN_PTT_INPUT)->pP
      +                          ORT) & (PIN_PTT_INPUT)->mask) != 0) == 0)) {
  3485  00491C  0E65               	movlw	low _g_adf4351
  3486  00491E  6FD5               	movwf	adf4351_get_lock@ctx& (0+255),b
  3487  004920  0E01               	movlw	high _g_adf4351
  3488  004922  6FD6               	movwf	(adf4351_get_lock@ctx+1)& (0+255),b
  3489  004924  EC09  F023         	call	_adf4351_get_lock	;wreg free
  3490  004928  51D5               	movf	?_adf4351_get_lock& (0+255),w,b
  3491  00492A  11D6               	iorwf	(?_adf4351_get_lock+1)& (0+255),w,b
  3492  00492C  B4D8               	btfsc	status,2,c
  3493  00492E  D7F3               	goto	u11230
  3494                           
  3495                           ; BSR set to: 0
  3496  004930  0EFB               	movlw	low (_PIN_PTT_INPUT_DEF+4)
  3497  004932  6EF6               	movwf	tblptrl,c
  3498  004934  0E7C               	movlw	high (_PIN_PTT_INPUT_DEF+4)
  3499  004936  6EF7               	movwf	tblptrh,c
  3500  004938                     	if	0	;tblptru may be non-zero
  3501  004938                     	endif
  3502  004938                     	if	0	;tblptru may be non-zero
  3503  004938                     	endif
  3504  004938  0008               	tblrd		*
  3505  00493A  CFF5 F0DD          	movff	tablat,??_pa_update
  3506  00493E  0EF7               	movlw	low _PIN_PTT_INPUT_DEF
  3507  004940  6EF6               	movwf	tblptrl,c
  3508  004942                     	if	1	;There is more than 1 active tblptr byte
  3509  004942  0E7C               	movlw	high _PIN_PTT_INPUT_DEF
  3510  004944  6EF7               	movwf	tblptrh,c
  3511  004946                     	endif
  3512  004946                     	if	0	;There are less than 3 active tblptr bytes
  3513  004946                     	endif
  3514  004946  0009               	tblrd		*+
  3515  004948  CFF5 F0DE          	movff	tablat,??_pa_update+1
  3516  00494C  0009               	tblrd		*+
  3517  00494E  CFF5 F0DF          	movff	tablat,??_pa_update+2
  3518  004952  C0DE  FFD9         	movff	??_pa_update+1,fsr2l
  3519  004956  C0DF  FFDA         	movff	??_pa_update+2,fsr2h
  3520  00495A  50DF               	movf	indf2,w,c
  3521  00495C  15DD               	andwf	??_pa_update& (0+255),w,b
  3522  00495E  0900               	iorlw	0
  3523  004960  A4D8               	btfss	status,2,c
  3524  004962  D7D9               	goto	u11230
  3525                           
  3526                           ; BSR set to: 0
  3527                           ;src/main.c: 352:         pa_unmute();
  3528  004964  EC37  F021         	call	_pa_unmute	;wreg free
  3529                           
  3530                           ;src/main.c: 353:     } else {
  3531  004968  0012               	return		;funcret
  3532  00496A                     __end_of_pa_update:
  3533                           	opt callstack 0
  3534                           
  3535 ;; *************** function _pa_unmute *****************
  3536 ;; Defined at:
  3537 ;;		line 284 in file "src/main.c"
  3538 ;; Parameters:    Size  Location     Type
  3539 ;;		None
  3540 ;; Auto vars:     Size  Location     Type
  3541 ;;		None
  3542 ;; Return value:  Size  Location     Type
  3543 ;;                  1    wreg      void 
  3544 ;; Registers used:
  3545 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3546 ;; Tracked objects:
  3547 ;;		On entry : 3F/0
  3548 ;;		On exit  : 0/0
  3549 ;;		Unchanged: 0/0
  3550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3551 ;;      Params:         0       0       0       0       0       0       0
  3552 ;;      Locals:         0       0       0       0       0       0       0
  3553 ;;      Temps:          0       3       0       0       0       0       0
  3554 ;;      Totals:         0       3       0       0       0       0       0
  3555 ;;Total ram usage:        3 bytes
  3556 ;; Hardware stack levels used:    1
  3557 ;; Hardware stack levels required when called:   11
  3558 ;; This function calls:
  3559 ;;		_adf4351_set_rfout_enable
  3560 ;;		_pa_alarm
  3561 ;;		_setPTT_LED
  3562 ;; This function is called by:
  3563 ;;		_pa_update
  3564 ;; This function uses a non-reentrant model
  3565 ;;
  3566                           
  3567                           	psect	text6
  3568  00426E                     __ptext6:
  3569                           	opt callstack 0
  3570  00426E                     _pa_unmute:
  3571                           	opt callstack 18
  3572                           
  3573                           ; BSR set to: 0
  3574                           ;src/main.c: 287:  if(pa_alarm())
  3575                           
  3576                           ;incstack = 0
  3577  00426E  EC93  F027         	call	_pa_alarm	;wreg free
  3578  004272  0900               	iorlw	0
  3579  004274  A4D8               	btfss	status,2,c
  3580  004276  0012               	return	
  3581                           
  3582                           ; BSR set to: 0
  3583                           ;src/main.c: 290:     if(g_ptt_debounce_counter > 0) {
  3584  004278  BFF5               	btfsc	(_g_ptt_debounce_counter+1)& (0+255),7,b
  3585  00427A  D009               	goto	l8107
  3586  00427C  51F5               	movf	(_g_ptt_debounce_counter+1)& (0+255),w,b
  3587  00427E  E103               	bnz	u10970
  3588  004280  05F4               	decf	_g_ptt_debounce_counter& (0+255),w,b
  3589  004282  A0D8               	btfss	status,0,c
  3590  004284  D004               	goto	l8107
  3591  004286                     u10970:
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;src/main.c: 292:         g_ptt_debounce_counter--;
  3595  004286  07F4               	decf	_g_ptt_debounce_counter& (0+255),f,b
  3596  004288  A0D8               	btfss	status,0,c
  3597  00428A  07F5               	decf	(_g_ptt_debounce_counter+1)& (0+255),f,b
  3598                           
  3599                           ;src/main.c: 293:     } else if(g_ptt_debounce_counter == 0) {
  3600  00428C  0012               	return	
  3601  00428E                     l8107:
  3602                           
  3603                           ; BSR set to: 0
  3604  00428E  51F4               	movf	_g_ptt_debounce_counter& (0+255),w,b
  3605  004290  11F5               	iorwf	(_g_ptt_debounce_counter+1)& (0+255),w,b
  3606  004292  A4D8               	btfss	status,2,c
  3607  004294  0012               	return	
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;src/main.c: 296:         g_ptt_debounce_counter--;
  3611  004296  07F4               	decf	_g_ptt_debounce_counter& (0+255),f,b
  3612  004298  A0D8               	btfss	status,0,c
  3613  00429A  07F5               	decf	(_g_ptt_debounce_counter+1)& (0+255),f,b
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;src/main.c: 297:         *((PIN_PA_ENABLE)->pPORT) |= (PIN_PA_ENABLE)->mask;
  3617  00429C  0EC4               	movlw	low (_PIN_PA_ENABLE_DEF+4)
  3618  00429E  6EF6               	movwf	tblptrl,c
  3619  0042A0  0E7C               	movlw	high (_PIN_PA_ENABLE_DEF+4)
  3620  0042A2  6EF7               	movwf	tblptrh,c
  3621  0042A4                     	if	0	;tblptru may be non-zero
  3622  0042A4                     	endif
  3623  0042A4                     	if	0	;tblptru may be non-zero
  3624  0042A4                     	endif
  3625  0042A4  0008               	tblrd		*
  3626  0042A6  CFF5 F0D8          	movff	tablat,??_pa_unmute
  3627  0042AA  0EC0               	movlw	low _PIN_PA_ENABLE_DEF
  3628  0042AC  6EF6               	movwf	tblptrl,c
  3629  0042AE                     	if	1	;There is more than 1 active tblptr byte
  3630  0042AE  0E7C               	movlw	high _PIN_PA_ENABLE_DEF
  3631  0042B0  6EF7               	movwf	tblptrh,c
  3632  0042B2                     	endif
  3633  0042B2                     	if	0	;There are less than 3 active tblptr bytes
  3634  0042B2                     	endif
  3635  0042B2  0009               	tblrd		*+
  3636  0042B4  CFF5 F0D9          	movff	tablat,??_pa_unmute+1
  3637  0042B8  0009               	tblrd		*+
  3638  0042BA  CFF5 F0DA          	movff	tablat,??_pa_unmute+2
  3639  0042BE  C0D9  FFD9         	movff	??_pa_unmute+1,fsr2l
  3640  0042C2  C0DA  FFDA         	movff	??_pa_unmute+2,fsr2h
  3641  0042C6  51D8               	movf	??_pa_unmute& (0+255),w,b
  3642  0042C8  12DF               	iorwf	indf2,f,c
  3643                           
  3644                           ; BSR set to: 0
  3645                           ;src/main.c: 298:         setPTT_LED(1);
  3646  0042CA  0E01               	movlw	1
  3647  0042CC  EC64  F020         	call	_setPTT_LED
  3648                           
  3649                           ; BSR set to: 0
  3650                           ;src/main.c: 299:         _delay((unsigned long)((2)*(8000000/4000.0)));
  3651  0042D0  0E06               	movlw	6
  3652  0042D2  0100               	movlb	0	; () banked
  3653  0042D4  6FD8               	movwf	??_pa_unmute& (0+255),b
  3654  0042D6  0E30               	movlw	48
  3655  0042D8                     u11347:
  3656  0042D8  2EE8               	decfsz	wreg,f,c
  3657  0042DA  D7FE               	bra	u11347
  3658  0042DC  2FD8               	decfsz	??_pa_unmute& (0+255),f,b
  3659  0042DE  D7FC               	bra	u11347
  3660  0042E0  F000               	nop	
  3661                           
  3662                           ;src/main.c: 300:         adf4351_set_rfout_enable(&g_adf4351, 1);
  3663  0042E2  0E65               	movlw	low _g_adf4351
  3664  0042E4  6E25               	movwf	adf4351_set_rfout_enable@ctx^0,c
  3665  0042E6  0E01               	movlw	high _g_adf4351
  3666  0042E8  6E26               	movwf	(adf4351_set_rfout_enable@ctx+1)^0,c
  3667  0042EA  0E00               	movlw	0
  3668  0042EC  6E28               	movwf	(adf4351_set_rfout_enable@enable+1)^0,c
  3669  0042EE  0E01               	movlw	1
  3670  0042F0  6E27               	movwf	adf4351_set_rfout_enable@enable^0,c
  3671  0042F2  EC69  F026         	call	_adf4351_set_rfout_enable	;wreg free
  3672                           
  3673                           ;src/main.c: 301:     } else {
  3674  0042F6  0012               	return		;funcret
  3675  0042F8                     __end_of_pa_unmute:
  3676                           	opt callstack 0
  3677                           
  3678 ;; *************** function _pa_alarm *****************
  3679 ;; Defined at:
  3680 ;;		line 141 in file "src/alarm.c"
  3681 ;; Parameters:    Size  Location     Type
  3682 ;;		None
  3683 ;; Auto vars:     Size  Location     Type
  3684 ;;		None
  3685 ;; Return value:  Size  Location     Type
  3686 ;;                  1    wreg      unsigned char 
  3687 ;; Registers used:
  3688 ;;		wreg, status,2
  3689 ;; Tracked objects:
  3690 ;;		On entry : 3F/0
  3691 ;;		On exit  : 3F/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3694 ;;      Params:         0       0       0       0       0       0       0
  3695 ;;      Locals:         0       0       0       0       0       0       0
  3696 ;;      Temps:          0       0       0       0       0       0       0
  3697 ;;      Totals:         0       0       0       0       0       0       0
  3698 ;;Total ram usage:        0 bytes
  3699 ;; Hardware stack levels used:    1
  3700 ;; Hardware stack levels required when called:    2
  3701 ;; This function calls:
  3702 ;;		Nothing
  3703 ;; This function is called by:
  3704 ;;		_pa_unmute
  3705 ;;		_pa_update
  3706 ;; This function uses a non-reentrant model
  3707 ;;
  3708                           
  3709                           	psect	text7
  3710  004F26                     __ptext7:
  3711                           	opt callstack 0
  3712  004F26                     _pa_alarm:
  3713                           	opt callstack 26
  3714                           
  3715                           ; BSR set to: 0
  3716                           ;src/alarm.c: 143:  if(overtemp_alarm || supplyvoltage_alarm)
  3717                           
  3718                           ;incstack = 0
  3719  004F26  518E               	movf	_overtemp_alarm& (0+255),w,b
  3720  004F28  A4D8               	btfss	status,2,c
  3721  004F2A  D003               	goto	u10550
  3722                           
  3723                           ; BSR set to: 0
  3724  004F2C  518C               	movf	_supplyvoltage_alarm& (0+255),w,b
  3725  004F2E  B4D8               	btfsc	status,2,c
  3726  004F30  D002               	goto	l7847
  3727  004F32                     u10550:
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;src/alarm.c: 144:   return 1;
  3731  004F32  0E01               	movlw	1
  3732  004F34  0012               	return	
  3733  004F36                     l7847:
  3734                           
  3735                           ; BSR set to: 0
  3736                           ;src/alarm.c: 146:  return 0;
  3737  004F36  0E00               	movlw	0
  3738                           
  3739                           ; BSR set to: 0
  3740  004F38  0012               	return		;funcret
  3741  004F3A                     __end_of_pa_alarm:
  3742                           	opt callstack 0
  3743                           
  3744 ;; *************** function _init_switch *****************
  3745 ;; Defined at:
  3746 ;;		line 387 in file "src/main.c"
  3747 ;; Parameters:    Size  Location     Type
  3748 ;;		None
  3749 ;; Auto vars:     Size  Location     Type
  3750 ;;		None
  3751 ;; Return value:  Size  Location     Type
  3752 ;;                  1    wreg      void 
  3753 ;; Registers used:
  3754 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3755 ;; Tracked objects:
  3756 ;;		On entry : 3F/0
  3757 ;;		On exit  : 3F/0
  3758 ;;		Unchanged: 0/0
  3759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3760 ;;      Params:         0       0       0       0       0       0       0
  3761 ;;      Locals:         0       0       0       0       0       0       0
  3762 ;;      Temps:          0       0       0       0       0       0       0
  3763 ;;      Totals:         0       0       0       0       0       0       0
  3764 ;;Total ram usage:        0 bytes
  3765 ;; Hardware stack levels used:    1
  3766 ;; Hardware stack levels required when called:   13
  3767 ;; This function calls:
  3768 ;;		_handle_cmd
  3769 ;;		_read_switch
  3770 ;; This function is called by:
  3771 ;;		_main
  3772 ;; This function uses a non-reentrant model
  3773 ;;
  3774                           
  3775                           	psect	text8
  3776  004F4E                     __ptext8:
  3777                           	opt callstack 0
  3778  004F4E                     _init_switch:
  3779                           	opt callstack 17
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;src/main.c: 389:     g_pending_cmd = read_switch();
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;incstack = 0
  3786  004F4E  EC89  F022         	call	_read_switch	;wreg free
  3787  004F52  6E72               	movwf	_g_pending_cmd^0,c
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;src/main.c: 390:     handle_cmd(g_pending_cmd);
  3791  004F54  5072               	movf	_g_pending_cmd^0,w,c
  3792  004F56  EC5F  F016         	call	_handle_cmd
  3793                           
  3794                           ; BSR set to: 0
  3795  004F5A  0012               	return		;funcret
  3796  004F5C                     __end_of_init_switch:
  3797                           	opt callstack 0
  3798                           
  3799 ;; *************** function _read_switch *****************
  3800 ;; Defined at:
  3801 ;;		line 376 in file "src/main.c"
  3802 ;; Parameters:    Size  Location     Type
  3803 ;;		None
  3804 ;; Auto vars:     Size  Location     Type
  3805 ;;  fsw1            1   16[COMRAM] unsigned char 
  3806 ;;  fsw0            1   15[COMRAM] unsigned char 
  3807 ;; Return value:  Size  Location     Type
  3808 ;;                  1    wreg      unsigned char 
  3809 ;; Registers used:
  3810 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3811 ;; Tracked objects:
  3812 ;;		On entry : 3F/0
  3813 ;;		On exit  : 3F/0
  3814 ;;		Unchanged: 3F/0
  3815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3816 ;;      Params:         0       0       0       0       0       0       0
  3817 ;;      Locals:         2       0       0       0       0       0       0
  3818 ;;      Temps:          3       0       0       0       0       0       0
  3819 ;;      Totals:         5       0       0       0       0       0       0
  3820 ;;Total ram usage:        5 bytes
  3821 ;; Hardware stack levels used:    1
  3822 ;; Hardware stack levels required when called:    2
  3823 ;; This function calls:
  3824 ;;		Nothing
  3825 ;; This function is called by:
  3826 ;;		_init_switch
  3827 ;;		_update_switch
  3828 ;; This function uses a non-reentrant model
  3829 ;;
  3830                           
  3831                           	psect	text9
  3832  004512                     __ptext9:
  3833                           	opt callstack 0
  3834  004512                     _read_switch:
  3835                           	opt callstack 27
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;src/main.c: 378:     u8 fsw0, fsw1;;src/main.c: 381:     fsw0 = ((*((PIN_FSW0)->pPORT) 
      +                          & (PIN_FSW0)->mask) != 0)?0:1;
  3839                           
  3840                           ; BSR set to: 0
  3841                           ;incstack = 0
  3842  004512  0EE2               	movlw	low (_PIN_FSW0_DEF+4)
  3843  004514  6EF6               	movwf	tblptrl,c
  3844  004516  0E7C               	movlw	high (_PIN_FSW0_DEF+4)
  3845  004518  6EF7               	movwf	tblptrh,c
  3846  00451A                     	if	0	;tblptru may be non-zero
  3847  00451A                     	endif
  3848  00451A                     	if	0	;tblptru may be non-zero
  3849  00451A                     	endif
  3850  00451A  0008               	tblrd		*
  3851  00451C  CFF5 F00D          	movff	tablat,??_read_switch
  3852  004520  0EDE               	movlw	low _PIN_FSW0_DEF
  3853  004522  6EF6               	movwf	tblptrl,c
  3854  004524                     	if	1	;There is more than 1 active tblptr byte
  3855  004524  0E7C               	movlw	high _PIN_FSW0_DEF
  3856  004526  6EF7               	movwf	tblptrh,c
  3857  004528                     	endif
  3858  004528                     	if	0	;There are less than 3 active tblptr bytes
  3859  004528                     	endif
  3860  004528  0009               	tblrd		*+
  3861  00452A  CFF5 F00E          	movff	tablat,??_read_switch+1
  3862  00452E  0009               	tblrd		*+
  3863  004530  CFF5 F00F          	movff	tablat,??_read_switch+2
  3864  004534  C00E  FFD9         	movff	??_read_switch+1,fsr2l
  3865  004538  C00F  FFDA         	movff	??_read_switch+2,fsr2h
  3866  00453C  50DF               	movf	indf2,w,c
  3867  00453E  140D               	andwf	??_read_switch^0,w,c
  3868  004540  0900               	iorlw	0
  3869  004542  A4D8               	btfss	status,2,c
  3870  004544  D002               	goto	u10990
  3871  004546  0E01               	movlw	1
  3872  004548  D001               	goto	u11000
  3873  00454A                     u10990:
  3874  00454A  0E00               	movlw	0
  3875  00454C                     u11000:
  3876  00454C  6E10               	movwf	read_switch@fsw0^0,c
  3877                           
  3878                           ;src/main.c: 382:     fsw1 = ((*((PIN_FSW1)->pPORT) & (PIN_FSW1)->mask) != 0)?0:1;
  3879  00454E  0EDD               	movlw	low (_PIN_FSW1_DEF+4)
  3880  004550  6EF6               	movwf	tblptrl,c
  3881  004552  0E7C               	movlw	high (_PIN_FSW1_DEF+4)
  3882  004554  6EF7               	movwf	tblptrh,c
  3883  004556                     	if	0	;tblptru may be non-zero
  3884  004556                     	endif
  3885  004556                     	if	0	;tblptru may be non-zero
  3886  004556                     	endif
  3887  004556  0008               	tblrd		*
  3888  004558  CFF5 F00D          	movff	tablat,??_read_switch
  3889  00455C  0ED9               	movlw	low _PIN_FSW1_DEF
  3890  00455E  6EF6               	movwf	tblptrl,c
  3891  004560                     	if	1	;There is more than 1 active tblptr byte
  3892  004560  0E7C               	movlw	high _PIN_FSW1_DEF
  3893  004562  6EF7               	movwf	tblptrh,c
  3894  004564                     	endif
  3895  004564                     	if	0	;There are less than 3 active tblptr bytes
  3896  004564                     	endif
  3897  004564  0009               	tblrd		*+
  3898  004566  CFF5 F00E          	movff	tablat,??_read_switch+1
  3899  00456A  0009               	tblrd		*+
  3900  00456C  CFF5 F00F          	movff	tablat,??_read_switch+2
  3901  004570  C00E  FFD9         	movff	??_read_switch+1,fsr2l
  3902  004574  C00F  FFDA         	movff	??_read_switch+2,fsr2h
  3903  004578  50DF               	movf	indf2,w,c
  3904  00457A  140D               	andwf	??_read_switch^0,w,c
  3905  00457C  0900               	iorlw	0
  3906  00457E  A4D8               	btfss	status,2,c
  3907  004580  D002               	goto	u11010
  3908  004582  0E01               	movlw	1
  3909  004584  D001               	goto	u11020
  3910  004586                     u11010:
  3911  004586  0E00               	movlw	0
  3912  004588                     u11020:
  3913  004588  6E11               	movwf	read_switch@fsw1^0,c
  3914                           
  3915                           ; BSR set to: 0
  3916                           ;src/main.c: 384:     return (fsw0<<0) | (fsw1<<1);
  3917  00458A  5011               	movf	read_switch@fsw1^0,w,c
  3918  00458C  2411               	addwf	read_switch@fsw1^0,w,c
  3919  00458E  1010               	iorwf	read_switch@fsw0^0,w,c
  3920                           
  3921                           ; BSR set to: 0
  3922  004590  0012               	return		;funcret
  3923  004592                     __end_of_read_switch:
  3924                           	opt callstack 0
  3925                           
  3926 ;; *************** function _handle_cmd *****************
  3927 ;; Defined at:
  3928 ;;		line 459 in file "src/main.c"
  3929 ;; Parameters:    Size  Location     Type
  3930 ;;  cmd             1    wreg     unsigned char 
  3931 ;; Auto vars:     Size  Location     Type
  3932 ;;  cmd             1   50[BANK0 ] unsigned char 
  3933 ;;  timeout         2   48[BANK0 ] int 
  3934 ;; Return value:  Size  Location     Type
  3935 ;;                  1    wreg      void 
  3936 ;; Registers used:
  3937 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3938 ;; Tracked objects:
  3939 ;;		On entry : 3F/0
  3940 ;;		On exit  : 3F/0
  3941 ;;		Unchanged: 0/0
  3942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3943 ;;      Params:         0       0       0       0       0       0       0
  3944 ;;      Locals:         0       3       0       0       0       0       0
  3945 ;;      Temps:          0       4       0       0       0       0       0
  3946 ;;      Totals:         0       7       0       0       0       0       0
  3947 ;;Total ram usage:        7 bytes
  3948 ;; Hardware stack levels used:    1
  3949 ;; Hardware stack levels required when called:   12
  3950 ;; This function calls:
  3951 ;;		_adf4351_get_lock
  3952 ;;		_adf4351_set_freq
  3953 ;;		_adf4351_set_mode
  3954 ;;		_pa_mute
  3955 ;;		_printf
  3956 ;;		_setLOCK_LED
  3957 ;; This function is called by:
  3958 ;;		_init_switch
  3959 ;;		_update_switch
  3960 ;; This function uses a non-reentrant model
  3961 ;;
  3962                           
  3963                           	psect	text10
  3964  002CBE                     __ptext10:
  3965                           	opt callstack 0
  3966  002CBE                     _handle_cmd:
  3967                           	opt callstack 17
  3968                           
  3969                           ; BSR set to: 0
  3970                           ;incstack = 0
  3971                           ;handle_cmd@cmd stored from wreg
  3972  002CBE  6FEB               	movwf	handle_cmd@cmd& (0+255),b
  3973                           
  3974                           ;src/main.c: 459: static void handle_cmd(u8 cmd);src/main.c: 460: {;src/main.c: 461:    
      +                           if((cmd != g_applied_cmd) && (cmd < 4)) {
  3975  002CC0  0100               	movlb	0	; () banked
  3976  002CC2  51FE               	movf	_g_applied_cmd& (0+255),w,b
  3977  002CC4  19EB               	xorwf	handle_cmd@cmd& (0+255),w,b
  3978  002CC6  B4D8               	btfsc	status,2,c
  3979  002CC8  0012               	return	
  3980                           
  3981                           ; BSR set to: 0
  3982  002CCA  0E04               	movlw	4
  3983  002CCC  61EB               	cpfslt	handle_cmd@cmd& (0+255),b
  3984  002CCE  0012               	return	
  3985                           
  3986                           ; BSR set to: 0
  3987                           ;src/main.c: 462:         int timeout = 100;
  3988  002CD0  0E00               	movlw	0
  3989  002CD2  6FEA               	movwf	(handle_cmd@timeout+1)& (0+255),b
  3990  002CD4  0E64               	movlw	100
  3991  002CD6  6FE9               	movwf	handle_cmd@timeout& (0+255),b
  3992                           
  3993                           ; BSR set to: 0
  3994                           ;src/main.c: 464:         pa_mute();
  3995  002CD8  ECE4  F024         	call	_pa_mute	;wreg free
  3996                           
  3997                           ; BSR set to: 0
  3998                           ;src/main.c: 469:   printf("UPC 00 05 %ld\n",freq_table[cmd]);
  3999  002CDC  0E7A               	movlw	low STR_23
  4000  002CDE  6FCB               	movwf	printf@fmt& (0+255),b
  4001  002CE0  0E7F               	movlw	high STR_23
  4002  002CE2  6FCC               	movwf	(printf@fmt+1)& (0+255),b
  4003  002CE4  51EB               	movf	handle_cmd@cmd& (0+255),w,b
  4004  002CE6  0D04               	mullw	4
  4005  002CE8  0E77               	movlw	low _freq_table
  4006  002CEA  24F3               	addwf	243,w,c
  4007  002CEC  6EF6               	movwf	tblptrl,c
  4008  002CEE  0E7C               	movlw	high _freq_table
  4009  002CF0  20F4               	addwfc	244,w,c
  4010  002CF2  6EF7               	movwf	tblptrh,c
  4011  002CF4                     	if	0	;There are less than 3 active tblptr bytes
  4012  002CF4                     	endif
  4013  002CF4  0009               	tblrd		*+
  4014  002CF6  CFF5 F0CD          	movff	tablat,?_printf+2
  4015  002CFA  0009               	tblrd		*+
  4016  002CFC  CFF5 F0CE          	movff	tablat,?_printf+3
  4017  002D00  0009               	tblrd		*+
  4018  002D02  CFF5 F0CF          	movff	tablat,?_printf+4
  4019  002D06  000A               	tblrd		*-
  4020  002D08  CFF5 F0D0          	movff	tablat,?_printf+5
  4021  002D0C  EC60  F027         	call	_printf	;wreg free
  4022                           
  4023                           ; BSR set to: 0
  4024                           ;src/main.c: 470:   printf("UPC 00 10 %ld\n",2400000 - freq_table[cmd]);
  4025  002D10  0E6B               	movlw	low STR_24
  4026  002D12  6FCB               	movwf	printf@fmt& (0+255),b
  4027  002D14  0E7F               	movlw	high STR_24
  4028  002D16  6FCC               	movwf	(printf@fmt+1)& (0+255),b
  4029  002D18  51EB               	movf	handle_cmd@cmd& (0+255),w,b
  4030  002D1A  0D04               	mullw	4
  4031  002D1C  0E77               	movlw	low _freq_table
  4032  002D1E  24F3               	addwf	243,w,c
  4033  002D20  6EF6               	movwf	tblptrl,c
  4034  002D22  0E7C               	movlw	high _freq_table
  4035  002D24  20F4               	addwfc	244,w,c
  4036  002D26  6EF7               	movwf	tblptrh,c
  4037  002D28                     	if	0	;There are less than 3 active tblptr bytes
  4038  002D28                     	endif
  4039  002D28  0009               	tblrd		*+
  4040  002D2A  CFF5 F0E5          	movff	tablat,??_handle_cmd
  4041  002D2E  0009               	tblrd		*+
  4042  002D30  CFF5 F0E6          	movff	tablat,??_handle_cmd+1
  4043  002D34  0009               	tblrd		*+
  4044  002D36  CFF5 F0E7          	movff	tablat,??_handle_cmd+2
  4045  002D3A  0009               	tblrd		*+
  4046  002D3C  CFF5 F0E8          	movff	tablat,??_handle_cmd+3
  4047  002D40  51E5               	movf	??_handle_cmd& (0+255),w,b
  4048  002D42  0800               	sublw	0
  4049  002D44  6FCD               	movwf	(?_printf+2)& (0+255),b
  4050  002D46  0E9F               	movlw	159
  4051  002D48  55E6               	subfwb	(??_handle_cmd+1)& (0+255),w,b
  4052  002D4A  6FCE               	movwf	(?_printf+3)& (0+255),b
  4053  002D4C  0E24               	movlw	36
  4054  002D4E  55E7               	subfwb	(??_handle_cmd+2)& (0+255),w,b
  4055  002D50  6FCF               	movwf	(?_printf+4)& (0+255),b
  4056  002D52  0E00               	movlw	0
  4057  002D54  55E8               	subfwb	(??_handle_cmd+3)& (0+255),w,b
  4058  002D56  6FD0               	movwf	(?_printf+5)& (0+255),b
  4059  002D58  EC60  F027         	call	_printf	;wreg free
  4060                           
  4061                           ; BSR set to: 0
  4062                           ;src/main.c: 471:         adf4351_set_freq(&g_adf4351, freq_table[cmd]);
  4063  002D5C  0E65               	movlw	low _g_adf4351
  4064  002D5E  6FDD               	movwf	adf4351_set_freq@ctx& (0+255),b
  4065  002D60  0E01               	movlw	high _g_adf4351
  4066  002D62  6FDE               	movwf	(adf4351_set_freq@ctx+1)& (0+255),b
  4067  002D64  51EB               	movf	handle_cmd@cmd& (0+255),w,b
  4068  002D66  0D04               	mullw	4
  4069  002D68  0E77               	movlw	low _freq_table
  4070  002D6A  24F3               	addwf	243,w,c
  4071  002D6C  6EF6               	movwf	tblptrl,c
  4072  002D6E  0E7C               	movlw	high _freq_table
  4073  002D70  20F4               	addwfc	244,w,c
  4074  002D72  6EF7               	movwf	tblptrh,c
  4075  002D74                     	if	0	;There are less than 3 active tblptr bytes
  4076  002D74                     	endif
  4077  002D74  0009               	tblrd		*+
  4078  002D76  CFF5 F0DF          	movff	tablat,adf4351_set_freq@freq
  4079  002D7A  0009               	tblrd		*+
  4080  002D7C  CFF5 F0E0          	movff	tablat,adf4351_set_freq@freq+1
  4081  002D80  0009               	tblrd		*+
  4082  002D82  CFF5 F0E1          	movff	tablat,adf4351_set_freq@freq+2
  4083  002D86  000A               	tblrd		*-
  4084  002D88  CFF5 F0E2          	movff	tablat,adf4351_set_freq@freq+3
  4085  002D8C  EC20  F024         	call	_adf4351_set_freq	;wreg free
  4086                           
  4087                           ;src/main.c: 473:         adf4351_set_mode(&g_adf4351, 1);
  4088  002D90  0E65               	movlw	low _g_adf4351
  4089  002D92  6E27               	movwf	adf4351_set_mode@ctx^0,c
  4090  002D94  0E01               	movlw	high _g_adf4351
  4091  002D96  6E28               	movwf	(adf4351_set_mode@ctx+1)^0,c
  4092  002D98  0E00               	movlw	0
  4093  002D9A  6E2A               	movwf	(adf4351_set_mode@enable+1)^0,c
  4094  002D9C  0E01               	movlw	1
  4095  002D9E  6E29               	movwf	adf4351_set_mode@enable^0,c
  4096  002DA0  ECC9  F022         	call	_adf4351_set_mode	;wreg free
  4097                           
  4098                           ;src/main.c: 475:         while((adf4351_get_lock(&g_adf4351) == 0) && (timeout>0)) {
  4099  002DA4  D00C               	goto	l8145
  4100  002DA6                     l8141:
  4101                           
  4102                           ; BSR set to: 0
  4103                           ;src/main.c: 476:             timeout--;
  4104  002DA6  07E9               	decf	handle_cmd@timeout& (0+255),f,b
  4105  002DA8  A0D8               	btfss	status,0,c
  4106  002DAA  07EA               	decf	(handle_cmd@timeout+1)& (0+255),f,b
  4107                           
  4108                           ; BSR set to: 0
  4109                           ;src/main.c: 477:             _delay((unsigned long)((1)*(8000000/4000.0)));
  4110  002DAC  0E03               	movlw	3
  4111  002DAE  0100               	movlb	0	; () banked
  4112  002DB0  6FE5               	movwf	??_handle_cmd& (0+255),b
  4113  002DB2  0E97               	movlw	151
  4114  002DB4                     u11357:
  4115  002DB4  2EE8               	decfsz	wreg,f,c
  4116  002DB6  D7FE               	bra	u11357
  4117  002DB8  2FE5               	decfsz	??_handle_cmd& (0+255),f,b
  4118  002DBA  D7FC               	bra	u11357
  4119  002DBC  D000               	nop2	
  4120  002DBE                     l8145:
  4121                           
  4122                           ;src/main.c: 475:         while((adf4351_get_lock(&g_adf4351) == 0) && (timeout>0)) {
  4123  002DBE  0E65               	movlw	low _g_adf4351
  4124  002DC0  0100               	movlb	0	; () banked
  4125  002DC2  6FD5               	movwf	adf4351_get_lock@ctx& (0+255),b
  4126  002DC4  0E01               	movlw	high _g_adf4351
  4127  002DC6  6FD6               	movwf	(adf4351_get_lock@ctx+1)& (0+255),b
  4128  002DC8  EC09  F023         	call	_adf4351_get_lock	;wreg free
  4129  002DCC  51D5               	movf	?_adf4351_get_lock& (0+255),w,b
  4130  002DCE  11D6               	iorwf	(?_adf4351_get_lock+1)& (0+255),w,b
  4131  002DD0  B4D8               	btfsc	status,2,c
  4132                           
  4133                           ; BSR set to: 0
  4134  002DD2  BFEA               	btfsc	(handle_cmd@timeout+1)& (0+255),7,b
  4135  002DD4  D005               	goto	u11060
  4136  002DD6  51EA               	movf	(handle_cmd@timeout+1)& (0+255),w,b
  4137  002DD8  E1E6               	bnz	l8141
  4138  002DDA  05E9               	decf	handle_cmd@timeout& (0+255),w,b
  4139  002DDC  B0D8               	btfsc	status,0,c
  4140  002DDE  D7E3               	goto	l8141
  4141  002DE0                     u11060:
  4142                           
  4143                           ; BSR set to: 0
  4144                           ;src/main.c: 479:         if(timeout <= 0) {
  4145  002DE0  BFEA               	btfsc	(handle_cmd@timeout+1)& (0+255),7,b
  4146  002DE2  D005               	goto	u11070
  4147  002DE4  51EA               	movf	(handle_cmd@timeout+1)& (0+255),w,b
  4148  002DE6  E10D               	bnz	l8153
  4149  002DE8  05E9               	decf	handle_cmd@timeout& (0+255),w,b
  4150  002DEA  B0D8               	btfsc	status,0,c
  4151  002DEC  D00A               	goto	l8153
  4152  002DEE                     u11070:
  4153                           
  4154                           ; BSR set to: 0
  4155                           ;src/main.c: 480:             printf("lock timed out!\n");
  4156  002DEE  0E5A               	movlw	low STR_25
  4157  002DF0  6FCB               	movwf	printf@fmt& (0+255),b
  4158  002DF2  0E7F               	movlw	high STR_25
  4159  002DF4  6FCC               	movwf	(printf@fmt+1)& (0+255),b
  4160  002DF6  EC60  F027         	call	_printf	;wreg free
  4161                           
  4162                           ;src/main.c: 481:    setLOCK_LED(0);
  4163  002DFA  0E00               	movlw	0
  4164  002DFC  EC7C  F021         	call	_setLOCK_LED
  4165                           
  4166                           ;src/main.c: 482:         } else {
  4167  002E00  D003               	goto	l8155
  4168  002E02                     l8153:
  4169                           
  4170                           ; BSR set to: 0
  4171                           ;src/main.c: 483:    setLOCK_LED(1);
  4172  002E02  0E01               	movlw	1
  4173  002E04  EC7C  F021         	call	_setLOCK_LED
  4174  002E08                     l8155:
  4175                           
  4176                           ; BSR set to: 0
  4177                           ;src/main.c: 485:         g_applied_cmd = cmd;
  4178  002E08  C0EB  F0FE         	movff	handle_cmd@cmd,_g_applied_cmd
  4179                           
  4180                           ; BSR set to: 0
  4181  002E0C  0012               	return		;funcret
  4182  002E0E                     __end_of_handle_cmd:
  4183                           	opt callstack 0
  4184                           
  4185 ;; *************** function _setLOCK_LED *****************
  4186 ;; Defined at:
  4187 ;;		line 306 in file "src/main.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;  onoff           1    wreg     unsigned char 
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;  onoff           1  101[COMRAM] unsigned char 
  4192 ;; Return value:  Size  Location     Type
  4193 ;;                  1    wreg      void 
  4194 ;; Registers used:
  4195 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4196 ;; Tracked objects:
  4197 ;;		On entry : 3F/0
  4198 ;;		On exit  : 3F/0
  4199 ;;		Unchanged: 0/0
  4200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4201 ;;      Params:         0       0       0       0       0       0       0
  4202 ;;      Locals:         1       0       0       0       0       0       0
  4203 ;;      Temps:          0       3       0       0       0       0       0
  4204 ;;      Totals:         1       3       0       0       0       0       0
  4205 ;;Total ram usage:        4 bytes
  4206 ;; Hardware stack levels used:    1
  4207 ;; Hardware stack levels required when called:   10
  4208 ;; This function calls:
  4209 ;;		_printf
  4210 ;; This function is called by:
  4211 ;;		_update_led
  4212 ;;		_handle_cmd
  4213 ;; This function uses a non-reentrant model
  4214 ;;
  4215                           
  4216                           	psect	text11
  4217  0042F8                     __ptext11:
  4218                           	opt callstack 0
  4219  0042F8                     _setLOCK_LED:
  4220                           	opt callstack 18
  4221                           
  4222                           ; BSR set to: 0
  4223                           ;incstack = 0
  4224                           ;setLOCK_LED@onoff stored from wreg
  4225  0042F8  6E66               	movwf	setLOCK_LED@onoff^0,c
  4226                           
  4227                           ;src/main.c: 306: static void setLOCK_LED(u8 onoff);src/main.c: 307: {;src/main.c: 308: 
      +                           static u8 old_onoff = 255;;src/main.c: 310:  if(onoff != old_onoff)
  4228  0042FA  0100               	movlb	0	; () banked
  4229  0042FC  51FD               	movf	setLOCK_LED@old_onoff& (0+255),w,b
  4230  0042FE  1866               	xorwf	setLOCK_LED@onoff^0,w,c
  4231  004300  B4D8               	btfsc	status,2,c
  4232  004302  D00B               	goto	l7857
  4233                           
  4234                           ; BSR set to: 0
  4235                           ;src/main.c: 311:  {;src/main.c: 312:   printf("UPC 00 04 %d\n",onoff);
  4236  004304  0EB3               	movlw	low STR_21
  4237  004306  6FCB               	movwf	printf@fmt& (0+255),b
  4238  004308  0E7F               	movlw	high STR_21
  4239  00430A  6FCC               	movwf	(printf@fmt+1)& (0+255),b
  4240  00430C  C066  F0CD         	movff	setLOCK_LED@onoff,?_printf+2
  4241  004310  6BCE               	clrf	(?_printf+3)& (0+255),b
  4242  004312  EC60  F027         	call	_printf	;wreg free
  4243                           
  4244                           ; BSR set to: 0
  4245                           ;src/main.c: 313:   old_onoff = onoff;
  4246  004316  C066  F0FD         	movff	setLOCK_LED@onoff,setLOCK_LED@old_onoff
  4247  00431A                     l7857:
  4248                           
  4249                           ; BSR set to: 0
  4250                           ;src/main.c: 316:  if(onoff) {
  4251  00431A  5066               	movf	setLOCK_LED@onoff^0,w,c
  4252  00431C  B4D8               	btfsc	status,2,c
  4253  00431E  D019               	goto	l7861
  4254                           
  4255                           ; BSR set to: 0
  4256                           ;src/main.c: 317:   *((PIN_LED_ADF_LOCK)->pPORT) &= ~(PIN_LED_ADF_LOCK)->mask;
  4257  004320  0ED3               	movlw	low (_PIN_LED_ADF_LOCK_DEF+4)
  4258  004322  6EF6               	movwf	tblptrl,c
  4259  004324  0E7C               	movlw	high (_PIN_LED_ADF_LOCK_DEF+4)
  4260  004326  6EF7               	movwf	tblptrh,c
  4261  004328                     	if	0	;tblptru may be non-zero
  4262  004328                     	endif
  4263  004328                     	if	0	;tblptru may be non-zero
  4264  004328                     	endif
  4265  004328  0008               	tblrd		*
  4266  00432A  50F5               	movf	tablat,w,c
  4267  00432C  0AFF               	xorlw	255
  4268  00432E  6FD5               	movwf	??_setLOCK_LED& (0+255),b
  4269  004330  0ECF               	movlw	low _PIN_LED_ADF_LOCK_DEF
  4270  004332  6EF6               	movwf	tblptrl,c
  4271  004334                     	if	1	;There is more than 1 active tblptr byte
  4272  004334  0E7C               	movlw	high _PIN_LED_ADF_LOCK_DEF
  4273  004336  6EF7               	movwf	tblptrh,c
  4274  004338                     	endif
  4275  004338                     	if	0	;There are less than 3 active tblptr bytes
  4276  004338                     	endif
  4277  004338  0009               	tblrd		*+
  4278  00433A  CFF5 F0D6          	movff	tablat,??_setLOCK_LED+1
  4279  00433E  0009               	tblrd		*+
  4280  004340  CFF5 F0D7          	movff	tablat,??_setLOCK_LED+2
  4281  004344  C0D6  FFD9         	movff	??_setLOCK_LED+1,fsr2l
  4282  004348  C0D7  FFDA         	movff	??_setLOCK_LED+2,fsr2h
  4283  00434C  51D5               	movf	??_setLOCK_LED& (0+255),w,b
  4284  00434E  16DF               	andwf	indf2,f,c
  4285                           
  4286                           ;src/main.c: 318:  } else {
  4287  004350  0012               	return	
  4288  004352                     l7861:
  4289                           
  4290                           ; BSR set to: 0
  4291                           ;src/main.c: 319:   *((PIN_LED_ADF_LOCK)->pPORT) |= (PIN_LED_ADF_LOCK)->mask;
  4292  004352  0ED3               	movlw	low (_PIN_LED_ADF_LOCK_DEF+4)
  4293  004354  6EF6               	movwf	tblptrl,c
  4294  004356  0E7C               	movlw	high (_PIN_LED_ADF_LOCK_DEF+4)
  4295  004358  6EF7               	movwf	tblptrh,c
  4296  00435A                     	if	0	;tblptru may be non-zero
  4297  00435A                     	endif
  4298  00435A                     	if	0	;tblptru may be non-zero
  4299  00435A                     	endif
  4300  00435A  0008               	tblrd		*
  4301  00435C  CFF5 F0D5          	movff	tablat,??_setLOCK_LED
  4302  004360  0ECF               	movlw	low _PIN_LED_ADF_LOCK_DEF
  4303  004362  6EF6               	movwf	tblptrl,c
  4304  004364                     	if	1	;There is more than 1 active tblptr byte
  4305  004364  0E7C               	movlw	high _PIN_LED_ADF_LOCK_DEF
  4306  004366  6EF7               	movwf	tblptrh,c
  4307  004368                     	endif
  4308  004368                     	if	0	;There are less than 3 active tblptr bytes
  4309  004368                     	endif
  4310  004368  0009               	tblrd		*+
  4311  00436A  CFF5 F0D6          	movff	tablat,??_setLOCK_LED+1
  4312  00436E  0009               	tblrd		*+
  4313  004370  CFF5 F0D7          	movff	tablat,??_setLOCK_LED+2
  4314  004374  C0D6  FFD9         	movff	??_setLOCK_LED+1,fsr2l
  4315  004378  C0D7  FFDA         	movff	??_setLOCK_LED+2,fsr2h
  4316  00437C  51D5               	movf	??_setLOCK_LED& (0+255),w,b
  4317  00437E  12DF               	iorwf	indf2,f,c
  4318                           
  4319                           ; BSR set to: 0
  4320  004380  0012               	return		;funcret
  4321  004382                     __end_of_setLOCK_LED:
  4322                           	opt callstack 0
  4323                           
  4324 ;; *************** function _pa_mute *****************
  4325 ;; Defined at:
  4326 ;;		line 268 in file "src/main.c"
  4327 ;; Parameters:    Size  Location     Type
  4328 ;;		None
  4329 ;; Auto vars:     Size  Location     Type
  4330 ;;		None
  4331 ;; Return value:  Size  Location     Type
  4332 ;;                  1    wreg      void 
  4333 ;; Registers used:
  4334 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4335 ;; Tracked objects:
  4336 ;;		On entry : 3F/0
  4337 ;;		On exit  : 3F/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4340 ;;      Params:         0       0       0       0       0       0       0
  4341 ;;      Locals:         0       0       0       0       0       0       0
  4342 ;;      Temps:          0       3       0       0       0       0       0
  4343 ;;      Totals:         0       3       0       0       0       0       0
  4344 ;;Total ram usage:        3 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; Hardware stack levels required when called:   11
  4347 ;; This function calls:
  4348 ;;		_adf4351_set_rfout_enable
  4349 ;;		_setPTT_LED
  4350 ;; This function is called by:
  4351 ;;		_pa_update
  4352 ;;		_handle_cmd
  4353 ;; This function uses a non-reentrant model
  4354 ;;
  4355                           
  4356                           	psect	text12
  4357  0049C8                     __ptext12:
  4358                           	opt callstack 0
  4359  0049C8                     _pa_mute:
  4360                           	opt callstack 17
  4361                           
  4362                           ; BSR set to: 0
  4363                           ;src/main.c: 270:     if(g_ptt_debounce_counter < 0) {
  4364                           
  4365                           ; BSR set to: 0
  4366                           ;incstack = 0
  4367  0049C8  AFF5               	btfss	(_g_ptt_debounce_counter+1)& (0+255),7,b
  4368  0049CA  D026               	goto	l7837
  4369                           
  4370                           ; BSR set to: 0
  4371                           ;src/main.c: 273:         adf4351_set_rfout_enable(&g_adf4351, 0);
  4372  0049CC  0E65               	movlw	low _g_adf4351
  4373  0049CE  6E25               	movwf	adf4351_set_rfout_enable@ctx^0,c
  4374  0049D0  0E01               	movlw	high _g_adf4351
  4375  0049D2  6E26               	movwf	(adf4351_set_rfout_enable@ctx+1)^0,c
  4376  0049D4  0E00               	movlw	0
  4377  0049D6  6E28               	movwf	(adf4351_set_rfout_enable@enable+1)^0,c
  4378  0049D8  0E00               	movlw	0
  4379  0049DA  6E27               	movwf	adf4351_set_rfout_enable@enable^0,c
  4380  0049DC  EC69  F026         	call	_adf4351_set_rfout_enable	;wreg free
  4381                           
  4382                           ;src/main.c: 274:         *((PIN_PA_ENABLE)->pPORT) &= ~(PIN_PA_ENABLE)->mask;
  4383  0049E0  0EC4               	movlw	low (_PIN_PA_ENABLE_DEF+4)
  4384  0049E2  6EF6               	movwf	tblptrl,c
  4385  0049E4  0E7C               	movlw	high (_PIN_PA_ENABLE_DEF+4)
  4386  0049E6  6EF7               	movwf	tblptrh,c
  4387  0049E8                     	if	0	;tblptru may be non-zero
  4388  0049E8                     	endif
  4389  0049E8                     	if	0	;tblptru may be non-zero
  4390  0049E8                     	endif
  4391  0049E8  0008               	tblrd		*
  4392  0049EA  50F5               	movf	tablat,w,c
  4393  0049EC  0AFF               	xorlw	255
  4394  0049EE  0100               	movlb	0	; () banked
  4395  0049F0  6FD8               	movwf	??_pa_mute& (0+255),b
  4396  0049F2  0EC0               	movlw	low _PIN_PA_ENABLE_DEF
  4397  0049F4  6EF6               	movwf	tblptrl,c
  4398  0049F6                     	if	1	;There is more than 1 active tblptr byte
  4399  0049F6  0E7C               	movlw	high _PIN_PA_ENABLE_DEF
  4400  0049F8  6EF7               	movwf	tblptrh,c
  4401  0049FA                     	endif
  4402  0049FA                     	if	0	;There are less than 3 active tblptr bytes
  4403  0049FA                     	endif
  4404  0049FA  0009               	tblrd		*+
  4405  0049FC  CFF5 F0D9          	movff	tablat,??_pa_mute+1
  4406  004A00  0009               	tblrd		*+
  4407  004A02  CFF5 F0DA          	movff	tablat,??_pa_mute+2
  4408  004A06  C0D9  FFD9         	movff	??_pa_mute+1,fsr2l
  4409  004A0A  C0DA  FFDA         	movff	??_pa_mute+2,fsr2h
  4410  004A0E  51D8               	movf	??_pa_mute& (0+255),w,b
  4411  004A10  16DF               	andwf	indf2,f,c
  4412                           
  4413                           ; BSR set to: 0
  4414                           ;src/main.c: 275:         setPTT_LED(0);
  4415  004A12  0E00               	movlw	0
  4416  004A14  EC64  F020         	call	_setPTT_LED
  4417  004A18                     l7837:
  4418                           
  4419                           ; BSR set to: 0
  4420                           ;src/main.c: 280:     g_ptt_debounce_counter = 10;
  4421  004A18  0E00               	movlw	0
  4422  004A1A  6FF5               	movwf	(_g_ptt_debounce_counter+1)& (0+255),b
  4423  004A1C  0E0A               	movlw	10
  4424  004A1E  6FF4               	movwf	_g_ptt_debounce_counter& (0+255),b
  4425                           
  4426                           ; BSR set to: 0
  4427  004A20  0012               	return		;funcret
  4428  004A22                     __end_of_pa_mute:
  4429                           	opt callstack 0
  4430                           
  4431 ;; *************** function _setPTT_LED *****************
  4432 ;; Defined at:
  4433 ;;		line 323 in file "src/main.c"
  4434 ;; Parameters:    Size  Location     Type
  4435 ;;  onoff           1    wreg     unsigned char 
  4436 ;; Auto vars:     Size  Location     Type
  4437 ;;  onoff           1  101[COMRAM] unsigned char 
  4438 ;; Return value:  Size  Location     Type
  4439 ;;                  1    wreg      void 
  4440 ;; Registers used:
  4441 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4442 ;; Tracked objects:
  4443 ;;		On entry : 3F/0
  4444 ;;		On exit  : 3F/0
  4445 ;;		Unchanged: 0/0
  4446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4447 ;;      Params:         0       0       0       0       0       0       0
  4448 ;;      Locals:         1       0       0       0       0       0       0
  4449 ;;      Temps:          0       3       0       0       0       0       0
  4450 ;;      Totals:         1       3       0       0       0       0       0
  4451 ;;Total ram usage:        4 bytes
  4452 ;; Hardware stack levels used:    1
  4453 ;; Hardware stack levels required when called:   10
  4454 ;; This function calls:
  4455 ;;		_printf
  4456 ;; This function is called by:
  4457 ;;		_pa_mute
  4458 ;;		_pa_unmute
  4459 ;; This function uses a non-reentrant model
  4460 ;;
  4461                           
  4462                           	psect	text13
  4463  0040C8                     __ptext13:
  4464                           	opt callstack 0
  4465  0040C8                     _setPTT_LED:
  4466                           	opt callstack 17
  4467                           
  4468                           ; BSR set to: 0
  4469                           ;incstack = 0
  4470                           ;setPTT_LED@onoff stored from wreg
  4471  0040C8  6E66               	movwf	setPTT_LED@onoff^0,c
  4472                           
  4473                           ;src/main.c: 323: static void setPTT_LED(u8 onoff);src/main.c: 324: {;src/main.c: 325:  
      +                          static u8 old_onoff = 255;;src/main.c: 327:  ptt_status = onoff;
  4474  0040CA  C066  F095         	movff	setPTT_LED@onoff,_ptt_status
  4475                           
  4476                           ;src/main.c: 329:  if(onoff != old_onoff)
  4477  0040CE  0100               	movlb	0	; () banked
  4478  0040D0  51FC               	movf	setPTT_LED@old_onoff& (0+255),w,b
  4479  0040D2  1866               	xorwf	setPTT_LED@onoff^0,w,c
  4480  0040D4  B4D8               	btfsc	status,2,c
  4481  0040D6  D00B               	goto	l7713
  4482                           
  4483                           ; BSR set to: 0
  4484                           ;src/main.c: 330:  {;src/main.c: 331:   printf("UPC 00 06 %d\n",onoff);
  4485  0040D8  0EC1               	movlw	low STR_22
  4486  0040DA  6FCB               	movwf	printf@fmt& (0+255),b
  4487  0040DC  0E7F               	movlw	high STR_22
  4488  0040DE  6FCC               	movwf	(printf@fmt+1)& (0+255),b
  4489  0040E0  C066  F0CD         	movff	setPTT_LED@onoff,?_printf+2
  4490  0040E4  6BCE               	clrf	(?_printf+3)& (0+255),b
  4491  0040E6  EC60  F027         	call	_printf	;wreg free
  4492                           
  4493                           ; BSR set to: 0
  4494                           ;src/main.c: 332:   old_onoff = onoff;
  4495  0040EA  C066  F0FC         	movff	setPTT_LED@onoff,setPTT_LED@old_onoff
  4496  0040EE                     l7713:
  4497                           
  4498                           ; BSR set to: 0
  4499                           ;src/main.c: 335:  if(onoff) {
  4500  0040EE  5066               	movf	setPTT_LED@onoff^0,w,c
  4501  0040F0  B4D8               	btfsc	status,2,c
  4502  0040F2  D019               	goto	l7717
  4503                           
  4504                           ; BSR set to: 0
  4505                           ;src/main.c: 336:   *((PIN_LED_PTT_ACTIVE)->pPORT) &= ~(PIN_LED_PTT_ACTIVE)->mask;
  4506  0040F4  0ECE               	movlw	low (_PIN_LED_PTT_ACTIVE_DEF+4)
  4507  0040F6  6EF6               	movwf	tblptrl,c
  4508  0040F8  0E7C               	movlw	high (_PIN_LED_PTT_ACTIVE_DEF+4)
  4509  0040FA  6EF7               	movwf	tblptrh,c
  4510  0040FC                     	if	0	;tblptru may be non-zero
  4511  0040FC                     	endif
  4512  0040FC                     	if	0	;tblptru may be non-zero
  4513  0040FC                     	endif
  4514  0040FC  0008               	tblrd		*
  4515  0040FE  50F5               	movf	tablat,w,c
  4516  004100  0AFF               	xorlw	255
  4517  004102  6FD5               	movwf	??_setPTT_LED& (0+255),b
  4518  004104  0ECA               	movlw	low _PIN_LED_PTT_ACTIVE_DEF
  4519  004106  6EF6               	movwf	tblptrl,c
  4520  004108                     	if	1	;There is more than 1 active tblptr byte
  4521  004108  0E7C               	movlw	high _PIN_LED_PTT_ACTIVE_DEF
  4522  00410A  6EF7               	movwf	tblptrh,c
  4523  00410C                     	endif
  4524  00410C                     	if	0	;There are less than 3 active tblptr bytes
  4525  00410C                     	endif
  4526  00410C  0009               	tblrd		*+
  4527  00410E  CFF5 F0D6          	movff	tablat,??_setPTT_LED+1
  4528  004112  0009               	tblrd		*+
  4529  004114  CFF5 F0D7          	movff	tablat,??_setPTT_LED+2
  4530  004118  C0D6  FFD9         	movff	??_setPTT_LED+1,fsr2l
  4531  00411C  C0D7  FFDA         	movff	??_setPTT_LED+2,fsr2h
  4532  004120  51D5               	movf	??_setPTT_LED& (0+255),w,b
  4533  004122  16DF               	andwf	indf2,f,c
  4534                           
  4535                           ;src/main.c: 337:  } else {
  4536  004124  0012               	return	
  4537  004126                     l7717:
  4538                           
  4539                           ; BSR set to: 0
  4540                           ;src/main.c: 338:   *((PIN_LED_PTT_ACTIVE)->pPORT) |= (PIN_LED_PTT_ACTIVE)->mask;
  4541  004126  0ECE               	movlw	low (_PIN_LED_PTT_ACTIVE_DEF+4)
  4542  004128  6EF6               	movwf	tblptrl,c
  4543  00412A  0E7C               	movlw	high (_PIN_LED_PTT_ACTIVE_DEF+4)
  4544  00412C  6EF7               	movwf	tblptrh,c
  4545  00412E                     	if	0	;tblptru may be non-zero
  4546  00412E                     	endif
  4547  00412E                     	if	0	;tblptru may be non-zero
  4548  00412E                     	endif
  4549  00412E  0008               	tblrd		*
  4550  004130  CFF5 F0D5          	movff	tablat,??_setPTT_LED
  4551  004134  0ECA               	movlw	low _PIN_LED_PTT_ACTIVE_DEF
  4552  004136  6EF6               	movwf	tblptrl,c
  4553  004138                     	if	1	;There is more than 1 active tblptr byte
  4554  004138  0E7C               	movlw	high _PIN_LED_PTT_ACTIVE_DEF
  4555  00413A  6EF7               	movwf	tblptrh,c
  4556  00413C                     	endif
  4557  00413C                     	if	0	;There are less than 3 active tblptr bytes
  4558  00413C                     	endif
  4559  00413C  0009               	tblrd		*+
  4560  00413E  CFF5 F0D6          	movff	tablat,??_setPTT_LED+1
  4561  004142  0009               	tblrd		*+
  4562  004144  CFF5 F0D7          	movff	tablat,??_setPTT_LED+2
  4563  004148  C0D6  FFD9         	movff	??_setPTT_LED+1,fsr2l
  4564  00414C  C0D7  FFDA         	movff	??_setPTT_LED+2,fsr2h
  4565  004150  51D5               	movf	??_setPTT_LED& (0+255),w,b
  4566  004152  12DF               	iorwf	indf2,f,c
  4567                           
  4568                           ; BSR set to: 0
  4569  004154  0012               	return		;funcret
  4570  004156                     __end_of_setPTT_LED:
  4571                           	opt callstack 0
  4572                           
  4573 ;; *************** function _adf4351_set_rfout_enable *****************
  4574 ;; Defined at:
  4575 ;;		line 100 in file "src/driver/adf4351.c"
  4576 ;; Parameters:    Size  Location     Type
  4577 ;;  ctx             2   36[COMRAM] PTR struct adf4351_ctx
  4578 ;;		 -> g_adf4351(55), 
  4579 ;;  enable          2   38[COMRAM] int 
  4580 ;; Auto vars:     Size  Location     Type
  4581 ;;		None
  4582 ;; Return value:  Size  Location     Type
  4583 ;;                  1    wreg      void 
  4584 ;; Registers used:
  4585 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4586 ;; Tracked objects:
  4587 ;;		On entry : 0/0
  4588 ;;		On exit  : 0/0
  4589 ;;		Unchanged: 0/0
  4590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4591 ;;      Params:         4       0       0       0       0       0       0
  4592 ;;      Locals:         0       0       0       0       0       0       0
  4593 ;;      Temps:          0       0       0       0       0       0       0
  4594 ;;      Totals:         4       0       0       0       0       0       0
  4595 ;;Total ram usage:        4 bytes
  4596 ;; Hardware stack levels used:    1
  4597 ;; Hardware stack levels required when called:    4
  4598 ;; This function calls:
  4599 ;;		_adf4351_write_reg2
  4600 ;;		_adf4351_write_reg4
  4601 ;; This function is called by:
  4602 ;;		_pa_mute
  4603 ;;		_pa_unmute
  4604 ;; This function uses a non-reentrant model
  4605 ;;
  4606                           
  4607                           	psect	text14
  4608  004CD2                     __ptext14:
  4609                           	opt callstack 0
  4610  004CD2                     _adf4351_set_rfout_enable:
  4611                           	opt callstack 23
  4612                           
  4613                           ;src/driver/adf4351.c: 100: void adf4351_set_rfout_enable(adf4351_ctx* ctx, BOOL enable)
      +                          ;src/driver/adf4351.c: 101: {;src/driver/adf4351.c: 102:     if(enable) {
  4614                           
  4615                           ; BSR set to: 0
  4616                           ;incstack = 0
  4617  004CD2  5027               	movf	adf4351_set_rfout_enable@enable^0,w,c
  4618  004CD4  1028               	iorwf	(adf4351_set_rfout_enable@enable+1)^0,w,c
  4619  004CD6  B4D8               	btfsc	status,2,c
  4620  004CD8  D008               	goto	l7657
  4621                           
  4622                           ;src/driver/adf4351.c: 103:         ctx->reg4.rfoutena = 1;
  4623  004CDA  EE20 F028          	lfsr	2,40
  4624  004CDE  5025               	movf	adf4351_set_rfout_enable@ctx^0,w,c
  4625  004CE0  26D9               	addwf	fsr2l,f,c
  4626  004CE2  5026               	movf	(adf4351_set_rfout_enable@ctx+1)^0,w,c
  4627  004CE4  22DA               	addwfc	fsr2h,f,c
  4628  004CE6  0E01               	movlw	1
  4629  004CE8  D007               	goto	L2
  4630  004CEA                     l7657:
  4631                           
  4632                           ;src/driver/adf4351.c: 105:         ctx->reg4.rfoutena = 0;
  4633  004CEA  EE20 F028          	lfsr	2,40
  4634  004CEE  5025               	movf	adf4351_set_rfout_enable@ctx^0,w,c
  4635  004CF0  26D9               	addwf	fsr2l,f,c
  4636  004CF2  5026               	movf	(adf4351_set_rfout_enable@ctx+1)^0,w,c
  4637  004CF4  22DA               	addwfc	fsr2h,f,c
  4638  004CF6  0E00               	movlw	0
  4639  004CF8                     L2:
  4640  004CF8  6EDF               	movwf	indf2,c
  4641                           
  4642                           ;src/driver/adf4351.c: 108:     adf4351_write_reg4(ctx);
  4643  004CFA  C025  F019         	movff	adf4351_set_rfout_enable@ctx,adf4351_write_reg4@ctx
  4644  004CFE  C026  F01A         	movff	adf4351_set_rfout_enable@ctx+1,adf4351_write_reg4@ctx+1
  4645  004D02  EC36  F00C         	call	_adf4351_write_reg4	;wreg free
  4646                           
  4647                           ;src/driver/adf4351.c: 109:     adf4351_write_reg2(ctx);
  4648  004D06  C025  F019         	movff	adf4351_set_rfout_enable@ctx,adf4351_write_reg2@ctx
  4649  004D0A  C026  F01A         	movff	adf4351_set_rfout_enable@ctx+1,adf4351_write_reg2@ctx+1
  4650  004D0E  EC1C  F006         	call	_adf4351_write_reg2	;wreg free
  4651  004D12  0012               	return		;funcret
  4652  004D14                     __end_of_adf4351_set_rfout_enable:
  4653                           	opt callstack 0
  4654                           
  4655 ;; *************** function _adf4351_set_mode *****************
  4656 ;; Defined at:
  4657 ;;		line 113 in file "src/driver/adf4351.c"
  4658 ;; Parameters:    Size  Location     Type
  4659 ;;  ctx             2   38[COMRAM] PTR struct adf4351_ctx
  4660 ;;		 -> g_adf4351(55), 
  4661 ;;  enable          2   40[COMRAM] int 
  4662 ;; Auto vars:     Size  Location     Type
  4663 ;;		None
  4664 ;; Return value:  Size  Location     Type
  4665 ;;                  1    wreg      void 
  4666 ;; Registers used:
  4667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4668 ;; Tracked objects:
  4669 ;;		On entry : 0/0
  4670 ;;		On exit  : 0/0
  4671 ;;		Unchanged: 0/0
  4672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4673 ;;      Params:         4       0       0       0       0       0       0
  4674 ;;      Locals:         0       0       0       0       0       0       0
  4675 ;;      Temps:          2       0       0       0       0       0       0
  4676 ;;      Totals:         6       0       0       0       0       0       0
  4677 ;;Total ram usage:        6 bytes
  4678 ;; Hardware stack levels used:    1
  4679 ;; Hardware stack levels required when called:    5
  4680 ;; This function calls:
  4681 ;;		_adf4351_setup
  4682 ;;		_adf4351_write_reg2
  4683 ;;		_adf4351_write_reg4
  4684 ;; This function is called by:
  4685 ;;		_handle_cmd
  4686 ;; This function uses a non-reentrant model
  4687 ;;
  4688                           
  4689                           	psect	text15
  4690  004592                     __ptext15:
  4691                           	opt callstack 0
  4692  004592                     _adf4351_set_mode:
  4693                           	opt callstack 23
  4694                           
  4695                           ;src/driver/adf4351.c: 113: void adf4351_set_mode(adf4351_ctx* ctx, BOOL enable);src/dri
      +                          ver/adf4351.c: 114: {;src/driver/adf4351.c: 116:  if(!ctx->init) return;
  4696                           
  4697                           ;incstack = 0
  4698  004592  C027  FFD9         	movff	adf4351_set_mode@ctx,fsr2l
  4699  004596  C028  FFDA         	movff	adf4351_set_mode@ctx+1,fsr2h
  4700  00459A  50DE               	movf	postinc2,w,c
  4701  00459C  10DE               	iorwf	postinc2,w,c
  4702  00459E  B4D8               	btfsc	status,2,c
  4703  0045A0  0012               	return	
  4704                           
  4705                           ;src/driver/adf4351.c: 119:  if(enable) {
  4706  0045A2  5029               	movf	adf4351_set_mode@enable^0,w,c
  4707  0045A4  102A               	iorwf	(adf4351_set_mode@enable+1)^0,w,c
  4708  0045A6  B4D8               	btfsc	status,2,c
  4709  0045A8  D017               	goto	l7807
  4710                           
  4711                           ;src/driver/adf4351.c: 120:   ctx->reg4.vcopd = 0;
  4712  0045AA  EE20 F023          	lfsr	2,35
  4713  0045AE  5027               	movf	adf4351_set_mode@ctx^0,w,c
  4714  0045B0  26D9               	addwf	fsr2l,f,c
  4715  0045B2  5028               	movf	(adf4351_set_mode@ctx+1)^0,w,c
  4716  0045B4  22DA               	addwfc	fsr2h,f,c
  4717  0045B6  0E00               	movlw	0
  4718  0045B8  6EDF               	movwf	indf2,c
  4719                           
  4720                           ;src/driver/adf4351.c: 121:   ctx->reg2.pd = 0;
  4721  0045BA  EE20 F016          	lfsr	2,22
  4722  0045BE  5027               	movf	adf4351_set_mode@ctx^0,w,c
  4723  0045C0  26D9               	addwf	fsr2l,f,c
  4724  0045C2  5028               	movf	(adf4351_set_mode@ctx+1)^0,w,c
  4725  0045C4  22DA               	addwfc	fsr2h,f,c
  4726  0045C6  0E00               	movlw	0
  4727  0045C8  6EDF               	movwf	indf2,c
  4728                           
  4729                           ;src/driver/adf4351.c: 124:   adf4351_setup(ctx);
  4730  0045CA  C027  F025         	movff	adf4351_set_mode@ctx,adf4351_setup@ctx
  4731  0045CE  C028  F026         	movff	adf4351_set_mode@ctx+1,adf4351_setup@ctx+1
  4732  0045D2  ECDE  F025         	call	_adf4351_setup	;wreg free
  4733                           
  4734                           ;src/driver/adf4351.c: 125:  } else {
  4735  0045D6  0012               	return	
  4736  0045D8                     l7807:
  4737                           
  4738                           ;src/driver/adf4351.c: 126:   ctx->reg4.vcopd = 1;
  4739  0045D8  EE20 F023          	lfsr	2,35
  4740  0045DC  5027               	movf	adf4351_set_mode@ctx^0,w,c
  4741  0045DE  26D9               	addwf	fsr2l,f,c
  4742  0045E0  5028               	movf	(adf4351_set_mode@ctx+1)^0,w,c
  4743  0045E2  22DA               	addwfc	fsr2h,f,c
  4744  0045E4  0E01               	movlw	1
  4745  0045E6  6EDF               	movwf	indf2,c
  4746                           
  4747                           ;src/driver/adf4351.c: 127:   ctx->reg2.pd = 1;
  4748  0045E8  EE20 F016          	lfsr	2,22
  4749  0045EC  5027               	movf	adf4351_set_mode@ctx^0,w,c
  4750  0045EE  26D9               	addwf	fsr2l,f,c
  4751  0045F0  5028               	movf	(adf4351_set_mode@ctx+1)^0,w,c
  4752  0045F2  22DA               	addwfc	fsr2h,f,c
  4753  0045F4  0E01               	movlw	1
  4754  0045F6  6EDF               	movwf	indf2,c
  4755                           
  4756                           ;src/driver/adf4351.c: 130:   adf4351_write_reg4(ctx);
  4757  0045F8  C027  F019         	movff	adf4351_set_mode@ctx,adf4351_write_reg4@ctx
  4758  0045FC  C028  F01A         	movff	adf4351_set_mode@ctx+1,adf4351_write_reg4@ctx+1
  4759  004600  EC36  F00C         	call	_adf4351_write_reg4	;wreg free
  4760                           
  4761                           ;src/driver/adf4351.c: 131:   adf4351_write_reg2(ctx);
  4762  004604  C027  F019         	movff	adf4351_set_mode@ctx,adf4351_write_reg2@ctx
  4763  004608  C028  F01A         	movff	adf4351_set_mode@ctx+1,adf4351_write_reg2@ctx+1
  4764  00460C  EC1C  F006         	call	_adf4351_write_reg2	;wreg free
  4765  004610  0012               	return		;funcret
  4766  004612                     __end_of_adf4351_set_mode:
  4767                           	opt callstack 0
  4768                           
  4769 ;; *************** function _adf4351_set_freq *****************
  4770 ;; Defined at:
  4771 ;;		line 69 in file "src/driver/adf4351.c"
  4772 ;; Parameters:    Size  Location     Type
  4773 ;;  ctx             2   36[BANK0 ] PTR struct adf4351_ctx
  4774 ;;		 -> g_adf4351(55), 
  4775 ;;  freq            4   38[BANK0 ] unsigned long 
  4776 ;; Auto vars:     Size  Location     Type
  4777 ;;		None
  4778 ;; Return value:  Size  Location     Type
  4779 ;;                  2   36[BANK0 ] int 
  4780 ;; Registers used:
  4781 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4782 ;; Tracked objects:
  4783 ;;		On entry : 3F/0
  4784 ;;		On exit  : 0/0
  4785 ;;		Unchanged: 0/0
  4786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4787 ;;      Params:         0       6       0       0       0       0       0
  4788 ;;      Locals:         0       0       0       0       0       0       0
  4789 ;;      Temps:          0       2       0       0       0       0       0
  4790 ;;      Totals:         0       8       0       0       0       0       0
  4791 ;;Total ram usage:        8 bytes
  4792 ;; Hardware stack levels used:    1
  4793 ;; Hardware stack levels required when called:   11
  4794 ;; This function calls:
  4795 ;;		_adf4351_calc_counters
  4796 ;;		_adf4351_calc_rcnt_block
  4797 ;;		_adf4351_calc_vco_core_freq
  4798 ;;		_adf4351_setup
  4799 ;; This function is called by:
  4800 ;;		_handle_cmd
  4801 ;; This function uses a non-reentrant model
  4802 ;;
  4803                           
  4804                           	psect	text16
  4805  004840                     __ptext16:
  4806                           	opt callstack 0
  4807  004840                     _adf4351_set_freq:
  4808                           	opt callstack 17
  4809                           
  4810                           ; BSR set to: 0
  4811                           ;src/driver/adf4351.c: 69: int adf4351_set_freq(adf4351_ctx* ctx, u32 freq);src/driver/a
      +                          df4351.c: 70: {;src/driver/adf4351.c: 72:  if(!ctx->init) return -3;
  4812                           
  4813                           ;incstack = 0
  4814  004840  C0DD  FFD9         	movff	adf4351_set_freq@ctx,fsr2l
  4815  004844  C0DE  FFDA         	movff	adf4351_set_freq@ctx+1,fsr2h
  4816  004848  50DE               	movf	postinc2,w,c
  4817  00484A  10DE               	iorwf	postinc2,w,c
  4818  00484C  B4D8               	btfsc	status,2,c
  4819  00484E  0012               	return	
  4820                           
  4821                           ; BSR set to: 0
  4822                           ;src/driver/adf4351.c: 74:  adf4351_calc_vco_core_freq(ctx, freq);
  4823  004850  C0DD  F00D         	movff	adf4351_set_freq@ctx,adf4351_calc_vco_core_freq@ctx
  4824  004854  C0DE  F00E         	movff	adf4351_set_freq@ctx+1,adf4351_calc_vco_core_freq@ctx+1
  4825  004858  C0DF  F00F         	movff	adf4351_set_freq@freq,adf4351_calc_vco_core_freq@rf_out_freq
  4826  00485C  C0E0  F010         	movff	adf4351_set_freq@freq+1,adf4351_calc_vco_core_freq@rf_out_freq+1
  4827  004860  C0E1  F011         	movff	adf4351_set_freq@freq+2,adf4351_calc_vco_core_freq@rf_out_freq+2
  4828  004864  C0E2  F012         	movff	adf4351_set_freq@freq+3,adf4351_calc_vco_core_freq@rf_out_freq+3
  4829  004868  EC96  F01B         	call	_adf4351_calc_vco_core_freq	;wreg free
  4830                           
  4831                           ; BSR set to: 0
  4832                           ;src/driver/adf4351.c: 75:  adf4351_calc_rcnt_block(ctx);
  4833  00486C  C0DD  F0D5         	movff	adf4351_set_freq@ctx,adf4351_calc_rcnt_block@ctx
  4834  004870  C0DE  F0D6         	movff	adf4351_set_freq@ctx+1,adf4351_calc_rcnt_block@ctx+1
  4835  004874  ECE5  F00A         	call	_adf4351_calc_rcnt_block	;wreg free
  4836                           
  4837                           ; BSR set to: 0
  4838                           ;src/driver/adf4351.c: 76:  adf4351_calc_counters(ctx);
  4839  004878  C0DD  F022         	movff	adf4351_set_freq@ctx,adf4351_calc_counters@ctx
  4840  00487C  C0DE  F023         	movff	adf4351_set_freq@ctx+1,adf4351_calc_counters@ctx+1
  4841  004880  ECE2  F00F         	call	_adf4351_calc_counters	;wreg free
  4842                           
  4843                           ;src/driver/adf4351.c: 78:  if(ctx->reg4.vcopd == 0) {
  4844  004884  0100               	movlb	0	; () banked
  4845  004886  EE20 F023          	lfsr	2,35
  4846  00488A  51DD               	movf	adf4351_set_freq@ctx& (0+255),w,b
  4847  00488C  26D9               	addwf	fsr2l,f,c
  4848  00488E  51DE               	movf	(adf4351_set_freq@ctx+1)& (0+255),w,b
  4849  004890  22DA               	addwfc	fsr2h,f,c
  4850  004892  50DF               	movf	indf2,w,c
  4851  004894  A4D8               	btfss	status,2,c
  4852  004896  0012               	return	
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;src/driver/adf4351.c: 79:   adf4351_setup(ctx);
  4856  004898  C0DD  F025         	movff	adf4351_set_freq@ctx,adf4351_setup@ctx
  4857  00489C  C0DE  F026         	movff	adf4351_set_freq@ctx+1,adf4351_setup@ctx+1
  4858  0048A0  ECDE  F025         	call	_adf4351_setup	;wreg free
  4859  0048A4  0012               	return		;funcret
  4860  0048A6                     __end_of_adf4351_set_freq:
  4861                           	opt callstack 0
  4862                           
  4863 ;; *************** function _adf4351_calc_vco_core_freq *****************
  4864 ;; Defined at:
  4865 ;;		line 268 in file "src/driver/adf4351.c"
  4866 ;; Parameters:    Size  Location     Type
  4867 ;;  ctx             2   12[COMRAM] PTR struct adf4351_ctx
  4868 ;;		 -> g_adf4351(55), 
  4869 ;;  rf_out_freq     4   14[COMRAM] unsigned long 
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;  div             2   22[COMRAM] int 
  4872 ;; Return value:  Size  Location     Type
  4873 ;;                  2   12[COMRAM] int 
  4874 ;; Registers used:
  4875 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4876 ;; Tracked objects:
  4877 ;;		On entry : 3F/0
  4878 ;;		On exit  : 3F/0
  4879 ;;		Unchanged: 3F/0
  4880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4881 ;;      Params:         6       0       0       0       0       0       0
  4882 ;;      Locals:         2       0       0       0       0       0       0
  4883 ;;      Temps:          4       0       0       0       0       0       0
  4884 ;;      Totals:        12       0       0       0       0       0       0
  4885 ;;Total ram usage:       12 bytes
  4886 ;; Hardware stack levels used:    1
  4887 ;; Hardware stack levels required when called:    2
  4888 ;; This function calls:
  4889 ;;		Nothing
  4890 ;; This function is called by:
  4891 ;;		_adf4351_set_freq
  4892 ;; This function uses a non-reentrant model
  4893 ;;
  4894                           
  4895                           	psect	text17
  4896  00372C                     __ptext17:
  4897                           	opt callstack 0
  4898  00372C                     _adf4351_calc_vco_core_freq:
  4899                           	opt callstack 25
  4900                           
  4901                           ; BSR set to: 0
  4902                           ;src/driver/adf4351.c: 268: static int adf4351_calc_vco_core_freq(adf4351_ctx* ctx, u32 
      +                          rf_out_freq);src/driver/adf4351.c: 269: {;src/driver/adf4351.c: 270:  int div = 0;
  4903                           
  4904                           ;incstack = 0
  4905  00372C  0E00               	movlw	0
  4906  00372E  6E18               	movwf	(adf4351_calc_vco_core_freq@div+1)^0,c
  4907  003730  0E00               	movlw	0
  4908  003732  6E17               	movwf	adf4351_calc_vco_core_freq@div^0,c
  4909                           
  4910                           ; BSR set to: 0
  4911                           ;src/driver/adf4351.c: 272:  if (rf_out_freq > 4400000)
  4912  003734  5012               	movf	(adf4351_calc_vco_core_freq@rf_out_freq+3)^0,w,c
  4913  003736  E165               	bnz	l109
  4914  003738  0E81               	movlw	129
  4915  00373A  5C0F               	subwf	adf4351_calc_vco_core_freq@rf_out_freq^0,w,c
  4916  00373C  0E23               	movlw	35
  4917  00373E  5810               	subwfb	(adf4351_calc_vco_core_freq@rf_out_freq+1)^0,w,c
  4918  003740  0E43               	movlw	67
  4919  003742  5811               	subwfb	(adf4351_calc_vco_core_freq@rf_out_freq+2)^0,w,c
  4920  003744  B0D8               	btfsc	status,0,c
  4921  003746  0012               	return	
  4922  003748  D007               	goto	l7571
  4923  00374A                     l7569:
  4924                           
  4925                           ; BSR set to: 0
  4926                           ;src/driver/adf4351.c: 276:   rf_out_freq *= 2;
  4927  00374A  90D8               	bcf	status,0,c
  4928  00374C  360F               	rlcf	adf4351_calc_vco_core_freq@rf_out_freq^0,f,c
  4929  00374E  3610               	rlcf	(adf4351_calc_vco_core_freq@rf_out_freq+1)^0,f,c
  4930  003750  3611               	rlcf	(adf4351_calc_vco_core_freq@rf_out_freq+2)^0,f,c
  4931  003752  3612               	rlcf	(adf4351_calc_vco_core_freq@rf_out_freq+3)^0,f,c
  4932                           
  4933                           ;src/driver/adf4351.c: 277:   div += 1;
  4934  003754  4A17               	infsnz	adf4351_calc_vco_core_freq@div^0,f,c
  4935  003756  2A18               	incf	(adf4351_calc_vco_core_freq@div+1)^0,f,c
  4936  003758                     l7571:
  4937                           
  4938                           ; BSR set to: 0
  4939                           ;src/driver/adf4351.c: 275:  while ((rf_out_freq <= 2200000) && (div <= 4)) {
  4940  003758  5012               	movf	(adf4351_calc_vco_core_freq@rf_out_freq+3)^0,w,c
  4941  00375A  E110               	bnz	l7575
  4942  00375C  0EC1               	movlw	193
  4943  00375E  5C0F               	subwf	adf4351_calc_vco_core_freq@rf_out_freq^0,w,c
  4944  003760  0E91               	movlw	145
  4945  003762  5810               	subwfb	(adf4351_calc_vco_core_freq@rf_out_freq+1)^0,w,c
  4946  003764  0E21               	movlw	33
  4947  003766  5811               	subwfb	(adf4351_calc_vco_core_freq@rf_out_freq+2)^0,w,c
  4948  003768  B0D8               	btfsc	status,0,c
  4949  00376A  D008               	goto	u10150
  4950                           
  4951                           ; BSR set to: 0
  4952  00376C  BE18               	btfsc	(adf4351_calc_vco_core_freq@div+1)^0,7,c
  4953  00376E  D7ED               	goto	l7569
  4954  003770  5018               	movf	(adf4351_calc_vco_core_freq@div+1)^0,w,c
  4955  003772  E104               	bnz	u10150
  4956  003774  0E05               	movlw	5
  4957  003776  5C17               	subwf	adf4351_calc_vco_core_freq@div^0,w,c
  4958  003778  A0D8               	btfss	status,0,c
  4959  00377A  D7E7               	goto	l7569
  4960  00377C                     u10150:
  4961  00377C                     l7575:
  4962                           
  4963                           ; BSR set to: 0
  4964                           ;src/driver/adf4351.c: 280:  if ((rf_out_freq <= 2200000) || (div > 4)) {
  4965  00377C  5012               	movf	(adf4351_calc_vco_core_freq@rf_out_freq+3)^0,w,c
  4966  00377E  E108               	bnz	u10160
  4967  003780  0EC1               	movlw	193
  4968  003782  5C0F               	subwf	adf4351_calc_vco_core_freq@rf_out_freq^0,w,c
  4969  003784  0E91               	movlw	145
  4970  003786  5810               	subwfb	(adf4351_calc_vco_core_freq@rf_out_freq+1)^0,w,c
  4971  003788  0E21               	movlw	33
  4972  00378A  5811               	subwfb	(adf4351_calc_vco_core_freq@rf_out_freq+2)^0,w,c
  4973  00378C  A0D8               	btfss	status,0,c
  4974  00378E  0012               	return	
  4975  003790                     u10160:
  4976                           
  4977                           ; BSR set to: 0
  4978  003790  BE18               	btfsc	(adf4351_calc_vco_core_freq@div+1)^0,7,c
  4979  003792  D006               	goto	l7579
  4980  003794  5018               	movf	(adf4351_calc_vco_core_freq@div+1)^0,w,c
  4981  003796  E135               	bnz	l109
  4982  003798  0E05               	movlw	5
  4983  00379A  5C17               	subwf	adf4351_calc_vco_core_freq@div^0,w,c
  4984  00379C  B0D8               	btfsc	status,0,c
  4985  00379E  0012               	return	
  4986  0037A0                     l7579:
  4987                           
  4988                           ; BSR set to: 0
  4989                           ;src/driver/adf4351.c: 284:  ctx->vco_freq = rf_out_freq;
  4990  0037A0  EE20 F033          	lfsr	2,51
  4991  0037A4  500D               	movf	adf4351_calc_vco_core_freq@ctx^0,w,c
  4992  0037A6  26D9               	addwf	fsr2l,f,c
  4993  0037A8  500E               	movf	(adf4351_calc_vco_core_freq@ctx+1)^0,w,c
  4994  0037AA  22DA               	addwfc	fsr2h,f,c
  4995  0037AC  C00F  FFDE         	movff	adf4351_calc_vco_core_freq@rf_out_freq,postinc2
  4996  0037B0  C010  FFDE         	movff	adf4351_calc_vco_core_freq@rf_out_freq+1,postinc2
  4997  0037B4  C011  FFDE         	movff	adf4351_calc_vco_core_freq@rf_out_freq+2,postinc2
  4998  0037B8  C012  FFDE         	movff	adf4351_calc_vco_core_freq@rf_out_freq+3,postinc2
  4999                           
  5000                           ; BSR set to: 0
  5001                           ;src/driver/adf4351.c: 285:     ctx->reg1.prescaler = (ctx->vco_freq>3600000)?1:0;
  5002  0037BC  EE20 F006          	lfsr	2,6
  5003  0037C0  500D               	movf	adf4351_calc_vco_core_freq@ctx^0,w,c
  5004  0037C2  26D9               	addwf	fsr2l,f,c
  5005  0037C4  500E               	movf	(adf4351_calc_vco_core_freq@ctx+1)^0,w,c
  5006  0037C6  22DA               	addwfc	fsr2h,f,c
  5007  0037C8  EE10 F033          	lfsr	1,51
  5008  0037CC  500D               	movf	adf4351_calc_vco_core_freq@ctx^0,w,c
  5009  0037CE  26E1               	addwf	fsr1l,f,c
  5010  0037D0  500E               	movf	(adf4351_calc_vco_core_freq@ctx+1)^0,w,c
  5011  0037D2  22E2               	addwfc	fsr1h,f,c
  5012  0037D4  0E03               	movlw	3
  5013  0037D6  50E3               	movf	plusw1,w,c
  5014  0037D8  E108               	bnz	u10181
  5015  0037DA  0E81               	movlw	129
  5016  0037DC  5CE6               	subwf	postinc1,w,c
  5017  0037DE  0EEE               	movlw	238
  5018  0037E0  58E6               	subwfb	postinc1,w,c
  5019  0037E2  0E36               	movlw	54
  5020  0037E4  58E6               	subwfb	postinc1,w,c
  5021  0037E6  A0D8               	btfss	status,0,c
  5022  0037E8  D002               	goto	u10180
  5023  0037EA                     u10181:
  5024  0037EA  0E01               	movlw	1
  5025  0037EC  D001               	goto	u10190
  5026  0037EE                     u10180:
  5027  0037EE  0E00               	movlw	0
  5028  0037F0                     u10190:
  5029  0037F0  6EDF               	movwf	indf2,c
  5030                           
  5031                           ; BSR set to: 0
  5032                           ;src/driver/adf4351.c: 286:  ctx->reg4.divsel = div;
  5033  0037F2  EE20 F021          	lfsr	2,33
  5034  0037F6  500D               	movf	adf4351_calc_vco_core_freq@ctx^0,w,c
  5035  0037F8  26D9               	addwf	fsr2l,f,c
  5036  0037FA  500E               	movf	(adf4351_calc_vco_core_freq@ctx+1)^0,w,c
  5037  0037FC  22DA               	addwfc	fsr2h,f,c
  5038  0037FE  C017  FFDF         	movff	adf4351_calc_vco_core_freq@div,indf2
  5039  003802                     l109:
  5040                           
  5041                           ; BSR set to: 0
  5042  003802  0012               	return		;funcret
  5043  003804                     __end_of_adf4351_calc_vco_core_freq:
  5044                           	opt callstack 0
  5045                           
  5046 ;; *************** function _adf4351_calc_rcnt_block *****************
  5047 ;; Defined at:
  5048 ;;		line 223 in file "src/driver/adf4351.c"
  5049 ;; Parameters:    Size  Location     Type
  5050 ;;  ctx             2   28[BANK0 ] PTR struct adf4351_ctx
  5051 ;;		 -> g_adf4351(55), 
  5052 ;; Auto vars:     Size  Location     Type
  5053 ;;  bscdiv          4   30[BANK0 ] unsigned long 
  5054 ;;  div             2   34[BANK0 ] int 
  5055 ;; Return value:  Size  Location     Type
  5056 ;;                  2   28[BANK0 ] int 
  5057 ;; Registers used:
  5058 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5059 ;; Tracked objects:
  5060 ;;		On entry : 3F/0
  5061 ;;		On exit  : 3F/0
  5062 ;;		Unchanged: 0/0
  5063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5064 ;;      Params:         0       2       0       0       0       0       0
  5065 ;;      Locals:         0       6       0       0       0       0       0
  5066 ;;      Temps:          0       0       0       0       0       0       0
  5067 ;;      Totals:         0       8       0       0       0       0       0
  5068 ;;Total ram usage:        8 bytes
  5069 ;; Hardware stack levels used:    1
  5070 ;; Hardware stack levels required when called:   10
  5071 ;; This function calls:
  5072 ;;		___awdiv
  5073 ;;		___lldiv
  5074 ;;		___llmod
  5075 ;;		_printf
  5076 ;; This function is called by:
  5077 ;;		_adf4351_set_freq
  5078 ;; This function uses a non-reentrant model
  5079 ;;
  5080                           
  5081                           	psect	text18
  5082  0015CA                     __ptext18:
  5083                           	opt callstack 0
  5084  0015CA                     _adf4351_calc_rcnt_block:
  5085                           	opt callstack 17
  5086                           
  5087                           ; BSR set to: 0
  5088                           ;src/driver/adf4351.c: 223: static int adf4351_calc_rcnt_block(adf4351_ctx* ctx);src/dri
      +                          ver/adf4351.c: 224: {;src/driver/adf4351.c: 225:  int div;;src/driver/adf4351.c: 226:   
      +                            u32 bscdiv;;src/driver/adf4351.c: 230:  div = ctx->ref / ctx->pfd;
  5089                           
  5090                           ; BSR set to: 0
  5091                           ;incstack = 0
  5092  0015CA  EE20 F02B          	lfsr	2,43
  5093  0015CE  51D5               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  5094  0015D0  26D9               	addwf	fsr2l,f,c
  5095  0015D2  51D6               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  5096  0015D4  22DA               	addwfc	fsr2h,f,c
  5097  0015D6  CFDE F00D          	movff	postinc2,___lldiv@dividend
  5098  0015DA  CFDE F00E          	movff	postinc2,___lldiv@dividend+1
  5099  0015DE  CFDE F00F          	movff	postinc2,___lldiv@dividend+2
  5100  0015E2  CFDE F010          	movff	postinc2,___lldiv@dividend+3
  5101  0015E6  EE20 F02F          	lfsr	2,47
  5102  0015EA  51D5               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  5103  0015EC  26D9               	addwf	fsr2l,f,c
  5104  0015EE  51D6               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  5105  0015F0  22DA               	addwfc	fsr2h,f,c
  5106  0015F2  CFDE F011          	movff	postinc2,___lldiv@divisor
  5107  0015F6  CFDE F012          	movff	postinc2,___lldiv@divisor+1
  5108  0015FA  CFDE F013          	movff	postinc2,___lldiv@divisor+2
  5109  0015FE  CFDE F014          	movff	postinc2,___lldiv@divisor+3
  5110  001602  EC48  F022         	call	___lldiv	;wreg free
  5111  001606  C00D  F0DB         	movff	?___lldiv,adf4351_calc_rcnt_block@div
  5112  00160A  C00E  F0DC         	movff	?___lldiv+1,adf4351_calc_rcnt_block@div+1
  5113                           
  5114                           ;src/driver/adf4351.c: 232:  if (ctx->ref % ctx->pfd) {
  5115  00160E  0100               	movlb	0	; () banked
  5116  001610  EE20 F02B          	lfsr	2,43
  5117  001614  51D5               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  5118  001616  26D9               	addwf	fsr2l,f,c
  5119  001618  51D6               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  5120  00161A  22DA               	addwfc	fsr2h,f,c
  5121  00161C  CFDE F00D          	movff	postinc2,___llmod@dividend
  5122  001620  CFDE F00E          	movff	postinc2,___llmod@dividend+1
  5123  001624  CFDE F00F          	movff	postinc2,___llmod@dividend+2
  5124  001628  CFDE F010          	movff	postinc2,___llmod@dividend+3
  5125  00162C  EE20 F02F          	lfsr	2,47
  5126  001630  51D5               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  5127  001632  26D9               	addwf	fsr2l,f,c
  5128  001634  51D6               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  5129  001636  22DA               	addwfc	fsr2h,f,c
  5130  001638  CFDE F011          	movff	postinc2,___llmod@divisor
  5131  00163C  CFDE F012          	movff	postinc2,___llmod@divisor+1
  5132  001640  CFDE F013          	movff	postinc2,___llmod@divisor+2
  5133  001644  CFDE F014          	movff	postinc2,___llmod@divisor+3
  5134  001648  EC53  F024         	call	___llmod	;wreg free
  5135  00164C  500D               	movf	?___llmod^0,w,c
  5136  00164E  100E               	iorwf	(?___llmod+1)^0,w,c
  5137  001650  100F               	iorwf	(?___llmod+2)^0,w,c
  5138  001652  1010               	iorwf	(?___llmod+3)^0,w,c
  5139  001654  B4D8               	btfsc	status,2,c
  5140  001656  D024               	goto	l7593
  5141                           
  5142                           ;src/driver/adf4351.c: 233:   printf("ADF4351: Cannot reach PFD of %i kHz with REF of %i
      +                           kHz (not divideable).\n", ctx->pfd, ctx->ref);
  5143  001658  0E1A               	movlw	low STR_4
  5144  00165A  0100               	movlb	0	; () banked
  5145  00165C  6FCB               	movwf	printf@fmt& (0+255),b
  5146  00165E  0E7D               	movlw	high STR_4
  5147  001660  6FCC               	movwf	(printf@fmt+1)& (0+255),b
  5148  001662  EE20 F02F          	lfsr	2,47
  5149  001666  51D5               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  5150  001668  26D9               	addwf	fsr2l,f,c
  5151  00166A  51D6               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  5152  00166C  22DA               	addwfc	fsr2h,f,c
  5153  00166E  CFDE F0CD          	movff	postinc2,?_printf+2
  5154  001672  CFDE F0CE          	movff	postinc2,?_printf+3
  5155  001676  CFDE F0CF          	movff	postinc2,?_printf+4
  5156  00167A  CFDE F0D0          	movff	postinc2,?_printf+5
  5157  00167E  EE20 F02B          	lfsr	2,43
  5158  001682  51D5               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  5159  001684  26D9               	addwf	fsr2l,f,c
  5160  001686  51D6               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  5161  001688  22DA               	addwfc	fsr2h,f,c
  5162  00168A  CFDE F0D1          	movff	postinc2,?_printf+6
  5163  00168E  CFDE F0D2          	movff	postinc2,?_printf+7
  5164  001692  CFDE F0D3          	movff	postinc2,?_printf+8
  5165  001696  CFDE F0D4          	movff	postinc2,?_printf+9
  5166  00169A  EC60  F027         	call	_printf	;wreg free
  5167  00169E  0012               	return	
  5168  0016A0                     l7593:
  5169                           
  5170                           ;src/driver/adf4351.c: 237:  if (div >= 1024) {
  5171  0016A0  0100               	movlb	0	; () banked
  5172  0016A2  BFDC               	btfsc	(adf4351_calc_rcnt_block@div+1)& (0+255),7,b
  5173  0016A4  D027               	goto	l101
  5174  0016A6  0E04               	movlw	4
  5175  0016A8  5DDC               	subwf	(adf4351_calc_rcnt_block@div+1)& (0+255),w,b
  5176  0016AA  A0D8               	btfss	status,0,c
  5177  0016AC  D023               	goto	l101
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;src/driver/adf4351.c: 238:   printf("ADF4351: Cannot reach PFD of %i kHz with REF of %i
      +                           kHz (div too high).\n", ctx->pfd, ctx->ref);
  5181  0016AE  0E64               	movlw	low STR_5
  5182  0016B0  6FCB               	movwf	printf@fmt& (0+255),b
  5183  0016B2  0E7D               	movlw	high STR_5
  5184  0016B4  6FCC               	movwf	(printf@fmt+1)& (0+255),b
  5185  0016B6  EE20 F02F          	lfsr	2,47
  5186  0016BA  51D5               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  5187  0016BC  26D9               	addwf	fsr2l,f,c
  5188  0016BE  51D6               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  5189  0016C0  22DA               	addwfc	fsr2h,f,c
  5190  0016C2  CFDE F0CD          	movff	postinc2,?_printf+2
  5191  0016C6  CFDE F0CE          	movff	postinc2,?_printf+3
  5192  0016CA  CFDE F0CF          	movff	postinc2,?_printf+4
  5193  0016CE  CFDE F0D0          	movff	postinc2,?_printf+5
  5194  0016D2  EE20 F02B          	lfsr	2,43
  5195  0016D6  51D5               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  5196  0016D8  26D9               	addwf	fsr2l,f,c
  5197  0016DA  51D6               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  5198  0016DC  22DA               	addwfc	fsr2h,f,c
  5199  0016DE  CFDE F0D1          	movff	postinc2,?_printf+6
  5200  0016E2  CFDE F0D2          	movff	postinc2,?_printf+7
  5201  0016E6  CFDE F0D3          	movff	postinc2,?_printf+8
  5202  0016EA  CFDE F0D4          	movff	postinc2,?_printf+9
  5203  0016EE  EC60  F027         	call	_printf	;wreg free
  5204  0016F2  0012               	return	
  5205  0016F4                     l101:
  5206                           
  5207                           ; BSR set to: 0
  5208                           ;src/driver/adf4351.c: 243:  if((div%2)==0) {
  5209  0016F4  B1DB               	btfsc	adf4351_calc_rcnt_block@div& (0+255),0,b
  5210  0016F6  D01C               	goto	l7603
  5211                           
  5212                           ; BSR set to: 0
  5213                           ;src/driver/adf4351.c: 244:   ctx->reg2.rcnt = div/2;
  5214  0016F8  C0DB  F00D         	movff	adf4351_calc_rcnt_block@div,___awdiv@dividend
  5215  0016FC  C0DC  F00E         	movff	adf4351_calc_rcnt_block@div+1,___awdiv@dividend+1
  5216  001700  0E00               	movlw	0
  5217  001702  6E10               	movwf	(___awdiv@divisor+1)^0,c
  5218  001704  0E02               	movlw	2
  5219  001706  6E0F               	movwf	___awdiv@divisor^0,c
  5220  001708  EC06  F022         	call	___awdiv	;wreg free
  5221  00170C  EE20 F00F          	lfsr	2,15
  5222  001710  51D5               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  5223  001712  26D9               	addwf	fsr2l,f,c
  5224  001714  51D6               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  5225  001716  22DA               	addwfc	fsr2h,f,c
  5226  001718  C00D  FFDE         	movff	?___awdiv,postinc2
  5227  00171C  C00E  FFDD         	movff	?___awdiv+1,postdec2
  5228                           
  5229                           ; BSR set to: 0
  5230                           ;src/driver/adf4351.c: 245:   ctx->reg2.refdiv = 1;
  5231  001720  EE20 F00E          	lfsr	2,14
  5232  001724  51D5               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  5233  001726  26D9               	addwf	fsr2l,f,c
  5234  001728  51D6               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  5235  00172A  22DA               	addwfc	fsr2h,f,c
  5236  00172C  0E01               	movlw	1
  5237  00172E  D011               	goto	L3
  5238  001730                     l7603:
  5239                           
  5240                           ; BSR set to: 0
  5241                           ;src/driver/adf4351.c: 247:   ctx->reg2.rcnt = div;
  5242  001730  EE20 F00F          	lfsr	2,15
  5243  001734  51D5               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  5244  001736  26D9               	addwf	fsr2l,f,c
  5245  001738  51D6               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  5246  00173A  22DA               	addwfc	fsr2h,f,c
  5247  00173C  C0DB  FFDE         	movff	adf4351_calc_rcnt_block@div,postinc2
  5248  001740  C0DC  FFDD         	movff	adf4351_calc_rcnt_block@div+1,postdec2
  5249                           
  5250                           ;src/driver/adf4351.c: 248:   ctx->reg2.refdiv = 0;
  5251  001744  EE20 F00E          	lfsr	2,14
  5252  001748  51D5               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  5253  00174A  26D9               	addwf	fsr2l,f,c
  5254  00174C  51D6               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  5255  00174E  22DA               	addwfc	fsr2h,f,c
  5256  001750  0E00               	movlw	0
  5257  001752                     L3:
  5258  001752  6EDF               	movwf	indf2,c
  5259                           
  5260                           ; BSR set to: 0
  5261                           ;src/driver/adf4351.c: 250:  ctx->reg3.bscm = 0;
  5262                           
  5263                           ;src/driver/adf4351.c: 249:  }
  5264  001754  EE20 F019          	lfsr	2,25
  5265  001758  51D5               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  5266  00175A  26D9               	addwf	fsr2l,f,c
  5267  00175C  51D6               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  5268  00175E  22DA               	addwfc	fsr2h,f,c
  5269  001760  0E00               	movlw	0
  5270  001762  6EDF               	movwf	indf2,c
  5271                           
  5272                           ; BSR set to: 0
  5273                           ;src/driver/adf4351.c: 251:  bscdiv = ((ctx->pfd-1) / 125) + 1;
  5274  001764  EE20 F02F          	lfsr	2,47
  5275  001768  51D5               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  5276  00176A  26D9               	addwf	fsr2l,f,c
  5277  00176C  51D6               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  5278  00176E  22DA               	addwfc	fsr2h,f,c
  5279  001770  0EFF               	movlw	255
  5280  001772  24DE               	addwf	postinc2,w,c
  5281  001774  6E0D               	movwf	___lldiv@dividend^0,c
  5282  001776  0EFF               	movlw	255
  5283  001778  20DE               	addwfc	postinc2,w,c
  5284  00177A  6E0E               	movwf	(___lldiv@dividend+1)^0,c
  5285  00177C  0EFF               	movlw	255
  5286  00177E  20DE               	addwfc	postinc2,w,c
  5287  001780  6E0F               	movwf	(___lldiv@dividend+2)^0,c
  5288  001782  0EFF               	movlw	255
  5289  001784  20DE               	addwfc	postinc2,w,c
  5290  001786  6E10               	movwf	(___lldiv@dividend+3)^0,c
  5291  001788  0E7D               	movlw	125
  5292  00178A  6E11               	movwf	___lldiv@divisor^0,c
  5293  00178C  0E00               	movlw	0
  5294  00178E  6E12               	movwf	(___lldiv@divisor+1)^0,c
  5295  001790  0E00               	movlw	0
  5296  001792  6E13               	movwf	(___lldiv@divisor+2)^0,c
  5297  001794  0E00               	movlw	0
  5298  001796  6E14               	movwf	(___lldiv@divisor+3)^0,c
  5299  001798  EC48  F022         	call	___lldiv	;wreg free
  5300  00179C  0E01               	movlw	1
  5301  00179E  240D               	addwf	?___lldiv^0,w,c
  5302  0017A0  0100               	movlb	0	; () banked
  5303  0017A2  6FD7               	movwf	adf4351_calc_rcnt_block@bscdiv& (0+255),b
  5304  0017A4  0E00               	movlw	0
  5305  0017A6  200E               	addwfc	(?___lldiv+1)^0,w,c
  5306  0017A8  6FD8               	movwf	(adf4351_calc_rcnt_block@bscdiv+1)& (0+255),b
  5307  0017AA  0E00               	movlw	0
  5308  0017AC  200F               	addwfc	(?___lldiv+2)^0,w,c
  5309  0017AE  6FD9               	movwf	(adf4351_calc_rcnt_block@bscdiv+2)& (0+255),b
  5310  0017B0  0E00               	movlw	0
  5311  0017B2  2010               	addwfc	(?___lldiv+3)^0,w,c
  5312  0017B4  6FDA               	movwf	(adf4351_calc_rcnt_block@bscdiv+3)& (0+255),b
  5313                           
  5314                           ; BSR set to: 0
  5315                           ;src/driver/adf4351.c: 253:  if (bscdiv > 255) {
  5316  0017B6  51DA               	movf	(adf4351_calc_rcnt_block@bscdiv+3)& (0+255),w,b
  5317  0017B8  11D9               	iorwf	(adf4351_calc_rcnt_block@bscdiv+2)& (0+255),w,b
  5318  0017BA  E103               	bnz	u10230
  5319  0017BC  05D8               	decf	(adf4351_calc_rcnt_block@bscdiv+1)& (0+255),w,b
  5320  0017BE  A0D8               	btfss	status,0,c
  5321  0017C0  D031               	goto	l7613
  5322  0017C2                     u10230:
  5323                           
  5324                           ; BSR set to: 0
  5325                           ;src/driver/adf4351.c: 254:   ctx->reg3.bscm = 1;
  5326  0017C2  EE20 F019          	lfsr	2,25
  5327  0017C6  51D5               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  5328  0017C8  26D9               	addwf	fsr2l,f,c
  5329  0017CA  51D6               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  5330  0017CC  22DA               	addwfc	fsr2h,f,c
  5331  0017CE  0E01               	movlw	1
  5332  0017D0  6EDF               	movwf	indf2,c
  5333                           
  5334                           ; BSR set to: 0
  5335                           ;src/driver/adf4351.c: 255:   bscdiv = ((ctx->pfd-1) / 250) + 1;
  5336  0017D2  EE20 F02F          	lfsr	2,47
  5337  0017D6  51D5               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  5338  0017D8  26D9               	addwf	fsr2l,f,c
  5339  0017DA  51D6               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  5340  0017DC  22DA               	addwfc	fsr2h,f,c
  5341  0017DE  0EFF               	movlw	255
  5342  0017E0  24DE               	addwf	postinc2,w,c
  5343  0017E2  6E0D               	movwf	___lldiv@dividend^0,c
  5344  0017E4  0EFF               	movlw	255
  5345  0017E6  20DE               	addwfc	postinc2,w,c
  5346  0017E8  6E0E               	movwf	(___lldiv@dividend+1)^0,c
  5347  0017EA  0EFF               	movlw	255
  5348  0017EC  20DE               	addwfc	postinc2,w,c
  5349  0017EE  6E0F               	movwf	(___lldiv@dividend+2)^0,c
  5350  0017F0  0EFF               	movlw	255
  5351  0017F2  20DE               	addwfc	postinc2,w,c
  5352  0017F4  6E10               	movwf	(___lldiv@dividend+3)^0,c
  5353  0017F6  0EFA               	movlw	250
  5354  0017F8  6E11               	movwf	___lldiv@divisor^0,c
  5355  0017FA  0E00               	movlw	0
  5356  0017FC  6E12               	movwf	(___lldiv@divisor+1)^0,c
  5357  0017FE  0E00               	movlw	0
  5358  001800  6E13               	movwf	(___lldiv@divisor+2)^0,c
  5359  001802  0E00               	movlw	0
  5360  001804  6E14               	movwf	(___lldiv@divisor+3)^0,c
  5361  001806  EC48  F022         	call	___lldiv	;wreg free
  5362  00180A  0E01               	movlw	1
  5363  00180C  240D               	addwf	?___lldiv^0,w,c
  5364  00180E  0100               	movlb	0	; () banked
  5365  001810  6FD7               	movwf	adf4351_calc_rcnt_block@bscdiv& (0+255),b
  5366  001812  0E00               	movlw	0
  5367  001814  200E               	addwfc	(?___lldiv+1)^0,w,c
  5368  001816  6FD8               	movwf	(adf4351_calc_rcnt_block@bscdiv+1)& (0+255),b
  5369  001818  0E00               	movlw	0
  5370  00181A  200F               	addwfc	(?___lldiv+2)^0,w,c
  5371  00181C  6FD9               	movwf	(adf4351_calc_rcnt_block@bscdiv+2)& (0+255),b
  5372  00181E  0E00               	movlw	0
  5373  001820  2010               	addwfc	(?___lldiv+3)^0,w,c
  5374  001822  6FDA               	movwf	(adf4351_calc_rcnt_block@bscdiv+3)& (0+255),b
  5375  001824                     l7613:
  5376                           
  5377                           ; BSR set to: 0
  5378                           ;src/driver/adf4351.c: 258:  if (bscdiv > 255) {
  5379  001824  51DA               	movf	(adf4351_calc_rcnt_block@bscdiv+3)& (0+255),w,b
  5380  001826  11D9               	iorwf	(adf4351_calc_rcnt_block@bscdiv+2)& (0+255),w,b
  5381  001828  E103               	bnz	u10240
  5382  00182A  05D8               	decf	(adf4351_calc_rcnt_block@bscdiv+1)& (0+255),w,b
  5383  00182C  A0D8               	btfss	status,0,c
  5384  00182E  D015               	goto	l7619
  5385  001830                     u10240:
  5386                           
  5387                           ; BSR set to: 0
  5388                           ;src/driver/adf4351.c: 259:   printf("ADF4351: Cannot use pfd of %lu kHz (bscdiv too hig
      +                          h).\n", ctx->pfd);
  5389  001830  0EAC               	movlw	low STR_6
  5390  001832  6FCB               	movwf	printf@fmt& (0+255),b
  5391  001834  0E7D               	movlw	high STR_6
  5392  001836  6FCC               	movwf	(printf@fmt+1)& (0+255),b
  5393  001838  EE20 F02F          	lfsr	2,47
  5394  00183C  51D5               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  5395  00183E  26D9               	addwf	fsr2l,f,c
  5396  001840  51D6               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  5397  001842  22DA               	addwfc	fsr2h,f,c
  5398  001844  CFDE F0CD          	movff	postinc2,?_printf+2
  5399  001848  CFDE F0CE          	movff	postinc2,?_printf+3
  5400  00184C  CFDE F0CF          	movff	postinc2,?_printf+4
  5401  001850  CFDE F0D0          	movff	postinc2,?_printf+5
  5402  001854  EC60  F027         	call	_printf	;wreg free
  5403  001858  0012               	return	
  5404  00185A                     l7619:
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;src/driver/adf4351.c: 263:     ctx->reg4.bsclkdiv = bscdiv;
  5408  00185A  EE20 F022          	lfsr	2,34
  5409  00185E  51D5               	movf	adf4351_calc_rcnt_block@ctx& (0+255),w,b
  5410  001860  26D9               	addwf	fsr2l,f,c
  5411  001862  51D6               	movf	(adf4351_calc_rcnt_block@ctx+1)& (0+255),w,b
  5412  001864  22DA               	addwfc	fsr2h,f,c
  5413  001866  C0D7  FFDF         	movff	adf4351_calc_rcnt_block@bscdiv,indf2
  5414                           
  5415                           ; BSR set to: 0
  5416  00186A  0012               	return		;funcret
  5417  00186C                     __end_of_adf4351_calc_rcnt_block:
  5418                           	opt callstack 0
  5419                           
  5420 ;; *************** function ___awdiv *****************
  5421 ;; Defined at:
  5422 ;;		line 7 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/awdiv.c"
  5423 ;; Parameters:    Size  Location     Type
  5424 ;;  dividend        2   12[COMRAM] int 
  5425 ;;  divisor         2   14[COMRAM] int 
  5426 ;; Auto vars:     Size  Location     Type
  5427 ;;  quotient        2   18[COMRAM] int 
  5428 ;;  sign            1   17[COMRAM] unsigned char 
  5429 ;;  counter         1   16[COMRAM] unsigned char 
  5430 ;; Return value:  Size  Location     Type
  5431 ;;                  2   12[COMRAM] int 
  5432 ;; Registers used:
  5433 ;;		wreg, status,2, status,0
  5434 ;; Tracked objects:
  5435 ;;		On entry : 3F/0
  5436 ;;		On exit  : 3F/0
  5437 ;;		Unchanged: 3F/0
  5438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5439 ;;      Params:         4       0       0       0       0       0       0
  5440 ;;      Locals:         4       0       0       0       0       0       0
  5441 ;;      Temps:          0       0       0       0       0       0       0
  5442 ;;      Totals:         8       0       0       0       0       0       0
  5443 ;;Total ram usage:        8 bytes
  5444 ;; Hardware stack levels used:    1
  5445 ;; Hardware stack levels required when called:    2
  5446 ;; This function calls:
  5447 ;;		Nothing
  5448 ;; This function is called by:
  5449 ;;		_adf4351_calc_rcnt_block
  5450 ;; This function uses a non-reentrant model
  5451 ;;
  5452                           
  5453                           	psect	text19
  5454  00440C                     __ptext19:
  5455                           	opt callstack 0
  5456  00440C                     ___awdiv:
  5457                           	opt callstack 24
  5458                           
  5459                           ; BSR set to: 0
  5460                           
  5461                           ; BSR set to: 0
  5462                           ;incstack = 0
  5463  00440C  0E00               	movlw	0
  5464  00440E  6E12               	movwf	___awdiv@sign^0,c
  5465                           
  5466                           ; BSR set to: 0
  5467  004410  AE10               	btfss	(___awdiv@divisor+1)^0,7,c
  5468  004412  D006               	goto	l7399
  5469                           
  5470                           ; BSR set to: 0
  5471  004414  6C0F               	negf	___awdiv@divisor^0,c
  5472  004416  1E10               	comf	(___awdiv@divisor+1)^0,f,c
  5473  004418  B0D8               	btfsc	status,0,c
  5474  00441A  2A10               	incf	(___awdiv@divisor+1)^0,f,c
  5475                           
  5476                           ; BSR set to: 0
  5477  00441C  0E01               	movlw	1
  5478  00441E  6E12               	movwf	___awdiv@sign^0,c
  5479  004420                     l7399:
  5480                           
  5481                           ; BSR set to: 0
  5482  004420  AE0E               	btfss	(___awdiv@dividend+1)^0,7,c
  5483  004422  D006               	goto	l7405
  5484                           
  5485                           ; BSR set to: 0
  5486  004424  6C0D               	negf	___awdiv@dividend^0,c
  5487  004426  1E0E               	comf	(___awdiv@dividend+1)^0,f,c
  5488  004428  B0D8               	btfsc	status,0,c
  5489  00442A  2A0E               	incf	(___awdiv@dividend+1)^0,f,c
  5490                           
  5491                           ; BSR set to: 0
  5492  00442C  0E01               	movlw	1
  5493  00442E  1A12               	xorwf	___awdiv@sign^0,f,c
  5494  004430                     l7405:
  5495                           
  5496                           ; BSR set to: 0
  5497  004430  0E00               	movlw	0
  5498  004432  6E14               	movwf	(___awdiv@quotient+1)^0,c
  5499  004434  0E00               	movlw	0
  5500  004436  6E13               	movwf	___awdiv@quotient^0,c
  5501                           
  5502                           ; BSR set to: 0
  5503  004438  500F               	movf	___awdiv@divisor^0,w,c
  5504  00443A  1010               	iorwf	(___awdiv@divisor+1)^0,w,c
  5505  00443C  B4D8               	btfsc	status,2,c
  5506  00443E  D01C               	goto	l7427
  5507                           
  5508                           ; BSR set to: 0
  5509  004440  0E01               	movlw	1
  5510  004442  6E11               	movwf	___awdiv@counter^0,c
  5511  004444  D004               	goto	l7413
  5512  004446                     l7411:
  5513                           
  5514                           ; BSR set to: 0
  5515  004446  90D8               	bcf	status,0,c
  5516  004448  360F               	rlcf	___awdiv@divisor^0,f,c
  5517  00444A  3610               	rlcf	(___awdiv@divisor+1)^0,f,c
  5518  00444C  2A11               	incf	___awdiv@counter^0,f,c
  5519  00444E                     l7413:
  5520                           
  5521                           ; BSR set to: 0
  5522  00444E  AE10               	btfss	(___awdiv@divisor+1)^0,7,c
  5523  004450  D7FA               	goto	l7411
  5524  004452                     u9850:
  5525                           
  5526                           ; BSR set to: 0
  5527  004452  90D8               	bcf	status,0,c
  5528  004454  3613               	rlcf	___awdiv@quotient^0,f,c
  5529  004456  3614               	rlcf	(___awdiv@quotient+1)^0,f,c
  5530                           
  5531                           ; BSR set to: 0
  5532  004458  500F               	movf	___awdiv@divisor^0,w,c
  5533  00445A  5C0D               	subwf	___awdiv@dividend^0,w,c
  5534  00445C  5010               	movf	(___awdiv@divisor+1)^0,w,c
  5535  00445E  580E               	subwfb	(___awdiv@dividend+1)^0,w,c
  5536  004460  A0D8               	btfss	status,0,c
  5537  004462  D005               	goto	l7423
  5538                           
  5539                           ; BSR set to: 0
  5540  004464  500F               	movf	___awdiv@divisor^0,w,c
  5541  004466  5E0D               	subwf	___awdiv@dividend^0,f,c
  5542  004468  5010               	movf	(___awdiv@divisor+1)^0,w,c
  5543  00446A  5A0E               	subwfb	(___awdiv@dividend+1)^0,f,c
  5544                           
  5545                           ; BSR set to: 0
  5546  00446C  8013               	bsf	___awdiv@quotient^0,0,c
  5547  00446E                     l7423:
  5548                           
  5549                           ; BSR set to: 0
  5550  00446E  90D8               	bcf	status,0,c
  5551  004470  3210               	rrcf	(___awdiv@divisor+1)^0,f,c
  5552  004472  320F               	rrcf	___awdiv@divisor^0,f,c
  5553                           
  5554                           ; BSR set to: 0
  5555  004474  2E11               	decfsz	___awdiv@counter^0,f,c
  5556  004476  D7ED               	goto	u9850
  5557  004478                     l7427:
  5558                           
  5559                           ; BSR set to: 0
  5560  004478  5012               	movf	___awdiv@sign^0,w,c
  5561  00447A  B4D8               	btfsc	status,2,c
  5562  00447C  D004               	goto	l7431
  5563                           
  5564                           ; BSR set to: 0
  5565  00447E  6C13               	negf	___awdiv@quotient^0,c
  5566  004480  1E14               	comf	(___awdiv@quotient+1)^0,f,c
  5567  004482  B0D8               	btfsc	status,0,c
  5568  004484  2A14               	incf	(___awdiv@quotient+1)^0,f,c
  5569  004486                     l7431:
  5570                           
  5571                           ; BSR set to: 0
  5572  004486  C013  F00D         	movff	___awdiv@quotient,?___awdiv
  5573  00448A  C014  F00E         	movff	___awdiv@quotient+1,?___awdiv+1
  5574                           
  5575                           ; BSR set to: 0
  5576  00448E  0012               	return		;funcret
  5577  004490                     __end_of___awdiv:
  5578                           	opt callstack 0
  5579                           
  5580 ;; *************** function _adf4351_calc_counters *****************
  5581 ;; Defined at:
  5582 ;;		line 176 in file "src/driver/adf4351.c"
  5583 ;; Parameters:    Size  Location     Type
  5584 ;;  ctx             2   33[COMRAM] PTR struct adf4351_ctx
  5585 ;;		 -> g_adf4351(55), 
  5586 ;; Auto vars:     Size  Location     Type
  5587 ;;  div             4   39[COMRAM] unsigned long 
  5588 ;;  frac            4   51[COMRAM] unsigned long 
  5589 ;;  mod             4   47[COMRAM] unsigned long 
  5590 ;;  integer         4   43[COMRAM] unsigned long 
  5591 ;;  remainder       4   35[COMRAM] unsigned long 
  5592 ;; Return value:  Size  Location     Type
  5593 ;;                  2   33[COMRAM] int 
  5594 ;; Registers used:
  5595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5596 ;; Tracked objects:
  5597 ;;		On entry : 3F/0
  5598 ;;		On exit  : 0/0
  5599 ;;		Unchanged: 0/0
  5600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5601 ;;      Params:         2       0       0       0       0       0       0
  5602 ;;      Locals:        20       0       0       0       0       0       0
  5603 ;;      Temps:          0       0       0       0       0       0       0
  5604 ;;      Totals:        22       0       0       0       0       0       0
  5605 ;;Total ram usage:       22 bytes
  5606 ;; Hardware stack levels used:    1
  5607 ;; Hardware stack levels required when called:    4
  5608 ;; This function calls:
  5609 ;;		___lldiv
  5610 ;;		___llmod
  5611 ;;		_gcd
  5612 ;; This function is called by:
  5613 ;;		_adf4351_set_freq
  5614 ;; This function uses a non-reentrant model
  5615 ;;
  5616                           
  5617                           	psect	text20
  5618  001FC4                     __ptext20:
  5619                           	opt callstack 0
  5620  001FC4                     _adf4351_calc_counters:
  5621                           	opt callstack 23
  5622                           
  5623                           ; BSR set to: 0
  5624                           ;src/driver/adf4351.c: 176: static int adf4351_calc_counters(adf4351_ctx* ctx);src/drive
      +                          r/adf4351.c: 177: {;src/driver/adf4351.c: 178:  u32 integer, frac, mod, remainder;;src/d
      +                          river/adf4351.c: 181:  integer = ctx->vco_freq / ctx->pfd;
  5625                           
  5626                           ; BSR set to: 0
  5627                           ;incstack = 0
  5628  001FC4  EE20 F033          	lfsr	2,51
  5629  001FC8  5022               	movf	adf4351_calc_counters@ctx^0,w,c
  5630  001FCA  26D9               	addwf	fsr2l,f,c
  5631  001FCC  5023               	movf	(adf4351_calc_counters@ctx+1)^0,w,c
  5632  001FCE  22DA               	addwfc	fsr2h,f,c
  5633  001FD0  CFDE F00D          	movff	postinc2,___lldiv@dividend
  5634  001FD4  CFDE F00E          	movff	postinc2,___lldiv@dividend+1
  5635  001FD8  CFDE F00F          	movff	postinc2,___lldiv@dividend+2
  5636  001FDC  CFDE F010          	movff	postinc2,___lldiv@dividend+3
  5637  001FE0  EE20 F02F          	lfsr	2,47
  5638  001FE4  5022               	movf	adf4351_calc_counters@ctx^0,w,c
  5639  001FE6  26D9               	addwf	fsr2l,f,c
  5640  001FE8  5023               	movf	(adf4351_calc_counters@ctx+1)^0,w,c
  5641  001FEA  22DA               	addwfc	fsr2h,f,c
  5642  001FEC  CFDE F011          	movff	postinc2,___lldiv@divisor
  5643  001FF0  CFDE F012          	movff	postinc2,___lldiv@divisor+1
  5644  001FF4  CFDE F013          	movff	postinc2,___lldiv@divisor+2
  5645  001FF8  CFDE F014          	movff	postinc2,___lldiv@divisor+3
  5646  001FFC  EC48  F022         	call	___lldiv	;wreg free
  5647  002000  C00D  F02C         	movff	?___lldiv,adf4351_calc_counters@integer
  5648  002004  C00E  F02D         	movff	?___lldiv+1,adf4351_calc_counters@integer+1
  5649  002008  C00F  F02E         	movff	?___lldiv+2,adf4351_calc_counters@integer+2
  5650  00200C  C010  F02F         	movff	?___lldiv+3,adf4351_calc_counters@integer+3
  5651                           
  5652                           ;src/driver/adf4351.c: 182:  remainder = ctx->vco_freq % ctx->pfd;
  5653  002010  EE20 F033          	lfsr	2,51
  5654  002014  5022               	movf	adf4351_calc_counters@ctx^0,w,c
  5655  002016  26D9               	addwf	fsr2l,f,c
  5656  002018  5023               	movf	(adf4351_calc_counters@ctx+1)^0,w,c
  5657  00201A  22DA               	addwfc	fsr2h,f,c
  5658  00201C  CFDE F00D          	movff	postinc2,___llmod@dividend
  5659  002020  CFDE F00E          	movff	postinc2,___llmod@dividend+1
  5660  002024  CFDE F00F          	movff	postinc2,___llmod@dividend+2
  5661  002028  CFDE F010          	movff	postinc2,___llmod@dividend+3
  5662  00202C  EE20 F02F          	lfsr	2,47
  5663  002030  5022               	movf	adf4351_calc_counters@ctx^0,w,c
  5664  002032  26D9               	addwf	fsr2l,f,c
  5665  002034  5023               	movf	(adf4351_calc_counters@ctx+1)^0,w,c
  5666  002036  22DA               	addwfc	fsr2h,f,c
  5667  002038  CFDE F011          	movff	postinc2,___llmod@divisor
  5668  00203C  CFDE F012          	movff	postinc2,___llmod@divisor+1
  5669  002040  CFDE F013          	movff	postinc2,___llmod@divisor+2
  5670  002044  CFDE F014          	movff	postinc2,___llmod@divisor+3
  5671  002048  EC53  F024         	call	___llmod	;wreg free
  5672  00204C  C00D  F024         	movff	?___llmod,adf4351_calc_counters@remainder
  5673  002050  C00E  F025         	movff	?___llmod+1,adf4351_calc_counters@remainder+1
  5674  002054  C00F  F026         	movff	?___llmod+2,adf4351_calc_counters@remainder+2
  5675  002058  C010  F027         	movff	?___llmod+3,adf4351_calc_counters@remainder+3
  5676                           
  5677                           ;src/driver/adf4351.c: 187:  if ((integer < 23) || (integer > 65535))
  5678  00205C  502F               	movf	(adf4351_calc_counters@integer+3)^0,w,c
  5679  00205E  102E               	iorwf	(adf4351_calc_counters@integer+2)^0,w,c
  5680  002060  102D               	iorwf	(adf4351_calc_counters@integer+1)^0,w,c
  5681  002062  E104               	bnz	u10250
  5682  002064  0E17               	movlw	23
  5683  002066  5C2C               	subwf	adf4351_calc_counters@integer^0,w,c
  5684  002068  A0D8               	btfss	status,0,c
  5685  00206A  0012               	return	
  5686  00206C                     u10250:
  5687  00206C  502F               	movf	(adf4351_calc_counters@integer+3)^0,w,c
  5688  00206E  E104               	bnz	u10260
  5689  002070  042E               	decf	(adf4351_calc_counters@integer+2)^0,w,c
  5690  002072  B0D8               	btfsc	status,0,c
  5691  002074  0012               	return	
  5692  002076  D001               	goto	l88
  5693  002078                     u10260:
  5694  002078  0012               	return	
  5695  00207A                     l88:
  5696                           
  5697                           ;src/driver/adf4351.c: 190:  frac = remainder;
  5698  00207A  C024  F034         	movff	adf4351_calc_counters@remainder,adf4351_calc_counters@frac
  5699  00207E  C025  F035         	movff	adf4351_calc_counters@remainder+1,adf4351_calc_counters@frac+1
  5700  002082  C026  F036         	movff	adf4351_calc_counters@remainder+2,adf4351_calc_counters@frac+2
  5701  002086  C027  F037         	movff	adf4351_calc_counters@remainder+3,adf4351_calc_counters@frac+3
  5702                           
  5703                           ;src/driver/adf4351.c: 191:  mod = ctx->pfd;
  5704  00208A  EE20 F02F          	lfsr	2,47
  5705  00208E  5022               	movf	adf4351_calc_counters@ctx^0,w,c
  5706  002090  26D9               	addwf	fsr2l,f,c
  5707  002092  5023               	movf	(adf4351_calc_counters@ctx+1)^0,w,c
  5708  002094  22DA               	addwfc	fsr2h,f,c
  5709  002096  CFDE F030          	movff	postinc2,adf4351_calc_counters@mod
  5710  00209A  CFDE F031          	movff	postinc2,adf4351_calc_counters@mod+1
  5711  00209E  CFDE F032          	movff	postinc2,adf4351_calc_counters@mod+2
  5712  0020A2  CFDE F033          	movff	postinc2,adf4351_calc_counters@mod+3
  5713                           
  5714                           ;src/driver/adf4351.c: 195:  while (mod >= 4096) {
  5715  0020A6  D00A               	goto	l7633
  5716  0020A8                     l7631:
  5717                           
  5718                           ;src/driver/adf4351.c: 196:   frac /= 2;
  5719  0020A8  90D8               	bcf	status,0,c
  5720  0020AA  3237               	rrcf	(adf4351_calc_counters@frac+3)^0,f,c
  5721  0020AC  3236               	rrcf	(adf4351_calc_counters@frac+2)^0,f,c
  5722  0020AE  3235               	rrcf	(adf4351_calc_counters@frac+1)^0,f,c
  5723  0020B0  3234               	rrcf	adf4351_calc_counters@frac^0,f,c
  5724                           
  5725                           ;src/driver/adf4351.c: 197:   mod /= 2;
  5726  0020B2  90D8               	bcf	status,0,c
  5727  0020B4  3233               	rrcf	(adf4351_calc_counters@mod+3)^0,f,c
  5728  0020B6  3232               	rrcf	(adf4351_calc_counters@mod+2)^0,f,c
  5729  0020B8  3231               	rrcf	(adf4351_calc_counters@mod+1)^0,f,c
  5730  0020BA  3230               	rrcf	adf4351_calc_counters@mod^0,f,c
  5731  0020BC                     l7633:
  5732                           
  5733                           ;src/driver/adf4351.c: 195:  while (mod >= 4096) {
  5734  0020BC  5033               	movf	(adf4351_calc_counters@mod+3)^0,w,c
  5735  0020BE  1032               	iorwf	(adf4351_calc_counters@mod+2)^0,w,c
  5736  0020C0  E1F3               	bnz	l7631
  5737  0020C2  0E10               	movlw	16
  5738  0020C4  5C31               	subwf	(adf4351_calc_counters@mod+1)^0,w,c
  5739  0020C6  B0D8               	btfsc	status,0,c
  5740  0020C8  D7EF               	goto	l7631
  5741                           
  5742                           ;src/driver/adf4351.c: 202:  if(frac) {
  5743  0020CA  5034               	movf	adf4351_calc_counters@frac^0,w,c
  5744  0020CC  1035               	iorwf	(adf4351_calc_counters@frac+1)^0,w,c
  5745  0020CE  1036               	iorwf	(adf4351_calc_counters@frac+2)^0,w,c
  5746  0020D0  1037               	iorwf	(adf4351_calc_counters@frac+3)^0,w,c
  5747  0020D2  B4D8               	btfsc	status,2,c
  5748  0020D4  D04F               	goto	l7639
  5749                           
  5750                           ;src/driver/adf4351.c: 204:   u32 div = gcd(mod, frac);
  5751  0020D6  C030  F016         	movff	adf4351_calc_counters@mod,gcd@a
  5752  0020DA  C031  F017         	movff	adf4351_calc_counters@mod+1,gcd@a+1
  5753  0020DE  C032  F018         	movff	adf4351_calc_counters@mod+2,gcd@a+2
  5754  0020E2  C033  F019         	movff	adf4351_calc_counters@mod+3,gcd@a+3
  5755  0020E6  C034  F01A         	movff	adf4351_calc_counters@frac,gcd@b
  5756  0020EA  C035  F01B         	movff	adf4351_calc_counters@frac+1,gcd@b+1
  5757  0020EE  C036  F01C         	movff	adf4351_calc_counters@frac+2,gcd@b+2
  5758  0020F2  C037  F01D         	movff	adf4351_calc_counters@frac+3,gcd@b+3
  5759  0020F6  ECD6  F01C         	call	_gcd	;wreg free
  5760  0020FA  C016  F028         	movff	?_gcd,adf4351_calc_counters@div
  5761  0020FE  C017  F029         	movff	?_gcd+1,adf4351_calc_counters@div+1
  5762  002102  C018  F02A         	movff	?_gcd+2,adf4351_calc_counters@div+2
  5763  002106  C019  F02B         	movff	?_gcd+3,adf4351_calc_counters@div+3
  5764                           
  5765                           ;src/driver/adf4351.c: 205:   frac /= div;
  5766  00210A  C034  F00D         	movff	adf4351_calc_counters@frac,___lldiv@dividend
  5767  00210E  C035  F00E         	movff	adf4351_calc_counters@frac+1,___lldiv@dividend+1
  5768  002112  C036  F00F         	movff	adf4351_calc_counters@frac+2,___lldiv@dividend+2
  5769  002116  C037  F010         	movff	adf4351_calc_counters@frac+3,___lldiv@dividend+3
  5770  00211A  C028  F011         	movff	adf4351_calc_counters@div,___lldiv@divisor
  5771  00211E  C029  F012         	movff	adf4351_calc_counters@div+1,___lldiv@divisor+1
  5772  002122  C02A  F013         	movff	adf4351_calc_counters@div+2,___lldiv@divisor+2
  5773  002126  C02B  F014         	movff	adf4351_calc_counters@div+3,___lldiv@divisor+3
  5774  00212A  EC48  F022         	call	___lldiv	;wreg free
  5775  00212E  C00D  F034         	movff	?___lldiv,adf4351_calc_counters@frac
  5776  002132  C00E  F035         	movff	?___lldiv+1,adf4351_calc_counters@frac+1
  5777  002136  C00F  F036         	movff	?___lldiv+2,adf4351_calc_counters@frac+2
  5778  00213A  C010  F037         	movff	?___lldiv+3,adf4351_calc_counters@frac+3
  5779                           
  5780                           ;src/driver/adf4351.c: 206:   mod /= div;
  5781  00213E  C030  F00D         	movff	adf4351_calc_counters@mod,___lldiv@dividend
  5782  002142  C031  F00E         	movff	adf4351_calc_counters@mod+1,___lldiv@dividend+1
  5783  002146  C032  F00F         	movff	adf4351_calc_counters@mod+2,___lldiv@dividend+2
  5784  00214A  C033  F010         	movff	adf4351_calc_counters@mod+3,___lldiv@dividend+3
  5785  00214E  C028  F011         	movff	adf4351_calc_counters@div,___lldiv@divisor
  5786  002152  C029  F012         	movff	adf4351_calc_counters@div+1,___lldiv@divisor+1
  5787  002156  C02A  F013         	movff	adf4351_calc_counters@div+2,___lldiv@divisor+2
  5788  00215A  C02B  F014         	movff	adf4351_calc_counters@div+3,___lldiv@divisor+3
  5789  00215E  EC48  F022         	call	___lldiv	;wreg free
  5790  002162  C00D  F030         	movff	?___lldiv,adf4351_calc_counters@mod
  5791  002166  C00E  F031         	movff	?___lldiv+1,adf4351_calc_counters@mod+1
  5792  00216A  C00F  F032         	movff	?___lldiv+2,adf4351_calc_counters@mod+2
  5793  00216E  C010  F033         	movff	?___lldiv+3,adf4351_calc_counters@mod+3
  5794                           
  5795                           ;src/driver/adf4351.c: 207:  } else {
  5796  002172  D010               	goto	l7641
  5797  002174                     l7639:
  5798                           
  5799                           ;src/driver/adf4351.c: 209:   frac = 0;
  5800  002174  0E00               	movlw	0
  5801  002176  6E34               	movwf	adf4351_calc_counters@frac^0,c
  5802  002178  0E00               	movlw	0
  5803  00217A  6E35               	movwf	(adf4351_calc_counters@frac+1)^0,c
  5804  00217C  0E00               	movlw	0
  5805  00217E  6E36               	movwf	(adf4351_calc_counters@frac+2)^0,c
  5806  002180  0E00               	movlw	0
  5807  002182  6E37               	movwf	(adf4351_calc_counters@frac+3)^0,c
  5808                           
  5809                           ;src/driver/adf4351.c: 210:   mod = 2;
  5810  002184  0E02               	movlw	2
  5811  002186  6E30               	movwf	adf4351_calc_counters@mod^0,c
  5812  002188  0E00               	movlw	0
  5813  00218A  6E31               	movwf	(adf4351_calc_counters@mod+1)^0,c
  5814  00218C  0E00               	movlw	0
  5815  00218E  6E32               	movwf	(adf4351_calc_counters@mod+2)^0,c
  5816  002190  0E00               	movlw	0
  5817  002192  6E33               	movwf	(adf4351_calc_counters@mod+3)^0,c
  5818  002194                     l7641:
  5819                           
  5820                           ;src/driver/adf4351.c: 215:  ctx->reg0.integer = integer;
  5821  002194  EE20 F002          	lfsr	2,2
  5822  002198  5022               	movf	adf4351_calc_counters@ctx^0,w,c
  5823  00219A  26D9               	addwf	fsr2l,f,c
  5824  00219C  5023               	movf	(adf4351_calc_counters@ctx+1)^0,w,c
  5825  00219E  22DA               	addwfc	fsr2h,f,c
  5826  0021A0  C02C  FFDE         	movff	adf4351_calc_counters@integer,postinc2
  5827  0021A4  C02D  FFDD         	movff	adf4351_calc_counters@integer+1,postdec2
  5828                           
  5829                           ;src/driver/adf4351.c: 216:  ctx->reg0.frac = frac;
  5830  0021A8  EE20 F004          	lfsr	2,4
  5831  0021AC  5022               	movf	adf4351_calc_counters@ctx^0,w,c
  5832  0021AE  26D9               	addwf	fsr2l,f,c
  5833  0021B0  5023               	movf	(adf4351_calc_counters@ctx+1)^0,w,c
  5834  0021B2  22DA               	addwfc	fsr2h,f,c
  5835  0021B4  C034  FFDE         	movff	adf4351_calc_counters@frac,postinc2
  5836  0021B8  C035  FFDD         	movff	adf4351_calc_counters@frac+1,postdec2
  5837                           
  5838                           ;src/driver/adf4351.c: 217:     ctx->reg1.mod = mod;
  5839  0021BC  EE20 F009          	lfsr	2,9
  5840  0021C0  5022               	movf	adf4351_calc_counters@ctx^0,w,c
  5841  0021C2  26D9               	addwf	fsr2l,f,c
  5842  0021C4  5023               	movf	(adf4351_calc_counters@ctx+1)^0,w,c
  5843  0021C6  22DA               	addwfc	fsr2h,f,c
  5844  0021C8  C030  FFDE         	movff	adf4351_calc_counters@mod,postinc2
  5845  0021CC  C031  FFDD         	movff	adf4351_calc_counters@mod+1,postdec2
  5846                           
  5847                           ;src/driver/adf4351.c: 218:     ctx->reg2.ldf = frac?0:1;
  5848  0021D0  EE20 F013          	lfsr	2,19
  5849  0021D4  5022               	movf	adf4351_calc_counters@ctx^0,w,c
  5850  0021D6  26D9               	addwf	fsr2l,f,c
  5851  0021D8  5023               	movf	(adf4351_calc_counters@ctx+1)^0,w,c
  5852  0021DA  22DA               	addwfc	fsr2h,f,c
  5853  0021DC  5034               	movf	adf4351_calc_counters@frac^0,w,c
  5854  0021DE  1035               	iorwf	(adf4351_calc_counters@frac+1)^0,w,c
  5855  0021E0  1036               	iorwf	(adf4351_calc_counters@frac+2)^0,w,c
  5856  0021E2  1037               	iorwf	(adf4351_calc_counters@frac+3)^0,w,c
  5857  0021E4  A4D8               	btfss	status,2,c
  5858  0021E6  D002               	goto	u10290
  5859  0021E8  0E01               	movlw	1
  5860  0021EA  D001               	goto	u10300
  5861  0021EC                     u10290:
  5862  0021EC  0E00               	movlw	0
  5863  0021EE                     u10300:
  5864  0021EE  6EDF               	movwf	indf2,c
  5865  0021F0  0012               	return		;funcret
  5866  0021F2                     __end_of_adf4351_calc_counters:
  5867                           	opt callstack 0
  5868                           
  5869 ;; *************** function _gcd *****************
  5870 ;; Defined at:
  5871 ;;		line 411 in file "src/driver/adf4351.c"
  5872 ;; Parameters:    Size  Location     Type
  5873 ;;  a               4   21[COMRAM] unsigned long 
  5874 ;;  b               4   25[COMRAM] unsigned long 
  5875 ;; Auto vars:     Size  Location     Type
  5876 ;;  c               4   29[COMRAM] unsigned long 
  5877 ;; Return value:  Size  Location     Type
  5878 ;;                  4   21[COMRAM] unsigned long 
  5879 ;; Registers used:
  5880 ;;		wreg, status,2, status,0, cstack
  5881 ;; Tracked objects:
  5882 ;;		On entry : 0/0
  5883 ;;		On exit  : 0/0
  5884 ;;		Unchanged: 0/0
  5885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5886 ;;      Params:         8       0       0       0       0       0       0
  5887 ;;      Locals:         4       0       0       0       0       0       0
  5888 ;;      Temps:          0       0       0       0       0       0       0
  5889 ;;      Totals:        12       0       0       0       0       0       0
  5890 ;;Total ram usage:       12 bytes
  5891 ;; Hardware stack levels used:    1
  5892 ;; Hardware stack levels required when called:    3
  5893 ;; This function calls:
  5894 ;;		___llmod
  5895 ;; This function is called by:
  5896 ;;		_adf4351_calc_counters
  5897 ;; This function uses a non-reentrant model
  5898 ;;
  5899                           
  5900                           	psect	text21
  5901  0039AC                     __ptext21:
  5902                           	opt callstack 0
  5903  0039AC                     _gcd:
  5904                           	opt callstack 23
  5905                           
  5906                           ;src/driver/adf4351.c: 411: static __attribute__((inline)) u32 gcd(u32 a, u32 b);src/dri
      +                          ver/adf4351.c: 412: {;src/driver/adf4351.c: 413:     while((a%b) != 0) {
  5907                           
  5908                           ;incstack = 0
  5909  0039AC  D045               	goto	l144
  5910  0039AE                     l145:
  5911                           
  5912                           ;src/driver/adf4351.c: 414:         u32 c = a;
  5913  0039AE  C016  F01E         	movff	gcd@a,gcd@c
  5914  0039B2  C017  F01F         	movff	gcd@a+1,gcd@c+1
  5915  0039B6  C018  F020         	movff	gcd@a+2,gcd@c+2
  5916  0039BA  C019  F021         	movff	gcd@a+3,gcd@c+3
  5917                           
  5918                           ;src/driver/adf4351.c: 416:         if(a < b) {
  5919  0039BE  501A               	movf	gcd@b^0,w,c
  5920  0039C0  5C16               	subwf	gcd@a^0,w,c
  5921  0039C2  501B               	movf	(gcd@b+1)^0,w,c
  5922  0039C4  5817               	subwfb	(gcd@a+1)^0,w,c
  5923  0039C6  501C               	movf	(gcd@b+2)^0,w,c
  5924  0039C8  5818               	subwfb	(gcd@a+2)^0,w,c
  5925  0039CA  501D               	movf	(gcd@b+3)^0,w,c
  5926  0039CC  5819               	subwfb	(gcd@a+3)^0,w,c
  5927  0039CE  B0D8               	btfsc	status,0,c
  5928  0039D0  D011               	goto	l146
  5929                           
  5930                           ;src/driver/adf4351.c: 417:             a = b;
  5931  0039D2  C01A  F016         	movff	gcd@b,gcd@a
  5932  0039D6  C01B  F017         	movff	gcd@b+1,gcd@a+1
  5933  0039DA  C01C  F018         	movff	gcd@b+2,gcd@a+2
  5934  0039DE  C01D  F019         	movff	gcd@b+3,gcd@a+3
  5935                           
  5936                           ;src/driver/adf4351.c: 418:             b = c;
  5937  0039E2  C01E  F01A         	movff	gcd@c,gcd@b
  5938  0039E6  C01F  F01B         	movff	gcd@c+1,gcd@b+1
  5939  0039EA  C020  F01C         	movff	gcd@c+2,gcd@b+2
  5940  0039EE  C021  F01D         	movff	gcd@c+3,gcd@b+3
  5941                           
  5942                           ;src/driver/adf4351.c: 419:         } else {
  5943  0039F2  D022               	goto	l144
  5944  0039F4                     l146:
  5945                           
  5946                           ;src/driver/adf4351.c: 420:             a = b;
  5947  0039F4  C01A  F016         	movff	gcd@b,gcd@a
  5948  0039F8  C01B  F017         	movff	gcd@b+1,gcd@a+1
  5949  0039FC  C01C  F018         	movff	gcd@b+2,gcd@a+2
  5950  003A00  C01D  F019         	movff	gcd@b+3,gcd@a+3
  5951                           
  5952                           ;src/driver/adf4351.c: 421:             b = c%b;
  5953  003A04  C01E  F00D         	movff	gcd@c,___llmod@dividend
  5954  003A08  C01F  F00E         	movff	gcd@c+1,___llmod@dividend+1
  5955  003A0C  C020  F00F         	movff	gcd@c+2,___llmod@dividend+2
  5956  003A10  C021  F010         	movff	gcd@c+3,___llmod@dividend+3
  5957  003A14  C01A  F011         	movff	gcd@b,___llmod@divisor
  5958  003A18  C01B  F012         	movff	gcd@b+1,___llmod@divisor+1
  5959  003A1C  C01C  F013         	movff	gcd@b+2,___llmod@divisor+2
  5960  003A20  C01D  F014         	movff	gcd@b+3,___llmod@divisor+3
  5961  003A24  EC53  F024         	call	___llmod	;wreg free
  5962  003A28  C00D  F01A         	movff	?___llmod,gcd@b
  5963  003A2C  C00E  F01B         	movff	?___llmod+1,gcd@b+1
  5964  003A30  C00F  F01C         	movff	?___llmod+2,gcd@b+2
  5965  003A34  C010  F01D         	movff	?___llmod+3,gcd@b+3
  5966  003A38                     l144:
  5967                           
  5968                           ;src/driver/adf4351.c: 413:     while((a%b) != 0) {
  5969  003A38  C016  F00D         	movff	gcd@a,___llmod@dividend
  5970  003A3C  C017  F00E         	movff	gcd@a+1,___llmod@dividend+1
  5971  003A40  C018  F00F         	movff	gcd@a+2,___llmod@dividend+2
  5972  003A44  C019  F010         	movff	gcd@a+3,___llmod@dividend+3
  5973  003A48  C01A  F011         	movff	gcd@b,___llmod@divisor
  5974  003A4C  C01B  F012         	movff	gcd@b+1,___llmod@divisor+1
  5975  003A50  C01C  F013         	movff	gcd@b+2,___llmod@divisor+2
  5976  003A54  C01D  F014         	movff	gcd@b+3,___llmod@divisor+3
  5977  003A58  EC53  F024         	call	___llmod	;wreg free
  5978  003A5C  500D               	movf	?___llmod^0,w,c
  5979  003A5E  100E               	iorwf	(?___llmod+1)^0,w,c
  5980  003A60  100F               	iorwf	(?___llmod+2)^0,w,c
  5981  003A62  1010               	iorwf	(?___llmod+3)^0,w,c
  5982  003A64  A4D8               	btfss	status,2,c
  5983  003A66  D7A3               	goto	l145
  5984                           
  5985                           ;src/driver/adf4351.c: 425:     return b;
  5986  003A68  C01A  F016         	movff	gcd@b,?_gcd
  5987  003A6C  C01B  F017         	movff	gcd@b+1,?_gcd+1
  5988  003A70  C01C  F018         	movff	gcd@b+2,?_gcd+2
  5989  003A74  C01D  F019         	movff	gcd@b+3,?_gcd+3
  5990  003A78  0012               	return		;funcret
  5991  003A7A                     __end_of_gcd:
  5992                           	opt callstack 0
  5993                           
  5994 ;; *************** function ___llmod *****************
  5995 ;; Defined at:
  5996 ;;		line 7 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/llmod.c"
  5997 ;; Parameters:    Size  Location     Type
  5998 ;;  dividend        4   12[COMRAM] unsigned long 
  5999 ;;  divisor         4   16[COMRAM] unsigned long 
  6000 ;; Auto vars:     Size  Location     Type
  6001 ;;  counter         1   20[COMRAM] unsigned char 
  6002 ;; Return value:  Size  Location     Type
  6003 ;;                  4   12[COMRAM] unsigned long 
  6004 ;; Registers used:
  6005 ;;		wreg, status,2, status,0
  6006 ;; Tracked objects:
  6007 ;;		On entry : 0/0
  6008 ;;		On exit  : 0/0
  6009 ;;		Unchanged: 0/0
  6010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6011 ;;      Params:         8       0       0       0       0       0       0
  6012 ;;      Locals:         1       0       0       0       0       0       0
  6013 ;;      Temps:          0       0       0       0       0       0       0
  6014 ;;      Totals:         9       0       0       0       0       0       0
  6015 ;;Total ram usage:        9 bytes
  6016 ;; Hardware stack levels used:    1
  6017 ;; Hardware stack levels required when called:    2
  6018 ;; This function calls:
  6019 ;;		Nothing
  6020 ;; This function is called by:
  6021 ;;		_adf4351_calc_counters
  6022 ;;		_adf4351_calc_rcnt_block
  6023 ;;		_gcd
  6024 ;; This function uses a non-reentrant model
  6025 ;;
  6026                           
  6027                           	psect	text22
  6028  0048A6                     __ptext22:
  6029                           	opt callstack 0
  6030  0048A6                     ___llmod:
  6031                           	opt callstack 24
  6032                           
  6033                           ;incstack = 0
  6034  0048A6  5011               	movf	___llmod@divisor^0,w,c
  6035  0048A8  1012               	iorwf	(___llmod@divisor+1)^0,w,c
  6036  0048AA  1013               	iorwf	(___llmod@divisor+2)^0,w,c
  6037  0048AC  1014               	iorwf	(___llmod@divisor+3)^0,w,c
  6038  0048AE  B4D8               	btfsc	status,2,c
  6039  0048B0  D024               	goto	l1301
  6040  0048B2  0E01               	movlw	1
  6041  0048B4  6E15               	movwf	___llmod@counter^0,c
  6042  0048B6  D006               	goto	l6935
  6043  0048B8                     l6933:
  6044  0048B8  90D8               	bcf	status,0,c
  6045  0048BA  3611               	rlcf	___llmod@divisor^0,f,c
  6046  0048BC  3612               	rlcf	(___llmod@divisor+1)^0,f,c
  6047  0048BE  3613               	rlcf	(___llmod@divisor+2)^0,f,c
  6048  0048C0  3614               	rlcf	(___llmod@divisor+3)^0,f,c
  6049  0048C2  2A15               	incf	___llmod@counter^0,f,c
  6050  0048C4                     l6935:
  6051  0048C4  AE14               	btfss	(___llmod@divisor+3)^0,7,c
  6052  0048C6  D7F8               	goto	l6933
  6053  0048C8                     u8920:
  6054  0048C8  5011               	movf	___llmod@divisor^0,w,c
  6055  0048CA  5C0D               	subwf	___llmod@dividend^0,w,c
  6056  0048CC  5012               	movf	(___llmod@divisor+1)^0,w,c
  6057  0048CE  580E               	subwfb	(___llmod@dividend+1)^0,w,c
  6058  0048D0  5013               	movf	(___llmod@divisor+2)^0,w,c
  6059  0048D2  580F               	subwfb	(___llmod@dividend+2)^0,w,c
  6060  0048D4  5014               	movf	(___llmod@divisor+3)^0,w,c
  6061  0048D6  5810               	subwfb	(___llmod@dividend+3)^0,w,c
  6062  0048D8  A0D8               	btfss	status,0,c
  6063  0048DA  D008               	goto	l6941
  6064  0048DC  5011               	movf	___llmod@divisor^0,w,c
  6065  0048DE  5E0D               	subwf	___llmod@dividend^0,f,c
  6066  0048E0  5012               	movf	(___llmod@divisor+1)^0,w,c
  6067  0048E2  5A0E               	subwfb	(___llmod@dividend+1)^0,f,c
  6068  0048E4  5013               	movf	(___llmod@divisor+2)^0,w,c
  6069  0048E6  5A0F               	subwfb	(___llmod@dividend+2)^0,f,c
  6070  0048E8  5014               	movf	(___llmod@divisor+3)^0,w,c
  6071  0048EA  5A10               	subwfb	(___llmod@dividend+3)^0,f,c
  6072  0048EC                     l6941:
  6073  0048EC  90D8               	bcf	status,0,c
  6074  0048EE  3214               	rrcf	(___llmod@divisor+3)^0,f,c
  6075  0048F0  3213               	rrcf	(___llmod@divisor+2)^0,f,c
  6076  0048F2  3212               	rrcf	(___llmod@divisor+1)^0,f,c
  6077  0048F4  3211               	rrcf	___llmod@divisor^0,f,c
  6078  0048F6  2E15               	decfsz	___llmod@counter^0,f,c
  6079  0048F8  D7E7               	goto	u8920
  6080  0048FA                     l1301:
  6081  0048FA  C00D  F00D         	movff	___llmod@dividend,?___llmod
  6082  0048FE  C00E  F00E         	movff	___llmod@dividend+1,?___llmod+1
  6083  004902  C00F  F00F         	movff	___llmod@dividend+2,?___llmod+2
  6084  004906  C010  F010         	movff	___llmod@dividend+3,?___llmod+3
  6085  00490A  0012               	return		;funcret
  6086  00490C                     __end_of___llmod:
  6087                           	opt callstack 0
  6088                           
  6089 ;; *************** function ___lldiv *****************
  6090 ;; Defined at:
  6091 ;;		line 7 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/__lldiv.c"
  6092 ;; Parameters:    Size  Location     Type
  6093 ;;  dividend        4   12[COMRAM] unsigned long 
  6094 ;;  divisor         4   16[COMRAM] unsigned long 
  6095 ;; Auto vars:     Size  Location     Type
  6096 ;;  quotient        4   20[COMRAM] unsigned long 
  6097 ;;  counter         1   24[COMRAM] unsigned char 
  6098 ;; Return value:  Size  Location     Type
  6099 ;;                  4   12[COMRAM] unsigned long 
  6100 ;; Registers used:
  6101 ;;		wreg, status,2, status,0
  6102 ;; Tracked objects:
  6103 ;;		On entry : 0/0
  6104 ;;		On exit  : 0/0
  6105 ;;		Unchanged: 0/0
  6106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6107 ;;      Params:         8       0       0       0       0       0       0
  6108 ;;      Locals:         5       0       0       0       0       0       0
  6109 ;;      Temps:          0       0       0       0       0       0       0
  6110 ;;      Totals:        13       0       0       0       0       0       0
  6111 ;;Total ram usage:       13 bytes
  6112 ;; Hardware stack levels used:    1
  6113 ;; Hardware stack levels required when called:    2
  6114 ;; This function calls:
  6115 ;;		Nothing
  6116 ;; This function is called by:
  6117 ;;		_adf4351_calc_counters
  6118 ;;		_adf4351_calc_rcnt_block
  6119 ;;		_usart_init
  6120 ;; This function uses a non-reentrant model
  6121 ;;
  6122                           
  6123                           	psect	text23
  6124  004490                     __ptext23:
  6125                           	opt callstack 0
  6126  004490                     ___lldiv:
  6127                           	opt callstack 27
  6128                           
  6129                           ;incstack = 0
  6130  004490  0E00               	movlw	0
  6131  004492  6E15               	movwf	___lldiv@quotient^0,c
  6132  004494  0E00               	movlw	0
  6133  004496  6E16               	movwf	(___lldiv@quotient+1)^0,c
  6134  004498  0E00               	movlw	0
  6135  00449A  6E17               	movwf	(___lldiv@quotient+2)^0,c
  6136  00449C  0E00               	movlw	0
  6137  00449E  6E18               	movwf	(___lldiv@quotient+3)^0,c
  6138  0044A0  5011               	movf	___lldiv@divisor^0,w,c
  6139  0044A2  1012               	iorwf	(___lldiv@divisor+1)^0,w,c
  6140  0044A4  1013               	iorwf	(___lldiv@divisor+2)^0,w,c
  6141  0044A6  1014               	iorwf	(___lldiv@divisor+3)^0,w,c
  6142  0044A8  B4D8               	btfsc	status,2,c
  6143  0044AA  D02A               	goto	l908
  6144  0044AC  0E01               	movlw	1
  6145  0044AE  6E19               	movwf	___lldiv@counter^0,c
  6146  0044B0  D006               	goto	l7103
  6147  0044B2                     l7101:
  6148  0044B2  90D8               	bcf	status,0,c
  6149  0044B4  3611               	rlcf	___lldiv@divisor^0,f,c
  6150  0044B6  3612               	rlcf	(___lldiv@divisor+1)^0,f,c
  6151  0044B8  3613               	rlcf	(___lldiv@divisor+2)^0,f,c
  6152  0044BA  3614               	rlcf	(___lldiv@divisor+3)^0,f,c
  6153  0044BC  2A19               	incf	___lldiv@counter^0,f,c
  6154  0044BE                     l7103:
  6155  0044BE  AE14               	btfss	(___lldiv@divisor+3)^0,7,c
  6156  0044C0  D7F8               	goto	l7101
  6157  0044C2                     u9390:
  6158  0044C2  90D8               	bcf	status,0,c
  6159  0044C4  3615               	rlcf	___lldiv@quotient^0,f,c
  6160  0044C6  3616               	rlcf	(___lldiv@quotient+1)^0,f,c
  6161  0044C8  3617               	rlcf	(___lldiv@quotient+2)^0,f,c
  6162  0044CA  3618               	rlcf	(___lldiv@quotient+3)^0,f,c
  6163  0044CC  5011               	movf	___lldiv@divisor^0,w,c
  6164  0044CE  5C0D               	subwf	___lldiv@dividend^0,w,c
  6165  0044D0  5012               	movf	(___lldiv@divisor+1)^0,w,c
  6166  0044D2  580E               	subwfb	(___lldiv@dividend+1)^0,w,c
  6167  0044D4  5013               	movf	(___lldiv@divisor+2)^0,w,c
  6168  0044D6  580F               	subwfb	(___lldiv@dividend+2)^0,w,c
  6169  0044D8  5014               	movf	(___lldiv@divisor+3)^0,w,c
  6170  0044DA  5810               	subwfb	(___lldiv@dividend+3)^0,w,c
  6171  0044DC  A0D8               	btfss	status,0,c
  6172  0044DE  D009               	goto	l7113
  6173  0044E0  5011               	movf	___lldiv@divisor^0,w,c
  6174  0044E2  5E0D               	subwf	___lldiv@dividend^0,f,c
  6175  0044E4  5012               	movf	(___lldiv@divisor+1)^0,w,c
  6176  0044E6  5A0E               	subwfb	(___lldiv@dividend+1)^0,f,c
  6177  0044E8  5013               	movf	(___lldiv@divisor+2)^0,w,c
  6178  0044EA  5A0F               	subwfb	(___lldiv@dividend+2)^0,f,c
  6179  0044EC  5014               	movf	(___lldiv@divisor+3)^0,w,c
  6180  0044EE  5A10               	subwfb	(___lldiv@dividend+3)^0,f,c
  6181  0044F0  8015               	bsf	___lldiv@quotient^0,0,c
  6182  0044F2                     l7113:
  6183  0044F2  90D8               	bcf	status,0,c
  6184  0044F4  3214               	rrcf	(___lldiv@divisor+3)^0,f,c
  6185  0044F6  3213               	rrcf	(___lldiv@divisor+2)^0,f,c
  6186  0044F8  3212               	rrcf	(___lldiv@divisor+1)^0,f,c
  6187  0044FA  3211               	rrcf	___lldiv@divisor^0,f,c
  6188  0044FC  2E19               	decfsz	___lldiv@counter^0,f,c
  6189  0044FE  D7E1               	goto	u9390
  6190  004500                     l908:
  6191  004500  C015  F00D         	movff	___lldiv@quotient,?___lldiv
  6192  004504  C016  F00E         	movff	___lldiv@quotient+1,?___lldiv+1
  6193  004508  C017  F00F         	movff	___lldiv@quotient+2,?___lldiv+2
  6194  00450C  C018  F010         	movff	___lldiv@quotient+3,?___lldiv+3
  6195  004510  0012               	return		;funcret
  6196  004512                     __end_of___lldiv:
  6197                           	opt callstack 0
  6198                           
  6199 ;; *************** function _init_gpios *****************
  6200 ;; Defined at:
  6201 ;;		line 492 in file "src/main.c"
  6202 ;; Parameters:    Size  Location     Type
  6203 ;;		None
  6204 ;; Auto vars:     Size  Location     Type
  6205 ;;		None
  6206 ;; Return value:  Size  Location     Type
  6207 ;;                  1    wreg      void 
  6208 ;; Registers used:
  6209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6210 ;; Tracked objects:
  6211 ;;		On entry : 0/0
  6212 ;;		On exit  : 0/0
  6213 ;;		Unchanged: 0/0
  6214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6215 ;;      Params:         0       0       0       0       0       0       0
  6216 ;;      Locals:         0       0       0       0       0       0       0
  6217 ;;      Temps:          3       0       0       0       0       0       0
  6218 ;;      Totals:         3       0       0       0       0       0       0
  6219 ;;Total ram usage:        3 bytes
  6220 ;; Hardware stack levels used:    1
  6221 ;; Hardware stack levels required when called:    2
  6222 ;; This function calls:
  6223 ;;		Nothing
  6224 ;; This function is called by:
  6225 ;;		_main
  6226 ;; This function uses a non-reentrant model
  6227 ;;
  6228                           
  6229                           	psect	text24
  6230  000012                     __ptext24:
  6231                           	opt callstack 0
  6232  000012                     _init_gpios:
  6233                           	opt callstack 28
  6234                           
  6235                           ;src/main.c: 494:     ADCON1bits.PCFG = 0xF;
  6236                           
  6237                           ;incstack = 0
  6238  000012  0E0F               	movlw	15
  6239  000014  12C1               	iorwf	193,f,c	;volatile
  6240                           
  6241                           ;src/main.c: 500:     *((PIN_ADF_LOCK)->pTRIS) |= (PIN_ADF_LOCK)->mask;
  6242  000016  0E19               	movlw	low (_PIN_ADF_LOCK_DEF+4)
  6243  000018  6EF6               	movwf	tblptrl,c
  6244  00001A  0E7D               	movlw	high (_PIN_ADF_LOCK_DEF+4)
  6245  00001C  6EF7               	movwf	tblptrh,c
  6246  00001E                     	if	0	;tblptru may be non-zero
  6247  00001E                     	endif
  6248  00001E                     	if	0	;tblptru may be non-zero
  6249  00001E                     	endif
  6250  00001E  0008               	tblrd		*
  6251  000020  CFF5 F00D          	movff	tablat,??_init_gpios
  6252  000024  0E17               	movlw	low (_PIN_ADF_LOCK_DEF+2)
  6253  000026  6EF6               	movwf	tblptrl,c
  6254  000028  0E7D               	movlw	high (_PIN_ADF_LOCK_DEF+2)
  6255  00002A  6EF7               	movwf	tblptrh,c
  6256  00002C                     	if	0	;tblptru may be non-zero
  6257  00002C                     	endif
  6258  00002C                     	if	0	;tblptru may be non-zero
  6259  00002C                     	endif
  6260  00002C  0009               	tblrd		*+
  6261  00002E  CFF5 FFD9          	movff	tablat,fsr2l
  6262  000032  0009               	tblrd		*+
  6263  000034  CFF5 FFDA          	movff	tablat,fsr2h
  6264  000038  500D               	movf	??_init_gpios^0,w,c
  6265  00003A  12DF               	iorwf	indf2,f,c
  6266                           
  6267                           ;src/main.c: 503:     *((PIN_ADF_CE)->pPORT) &= ~(PIN_ADF_CE)->mask;
  6268  00003C  0E14               	movlw	low (_PIN_ADF_CE_DEF+4)
  6269  00003E  6EF6               	movwf	tblptrl,c
  6270  000040  0E7D               	movlw	high (_PIN_ADF_CE_DEF+4)
  6271  000042  6EF7               	movwf	tblptrh,c
  6272  000044                     	if	0	;tblptru may be non-zero
  6273  000044                     	endif
  6274  000044                     	if	0	;tblptru may be non-zero
  6275  000044                     	endif
  6276  000044  0008               	tblrd		*
  6277  000046  50F5               	movf	tablat,w,c
  6278  000048  0AFF               	xorlw	255
  6279  00004A  6E0D               	movwf	??_init_gpios^0,c
  6280  00004C  0E10               	movlw	low _PIN_ADF_CE_DEF
  6281  00004E  6EF6               	movwf	tblptrl,c
  6282  000050                     	if	1	;There is more than 1 active tblptr byte
  6283  000050  0E7D               	movlw	high _PIN_ADF_CE_DEF
  6284  000052  6EF7               	movwf	tblptrh,c
  6285  000054                     	endif
  6286  000054                     	if	0	;There are less than 3 active tblptr bytes
  6287  000054                     	endif
  6288  000054  0009               	tblrd		*+
  6289  000056  CFF5 F00E          	movff	tablat,??_init_gpios+1
  6290  00005A  0009               	tblrd		*+
  6291  00005C  CFF5 F00F          	movff	tablat,??_init_gpios+2
  6292  000060  C00E  FFD9         	movff	??_init_gpios+1,fsr2l
  6293  000064  C00F  FFDA         	movff	??_init_gpios+2,fsr2h
  6294  000068  500D               	movf	??_init_gpios^0,w,c
  6295  00006A  16DF               	andwf	indf2,f,c
  6296                           
  6297                           ;src/main.c: 504:     *((PIN_ADF_CE)->pTRIS) &= ~(PIN_ADF_CE)->mask;
  6298  00006C  0E14               	movlw	low (_PIN_ADF_CE_DEF+4)
  6299  00006E  6EF6               	movwf	tblptrl,c
  6300  000070  0E7D               	movlw	high (_PIN_ADF_CE_DEF+4)
  6301  000072  6EF7               	movwf	tblptrh,c
  6302  000074                     	if	0	;tblptru may be non-zero
  6303  000074                     	endif
  6304  000074                     	if	0	;tblptru may be non-zero
  6305  000074                     	endif
  6306  000074  0008               	tblrd		*
  6307  000076  50F5               	movf	tablat,w,c
  6308  000078  0AFF               	xorlw	255
  6309  00007A  6E0D               	movwf	??_init_gpios^0,c
  6310  00007C  0E12               	movlw	low (_PIN_ADF_CE_DEF+2)
  6311  00007E  6EF6               	movwf	tblptrl,c
  6312  000080  0E7D               	movlw	high (_PIN_ADF_CE_DEF+2)
  6313  000082  6EF7               	movwf	tblptrh,c
  6314  000084                     	if	0	;tblptru may be non-zero
  6315  000084                     	endif
  6316  000084                     	if	0	;tblptru may be non-zero
  6317  000084                     	endif
  6318  000084  0009               	tblrd		*+
  6319  000086  CFF5 FFD9          	movff	tablat,fsr2l
  6320  00008A  0009               	tblrd		*+
  6321  00008C  CFF5 FFDA          	movff	tablat,fsr2h
  6322  000090  500D               	movf	??_init_gpios^0,w,c
  6323  000092  16DF               	andwf	indf2,f,c
  6324                           
  6325                           ;src/main.c: 507:     *((PIN_ADF_LE)->pPORT) &= ~(PIN_ADF_LE)->mask;
  6326  000094  0E0F               	movlw	low (_PIN_ADF_LE_DEF+4)
  6327  000096  6EF6               	movwf	tblptrl,c
  6328  000098  0E7D               	movlw	high (_PIN_ADF_LE_DEF+4)
  6329  00009A  6EF7               	movwf	tblptrh,c
  6330  00009C                     	if	0	;tblptru may be non-zero
  6331  00009C                     	endif
  6332  00009C                     	if	0	;tblptru may be non-zero
  6333  00009C                     	endif
  6334  00009C  0008               	tblrd		*
  6335  00009E  50F5               	movf	tablat,w,c
  6336  0000A0  0AFF               	xorlw	255
  6337  0000A2  6E0D               	movwf	??_init_gpios^0,c
  6338  0000A4  0E0B               	movlw	low _PIN_ADF_LE_DEF
  6339  0000A6  6EF6               	movwf	tblptrl,c
  6340  0000A8                     	if	1	;There is more than 1 active tblptr byte
  6341  0000A8  0E7D               	movlw	high _PIN_ADF_LE_DEF
  6342  0000AA  6EF7               	movwf	tblptrh,c
  6343  0000AC                     	endif
  6344  0000AC                     	if	0	;There are less than 3 active tblptr bytes
  6345  0000AC                     	endif
  6346  0000AC  0009               	tblrd		*+
  6347  0000AE  CFF5 F00E          	movff	tablat,??_init_gpios+1
  6348  0000B2  0009               	tblrd		*+
  6349  0000B4  CFF5 F00F          	movff	tablat,??_init_gpios+2
  6350  0000B8  C00E  FFD9         	movff	??_init_gpios+1,fsr2l
  6351  0000BC  C00F  FFDA         	movff	??_init_gpios+2,fsr2h
  6352  0000C0  500D               	movf	??_init_gpios^0,w,c
  6353  0000C2  16DF               	andwf	indf2,f,c
  6354                           
  6355                           ;src/main.c: 508:     *((PIN_ADF_LE)->pTRIS) &= ~(PIN_ADF_LE)->mask;
  6356  0000C4  0E0F               	movlw	low (_PIN_ADF_LE_DEF+4)
  6357  0000C6  6EF6               	movwf	tblptrl,c
  6358  0000C8  0E7D               	movlw	high (_PIN_ADF_LE_DEF+4)
  6359  0000CA  6EF7               	movwf	tblptrh,c
  6360  0000CC                     	if	0	;tblptru may be non-zero
  6361  0000CC                     	endif
  6362  0000CC                     	if	0	;tblptru may be non-zero
  6363  0000CC                     	endif
  6364  0000CC  0008               	tblrd		*
  6365  0000CE  50F5               	movf	tablat,w,c
  6366  0000D0  0AFF               	xorlw	255
  6367  0000D2  6E0D               	movwf	??_init_gpios^0,c
  6368  0000D4  0E0D               	movlw	low (_PIN_ADF_LE_DEF+2)
  6369  0000D6  6EF6               	movwf	tblptrl,c
  6370  0000D8  0E7D               	movlw	high (_PIN_ADF_LE_DEF+2)
  6371  0000DA  6EF7               	movwf	tblptrh,c
  6372  0000DC                     	if	0	;tblptru may be non-zero
  6373  0000DC                     	endif
  6374  0000DC                     	if	0	;tblptru may be non-zero
  6375  0000DC                     	endif
  6376  0000DC  0009               	tblrd		*+
  6377  0000DE  CFF5 FFD9          	movff	tablat,fsr2l
  6378  0000E2  0009               	tblrd		*+
  6379  0000E4  CFF5 FFDA          	movff	tablat,fsr2h
  6380  0000E8  500D               	movf	??_init_gpios^0,w,c
  6381  0000EA  16DF               	andwf	indf2,f,c
  6382                           
  6383                           ;src/main.c: 511:     *((PIN_SIO_DATA)->pPORT) &= ~(PIN_SIO_DATA)->mask;
  6384  0000EC  0E0A               	movlw	low (_PIN_SIO_DATA_DEF+4)
  6385  0000EE  6EF6               	movwf	tblptrl,c
  6386  0000F0  0E7D               	movlw	high (_PIN_SIO_DATA_DEF+4)
  6387  0000F2  6EF7               	movwf	tblptrh,c
  6388  0000F4                     	if	0	;tblptru may be non-zero
  6389  0000F4                     	endif
  6390  0000F4                     	if	0	;tblptru may be non-zero
  6391  0000F4                     	endif
  6392  0000F4  0008               	tblrd		*
  6393  0000F6  50F5               	movf	tablat,w,c
  6394  0000F8  0AFF               	xorlw	255
  6395  0000FA  6E0D               	movwf	??_init_gpios^0,c
  6396  0000FC  0E06               	movlw	low _PIN_SIO_DATA_DEF
  6397  0000FE  6EF6               	movwf	tblptrl,c
  6398  000100                     	if	1	;There is more than 1 active tblptr byte
  6399  000100  0E7D               	movlw	high _PIN_SIO_DATA_DEF
  6400  000102  6EF7               	movwf	tblptrh,c
  6401  000104                     	endif
  6402  000104                     	if	0	;There are less than 3 active tblptr bytes
  6403  000104                     	endif
  6404  000104  0009               	tblrd		*+
  6405  000106  CFF5 F00E          	movff	tablat,??_init_gpios+1
  6406  00010A  0009               	tblrd		*+
  6407  00010C  CFF5 F00F          	movff	tablat,??_init_gpios+2
  6408  000110  C00E  FFD9         	movff	??_init_gpios+1,fsr2l
  6409  000114  C00F  FFDA         	movff	??_init_gpios+2,fsr2h
  6410  000118  500D               	movf	??_init_gpios^0,w,c
  6411  00011A  16DF               	andwf	indf2,f,c
  6412                           
  6413                           ;src/main.c: 512:     *((PIN_SIO_DATA)->pTRIS) &= ~(PIN_SIO_DATA)->mask;
  6414  00011C  0E0A               	movlw	low (_PIN_SIO_DATA_DEF+4)
  6415  00011E  6EF6               	movwf	tblptrl,c
  6416  000120  0E7D               	movlw	high (_PIN_SIO_DATA_DEF+4)
  6417  000122  6EF7               	movwf	tblptrh,c
  6418  000124                     	if	0	;tblptru may be non-zero
  6419  000124                     	endif
  6420  000124                     	if	0	;tblptru may be non-zero
  6421  000124                     	endif
  6422  000124  0008               	tblrd		*
  6423  000126  50F5               	movf	tablat,w,c
  6424  000128  0AFF               	xorlw	255
  6425  00012A  6E0D               	movwf	??_init_gpios^0,c
  6426  00012C  0E08               	movlw	low (_PIN_SIO_DATA_DEF+2)
  6427  00012E  6EF6               	movwf	tblptrl,c
  6428  000130  0E7D               	movlw	high (_PIN_SIO_DATA_DEF+2)
  6429  000132  6EF7               	movwf	tblptrh,c
  6430  000134                     	if	0	;tblptru may be non-zero
  6431  000134                     	endif
  6432  000134                     	if	0	;tblptru may be non-zero
  6433  000134                     	endif
  6434  000134  0009               	tblrd		*+
  6435  000136  CFF5 FFD9          	movff	tablat,fsr2l
  6436  00013A  0009               	tblrd		*+
  6437  00013C  CFF5 FFDA          	movff	tablat,fsr2h
  6438  000140  500D               	movf	??_init_gpios^0,w,c
  6439  000142  16DF               	andwf	indf2,f,c
  6440                           
  6441                           ;src/main.c: 515:     *((PIN_SIO_CLK)->pPORT) &= ~(PIN_SIO_CLK)->mask;
  6442  000144  0E05               	movlw	low (_PIN_SIO_CLK_DEF+4)
  6443  000146  6EF6               	movwf	tblptrl,c
  6444  000148  0E7D               	movlw	high (_PIN_SIO_CLK_DEF+4)
  6445  00014A  6EF7               	movwf	tblptrh,c
  6446  00014C                     	if	0	;tblptru may be non-zero
  6447  00014C                     	endif
  6448  00014C                     	if	0	;tblptru may be non-zero
  6449  00014C                     	endif
  6450  00014C  0008               	tblrd		*
  6451  00014E  50F5               	movf	tablat,w,c
  6452  000150  0AFF               	xorlw	255
  6453  000152  6E0D               	movwf	??_init_gpios^0,c
  6454  000154  0E01               	movlw	low _PIN_SIO_CLK_DEF
  6455  000156  6EF6               	movwf	tblptrl,c
  6456  000158                     	if	1	;There is more than 1 active tblptr byte
  6457  000158  0E7D               	movlw	high _PIN_SIO_CLK_DEF
  6458  00015A  6EF7               	movwf	tblptrh,c
  6459  00015C                     	endif
  6460  00015C                     	if	0	;There are less than 3 active tblptr bytes
  6461  00015C                     	endif
  6462  00015C  0009               	tblrd		*+
  6463  00015E  CFF5 F00E          	movff	tablat,??_init_gpios+1
  6464  000162  0009               	tblrd		*+
  6465  000164  CFF5 F00F          	movff	tablat,??_init_gpios+2
  6466  000168  C00E  FFD9         	movff	??_init_gpios+1,fsr2l
  6467  00016C  C00F  FFDA         	movff	??_init_gpios+2,fsr2h
  6468  000170  500D               	movf	??_init_gpios^0,w,c
  6469  000172  16DF               	andwf	indf2,f,c
  6470                           
  6471                           ;src/main.c: 516:     *((PIN_SIO_CLK)->pTRIS) &= ~(PIN_SIO_CLK)->mask;
  6472  000174  0E05               	movlw	low (_PIN_SIO_CLK_DEF+4)
  6473  000176  6EF6               	movwf	tblptrl,c
  6474  000178  0E7D               	movlw	high (_PIN_SIO_CLK_DEF+4)
  6475  00017A  6EF7               	movwf	tblptrh,c
  6476  00017C                     	if	0	;tblptru may be non-zero
  6477  00017C                     	endif
  6478  00017C                     	if	0	;tblptru may be non-zero
  6479  00017C                     	endif
  6480  00017C  0008               	tblrd		*
  6481  00017E  50F5               	movf	tablat,w,c
  6482  000180  0AFF               	xorlw	255
  6483  000182  6E0D               	movwf	??_init_gpios^0,c
  6484  000184  0E03               	movlw	low (_PIN_SIO_CLK_DEF+2)
  6485  000186  6EF6               	movwf	tblptrl,c
  6486  000188  0E7D               	movlw	high (_PIN_SIO_CLK_DEF+2)
  6487  00018A  6EF7               	movwf	tblptrh,c
  6488  00018C                     	if	0	;tblptru may be non-zero
  6489  00018C                     	endif
  6490  00018C                     	if	0	;tblptru may be non-zero
  6491  00018C                     	endif
  6492  00018C  0009               	tblrd		*+
  6493  00018E  CFF5 FFD9          	movff	tablat,fsr2l
  6494  000192  0009               	tblrd		*+
  6495  000194  CFF5 FFDA          	movff	tablat,fsr2h
  6496  000198  500D               	movf	??_init_gpios^0,w,c
  6497  00019A  16DF               	andwf	indf2,f,c
  6498                           
  6499                           ;src/main.c: 519:     *((PIN_ADF_FREQ_SEL)->pTRIS) |= (PIN_ADF_FREQ_SEL)->mask;
  6500  00019C  0E00               	movlw	low (_PIN_ADF_FREQ_SEL_DEF+4)
  6501  00019E  6EF6               	movwf	tblptrl,c
  6502  0001A0  0E7D               	movlw	high (_PIN_ADF_FREQ_SEL_DEF+4)
  6503  0001A2  6EF7               	movwf	tblptrh,c
  6504  0001A4                     	if	0	;tblptru may be non-zero
  6505  0001A4                     	endif
  6506  0001A4                     	if	0	;tblptru may be non-zero
  6507  0001A4                     	endif
  6508  0001A4  0008               	tblrd		*
  6509  0001A6  CFF5 F00D          	movff	tablat,??_init_gpios
  6510  0001AA  0EFE               	movlw	low (_PIN_ADF_FREQ_SEL_DEF+2)
  6511  0001AC  6EF6               	movwf	tblptrl,c
  6512  0001AE  0E7C               	movlw	high (_PIN_ADF_FREQ_SEL_DEF+2)
  6513  0001B0  6EF7               	movwf	tblptrh,c
  6514  0001B2                     	if	0	;tblptru may be non-zero
  6515  0001B2                     	endif
  6516  0001B2                     	if	0	;tblptru may be non-zero
  6517  0001B2                     	endif
  6518  0001B2  0009               	tblrd		*+
  6519  0001B4  CFF5 FFD9          	movff	tablat,fsr2l
  6520  0001B8  0009               	tblrd		*+
  6521  0001BA  CFF5 FFDA          	movff	tablat,fsr2h
  6522  0001BE  500D               	movf	??_init_gpios^0,w,c
  6523  0001C0  12DF               	iorwf	indf2,f,c
  6524                           
  6525                           ;src/main.c: 520:     *((PIN_ADF_FREQ_SEL)->pPORT) |= (PIN_ADF_FREQ_SEL)->mask;
  6526  0001C2  0E00               	movlw	low (_PIN_ADF_FREQ_SEL_DEF+4)
  6527  0001C4  6EF6               	movwf	tblptrl,c
  6528  0001C6  0E7D               	movlw	high (_PIN_ADF_FREQ_SEL_DEF+4)
  6529  0001C8  6EF7               	movwf	tblptrh,c
  6530  0001CA                     	if	0	;tblptru may be non-zero
  6531  0001CA                     	endif
  6532  0001CA                     	if	0	;tblptru may be non-zero
  6533  0001CA                     	endif
  6534  0001CA  0008               	tblrd		*
  6535  0001CC  CFF5 F00D          	movff	tablat,??_init_gpios
  6536  0001D0  0EFC               	movlw	low _PIN_ADF_FREQ_SEL_DEF
  6537  0001D2  6EF6               	movwf	tblptrl,c
  6538  0001D4                     	if	1	;There is more than 1 active tblptr byte
  6539  0001D4  0E7C               	movlw	high _PIN_ADF_FREQ_SEL_DEF
  6540  0001D6  6EF7               	movwf	tblptrh,c
  6541  0001D8                     	endif
  6542  0001D8                     	if	0	;There are less than 3 active tblptr bytes
  6543  0001D8                     	endif
  6544  0001D8  0009               	tblrd		*+
  6545  0001DA  CFF5 F00E          	movff	tablat,??_init_gpios+1
  6546  0001DE  0009               	tblrd		*+
  6547  0001E0  CFF5 F00F          	movff	tablat,??_init_gpios+2
  6548  0001E4  C00E  FFD9         	movff	??_init_gpios+1,fsr2l
  6549  0001E8  C00F  FFDA         	movff	??_init_gpios+2,fsr2h
  6550  0001EC  500D               	movf	??_init_gpios^0,w,c
  6551  0001EE  12DF               	iorwf	indf2,f,c
  6552                           
  6553                           ;src/main.c: 523:     *((PIN_PTT_INPUT)->pTRIS) |= (PIN_PTT_INPUT)->mask;
  6554  0001F0  0EFB               	movlw	low (_PIN_PTT_INPUT_DEF+4)
  6555  0001F2  6EF6               	movwf	tblptrl,c
  6556  0001F4  0E7C               	movlw	high (_PIN_PTT_INPUT_DEF+4)
  6557  0001F6  6EF7               	movwf	tblptrh,c
  6558  0001F8                     	if	0	;tblptru may be non-zero
  6559  0001F8                     	endif
  6560  0001F8                     	if	0	;tblptru may be non-zero
  6561  0001F8                     	endif
  6562  0001F8  0008               	tblrd		*
  6563  0001FA  CFF5 F00D          	movff	tablat,??_init_gpios
  6564  0001FE  0EF9               	movlw	low (_PIN_PTT_INPUT_DEF+2)
  6565  000200  6EF6               	movwf	tblptrl,c
  6566  000202  0E7C               	movlw	high (_PIN_PTT_INPUT_DEF+2)
  6567  000204  6EF7               	movwf	tblptrh,c
  6568  000206                     	if	0	;tblptru may be non-zero
  6569  000206                     	endif
  6570  000206                     	if	0	;tblptru may be non-zero
  6571  000206                     	endif
  6572  000206  0009               	tblrd		*+
  6573  000208  CFF5 FFD9          	movff	tablat,fsr2l
  6574  00020C  0009               	tblrd		*+
  6575  00020E  CFF5 FFDA          	movff	tablat,fsr2h
  6576  000212  500D               	movf	??_init_gpios^0,w,c
  6577  000214  12DF               	iorwf	indf2,f,c
  6578                           
  6579                           ;src/main.c: 524:     *((PIN_PTT_INPUT)->pPORT) |= (PIN_PTT_INPUT)->mask;
  6580  000216  0EFB               	movlw	low (_PIN_PTT_INPUT_DEF+4)
  6581  000218  6EF6               	movwf	tblptrl,c
  6582  00021A  0E7C               	movlw	high (_PIN_PTT_INPUT_DEF+4)
  6583  00021C  6EF7               	movwf	tblptrh,c
  6584  00021E                     	if	0	;tblptru may be non-zero
  6585  00021E                     	endif
  6586  00021E                     	if	0	;tblptru may be non-zero
  6587  00021E                     	endif
  6588  00021E  0008               	tblrd		*
  6589  000220  CFF5 F00D          	movff	tablat,??_init_gpios
  6590  000224  0EF7               	movlw	low _PIN_PTT_INPUT_DEF
  6591  000226  6EF6               	movwf	tblptrl,c
  6592  000228                     	if	1	;There is more than 1 active tblptr byte
  6593  000228  0E7C               	movlw	high _PIN_PTT_INPUT_DEF
  6594  00022A  6EF7               	movwf	tblptrh,c
  6595  00022C                     	endif
  6596  00022C                     	if	0	;There are less than 3 active tblptr bytes
  6597  00022C                     	endif
  6598  00022C  0009               	tblrd		*+
  6599  00022E  CFF5 F00E          	movff	tablat,??_init_gpios+1
  6600  000232  0009               	tblrd		*+
  6601  000234  CFF5 F00F          	movff	tablat,??_init_gpios+2
  6602  000238  C00E  FFD9         	movff	??_init_gpios+1,fsr2l
  6603  00023C  C00F  FFDA         	movff	??_init_gpios+2,fsr2h
  6604  000240  500D               	movf	??_init_gpios^0,w,c
  6605  000242  12DF               	iorwf	indf2,f,c
  6606                           
  6607                           ;src/main.c: 529:     INTCON2bits.nRBPU = 0;
  6608  000244  9EF1               	bcf	241,7,c	;volatile
  6609                           
  6610                           ;src/main.c: 532:     *((PIN_FSW0)->pTRIS) |= (PIN_FSW0)->mask;
  6611  000246  0EE2               	movlw	low (_PIN_FSW0_DEF+4)
  6612  000248  6EF6               	movwf	tblptrl,c
  6613  00024A  0E7C               	movlw	high (_PIN_FSW0_DEF+4)
  6614  00024C  6EF7               	movwf	tblptrh,c
  6615  00024E                     	if	0	;tblptru may be non-zero
  6616  00024E                     	endif
  6617  00024E                     	if	0	;tblptru may be non-zero
  6618  00024E                     	endif
  6619  00024E  0008               	tblrd		*
  6620  000250  CFF5 F00D          	movff	tablat,??_init_gpios
  6621  000254  0EE0               	movlw	low (_PIN_FSW0_DEF+2)
  6622  000256  6EF6               	movwf	tblptrl,c
  6623  000258  0E7C               	movlw	high (_PIN_FSW0_DEF+2)
  6624  00025A  6EF7               	movwf	tblptrh,c
  6625  00025C                     	if	0	;tblptru may be non-zero
  6626  00025C                     	endif
  6627  00025C                     	if	0	;tblptru may be non-zero
  6628  00025C                     	endif
  6629  00025C  0009               	tblrd		*+
  6630  00025E  CFF5 FFD9          	movff	tablat,fsr2l
  6631  000262  0009               	tblrd		*+
  6632  000264  CFF5 FFDA          	movff	tablat,fsr2h
  6633  000268  500D               	movf	??_init_gpios^0,w,c
  6634  00026A  12DF               	iorwf	indf2,f,c
  6635                           
  6636                           ;src/main.c: 533:     *((PIN_FSW0)->pPORT) |= (PIN_FSW0)->mask;
  6637  00026C  0EE2               	movlw	low (_PIN_FSW0_DEF+4)
  6638  00026E  6EF6               	movwf	tblptrl,c
  6639  000270  0E7C               	movlw	high (_PIN_FSW0_DEF+4)
  6640  000272  6EF7               	movwf	tblptrh,c
  6641  000274                     	if	0	;tblptru may be non-zero
  6642  000274                     	endif
  6643  000274                     	if	0	;tblptru may be non-zero
  6644  000274                     	endif
  6645  000274  0008               	tblrd		*
  6646  000276  CFF5 F00D          	movff	tablat,??_init_gpios
  6647  00027A  0EDE               	movlw	low _PIN_FSW0_DEF
  6648  00027C  6EF6               	movwf	tblptrl,c
  6649  00027E                     	if	1	;There is more than 1 active tblptr byte
  6650  00027E  0E7C               	movlw	high _PIN_FSW0_DEF
  6651  000280  6EF7               	movwf	tblptrh,c
  6652  000282                     	endif
  6653  000282                     	if	0	;There are less than 3 active tblptr bytes
  6654  000282                     	endif
  6655  000282  0009               	tblrd		*+
  6656  000284  CFF5 F00E          	movff	tablat,??_init_gpios+1
  6657  000288  0009               	tblrd		*+
  6658  00028A  CFF5 F00F          	movff	tablat,??_init_gpios+2
  6659  00028E  C00E  FFD9         	movff	??_init_gpios+1,fsr2l
  6660  000292  C00F  FFDA         	movff	??_init_gpios+2,fsr2h
  6661  000296  500D               	movf	??_init_gpios^0,w,c
  6662  000298  12DF               	iorwf	indf2,f,c
  6663                           
  6664                           ;src/main.c: 536:     *((PIN_FSW1)->pTRIS) |= (PIN_FSW1)->mask;
  6665  00029A  0EDD               	movlw	low (_PIN_FSW1_DEF+4)
  6666  00029C  6EF6               	movwf	tblptrl,c
  6667  00029E  0E7C               	movlw	high (_PIN_FSW1_DEF+4)
  6668  0002A0  6EF7               	movwf	tblptrh,c
  6669  0002A2                     	if	0	;tblptru may be non-zero
  6670  0002A2                     	endif
  6671  0002A2                     	if	0	;tblptru may be non-zero
  6672  0002A2                     	endif
  6673  0002A2  0008               	tblrd		*
  6674  0002A4  CFF5 F00D          	movff	tablat,??_init_gpios
  6675  0002A8  0EDB               	movlw	low (_PIN_FSW1_DEF+2)
  6676  0002AA  6EF6               	movwf	tblptrl,c
  6677  0002AC  0E7C               	movlw	high (_PIN_FSW1_DEF+2)
  6678  0002AE  6EF7               	movwf	tblptrh,c
  6679  0002B0                     	if	0	;tblptru may be non-zero
  6680  0002B0                     	endif
  6681  0002B0                     	if	0	;tblptru may be non-zero
  6682  0002B0                     	endif
  6683  0002B0  0009               	tblrd		*+
  6684  0002B2  CFF5 FFD9          	movff	tablat,fsr2l
  6685  0002B6  0009               	tblrd		*+
  6686  0002B8  CFF5 FFDA          	movff	tablat,fsr2h
  6687  0002BC  500D               	movf	??_init_gpios^0,w,c
  6688  0002BE  12DF               	iorwf	indf2,f,c
  6689                           
  6690                           ;src/main.c: 537:     *((PIN_FSW1)->pPORT) |= (PIN_FSW1)->mask;
  6691  0002C0  0EDD               	movlw	low (_PIN_FSW1_DEF+4)
  6692  0002C2  6EF6               	movwf	tblptrl,c
  6693  0002C4  0E7C               	movlw	high (_PIN_FSW1_DEF+4)
  6694  0002C6  6EF7               	movwf	tblptrh,c
  6695  0002C8                     	if	0	;tblptru may be non-zero
  6696  0002C8                     	endif
  6697  0002C8                     	if	0	;tblptru may be non-zero
  6698  0002C8                     	endif
  6699  0002C8  0008               	tblrd		*
  6700  0002CA  CFF5 F00D          	movff	tablat,??_init_gpios
  6701  0002CE  0ED9               	movlw	low _PIN_FSW1_DEF
  6702  0002D0  6EF6               	movwf	tblptrl,c
  6703  0002D2                     	if	1	;There is more than 1 active tblptr byte
  6704  0002D2  0E7C               	movlw	high _PIN_FSW1_DEF
  6705  0002D4  6EF7               	movwf	tblptrh,c
  6706  0002D6                     	endif
  6707  0002D6                     	if	0	;There are less than 3 active tblptr bytes
  6708  0002D6                     	endif
  6709  0002D6  0009               	tblrd		*+
  6710  0002D8  CFF5 F00E          	movff	tablat,??_init_gpios+1
  6711  0002DC  0009               	tblrd		*+
  6712  0002DE  CFF5 F00F          	movff	tablat,??_init_gpios+2
  6713  0002E2  C00E  FFD9         	movff	??_init_gpios+1,fsr2l
  6714  0002E6  C00F  FFDA         	movff	??_init_gpios+2,fsr2h
  6715  0002EA  500D               	movf	??_init_gpios^0,w,c
  6716  0002EC  12DF               	iorwf	indf2,f,c
  6717                           
  6718                           ;src/main.c: 543:     *((PIN_LED_CPU_OK)->pPORT) &= ~(PIN_LED_CPU_OK)->mask;
  6719  0002EE  0ED8               	movlw	low (_PIN_LED_CPU_OK_DEF+4)
  6720  0002F0  6EF6               	movwf	tblptrl,c
  6721  0002F2  0E7C               	movlw	high (_PIN_LED_CPU_OK_DEF+4)
  6722  0002F4  6EF7               	movwf	tblptrh,c
  6723  0002F6                     	if	0	;tblptru may be non-zero
  6724  0002F6                     	endif
  6725  0002F6                     	if	0	;tblptru may be non-zero
  6726  0002F6                     	endif
  6727  0002F6  0008               	tblrd		*
  6728  0002F8  50F5               	movf	tablat,w,c
  6729  0002FA  0AFF               	xorlw	255
  6730  0002FC  6E0D               	movwf	??_init_gpios^0,c
  6731  0002FE  0ED4               	movlw	low _PIN_LED_CPU_OK_DEF
  6732  000300  6EF6               	movwf	tblptrl,c
  6733  000302                     	if	1	;There is more than 1 active tblptr byte
  6734  000302  0E7C               	movlw	high _PIN_LED_CPU_OK_DEF
  6735  000304  6EF7               	movwf	tblptrh,c
  6736  000306                     	endif
  6737  000306                     	if	0	;There are less than 3 active tblptr bytes
  6738  000306                     	endif
  6739  000306  0009               	tblrd		*+
  6740  000308  CFF5 F00E          	movff	tablat,??_init_gpios+1
  6741  00030C  0009               	tblrd		*+
  6742  00030E  CFF5 F00F          	movff	tablat,??_init_gpios+2
  6743  000312  C00E  FFD9         	movff	??_init_gpios+1,fsr2l
  6744  000316  C00F  FFDA         	movff	??_init_gpios+2,fsr2h
  6745  00031A  500D               	movf	??_init_gpios^0,w,c
  6746  00031C  16DF               	andwf	indf2,f,c
  6747                           
  6748                           ;src/main.c: 544:     *((PIN_LED_CPU_OK)->pTRIS) &= ~(PIN_LED_CPU_OK)->mask;
  6749  00031E  0ED8               	movlw	low (_PIN_LED_CPU_OK_DEF+4)
  6750  000320  6EF6               	movwf	tblptrl,c
  6751  000322  0E7C               	movlw	high (_PIN_LED_CPU_OK_DEF+4)
  6752  000324  6EF7               	movwf	tblptrh,c
  6753  000326                     	if	0	;tblptru may be non-zero
  6754  000326                     	endif
  6755  000326                     	if	0	;tblptru may be non-zero
  6756  000326                     	endif
  6757  000326  0008               	tblrd		*
  6758  000328  50F5               	movf	tablat,w,c
  6759  00032A  0AFF               	xorlw	255
  6760  00032C  6E0D               	movwf	??_init_gpios^0,c
  6761  00032E  0ED6               	movlw	low (_PIN_LED_CPU_OK_DEF+2)
  6762  000330  6EF6               	movwf	tblptrl,c
  6763  000332  0E7C               	movlw	high (_PIN_LED_CPU_OK_DEF+2)
  6764  000334  6EF7               	movwf	tblptrh,c
  6765  000336                     	if	0	;tblptru may be non-zero
  6766  000336                     	endif
  6767  000336                     	if	0	;tblptru may be non-zero
  6768  000336                     	endif
  6769  000336  0009               	tblrd		*+
  6770  000338  CFF5 FFD9          	movff	tablat,fsr2l
  6771  00033C  0009               	tblrd		*+
  6772  00033E  CFF5 FFDA          	movff	tablat,fsr2h
  6773  000342  500D               	movf	??_init_gpios^0,w,c
  6774  000344  16DF               	andwf	indf2,f,c
  6775                           
  6776                           ;src/main.c: 547:     *((PIN_LED_ADF_LOCK)->pPORT) &= ~(PIN_LED_ADF_LOCK)->mask;
  6777  000346  0ED3               	movlw	low (_PIN_LED_ADF_LOCK_DEF+4)
  6778  000348  6EF6               	movwf	tblptrl,c
  6779  00034A  0E7C               	movlw	high (_PIN_LED_ADF_LOCK_DEF+4)
  6780  00034C  6EF7               	movwf	tblptrh,c
  6781  00034E                     	if	0	;tblptru may be non-zero
  6782  00034E                     	endif
  6783  00034E                     	if	0	;tblptru may be non-zero
  6784  00034E                     	endif
  6785  00034E  0008               	tblrd		*
  6786  000350  50F5               	movf	tablat,w,c
  6787  000352  0AFF               	xorlw	255
  6788  000354  6E0D               	movwf	??_init_gpios^0,c
  6789  000356  0ECF               	movlw	low _PIN_LED_ADF_LOCK_DEF
  6790  000358  6EF6               	movwf	tblptrl,c
  6791  00035A                     	if	1	;There is more than 1 active tblptr byte
  6792  00035A  0E7C               	movlw	high _PIN_LED_ADF_LOCK_DEF
  6793  00035C  6EF7               	movwf	tblptrh,c
  6794  00035E                     	endif
  6795  00035E                     	if	0	;There are less than 3 active tblptr bytes
  6796  00035E                     	endif
  6797  00035E  0009               	tblrd		*+
  6798  000360  CFF5 F00E          	movff	tablat,??_init_gpios+1
  6799  000364  0009               	tblrd		*+
  6800  000366  CFF5 F00F          	movff	tablat,??_init_gpios+2
  6801  00036A  C00E  FFD9         	movff	??_init_gpios+1,fsr2l
  6802  00036E  C00F  FFDA         	movff	??_init_gpios+2,fsr2h
  6803  000372  500D               	movf	??_init_gpios^0,w,c
  6804  000374  16DF               	andwf	indf2,f,c
  6805                           
  6806                           ;src/main.c: 548:     *((PIN_LED_ADF_LOCK)->pTRIS) &= ~(PIN_LED_ADF_LOCK)->mask;
  6807  000376  0ED3               	movlw	low (_PIN_LED_ADF_LOCK_DEF+4)
  6808  000378  6EF6               	movwf	tblptrl,c
  6809  00037A  0E7C               	movlw	high (_PIN_LED_ADF_LOCK_DEF+4)
  6810  00037C  6EF7               	movwf	tblptrh,c
  6811  00037E                     	if	0	;tblptru may be non-zero
  6812  00037E                     	endif
  6813  00037E                     	if	0	;tblptru may be non-zero
  6814  00037E                     	endif
  6815  00037E  0008               	tblrd		*
  6816  000380  50F5               	movf	tablat,w,c
  6817  000382  0AFF               	xorlw	255
  6818  000384  6E0D               	movwf	??_init_gpios^0,c
  6819  000386  0ED1               	movlw	low (_PIN_LED_ADF_LOCK_DEF+2)
  6820  000388  6EF6               	movwf	tblptrl,c
  6821  00038A  0E7C               	movlw	high (_PIN_LED_ADF_LOCK_DEF+2)
  6822  00038C  6EF7               	movwf	tblptrh,c
  6823  00038E                     	if	0	;tblptru may be non-zero
  6824  00038E                     	endif
  6825  00038E                     	if	0	;tblptru may be non-zero
  6826  00038E                     	endif
  6827  00038E  0009               	tblrd		*+
  6828  000390  CFF5 FFD9          	movff	tablat,fsr2l
  6829  000394  0009               	tblrd		*+
  6830  000396  CFF5 FFDA          	movff	tablat,fsr2h
  6831  00039A  500D               	movf	??_init_gpios^0,w,c
  6832  00039C  16DF               	andwf	indf2,f,c
  6833                           
  6834                           ;src/main.c: 551:     *((PIN_PA_ENABLE)->pPORT) &= ~(PIN_PA_ENABLE)->mask;
  6835  00039E  0EC4               	movlw	low (_PIN_PA_ENABLE_DEF+4)
  6836  0003A0  6EF6               	movwf	tblptrl,c
  6837  0003A2  0E7C               	movlw	high (_PIN_PA_ENABLE_DEF+4)
  6838  0003A4  6EF7               	movwf	tblptrh,c
  6839  0003A6                     	if	0	;tblptru may be non-zero
  6840  0003A6                     	endif
  6841  0003A6                     	if	0	;tblptru may be non-zero
  6842  0003A6                     	endif
  6843  0003A6  0008               	tblrd		*
  6844  0003A8  50F5               	movf	tablat,w,c
  6845  0003AA  0AFF               	xorlw	255
  6846  0003AC  6E0D               	movwf	??_init_gpios^0,c
  6847  0003AE  0EC0               	movlw	low _PIN_PA_ENABLE_DEF
  6848  0003B0  6EF6               	movwf	tblptrl,c
  6849  0003B2                     	if	1	;There is more than 1 active tblptr byte
  6850  0003B2  0E7C               	movlw	high _PIN_PA_ENABLE_DEF
  6851  0003B4  6EF7               	movwf	tblptrh,c
  6852  0003B6                     	endif
  6853  0003B6                     	if	0	;There are less than 3 active tblptr bytes
  6854  0003B6                     	endif
  6855  0003B6  0009               	tblrd		*+
  6856  0003B8  CFF5 F00E          	movff	tablat,??_init_gpios+1
  6857  0003BC  0009               	tblrd		*+
  6858  0003BE  CFF5 F00F          	movff	tablat,??_init_gpios+2
  6859  0003C2  C00E  FFD9         	movff	??_init_gpios+1,fsr2l
  6860  0003C6  C00F  FFDA         	movff	??_init_gpios+2,fsr2h
  6861  0003CA  500D               	movf	??_init_gpios^0,w,c
  6862  0003CC  16DF               	andwf	indf2,f,c
  6863                           
  6864                           ;src/main.c: 552:     *((PIN_PA_ENABLE)->pTRIS) &= ~(PIN_PA_ENABLE)->mask;
  6865  0003CE  0EC4               	movlw	low (_PIN_PA_ENABLE_DEF+4)
  6866  0003D0  6EF6               	movwf	tblptrl,c
  6867  0003D2  0E7C               	movlw	high (_PIN_PA_ENABLE_DEF+4)
  6868  0003D4  6EF7               	movwf	tblptrh,c
  6869  0003D6                     	if	0	;tblptru may be non-zero
  6870  0003D6                     	endif
  6871  0003D6                     	if	0	;tblptru may be non-zero
  6872  0003D6                     	endif
  6873  0003D6  0008               	tblrd		*
  6874  0003D8  50F5               	movf	tablat,w,c
  6875  0003DA  0AFF               	xorlw	255
  6876  0003DC  6E0D               	movwf	??_init_gpios^0,c
  6877  0003DE  0EC2               	movlw	low (_PIN_PA_ENABLE_DEF+2)
  6878  0003E0  6EF6               	movwf	tblptrl,c
  6879  0003E2  0E7C               	movlw	high (_PIN_PA_ENABLE_DEF+2)
  6880  0003E4  6EF7               	movwf	tblptrh,c
  6881  0003E6                     	if	0	;tblptru may be non-zero
  6882  0003E6                     	endif
  6883  0003E6                     	if	0	;tblptru may be non-zero
  6884  0003E6                     	endif
  6885  0003E6  0009               	tblrd		*+
  6886  0003E8  CFF5 FFD9          	movff	tablat,fsr2l
  6887  0003EC  0009               	tblrd		*+
  6888  0003EE  CFF5 FFDA          	movff	tablat,fsr2h
  6889  0003F2  500D               	movf	??_init_gpios^0,w,c
  6890  0003F4  16DF               	andwf	indf2,f,c
  6891                           
  6892                           ;src/main.c: 555:     *((PIN_LED_PTT_ACTIVE)->pPORT) |= (PIN_LED_PTT_ACTIVE)->mask;
  6893  0003F6  0ECE               	movlw	low (_PIN_LED_PTT_ACTIVE_DEF+4)
  6894  0003F8  6EF6               	movwf	tblptrl,c
  6895  0003FA  0E7C               	movlw	high (_PIN_LED_PTT_ACTIVE_DEF+4)
  6896  0003FC  6EF7               	movwf	tblptrh,c
  6897  0003FE                     	if	0	;tblptru may be non-zero
  6898  0003FE                     	endif
  6899  0003FE                     	if	0	;tblptru may be non-zero
  6900  0003FE                     	endif
  6901  0003FE  0008               	tblrd		*
  6902  000400  CFF5 F00D          	movff	tablat,??_init_gpios
  6903  000404  0ECA               	movlw	low _PIN_LED_PTT_ACTIVE_DEF
  6904  000406  6EF6               	movwf	tblptrl,c
  6905  000408                     	if	1	;There is more than 1 active tblptr byte
  6906  000408  0E7C               	movlw	high _PIN_LED_PTT_ACTIVE_DEF
  6907  00040A  6EF7               	movwf	tblptrh,c
  6908  00040C                     	endif
  6909  00040C                     	if	0	;There are less than 3 active tblptr bytes
  6910  00040C                     	endif
  6911  00040C  0009               	tblrd		*+
  6912  00040E  CFF5 F00E          	movff	tablat,??_init_gpios+1
  6913  000412  0009               	tblrd		*+
  6914  000414  CFF5 F00F          	movff	tablat,??_init_gpios+2
  6915  000418  C00E  FFD9         	movff	??_init_gpios+1,fsr2l
  6916  00041C  C00F  FFDA         	movff	??_init_gpios+2,fsr2h
  6917  000420  500D               	movf	??_init_gpios^0,w,c
  6918  000422  12DF               	iorwf	indf2,f,c
  6919                           
  6920                           ;src/main.c: 556:     *((PIN_LED_PTT_ACTIVE)->pTRIS) &= ~(PIN_LED_PTT_ACTIVE)->mask;
  6921  000424  0ECE               	movlw	low (_PIN_LED_PTT_ACTIVE_DEF+4)
  6922  000426  6EF6               	movwf	tblptrl,c
  6923  000428  0E7C               	movlw	high (_PIN_LED_PTT_ACTIVE_DEF+4)
  6924  00042A  6EF7               	movwf	tblptrh,c
  6925  00042C                     	if	0	;tblptru may be non-zero
  6926  00042C                     	endif
  6927  00042C                     	if	0	;tblptru may be non-zero
  6928  00042C                     	endif
  6929  00042C  0008               	tblrd		*
  6930  00042E  50F5               	movf	tablat,w,c
  6931  000430  0AFF               	xorlw	255
  6932  000432  6E0D               	movwf	??_init_gpios^0,c
  6933  000434  0ECC               	movlw	low (_PIN_LED_PTT_ACTIVE_DEF+2)
  6934  000436  6EF6               	movwf	tblptrl,c
  6935  000438  0E7C               	movlw	high (_PIN_LED_PTT_ACTIVE_DEF+2)
  6936  00043A  6EF7               	movwf	tblptrh,c
  6937  00043C                     	if	0	;tblptru may be non-zero
  6938  00043C                     	endif
  6939  00043C                     	if	0	;tblptru may be non-zero
  6940  00043C                     	endif
  6941  00043C  0009               	tblrd		*+
  6942  00043E  CFF5 FFD9          	movff	tablat,fsr2l
  6943  000442  0009               	tblrd		*+
  6944  000444  CFF5 FFDA          	movff	tablat,fsr2h
  6945  000448  500D               	movf	??_init_gpios^0,w,c
  6946  00044A  16DF               	andwf	indf2,f,c
  6947                           
  6948                           ;src/main.c: 559:  *((PIN_ALARM_OUTPUT)->pPORT) &= ~(PIN_ALARM_OUTPUT)->mask;
  6949  00044C  0EC9               	movlw	low (_PIN_ALARM_OUTPUT_DEF+4)
  6950  00044E  6EF6               	movwf	tblptrl,c
  6951  000450  0E7C               	movlw	high (_PIN_ALARM_OUTPUT_DEF+4)
  6952  000452  6EF7               	movwf	tblptrh,c
  6953  000454                     	if	0	;tblptru may be non-zero
  6954  000454                     	endif
  6955  000454                     	if	0	;tblptru may be non-zero
  6956  000454                     	endif
  6957  000454  0008               	tblrd		*
  6958  000456  50F5               	movf	tablat,w,c
  6959  000458  0AFF               	xorlw	255
  6960  00045A  6E0D               	movwf	??_init_gpios^0,c
  6961  00045C  0EC5               	movlw	low _PIN_ALARM_OUTPUT_DEF
  6962  00045E  6EF6               	movwf	tblptrl,c
  6963  000460                     	if	1	;There is more than 1 active tblptr byte
  6964  000460  0E7C               	movlw	high _PIN_ALARM_OUTPUT_DEF
  6965  000462  6EF7               	movwf	tblptrh,c
  6966  000464                     	endif
  6967  000464                     	if	0	;There are less than 3 active tblptr bytes
  6968  000464                     	endif
  6969  000464  0009               	tblrd		*+
  6970  000466  CFF5 F00E          	movff	tablat,??_init_gpios+1
  6971  00046A  0009               	tblrd		*+
  6972  00046C  CFF5 F00F          	movff	tablat,??_init_gpios+2
  6973  000470  C00E  FFD9         	movff	??_init_gpios+1,fsr2l
  6974  000474  C00F  FFDA         	movff	??_init_gpios+2,fsr2h
  6975  000478  500D               	movf	??_init_gpios^0,w,c
  6976  00047A  16DF               	andwf	indf2,f,c
  6977                           
  6978                           ;src/main.c: 560:     *((PIN_ALARM_OUTPUT)->pTRIS) &= ~(PIN_ALARM_OUTPUT)->mask;
  6979  00047C  0EC9               	movlw	low (_PIN_ALARM_OUTPUT_DEF+4)
  6980  00047E  6EF6               	movwf	tblptrl,c
  6981  000480  0E7C               	movlw	high (_PIN_ALARM_OUTPUT_DEF+4)
  6982  000482  6EF7               	movwf	tblptrh,c
  6983  000484                     	if	0	;tblptru may be non-zero
  6984  000484                     	endif
  6985  000484                     	if	0	;tblptru may be non-zero
  6986  000484                     	endif
  6987  000484  0008               	tblrd		*
  6988  000486  50F5               	movf	tablat,w,c
  6989  000488  0AFF               	xorlw	255
  6990  00048A  6E0D               	movwf	??_init_gpios^0,c
  6991  00048C  0EC7               	movlw	low (_PIN_ALARM_OUTPUT_DEF+2)
  6992  00048E  6EF6               	movwf	tblptrl,c
  6993  000490  0E7C               	movlw	high (_PIN_ALARM_OUTPUT_DEF+2)
  6994  000492  6EF7               	movwf	tblptrh,c
  6995  000494                     	if	0	;tblptru may be non-zero
  6996  000494                     	endif
  6997  000494                     	if	0	;tblptru may be non-zero
  6998  000494                     	endif
  6999  000494  0009               	tblrd		*+
  7000  000496  CFF5 FFD9          	movff	tablat,fsr2l
  7001  00049A  0009               	tblrd		*+
  7002  00049C  CFF5 FFDA          	movff	tablat,fsr2h
  7003  0004A0  500D               	movf	??_init_gpios^0,w,c
  7004  0004A2  16DF               	andwf	indf2,f,c
  7005                           
  7006                           ;src/main.c: 563:     *((PIN_USART_TX)->pTRIS) |= (PIN_USART_TX)->mask;
  7007  0004A4  0EBA               	movlw	low (_PIN_USART_TX_DEF+4)
  7008  0004A6  6EF6               	movwf	tblptrl,c
  7009  0004A8  0E7C               	movlw	high (_PIN_USART_TX_DEF+4)
  7010  0004AA  6EF7               	movwf	tblptrh,c
  7011  0004AC                     	if	0	;tblptru may be non-zero
  7012  0004AC                     	endif
  7013  0004AC                     	if	0	;tblptru may be non-zero
  7014  0004AC                     	endif
  7015  0004AC  0008               	tblrd		*
  7016  0004AE  CFF5 F00D          	movff	tablat,??_init_gpios
  7017  0004B2  0EB8               	movlw	low (_PIN_USART_TX_DEF+2)
  7018  0004B4  6EF6               	movwf	tblptrl,c
  7019  0004B6  0E7C               	movlw	high (_PIN_USART_TX_DEF+2)
  7020  0004B8  6EF7               	movwf	tblptrh,c
  7021  0004BA                     	if	0	;tblptru may be non-zero
  7022  0004BA                     	endif
  7023  0004BA                     	if	0	;tblptru may be non-zero
  7024  0004BA                     	endif
  7025  0004BA  0009               	tblrd		*+
  7026  0004BC  CFF5 FFD9          	movff	tablat,fsr2l
  7027  0004C0  0009               	tblrd		*+
  7028  0004C2  CFF5 FFDA          	movff	tablat,fsr2h
  7029  0004C6  500D               	movf	??_init_gpios^0,w,c
  7030  0004C8  12DF               	iorwf	indf2,f,c
  7031                           
  7032                           ;src/main.c: 566:     *((PIN_USART_RX)->pTRIS) |= (PIN_USART_RX)->mask;
  7033  0004CA  0EB5               	movlw	low (_PIN_USART_RX_DEF+4)
  7034  0004CC  6EF6               	movwf	tblptrl,c
  7035  0004CE  0E7C               	movlw	high (_PIN_USART_RX_DEF+4)
  7036  0004D0  6EF7               	movwf	tblptrh,c
  7037  0004D2                     	if	0	;tblptru may be non-zero
  7038  0004D2                     	endif
  7039  0004D2                     	if	0	;tblptru may be non-zero
  7040  0004D2                     	endif
  7041  0004D2  0008               	tblrd		*
  7042  0004D4  CFF5 F00D          	movff	tablat,??_init_gpios
  7043  0004D8  0EB3               	movlw	low (_PIN_USART_RX_DEF+2)
  7044  0004DA  6EF6               	movwf	tblptrl,c
  7045  0004DC  0E7C               	movlw	high (_PIN_USART_RX_DEF+2)
  7046  0004DE  6EF7               	movwf	tblptrh,c
  7047  0004E0                     	if	0	;tblptru may be non-zero
  7048  0004E0                     	endif
  7049  0004E0                     	if	0	;tblptru may be non-zero
  7050  0004E0                     	endif
  7051  0004E0  0009               	tblrd		*+
  7052  0004E2  CFF5 FFD9          	movff	tablat,fsr2l
  7053  0004E6  0009               	tblrd		*+
  7054  0004E8  CFF5 FFDA          	movff	tablat,fsr2h
  7055  0004EC  500D               	movf	??_init_gpios^0,w,c
  7056  0004EE  12DF               	iorwf	indf2,f,c
  7057  0004F0  0012               	return		;funcret
  7058  0004F2                     __end_of_init_gpios:
  7059                           	opt callstack 0
  7060                           
  7061 ;; *************** function _check_usart *****************
  7062 ;; Defined at:
  7063 ;;		line 365 in file "src/main.c"
  7064 ;; Parameters:    Size  Location     Type
  7065 ;;		None
  7066 ;; Auto vars:     Size  Location     Type
  7067 ;;  c               2   30[BANK0 ] int 
  7068 ;; Return value:  Size  Location     Type
  7069 ;;                  1    wreg      void 
  7070 ;; Registers used:
  7071 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7072 ;; Tracked objects:
  7073 ;;		On entry : 0/1
  7074 ;;		On exit  : 0/0
  7075 ;;		Unchanged: 0/0
  7076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7077 ;;      Params:         0       0       0       0       0       0       0
  7078 ;;      Locals:         0       2       0       0       0       0       0
  7079 ;;      Temps:          0       0       0       0       0       0       0
  7080 ;;      Totals:         0       2       0       0       0       0       0
  7081 ;;Total ram usage:        2 bytes
  7082 ;; Hardware stack levels used:    1
  7083 ;; Hardware stack levels required when called:   11
  7084 ;; This function calls:
  7085 ;;		_receive_downconverter_data
  7086 ;;		_usart_getc
  7087 ;;		_usart_tstc
  7088 ;; This function is called by:
  7089 ;;		_main
  7090 ;; This function uses a non-reentrant model
  7091 ;;
  7092                           
  7093                           	psect	text25
  7094  004E7C                     __ptext25:
  7095                           	opt callstack 0
  7096  004E7C                     _check_usart:
  7097                           	opt callstack 19
  7098                           
  7099                           ;src/main.c: 367:     if(usart_tstc())
  7100                           
  7101                           ;incstack = 0
  7102  004E7C  EC6F  F027         	call	_usart_tstc	;wreg free
  7103  004E80  500D               	movf	?_usart_tstc^0,w,c
  7104  004E82  100E               	iorwf	(?_usart_tstc+1)^0,w,c
  7105  004E84  B4D8               	btfsc	status,2,c
  7106  004E86  0012               	return	
  7107                           
  7108                           ;src/main.c: 368:  {;src/main.c: 369:         int c = usart_getc();
  7109  004E88  ECAB  F026         	call	_usart_getc	;wreg free
  7110  004E8C  C00D  F0D7         	movff	?_usart_getc,check_usart@c
  7111  004E90  C00E  F0D8         	movff	?_usart_getc+1,check_usart@c+1
  7112                           
  7113                           ;src/main.c: 372:   receive_downconverter_data((u8)c);
  7114  004E94  0100               	movlb	0	; () banked
  7115  004E96  51D7               	movf	check_usart@c& (0+255),w,b
  7116  004E98  EC1B  F01F         	call	_receive_downconverter_data
  7117  004E9C  0012               	return		;funcret
  7118  004E9E                     __end_of_check_usart:
  7119                           	opt callstack 0
  7120                           
  7121 ;; *************** function _usart_tstc *****************
  7122 ;; Defined at:
  7123 ;;		line 64 in file "src/driver/usart.c"
  7124 ;; Parameters:    Size  Location     Type
  7125 ;;		None
  7126 ;; Auto vars:     Size  Location     Type
  7127 ;;		None
  7128 ;; Return value:  Size  Location     Type
  7129 ;;                  2   12[COMRAM] int 
  7130 ;; Registers used:
  7131 ;;		wreg, status,2, status,0
  7132 ;; Tracked objects:
  7133 ;;		On entry : 0/1
  7134 ;;		On exit  : 0/0
  7135 ;;		Unchanged: 0/0
  7136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7137 ;;      Params:         2       0       0       0       0       0       0
  7138 ;;      Locals:         0       0       0       0       0       0       0
  7139 ;;      Temps:          0       0       0       0       0       0       0
  7140 ;;      Totals:         2       0       0       0       0       0       0
  7141 ;;Total ram usage:        2 bytes
  7142 ;; Hardware stack levels used:    1
  7143 ;; Hardware stack levels required when called:    2
  7144 ;; This function calls:
  7145 ;;		Nothing
  7146 ;; This function is called by:
  7147 ;;		_check_usart
  7148 ;; This function uses a non-reentrant model
  7149 ;;
  7150                           
  7151                           	psect	text26
  7152  004EDE                     __ptext26:
  7153                           	opt callstack 0
  7154  004EDE                     _usart_tstc:
  7155                           	opt callstack 27
  7156                           
  7157                           ;src/driver/usart.c: 66:  return (g_usart_wpos != g_usart_rpos);
  7158                           
  7159                           ;incstack = 0
  7160  004EDE  506F               	movf	_g_usart_rpos^0,w,c	;volatile
  7161  004EE0  186D               	xorwf	_g_usart_wpos^0,w,c	;volatile
  7162  004EE2  E104               	bnz	u10721
  7163  004EE4  5070               	movf	(_g_usart_rpos+1)^0,w,c	;volatile
  7164  004EE6  186E               	xorwf	(_g_usart_wpos+1)^0,w,c	;volatile
  7165  004EE8  B4D8               	btfsc	status,2,c
  7166  004EEA  D002               	goto	u10720
  7167  004EEC                     u10721:
  7168  004EEC  0E01               	movlw	1
  7169  004EEE  D001               	goto	u10730
  7170  004EF0                     u10720:
  7171  004EF0  0E00               	movlw	0
  7172  004EF2                     u10730:
  7173  004EF2  6E0D               	movwf	?_usart_tstc^0,c
  7174  004EF4  6A0E               	clrf	(?_usart_tstc+1)^0,c
  7175  004EF6  0012               	return		;funcret
  7176  004EF8                     __end_of_usart_tstc:
  7177                           	opt callstack 0
  7178                           
  7179 ;; *************** function _usart_getc *****************
  7180 ;; Defined at:
  7181 ;;		line 70 in file "src/driver/usart.c"
  7182 ;; Parameters:    Size  Location     Type
  7183 ;;		None
  7184 ;; Auto vars:     Size  Location     Type
  7185 ;;  res             2   16[COMRAM] int 
  7186 ;; Return value:  Size  Location     Type
  7187 ;;                  2   12[COMRAM] int 
  7188 ;; Registers used:
  7189 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7190 ;; Tracked objects:
  7191 ;;		On entry : 0/1
  7192 ;;		On exit  : 0/0
  7193 ;;		Unchanged: 0/0
  7194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7195 ;;      Params:         2       0       0       0       0       0       0
  7196 ;;      Locals:         2       0       0       0       0       0       0
  7197 ;;      Temps:          2       0       0       0       0       0       0
  7198 ;;      Totals:         6       0       0       0       0       0       0
  7199 ;;Total ram usage:        6 bytes
  7200 ;; Hardware stack levels used:    1
  7201 ;; Hardware stack levels required when called:    2
  7202 ;; This function calls:
  7203 ;;		Nothing
  7204 ;; This function is called by:
  7205 ;;		_check_usart
  7206 ;; This function uses a non-reentrant model
  7207 ;;
  7208                           
  7209                           	psect	text27
  7210  004D56                     __ptext27:
  7211                           	opt callstack 0
  7212  004D56                     _usart_getc:
  7213                           	opt callstack 27
  7214                           
  7215                           ;src/driver/usart.c: 72:  int res;;src/driver/usart.c: 75:  while(g_usart_wpos == g_usar
      +                          t_rpos);
  7216                           
  7217                           ;incstack = 0
  7218  004D56  506F               	movf	_g_usart_rpos^0,w,c	;volatile
  7219  004D58  186D               	xorwf	_g_usart_wpos^0,w,c	;volatile
  7220  004D5A  E104               	bnz	u10740
  7221  004D5C  5070               	movf	(_g_usart_rpos+1)^0,w,c	;volatile
  7222  004D5E  186E               	xorwf	(_g_usart_wpos+1)^0,w,c	;volatile
  7223  004D60  B4D8               	btfsc	status,2,c
  7224  004D62  D7F9               	goto	_usart_getc
  7225  004D64                     u10740:
  7226                           
  7227                           ;src/driver/usart.c: 78:  res = g_usart_buf[g_usart_rpos];
  7228  004D64  0E00               	movlw	low _g_usart_buf
  7229  004D66  246F               	addwf	_g_usart_rpos^0,w,c	;volatile
  7230  004D68  6ED9               	movwf	fsr2l,c
  7231  004D6A  0E02               	movlw	high _g_usart_buf
  7232  004D6C  2070               	addwfc	(_g_usart_rpos+1)^0,w,c	;volatile
  7233  004D6E  6EDA               	movwf	fsr2h,c
  7234  004D70  50DF               	movf	indf2,w,c
  7235  004D72  6E0F               	movwf	??_usart_getc^0,c
  7236  004D74  500F               	movf	??_usart_getc^0,w,c
  7237  004D76  6E11               	movwf	usart_getc@res^0,c
  7238  004D78  6A12               	clrf	(usart_getc@res+1)^0,c
  7239                           
  7240                           ;src/driver/usart.c: 79:  g_usart_rpos = (g_usart_rpos+1) % sizeof(g_usart_buf);
  7241  004D7A  0E01               	movlw	1
  7242  004D7C  246F               	addwf	_g_usart_rpos^0,w,c	;volatile
  7243  004D7E  6E0F               	movwf	??_usart_getc^0,c
  7244  004D80  0E00               	movlw	0
  7245  004D82  2070               	addwfc	(_g_usart_rpos+1)^0,w,c	;volatile
  7246  004D84  6E10               	movwf	(??_usart_getc+1)^0,c
  7247  004D86  500F               	movf	??_usart_getc^0,w,c
  7248  004D88  6E6F               	movwf	_g_usart_rpos^0,c	;volatile
  7249  004D8A  6A70               	clrf	(_g_usart_rpos+1)^0,c	;volatile
  7250                           
  7251                           ;src/driver/usart.c: 82:  return res;
  7252  004D8C  C011  F00D         	movff	usart_getc@res,?_usart_getc
  7253  004D90  C012  F00E         	movff	usart_getc@res+1,?_usart_getc+1
  7254  004D94  0012               	return		;funcret
  7255  004D96                     __end_of_usart_getc:
  7256                           	opt callstack 0
  7257                           
  7258 ;; *************** function _receive_downconverter_data *****************
  7259 ;; Defined at:
  7260 ;;		line 45 in file "src/downconv_data.c"
  7261 ;; Parameters:    Size  Location     Type
  7262 ;;  rxdatabyte      1    wreg     unsigned char 
  7263 ;; Auto vars:     Size  Location     Type
  7264 ;;  rxdatabyte      1  101[COMRAM] unsigned char 
  7265 ;; Return value:  Size  Location     Type
  7266 ;;                  1    wreg      void 
  7267 ;; Registers used:
  7268 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7269 ;; Tracked objects:
  7270 ;;		On entry : 3F/0
  7271 ;;		On exit  : 3F/0
  7272 ;;		Unchanged: 0/0
  7273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7274 ;;      Params:         0       0       0       0       0       0       0
  7275 ;;      Locals:         1       0       0       0       0       0       0
  7276 ;;      Temps:          0       2       0       0       0       0       0
  7277 ;;      Totals:         1       2       0       0       0       0       0
  7278 ;;Total ram usage:        3 bytes
  7279 ;; Hardware stack levels used:    1
  7280 ;; Hardware stack levels required when called:   10
  7281 ;; This function calls:
  7282 ;;		_printf
  7283 ;; This function is called by:
  7284 ;;		_check_usart
  7285 ;; This function uses a non-reentrant model
  7286 ;;
  7287                           
  7288                           	psect	text28
  7289  003E36                     __ptext28:
  7290                           	opt callstack 0
  7291  003E36                     _receive_downconverter_data:
  7292                           	opt callstack 19
  7293                           
  7294                           ;incstack = 0
  7295                           ;receive_downconverter_data@rxdatabyte stored from wreg
  7296  003E36  6E66               	movwf	receive_downconverter_data@rxdatabyte^0,c
  7297                           
  7298                           ;src/downconv_data.c: 45: void receive_downconverter_data(u8 rxdatabyte);src/downconv_da
      +                          ta.c: 46: {;src/downconv_data.c: 47: static u8 idx = 0;;src/downconv_data.c: 49:  switch
      +                          (idx)
  7299  003E38  D03A               	goto	l8007
  7300  003E3A                     l7965:
  7301                           
  7302                           ; BSR set to: 0
  7303  003E3A  0E4F               	movlw	79
  7304  003E3C  1866               	xorwf	receive_downconverter_data@rxdatabyte^0,w,c
  7305  003E3E  A4D8               	btfss	status,2,c
  7306  003E40  0012               	return	
  7307  003E42                     u10750:
  7308                           
  7309                           ; BSR set to: 0
  7310                           ;src/downconv_data.c: 52:    {;src/downconv_data.c: 53:     idx++;
  7311  003E42  2B97               	incf	receive_downconverter_data@idx& (0+255),f,b
  7312  003E44  0012               	return	
  7313  003E46                     l7969:
  7314                           
  7315                           ; BSR set to: 0
  7316  003E46  0E4C               	movlw	76
  7317  003E48  1866               	xorwf	receive_downconverter_data@rxdatabyte^0,w,c
  7318  003E4A  B4D8               	btfsc	status,2,c
  7319  003E4C  D7FA               	goto	u10750
  7320  003E4E                     l7973:
  7321                           
  7322                           ; BSR set to: 0
  7323                           ;src/downconv_data.c: 61:     idx = 0;
  7324  003E4E  0E00               	movlw	0
  7325  003E50  6F97               	movwf	receive_downconverter_data@idx& (0+255),b
  7326  003E52  0012               	return	
  7327  003E54                     l7975:
  7328                           
  7329                           ; BSR set to: 0
  7330  003E54  0E44               	movlw	68
  7331  003E56  D7F8               	goto	L4
  7332  003E58                     l7981:
  7333                           
  7334                           ; BSR set to: 0
  7335                           ;src/downconv_data.c: 69:    if(rxdatabyte == ' ')
  7336  003E58  0E20               	movlw	32
  7337  003E5A  1866               	xorwf	receive_downconverter_data@rxdatabyte^0,w,c
  7338  003E5C  A4D8               	btfss	status,2,c
  7339  003E5E  D7F7               	goto	l7973
  7340                           
  7341                           ; BSR set to: 0
  7342                           ;src/downconv_data.c: 70:    {;src/downconv_data.c: 72:     down_rxidx = 0;
  7343  003E60  0E00               	movlw	0
  7344  003E62  6F98               	movwf	_down_rxidx& (0+255),b
  7345  003E64  D7EE               	goto	u10750
  7346  003E66                     l7989:
  7347                           
  7348                           ; BSR set to: 0
  7349                           ;src/downconv_data.c: 80:    if(down_rxidx >= 100)
  7350  003E66  0E63               	movlw	99
  7351  003E68  6598               	cpfsgt	_down_rxidx& (0+255),b
  7352  003E6A  D001               	goto	l7993
  7353  003E6C  D7F0               	goto	l7973
  7354  003E6E                     l7993:
  7355                           
  7356                           ; BSR set to: 0
  7357                           ;src/downconv_data.c: 87:    down_rxbuf[down_rxidx++] = rxdatabyte;
  7358  003E6E  0E00               	movlw	low _down_rxbuf
  7359  003E70  2598               	addwf	_down_rxidx& (0+255),w,b
  7360  003E72  6ED9               	movwf	fsr2l,c
  7361  003E74  6ADA               	clrf	fsr2h,c
  7362  003E76  0E01               	movlw	high _down_rxbuf
  7363  003E78  22DA               	addwfc	fsr2h,f,c
  7364  003E7A  C066  FFDF         	movff	receive_downconverter_data@rxdatabyte,indf2
  7365                           
  7366                           ; BSR set to: 0
  7367  003E7E  2B98               	incf	_down_rxidx& (0+255),f,b
  7368                           
  7369                           ; BSR set to: 0
  7370                           ;src/downconv_data.c: 89:    if(rxdatabyte == '\n')
  7371  003E80  0E0A               	movlw	10
  7372  003E82  1866               	xorwf	receive_downconverter_data@rxdatabyte^0,w,c
  7373  003E84  A4D8               	btfss	status,2,c
  7374  003E86  0012               	return	
  7375                           
  7376                           ; BSR set to: 0
  7377                           ;src/downconv_data.c: 90:    {;src/downconv_data.c: 92:     down_rxbuf[down_rxidx] = 0;
  7378  003E88  0E00               	movlw	low _down_rxbuf
  7379  003E8A  2598               	addwf	_down_rxidx& (0+255),w,b
  7380  003E8C  6ED9               	movwf	fsr2l,c
  7381  003E8E  6ADA               	clrf	fsr2h,c
  7382  003E90  0E01               	movlw	high _down_rxbuf
  7383  003E92  22DA               	addwfc	fsr2h,f,c
  7384  003E94  0E00               	movlw	0
  7385  003E96  6EDF               	movwf	indf2,c
  7386                           
  7387                           ; BSR set to: 0
  7388                           ;src/downconv_data.c: 96:     printf("OLD %s",down_rxbuf);
  7389  003E98  0ED8               	movlw	low STR_7
  7390  003E9A  6FCB               	movwf	printf@fmt& (0+255),b
  7391  003E9C  0E7F               	movlw	high STR_7
  7392  003E9E  6FCC               	movwf	(printf@fmt+1)& (0+255),b
  7393  003EA0  0E00               	movlw	low _down_rxbuf
  7394  003EA2  6FCD               	movwf	(?_printf+2)& (0+255),b
  7395  003EA4  0E01               	movlw	high _down_rxbuf
  7396  003EA6  6FCE               	movwf	(?_printf+3)& (0+255),b
  7397  003EA8  EC60  F027         	call	_printf	;wreg free
  7398  003EAC  D7D0               	goto	l7973
  7399  003EAE                     l8007:
  7400  003EAE  0100               	movlb	0	; () banked
  7401  003EB0  5197               	movf	receive_downconverter_data@idx& (0+255),w,b
  7402  003EB2  6FD5               	movwf	??_receive_downconverter_data& (0+255),b
  7403  003EB4  6BD6               	clrf	(??_receive_downconverter_data+1)& (0+255),b
  7404                           
  7405                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7406                           ; Switch size 1, requested type "simple"
  7407                           ; Number of cases is 1, Range of values is 0 to 0
  7408                           ; switch strategies available:
  7409                           ; Name         Instructions Cycles
  7410                           ; simple_byte            4     3 (average)
  7411                           ;	Chosen strategy is simple_byte
  7412  003EB6  51D6               	movf	(??_receive_downconverter_data+1)& (0+255),w,b
  7413  003EB8  0A00               	xorlw	0	; case 0
  7414  003EBA  A4D8               	btfss	status,2,c
  7415  003EBC  0012               	return	
  7416                           
  7417                           ; BSR set to: 0
  7418                           ; Switch size 1, requested type "simple"
  7419                           ; Number of cases is 5, Range of values is 0 to 4
  7420                           ; switch strategies available:
  7421                           ; Name         Instructions Cycles
  7422                           ; simple_byte           16     9 (average)
  7423                           ;	Chosen strategy is simple_byte
  7424  003EBE  51D5               	movf	??_receive_downconverter_data& (0+255),w,b
  7425  003EC0  0A00               	xorlw	0	; case 0
  7426  003EC2  B4D8               	btfsc	status,2,c
  7427  003EC4  D7BA               	goto	l7965
  7428  003EC6  0A01               	xorlw	1	; case 1
  7429  003EC8  B4D8               	btfsc	status,2,c
  7430  003ECA  D7BD               	goto	l7969
  7431  003ECC  0A03               	xorlw	3	; case 2
  7432  003ECE  B4D8               	btfsc	status,2,c
  7433  003ED0  D7C1               	goto	l7975
  7434  003ED2  0A01               	xorlw	1	; case 3
  7435  003ED4  B4D8               	btfsc	status,2,c
  7436  003ED6  D7C0               	goto	l7981
  7437  003ED8  0A07               	xorlw	7	; case 4
  7438  003EDA  A4D8               	btfss	status,2,c
  7439  003EDC  0012               	return	
  7440  003EDE  D7C3               	goto	l7989
  7441  003EE0                     __end_of_receive_downconverter_data:
  7442                           	opt callstack 0
  7443                           
  7444 ;; *************** function _check_adf4351_lock *****************
  7445 ;; Defined at:
  7446 ;;		line 229 in file "src/main.c"
  7447 ;; Parameters:    Size  Location     Type
  7448 ;;		None
  7449 ;; Auto vars:     Size  Location     Type
  7450 ;;  lock            1  101[COMRAM] unsigned char 
  7451 ;; Return value:  Size  Location     Type
  7452 ;;                  1    wreg      void 
  7453 ;; Registers used:
  7454 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7455 ;; Tracked objects:
  7456 ;;		On entry : 0/0
  7457 ;;		On exit  : 3F/0
  7458 ;;		Unchanged: 0/0
  7459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7460 ;;      Params:         0       0       0       0       0       0       0
  7461 ;;      Locals:         1       0       0       0       0       0       0
  7462 ;;      Temps:          0       0       0       0       0       0       0
  7463 ;;      Totals:         1       0       0       0       0       0       0
  7464 ;;Total ram usage:        1 bytes
  7465 ;; Hardware stack levels used:    1
  7466 ;; Hardware stack levels required when called:   11
  7467 ;; This function calls:
  7468 ;;		_adf4351_get_lock
  7469 ;;		_adf4351_set_tune
  7470 ;;		_alarm
  7471 ;;		_printf
  7472 ;; This function is called by:
  7473 ;;		_main
  7474 ;; This function uses a non-reentrant model
  7475 ;;
  7476                           
  7477                           	psect	text29
  7478  004156                     __ptext29:
  7479                           	opt callstack 0
  7480  004156                     _check_adf4351_lock:
  7481                           	opt callstack 19
  7482                           
  7483                           ;src/main.c: 231:  static u16 timespan_s = 0;;src/main.c: 232:  static u8 last_lock = 0;
      +                          ;src/main.c: 233:  static u8 unlock_cnt = 0;;src/main.c: 237:  if(++timespan_s >= (1000/
      +                          10)) {
  7484                           
  7485                           ; BSR set to: 0
  7486                           ;incstack = 0
  7487  004156  0100               	movlb	0	; () banked
  7488  004158  4B86               	infsnz	check_adf4351_lock@timespan_s& (0+255),f,b
  7489  00415A  2B87               	incf	(check_adf4351_lock@timespan_s+1)& (0+255),f,b
  7490  00415C  5187               	movf	(check_adf4351_lock@timespan_s+1)& (0+255),w,b
  7491  00415E  E104               	bnz	u11090
  7492  004160  0E64               	movlw	100
  7493  004162  5D86               	subwf	check_adf4351_lock@timespan_s& (0+255),w,b
  7494  004164  A0D8               	btfss	status,0,c
  7495  004166  D02A               	goto	l8301
  7496  004168                     u11090:
  7497                           
  7498                           ; BSR set to: 0
  7499                           ;src/main.c: 243:   alarm();
  7500  004168  ECF9  F010         	call	_alarm	;wreg free
  7501                           
  7502                           ; BSR set to: 0
  7503                           ;src/main.c: 246:   if(unlock_cnt > 10) {
  7504  00416C  0E0A               	movlw	10
  7505  00416E  6593               	cpfsgt	check_adf4351_lock@unlock_cnt& (0+255),b
  7506  004170  D01D               	goto	l8297
  7507                           
  7508                           ; BSR set to: 0
  7509                           ;src/main.c: 247:    printf("ADF4351 RE-INITIALIZE, unlock_cnt:%d\r\n", unlock_cnt);
  7510  004172  0E0F               	movlw	low STR_19
  7511  004174  6FCB               	movwf	printf@fmt& (0+255),b
  7512  004176  0E7E               	movlw	high STR_19
  7513  004178  6FCC               	movwf	(printf@fmt+1)& (0+255),b
  7514  00417A  C093  F0CD         	movff	check_adf4351_lock@unlock_cnt,?_printf+2
  7515  00417E  6BCE               	clrf	(?_printf+3)& (0+255),b
  7516  004180  EC60  F027         	call	_printf	;wreg free
  7517                           
  7518                           ;src/main.c: 248:    printf("UPC 00 08 ADF4351 Re-Init\n");
  7519  004184  0EDB               	movlw	low STR_20
  7520  004186  6FCB               	movwf	printf@fmt& (0+255),b
  7521  004188  0E7E               	movlw	high STR_20
  7522  00418A  6FCC               	movwf	(printf@fmt+1)& (0+255),b
  7523  00418C  EC60  F027         	call	_printf	;wreg free
  7524                           
  7525                           ; BSR set to: 0
  7526                           ;src/main.c: 249:    adf4351_set_tune(&g_adf4351, g_ipc, g_pout, 1);
  7527  004190  0E65               	movlw	low _g_adf4351
  7528  004192  6E27               	movwf	adf4351_set_tune@ctx^0,c
  7529  004194  0E01               	movlw	high _g_adf4351
  7530  004196  6E28               	movwf	(adf4351_set_tune@ctx+1)^0,c
  7531  004198  0E05               	movlw	5
  7532  00419A  6E29               	movwf	adf4351_set_tune@icp^0,c
  7533  00419C  0E01               	movlw	1
  7534  00419E  6E2A               	movwf	adf4351_set_tune@pout^0,c
  7535  0041A0  0E00               	movlw	0
  7536  0041A2  6E2C               	movwf	(adf4351_set_tune@lownoise+1)^0,c
  7537  0041A4  0E01               	movlw	1
  7538  0041A6  6E2B               	movwf	adf4351_set_tune@lownoise^0,c
  7539  0041A8  ECEC  F023         	call	_adf4351_set_tune	;wreg free
  7540  0041AC                     l8297:
  7541                           
  7542                           ;src/main.c: 252:   unlock_cnt = 0;
  7543  0041AC  0E00               	movlw	0
  7544  0041AE  0100               	movlb	0	; () banked
  7545  0041B0  6F93               	movwf	check_adf4351_lock@unlock_cnt& (0+255),b
  7546                           
  7547                           ; BSR set to: 0
  7548                           ;src/main.c: 253:   timespan_s = 0;
  7549  0041B2  0E00               	movlw	0
  7550  0041B4  6F87               	movwf	(check_adf4351_lock@timespan_s+1)& (0+255),b
  7551  0041B6  0E00               	movlw	0
  7552  0041B8  6F86               	movwf	check_adf4351_lock@timespan_s& (0+255),b
  7553                           
  7554                           ;src/main.c: 254:  }
  7555  0041BA  0012               	return	
  7556  0041BC                     l8301:
  7557                           
  7558                           ; BSR set to: 0
  7559                           ;src/main.c: 258:   u8 lock = adf4351_get_lock(&g_adf4351);
  7560  0041BC  0E65               	movlw	low _g_adf4351
  7561  0041BE  6FD5               	movwf	adf4351_get_lock@ctx& (0+255),b
  7562  0041C0  0E01               	movlw	high _g_adf4351
  7563  0041C2  6FD6               	movwf	(adf4351_get_lock@ctx+1)& (0+255),b
  7564  0041C4  EC09  F023         	call	_adf4351_get_lock	;wreg free
  7565  0041C8  51D5               	movf	?_adf4351_get_lock& (0+255),w,b
  7566  0041CA  6E66               	movwf	check_adf4351_lock@lock^0,c
  7567                           
  7568                           ; BSR set to: 0
  7569                           ;src/main.c: 260:   if(lock == 0 || lock != last_lock) {
  7570  0041CC  5066               	movf	check_adf4351_lock@lock^0,w,c
  7571  0041CE  B4D8               	btfsc	status,2,c
  7572  0041D0  D004               	goto	u11120
  7573                           
  7574                           ; BSR set to: 0
  7575  0041D2  5194               	movf	check_adf4351_lock@last_lock& (0+255),w,b
  7576  0041D4  1866               	xorwf	check_adf4351_lock@lock^0,w,c
  7577  0041D6  B4D8               	btfsc	status,2,c
  7578  0041D8  0012               	return	
  7579  0041DA                     u11120:
  7580                           
  7581                           ; BSR set to: 0
  7582                           ;src/main.c: 261:    last_lock = lock;
  7583  0041DA  C066  F094         	movff	check_adf4351_lock@lock,check_adf4351_lock@last_lock
  7584                           
  7585                           ; BSR set to: 0
  7586                           ;src/main.c: 262:    unlock_cnt++;
  7587  0041DE  2B93               	incf	check_adf4351_lock@unlock_cnt& (0+255),f,b
  7588                           
  7589                           ; BSR set to: 0
  7590  0041E0  0012               	return		;funcret
  7591  0041E2                     __end_of_check_adf4351_lock:
  7592                           	opt callstack 0
  7593                           
  7594 ;; *************** function _alarm *****************
  7595 ;; Defined at:
  7596 ;;		line 50 in file "src/alarm.c"
  7597 ;; Parameters:    Size  Location     Type
  7598 ;;		None
  7599 ;; Auto vars:     Size  Location     Type
  7600 ;;  voltage         2   41[BANK0 ] unsigned short 
  7601 ;;  temperature     2   39[BANK0 ] short 
  7602 ;;  fwd             2   37[BANK0 ] unsigned short 
  7603 ;;  rev             2   31[BANK0 ] unsigned short 
  7604 ;; Return value:  Size  Location     Type
  7605 ;;                  1    wreg      void 
  7606 ;; Registers used:
  7607 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7608 ;; Tracked objects:
  7609 ;;		On entry : 3F/0
  7610 ;;		On exit  : 3F/0
  7611 ;;		Unchanged: 0/0
  7612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7613 ;;      Params:         0       0       0       0       0       0       0
  7614 ;;      Locals:         0      12       0       0       0       0       0
  7615 ;;      Temps:          0       3       0       0       0       0       0
  7616 ;;      Totals:         0      15       0       0       0       0       0
  7617 ;;Total ram usage:       15 bytes
  7618 ;; Hardware stack levels used:    1
  7619 ;; Hardware stack levels required when called:   10
  7620 ;; This function calls:
  7621 ;;		_calc_power
  7622 ;;		_printf
  7623 ;;		_readFWD
  7624 ;;		_readKTY82
  7625 ;;		_readPowerVoltage
  7626 ;; This function is called by:
  7627 ;;		_check_adf4351_lock
  7628 ;; This function uses a non-reentrant model
  7629 ;;
  7630                           
  7631                           	psect	text30
  7632  0021F2                     __ptext30:
  7633                           	opt callstack 0
  7634  0021F2                     _alarm:
  7635                           	opt callstack 19
  7636                           
  7637                           ; BSR set to: 0
  7638                           ;src/alarm.c: 57:  u16 rev = 0;
  7639                           
  7640                           ; BSR set to: 0
  7641                           ;incstack = 0
  7642  0021F2  0E00               	movlw	0
  7643  0021F4  6FD9               	movwf	(alarm@rev+1)& (0+255),b
  7644  0021F6  0E00               	movlw	0
  7645  0021F8  6FD8               	movwf	alarm@rev& (0+255),b
  7646                           
  7647                           ; BSR set to: 0
  7648                           ;src/alarm.c: 60:  s16 temperature = readKTY82();
  7649  0021FA  EC4F  F027         	call	_readKTY82	;wreg free
  7650  0021FE  C05B  F0E0         	movff	?_readKTY82,alarm@temperature
  7651  002202  C05C  F0E1         	movff	?_readKTY82+1,alarm@temperature+1
  7652                           
  7653                           ;src/alarm.c: 61:  printf("UPC 00 00 %d\n",temperature);
  7654  002206  0E89               	movlw	low STR_26
  7655  002208  0100               	movlb	0	; () banked
  7656  00220A  6FCB               	movwf	printf@fmt& (0+255),b
  7657  00220C  0E7F               	movlw	high STR_26
  7658  00220E  6FCC               	movwf	(printf@fmt+1)& (0+255),b
  7659  002210  C0E0  F0CD         	movff	alarm@temperature,?_printf+2
  7660  002214  C0E1  F0CE         	movff	alarm@temperature+1,?_printf+3
  7661  002218  EC60  F027         	call	_printf	;wreg free
  7662                           
  7663                           ; BSR set to: 0
  7664                           ;src/alarm.c: 63:  if(temperature >= 75)
  7665  00221C  BFE1               	btfsc	(alarm@temperature+1)& (0+255),7,b
  7666  00221E  D008               	goto	l8025
  7667  002220  51E1               	movf	(alarm@temperature+1)& (0+255),w,b
  7668  002222  E104               	bnz	u10810
  7669  002224  0E4B               	movlw	75
  7670  002226  5DE0               	subwf	alarm@temperature& (0+255),w,b
  7671  002228  A0D8               	btfss	status,0,c
  7672  00222A  D002               	goto	l8025
  7673  00222C                     u10810:
  7674                           
  7675                           ; BSR set to: 0
  7676                           ;src/alarm.c: 64:   overtemp_alarm = 1;
  7677  00222C  0E01               	movlw	1
  7678  00222E  6F8E               	movwf	_overtemp_alarm& (0+255),b
  7679  002230                     l8025:
  7680                           
  7681                           ; BSR set to: 0
  7682                           ;src/alarm.c: 66:  if(temperature < (75 -5))
  7683  002230  BFE1               	btfsc	(alarm@temperature+1)& (0+255),7,b
  7684  002232  D006               	goto	u10820
  7685  002234  51E1               	movf	(alarm@temperature+1)& (0+255),w,b
  7686  002236  E106               	bnz	l8029
  7687  002238  0E46               	movlw	70
  7688  00223A  5DE0               	subwf	alarm@temperature& (0+255),w,b
  7689  00223C  B0D8               	btfsc	status,0,c
  7690  00223E  D002               	goto	l8029
  7691  002240                     u10820:
  7692                           
  7693                           ; BSR set to: 0
  7694                           ;src/alarm.c: 67:   overtemp_alarm = 0;
  7695  002240  0E00               	movlw	0
  7696  002242  6F8E               	movwf	_overtemp_alarm& (0+255),b
  7697  002244                     l8029:
  7698                           
  7699                           ; BSR set to: 0
  7700                           ;src/alarm.c: 69:  u16 voltage = readPowerVoltage();
  7701  002244  EC17  F027         	call	_readPowerVoltage	;wreg free
  7702  002248  C025  F0E2         	movff	?_readPowerVoltage,alarm@voltage
  7703  00224C  C026  F0E3         	movff	?_readPowerVoltage+1,alarm@voltage+1
  7704                           
  7705                           ;src/alarm.c: 70:  printf("UPC 00 01 %d\n",voltage);
  7706  002250  0E97               	movlw	low STR_27
  7707  002252  0100               	movlb	0	; () banked
  7708  002254  6FCB               	movwf	printf@fmt& (0+255),b
  7709  002256  0E7F               	movlw	high STR_27
  7710  002258  6FCC               	movwf	(printf@fmt+1)& (0+255),b
  7711  00225A  C0E2  F0CD         	movff	alarm@voltage,?_printf+2
  7712  00225E  C0E3  F0CE         	movff	alarm@voltage+1,?_printf+3
  7713  002262  EC60  F027         	call	_printf	;wreg free
  7714                           
  7715                           ; BSR set to: 0
  7716                           ;src/alarm.c: 72:  if(voltage < 4700)
  7717  002266  0E5C               	movlw	92
  7718  002268  5DE2               	subwf	alarm@voltage& (0+255),w,b
  7719  00226A  0E12               	movlw	18
  7720  00226C  59E3               	subwfb	(alarm@voltage+1)& (0+255),w,b
  7721  00226E  B0D8               	btfsc	status,0,c
  7722  002270  D002               	goto	l8037
  7723                           
  7724                           ; BSR set to: 0
  7725                           ;src/alarm.c: 73:   supplyvoltage_alarm = 1;
  7726  002272  0E01               	movlw	1
  7727  002274  D009               	goto	L5
  7728  002276                     l8037:
  7729                           
  7730                           ; BSR set to: 0
  7731  002276  0E7D               	movlw	125
  7732  002278  5DE2               	subwf	alarm@voltage& (0+255),w,b
  7733  00227A  0E15               	movlw	21
  7734  00227C  59E3               	subwfb	(alarm@voltage+1)& (0+255),w,b
  7735  00227E  A0D8               	btfss	status,0,c
  7736  002280  D002               	goto	l8041
  7737                           
  7738                           ; BSR set to: 0
  7739                           ;src/alarm.c: 75:   supplyvoltage_alarm = 2;
  7740  002282  0E02               	movlw	2
  7741  002284  D001               	goto	L5
  7742  002286                     l8041:
  7743                           
  7744                           ; BSR set to: 0
  7745                           ;src/alarm.c: 77:   supplyvoltage_alarm = 0;
  7746  002286  0E00               	movlw	0
  7747  002288                     L5:
  7748  002288  6F8C               	movwf	_supplyvoltage_alarm& (0+255),b
  7749                           
  7750                           ; BSR set to: 0
  7751                           ;src/alarm.c: 80:  if(ptt_status == 1)
  7752  00228A  0595               	decf	_ptt_status& (0+255),w,b
  7753  00228C  A4D8               	btfss	status,2,c
  7754  00228E  D01C               	goto	l8051
  7755                           
  7756                           ; BSR set to: 0
  7757                           ;src/alarm.c: 81:  {;src/alarm.c: 82:   fwd = readFWD();
  7758  002290  EC2B  F027         	call	_readFWD	;wreg free
  7759  002294  C025  F0DE         	movff	?_readFWD,alarm@fwd
  7760  002298  C026  F0DF         	movff	?_readFWD+1,alarm@fwd+1
  7761                           
  7762                           ;src/alarm.c: 83:   calc_power(fwd);
  7763  00229C  C0DE  F01B         	movff	alarm@fwd,calc_power@v
  7764  0022A0  C0DF  F01C         	movff	alarm@fwd+1,calc_power@v+1
  7765  0022A4  EC14  F01A         	call	_calc_power	;wreg free
  7766                           
  7767                           ; BSR set to: 0
  7768                           ;src/alarm.c: 85:   printf("UPC 00 02 %d %d\n",fwd,power_dBm);
  7769  0022A8  0E49               	movlw	low STR_28
  7770  0022AA  6FCB               	movwf	printf@fmt& (0+255),b
  7771  0022AC  0E7F               	movlw	high STR_28
  7772  0022AE  6FCC               	movwf	(printf@fmt+1)& (0+255),b
  7773  0022B0  C0DE  F0CD         	movff	alarm@fwd,?_printf+2
  7774  0022B4  C0DF  F0CE         	movff	alarm@fwd+1,?_printf+3
  7775  0022B8  518F               	movf	_power_dBm& (0+255),w,b
  7776  0022BA  6FCF               	movwf	(?_printf+4)& (0+255),b
  7777  0022BC  6BD0               	clrf	(?_printf+5)& (0+255),b
  7778  0022BE  BFCF               	btfsc	(?_printf+4)& (0+255),7,b
  7779  0022C0  07D0               	decf	(?_printf+5)& (0+255),f,b
  7780  0022C2  EC60  F027         	call	_printf	;wreg free
  7781                           
  7782                           ;src/alarm.c: 92:  }
  7783  0022C6  D002               	goto	l8053
  7784  0022C8                     l8051:
  7785                           
  7786                           ; BSR set to: 0
  7787                           ;src/alarm.c: 94:   revpwr_alarm = 0;
  7788  0022C8  0E00               	movlw	0
  7789  0022CA  6F8D               	movwf	_revpwr_alarm& (0+255),b
  7790  0022CC                     l8053:
  7791                           
  7792                           ; BSR set to: 0
  7793                           ;src/alarm.c: 97:  if(old_overtemp_alarm != overtemp_alarm)
  7794  0022CC  518E               	movf	_overtemp_alarm& (0+255),w,b
  7795  0022CE  198B               	xorwf	alarm@old_overtemp_alarm& (0+255),w,b
  7796  0022D0  B4D8               	btfsc	status,2,c
  7797  0022D2  D034               	goto	l8073
  7798                           
  7799                           ; BSR set to: 0
  7800                           ;src/alarm.c: 98:  {;src/alarm.c: 99:   printf("over temperature alarm: %s T=%d\n",overt
      +                          emp_alarm?"ON":"OFF",temperature);
  7801  0022D4  518E               	movf	_overtemp_alarm& (0+255),w,b
  7802  0022D6  A4D8               	btfss	status,2,c
  7803  0022D8  D004               	goto	l8059
  7804                           
  7805                           ; BSR set to: 0
  7806  0022DA  0EE9               	movlw	low STR_31
  7807  0022DC  6FDA               	movwf	_alarm$2272& (0+255),b
  7808  0022DE  0E7F               	movlw	high STR_31
  7809  0022E0  D003               	goto	L6
  7810  0022E2                     l8059:
  7811                           
  7812                           ; BSR set to: 0
  7813  0022E2  0EF6               	movlw	low STR_30
  7814  0022E4  6FDA               	movwf	_alarm$2272& (0+255),b
  7815  0022E6  0E7F               	movlw	high STR_30
  7816  0022E8                     L6:
  7817  0022E8  6FDB               	movwf	(_alarm$2272+1)& (0+255),b
  7818                           
  7819                           ; BSR set to: 0
  7820  0022EA  0E7D               	movlw	low STR_29
  7821  0022EC  6FCB               	movwf	printf@fmt& (0+255),b
  7822  0022EE  0E7E               	movlw	high STR_29
  7823  0022F0  6FCC               	movwf	(printf@fmt+1)& (0+255),b
  7824  0022F2  C0DA  F0CD         	movff	_alarm$2272,?_printf+2
  7825  0022F6  C0DB  F0CE         	movff	_alarm$2272+1,?_printf+3
  7826  0022FA  C0E0  F0CF         	movff	alarm@temperature,?_printf+4
  7827  0022FE  C0E1  F0D0         	movff	alarm@temperature+1,?_printf+5
  7828  002302  EC60  F027         	call	_printf	;wreg free
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;src/alarm.c: 100:   printf("UPC 00 11 %s T=%d\n",overtemp_alarm?"ON":"OFF",temperature)
      +                          ;
  7832  002306  518E               	movf	_overtemp_alarm& (0+255),w,b
  7833  002308  A4D8               	btfss	status,2,c
  7834  00230A  D004               	goto	l8067
  7835                           
  7836                           ; BSR set to: 0
  7837  00230C  0EE9               	movlw	low STR_31
  7838  00230E  6FDC               	movwf	_alarm$2277& (0+255),b
  7839  002310  0E7F               	movlw	high STR_31
  7840  002312  D003               	goto	L7
  7841  002314                     l8067:
  7842                           
  7843                           ; BSR set to: 0
  7844  002314  0EF6               	movlw	low STR_30
  7845  002316  6FDC               	movwf	_alarm$2277& (0+255),b
  7846  002318  0E7F               	movlw	high STR_30
  7847  00231A                     L7:
  7848  00231A  6FDD               	movwf	(_alarm$2277+1)& (0+255),b
  7849                           
  7850                           ; BSR set to: 0
  7851  00231C  0E23               	movlw	low STR_32
  7852  00231E  6FCB               	movwf	printf@fmt& (0+255),b
  7853  002320  0E7F               	movlw	high STR_32
  7854  002322  6FCC               	movwf	(printf@fmt+1)& (0+255),b
  7855  002324  C0DC  F0CD         	movff	_alarm$2277,?_printf+2
  7856  002328  C0DD  F0CE         	movff	_alarm$2277+1,?_printf+3
  7857  00232C  C0E0  F0CF         	movff	alarm@temperature,?_printf+4
  7858  002330  C0E1  F0D0         	movff	alarm@temperature+1,?_printf+5
  7859  002334  EC60  F027         	call	_printf	;wreg free
  7860                           
  7861                           ; BSR set to: 0
  7862                           ;src/alarm.c: 101:   old_overtemp_alarm = overtemp_alarm;
  7863  002338  C08E  F08B         	movff	_overtemp_alarm,alarm@old_overtemp_alarm
  7864  00233C                     l8073:
  7865                           
  7866                           ; BSR set to: 0
  7867                           ;src/alarm.c: 104:  if(old_supplyvoltage_alarm != supplyvoltage_alarm)
  7868  00233C  518C               	movf	_supplyvoltage_alarm& (0+255),w,b
  7869  00233E  198A               	xorwf	alarm@old_supplyvoltage_alarm& (0+255),w,b
  7870  002340  B4D8               	btfsc	status,2,c
  7871  002342  D02A               	goto	l8089
  7872                           
  7873                           ; BSR set to: 0
  7874                           ;src/alarm.c: 105:  {;src/alarm.c: 106:   if(supplyvoltage_alarm == 1)
  7875  002344  058C               	decf	_supplyvoltage_alarm& (0+255),w,b
  7876  002346  A4D8               	btfss	status,2,c
  7877  002348  D00A               	goto	l8079
  7878                           
  7879                           ; BSR set to: 0
  7880                           ;src/alarm.c: 107:    printf("UPC 00 12 under voltage %d mV\n",voltage);
  7881  00234A  0E9E               	movlw	low STR_35
  7882  00234C  6FCB               	movwf	printf@fmt& (0+255),b
  7883  00234E  0E7E               	movlw	high STR_35
  7884  002350  6FCC               	movwf	(printf@fmt+1)& (0+255),b
  7885  002352  C0E2  F0CD         	movff	alarm@voltage,?_printf+2
  7886  002356  C0E3  F0CE         	movff	alarm@voltage+1,?_printf+3
  7887  00235A  EC60  F027         	call	_printf	;wreg free
  7888  00235E                     l8079:
  7889                           
  7890                           ; BSR set to: 0
  7891                           ;src/alarm.c: 108:   if(supplyvoltage_alarm == 2)
  7892  00235E  0E02               	movlw	2
  7893  002360  198C               	xorwf	_supplyvoltage_alarm& (0+255),w,b
  7894  002362  A4D8               	btfss	status,2,c
  7895  002364  D00A               	goto	l8083
  7896                           
  7897                           ; BSR set to: 0
  7898                           ;src/alarm.c: 109:    printf("UPC 00 13 over voltage %d mV\n",voltage);
  7899  002366  0EBD               	movlw	low STR_36
  7900  002368  6FCB               	movwf	printf@fmt& (0+255),b
  7901  00236A  0E7E               	movlw	high STR_36
  7902  00236C  6FCC               	movwf	(printf@fmt+1)& (0+255),b
  7903  00236E  C0E2  F0CD         	movff	alarm@voltage,?_printf+2
  7904  002372  C0E3  F0CE         	movff	alarm@voltage+1,?_printf+3
  7905  002376  EC60  F027         	call	_printf	;wreg free
  7906  00237A                     l8083:
  7907                           
  7908                           ; BSR set to: 0
  7909                           ;src/alarm.c: 110:   if(supplyvoltage_alarm == 0)
  7910  00237A  518C               	movf	_supplyvoltage_alarm& (0+255),w,b
  7911  00237C  A4D8               	btfss	status,2,c
  7912  00237E  D00A               	goto	l8087
  7913                           
  7914                           ; BSR set to: 0
  7915                           ;src/alarm.c: 111:    printf("UPC 00 12 supply voltage OK %d mV\n",voltage);
  7916  002380  0E5A               	movlw	low STR_37
  7917  002382  6FCB               	movwf	printf@fmt& (0+255),b
  7918  002384  0E7E               	movlw	high STR_37
  7919  002386  6FCC               	movwf	(printf@fmt+1)& (0+255),b
  7920  002388  C0E2  F0CD         	movff	alarm@voltage,?_printf+2
  7921  00238C  C0E3  F0CE         	movff	alarm@voltage+1,?_printf+3
  7922  002390  EC60  F027         	call	_printf	;wreg free
  7923  002394                     l8087:
  7924                           
  7925                           ; BSR set to: 0
  7926                           ;src/alarm.c: 113:   old_supplyvoltage_alarm = supplyvoltage_alarm;
  7927  002394  C08C  F08A         	movff	_supplyvoltage_alarm,alarm@old_supplyvoltage_alarm
  7928  002398                     l8089:
  7929                           
  7930                           ; BSR set to: 0
  7931                           ;src/alarm.c: 128:  if( overtemp_alarm ||
  7932  002398  518E               	movf	_overtemp_alarm& (0+255),w,b
  7933  00239A  A4D8               	btfss	status,2,c
  7934  00239C  D006               	goto	u10950
  7935                           
  7936                           ; BSR set to: 0
  7937  00239E  518C               	movf	_supplyvoltage_alarm& (0+255),w,b
  7938  0023A0  A4D8               	btfss	status,2,c
  7939  0023A2  D003               	goto	u10950
  7940                           
  7941                           ; BSR set to: 0
  7942  0023A4  518D               	movf	_revpwr_alarm& (0+255),w,b
  7943  0023A6  B4D8               	btfsc	status,2,c
  7944  0023A8  D018               	goto	l8097
  7945  0023AA                     u10950:
  7946                           
  7947                           ; BSR set to: 0
  7948  0023AA  0EC9               	movlw	low (_PIN_ALARM_OUTPUT_DEF+4)
  7949  0023AC  6EF6               	movwf	tblptrl,c
  7950  0023AE  0E7C               	movlw	high (_PIN_ALARM_OUTPUT_DEF+4)
  7951  0023B0  6EF7               	movwf	tblptrh,c
  7952  0023B2                     	if	0	;tblptru may be non-zero
  7953  0023B2                     	endif
  7954  0023B2                     	if	0	;tblptru may be non-zero
  7955  0023B2                     	endif
  7956  0023B2  0008               	tblrd		*
  7957  0023B4  CFF5 F0D5          	movff	tablat,??_alarm
  7958  0023B8  0EC5               	movlw	low _PIN_ALARM_OUTPUT_DEF
  7959  0023BA  6EF6               	movwf	tblptrl,c
  7960  0023BC                     	if	1	;There is more than 1 active tblptr byte
  7961  0023BC  0E7C               	movlw	high _PIN_ALARM_OUTPUT_DEF
  7962  0023BE  6EF7               	movwf	tblptrh,c
  7963  0023C0                     	endif
  7964  0023C0                     	if	0	;There are less than 3 active tblptr bytes
  7965  0023C0                     	endif
  7966  0023C0  0009               	tblrd		*+
  7967  0023C2  CFF5 F0D6          	movff	tablat,??_alarm+1
  7968  0023C6  0009               	tblrd		*+
  7969  0023C8  CFF5 F0D7          	movff	tablat,??_alarm+2
  7970  0023CC  C0D6  FFD9         	movff	??_alarm+1,fsr2l
  7971  0023D0  C0D7  FFDA         	movff	??_alarm+2,fsr2h
  7972  0023D4  51D5               	movf	??_alarm& (0+255),w,b
  7973  0023D6  12DF               	iorwf	indf2,f,c
  7974                           
  7975                           ;src/alarm.c: 133:  }
  7976  0023D8  0012               	return	
  7977  0023DA                     l8097:
  7978                           
  7979                           ; BSR set to: 0
  7980  0023DA  0EC9               	movlw	low (_PIN_ALARM_OUTPUT_DEF+4)
  7981  0023DC  6EF6               	movwf	tblptrl,c
  7982  0023DE  0E7C               	movlw	high (_PIN_ALARM_OUTPUT_DEF+4)
  7983  0023E0  6EF7               	movwf	tblptrh,c
  7984  0023E2                     	if	0	;tblptru may be non-zero
  7985  0023E2                     	endif
  7986  0023E2                     	if	0	;tblptru may be non-zero
  7987  0023E2                     	endif
  7988  0023E2  0008               	tblrd		*
  7989  0023E4  50F5               	movf	tablat,w,c
  7990  0023E6  0AFF               	xorlw	255
  7991  0023E8  6FD5               	movwf	??_alarm& (0+255),b
  7992  0023EA  0EC5               	movlw	low _PIN_ALARM_OUTPUT_DEF
  7993  0023EC  6EF6               	movwf	tblptrl,c
  7994  0023EE                     	if	1	;There is more than 1 active tblptr byte
  7995  0023EE  0E7C               	movlw	high _PIN_ALARM_OUTPUT_DEF
  7996  0023F0  6EF7               	movwf	tblptrh,c
  7997  0023F2                     	endif
  7998  0023F2                     	if	0	;There are less than 3 active tblptr bytes
  7999  0023F2                     	endif
  8000  0023F2  0009               	tblrd		*+
  8001  0023F4  CFF5 F0D6          	movff	tablat,??_alarm+1
  8002  0023F8  0009               	tblrd		*+
  8003  0023FA  CFF5 F0D7          	movff	tablat,??_alarm+2
  8004  0023FE  C0D6  FFD9         	movff	??_alarm+1,fsr2l
  8005  002402  C0D7  FFDA         	movff	??_alarm+2,fsr2h
  8006  002406  51D5               	movf	??_alarm& (0+255),w,b
  8007  002408  16DF               	andwf	indf2,f,c
  8008                           
  8009                           ; BSR set to: 0
  8010  00240A  0012               	return		;funcret
  8011  00240C                     __end_of_alarm:
  8012                           	opt callstack 0
  8013                           
  8014 ;; *************** function _readPowerVoltage *****************
  8015 ;; Defined at:
  8016 ;;		line 100 in file "src/driver/adc.c"
  8017 ;; Parameters:    Size  Location     Type
  8018 ;;		None
  8019 ;; Auto vars:     Size  Location     Type
  8020 ;;  v               4   38[COMRAM] unsigned long 
  8021 ;; Return value:  Size  Location     Type
  8022 ;;                  2   36[COMRAM] unsigned short 
  8023 ;; Registers used:
  8024 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8025 ;; Tracked objects:
  8026 ;;		On entry : 3F/0
  8027 ;;		On exit  : 0/0
  8028 ;;		Unchanged: 0/0
  8029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8030 ;;      Params:         2       0       0       0       0       0       0
  8031 ;;      Locals:         4       0       0       0       0       0       0
  8032 ;;      Temps:          0       0       0       0       0       0       0
  8033 ;;      Totals:         6       0       0       0       0       0       0
  8034 ;;Total ram usage:        6 bytes
  8035 ;; Hardware stack levels used:    1
  8036 ;; Hardware stack levels required when called:    5
  8037 ;; This function calls:
  8038 ;;		_adc_voltage
  8039 ;; This function is called by:
  8040 ;;		_alarm
  8041 ;; This function uses a non-reentrant model
  8042 ;;
  8043                           
  8044                           	psect	text31
  8045  004E2E                     __ptext31:
  8046                           	opt callstack 0
  8047  004E2E                     _readPowerVoltage:
  8048                           	opt callstack 23
  8049                           
  8050                           ; BSR set to: 0
  8051                           ;src/driver/adc.c: 102:  u32 v = adc_voltage(PIN_VOLTAGE);
  8052                           
  8053                           ; BSR set to: 0
  8054                           ;incstack = 0
  8055  004E2E  0EE3               	movlw	low _PIN_VOLTAGE_DEF
  8056  004E30  6E19               	movwf	adc_voltage@gpio^0,c
  8057  004E32  0E7C               	movlw	high _PIN_VOLTAGE_DEF
  8058  004E34  6E1A               	movwf	(adc_voltage@gpio+1)^0,c
  8059  004E36  EC80  F023         	call	_adc_voltage	;wreg free
  8060  004E3A  C019  F027         	movff	?_adc_voltage,readPowerVoltage@v
  8061  004E3E  C01A  F028         	movff	?_adc_voltage+1,readPowerVoltage@v+1
  8062  004E42  C01B  F029         	movff	?_adc_voltage+2,readPowerVoltage@v+2
  8063  004E46  C01C  F02A         	movff	?_adc_voltage+3,readPowerVoltage@v+3
  8064                           
  8065                           ;src/driver/adc.c: 104:  return (u16)v * 2;
  8066  004E4A  90D8               	bcf	status,0,c
  8067  004E4C  3427               	rlcf	readPowerVoltage@v^0,w,c
  8068  004E4E  6E25               	movwf	?_readPowerVoltage^0,c
  8069  004E50  3428               	rlcf	(readPowerVoltage@v+1)^0,w,c
  8070  004E52  6E26               	movwf	(?_readPowerVoltage+1)^0,c
  8071  004E54  0012               	return		;funcret
  8072  004E56                     __end_of_readPowerVoltage:
  8073                           	opt callstack 0
  8074                           
  8075 ;; *************** function _readKTY82 *****************
  8076 ;; Defined at:
  8077 ;;		line 89 in file "src/driver/kty82.c"
  8078 ;; Parameters:    Size  Location     Type
  8079 ;;		None
  8080 ;; Auto vars:     Size  Location     Type
  8081 ;;		None
  8082 ;; Return value:  Size  Location     Type
  8083 ;;                  2   90[COMRAM] short 
  8084 ;; Registers used:
  8085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8086 ;; Tracked objects:
  8087 ;;		On entry : 3F/0
  8088 ;;		On exit  : 0/0
  8089 ;;		Unchanged: 0/0
  8090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8091 ;;      Params:         2       0       0       0       0       0       0
  8092 ;;      Locals:         0       0       0       0       0       0       0
  8093 ;;      Temps:          0       0       0       0       0       0       0
  8094 ;;      Totals:         2       0       0       0       0       0       0
  8095 ;;Total ram usage:        2 bytes
  8096 ;; Hardware stack levels used:    1
  8097 ;; Hardware stack levels required when called:    5
  8098 ;; This function calls:
  8099 ;;		_KTY82_222_Adc2Temperature
  8100 ;;		_adc_voltage
  8101 ;; This function is called by:
  8102 ;;		_alarm
  8103 ;; This function uses a non-reentrant model
  8104 ;;
  8105                           
  8106                           	psect	text32
  8107  004E9E                     __ptext32:
  8108                           	opt callstack 0
  8109  004E9E                     _readKTY82:
  8110                           	opt callstack 23
  8111                           
  8112                           ; BSR set to: 0
  8113                           ;src/driver/kty82.c: 91:  return KTY82_222_Adc2Temperature(adc_voltage(PIN_TEMP));
  8114                           
  8115                           ;incstack = 0
  8116  004E9E  0EF2               	movlw	low _PIN_TEMP_DEF
  8117  004EA0  6E19               	movwf	adc_voltage@gpio^0,c
  8118  004EA2  0E7C               	movlw	high _PIN_TEMP_DEF
  8119  004EA4  6E1A               	movwf	(adc_voltage@gpio+1)^0,c
  8120  004EA6  EC80  F023         	call	_adc_voltage	;wreg free
  8121  004EAA  C019  F03F         	movff	?_adc_voltage,KTY82_222_Adc2Temperature@adc_value
  8122  004EAE  C01A  F040         	movff	?_adc_voltage+1,KTY82_222_Adc2Temperature@adc_value+1
  8123  004EB2  EC6D  F004         	call	_KTY82_222_Adc2Temperature	;wreg free
  8124  004EB6  C03F  F05B         	movff	?_KTY82_222_Adc2Temperature,?_readKTY82
  8125  004EBA  C040  F05C         	movff	?_KTY82_222_Adc2Temperature+1,?_readKTY82+1
  8126  004EBE  0012               	return		;funcret
  8127  004EC0                     __end_of_readKTY82:
  8128                           	opt callstack 0
  8129                           
  8130 ;; *************** function _KTY82_222_Adc2Temperature *****************
  8131 ;; Defined at:
  8132 ;;		line 49 in file "src/driver/kty82.c"
  8133 ;; Parameters:    Size  Location     Type
  8134 ;;  adc_value       2   62[COMRAM] unsigned short 
  8135 ;; Auto vars:     Size  Location     Type
  8136 ;;  Rptc            4   84[COMRAM] float 
  8137 ;;  Umess           4   80[COMRAM] float 
  8138 ;;  x               4   72[COMRAM] float 
  8139 ;;  i               2   88[COMRAM] int 
  8140 ;; Return value:  Size  Location     Type
  8141 ;;                  2   62[COMRAM] short 
  8142 ;; Registers used:
  8143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8144 ;; Tracked objects:
  8145 ;;		On entry : 0/0
  8146 ;;		On exit  : 0/0
  8147 ;;		Unchanged: 0/0
  8148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8149 ;;      Params:         2       0       0       0       0       0       0
  8150 ;;      Locals:        18       0       0       0       0       0       0
  8151 ;;      Temps:          8       0       0       0       0       0       0
  8152 ;;      Totals:        28       0       0       0       0       0       0
  8153 ;;Total ram usage:       28 bytes
  8154 ;; Hardware stack levels used:    1
  8155 ;; Hardware stack levels required when called:    4
  8156 ;; This function calls:
  8157 ;;		___fldiv
  8158 ;;		___fleq
  8159 ;;		___flge
  8160 ;;		___flmul
  8161 ;;		___flsub
  8162 ;;		___fltol
  8163 ;;		___xxtofl
  8164 ;; This function is called by:
  8165 ;;		_readKTY82
  8166 ;; This function uses a non-reentrant model
  8167 ;;
  8168                           
  8169                           	psect	text33
  8170  0008DA                     __ptext33:
  8171                           	opt callstack 0
  8172  0008DA                     _KTY82_222_Adc2Temperature:
  8173                           	opt callstack 23
  8174                           
  8175                           ;src/driver/kty82.c: 49: s16 KTY82_222_Adc2Temperature(u16 adc_value);src/driver/kty82.c
      +                          : 50: {;src/driver/kty82.c: 51:  float Rptc;;src/driver/kty82.c: 52:  int i;;src/driver/
      +                          kty82.c: 53:  float x;;src/driver/kty82.c: 56:  float Umess = (float)adc_value/1000.0;
  8176                           
  8177                           ;incstack = 0
  8178  0008DA  C03F  F00D         	movff	KTY82_222_Adc2Temperature@adc_value,___xxtofl@val
  8179  0008DE  C040  F00E         	movff	KTY82_222_Adc2Temperature@adc_value+1,___xxtofl@val+1
  8180  0008E2  6A0F               	clrf	(___xxtofl@val+2)^0,c
  8181  0008E4  6A10               	clrf	(___xxtofl@val+3)^0,c
  8182  0008E6  0E00               	movlw	0
  8183  0008E8  ECAB  F017         	call	___xxtofl
  8184  0008EC  C00D  F026         	movff	?___xxtofl,___fldiv@b
  8185  0008F0  C00E  F027         	movff	?___xxtofl+1,___fldiv@b+1
  8186  0008F4  C00F  F028         	movff	?___xxtofl+2,___fldiv@b+2
  8187  0008F8  C010  F029         	movff	?___xxtofl+3,___fldiv@b+3
  8188  0008FC  0E00               	movlw	0
  8189  0008FE  6E2A               	movwf	___fldiv@a^0,c
  8190  000900  0E00               	movlw	0
  8191  000902  6E2B               	movwf	(___fldiv@a+1)^0,c
  8192  000904  0E7A               	movlw	122
  8193  000906  6E2C               	movwf	(___fldiv@a+2)^0,c
  8194  000908  0E44               	movlw	68
  8195  00090A  6E2D               	movwf	(___fldiv@a+3)^0,c
  8196  00090C  EC84  F00D         	call	___fldiv	;wreg free
  8197  000910  C026  F051         	movff	?___fldiv,KTY82_222_Adc2Temperature@Umess
  8198  000914  C027  F052         	movff	?___fldiv+1,KTY82_222_Adc2Temperature@Umess+1
  8199  000918  C028  F053         	movff	?___fldiv+2,KTY82_222_Adc2Temperature@Umess+2
  8200  00091C  C029  F054         	movff	?___fldiv+3,KTY82_222_Adc2Temperature@Umess+3
  8201                           
  8202                           ;src/driver/kty82.c: 59:  Rptc = Umess * (float)3300 / ((float)5100/1000.0 - Umess);
  8203  000920  0E00               	movlw	0
  8204  000922  6E11               	movwf	___flmul@a^0,c
  8205  000924  0E40               	movlw	64
  8206  000926  6E12               	movwf	(___flmul@a+1)^0,c
  8207  000928  0E4E               	movlw	78
  8208  00092A  6E13               	movwf	(___flmul@a+2)^0,c
  8209  00092C  0E45               	movlw	69
  8210  00092E  6E14               	movwf	(___flmul@a+3)^0,c
  8211  000930  C051  F00D         	movff	KTY82_222_Adc2Temperature@Umess,___flmul@b
  8212  000934  C052  F00E         	movff	KTY82_222_Adc2Temperature@Umess+1,___flmul@b+1
  8213  000938  C053  F00F         	movff	KTY82_222_Adc2Temperature@Umess+2,___flmul@b+2
  8214  00093C  C054  F010         	movff	KTY82_222_Adc2Temperature@Umess+3,___flmul@b+3
  8215  000940  ECC9  F007         	call	___flmul	;wreg free
  8216  000944  C00D  F026         	movff	?___flmul,___fldiv@b
  8217  000948  C00E  F027         	movff	?___flmul+1,___fldiv@b+1
  8218  00094C  C00F  F028         	movff	?___flmul+2,___fldiv@b+2
  8219  000950  C010  F029         	movff	?___flmul+3,___fldiv@b+3
  8220  000954  C051  F021         	movff	KTY82_222_Adc2Temperature@Umess,___flsub@a
  8221  000958  C052  F022         	movff	KTY82_222_Adc2Temperature@Umess+1,___flsub@a+1
  8222  00095C  C053  F023         	movff	KTY82_222_Adc2Temperature@Umess+2,___flsub@a+2
  8223  000960  C054  F024         	movff	KTY82_222_Adc2Temperature@Umess+3,___flsub@a+3
  8224  000964  0E33               	movlw	51
  8225  000966  6E1D               	movwf	___flsub@b^0,c
  8226  000968  0E33               	movlw	51
  8227  00096A  6E1E               	movwf	(___flsub@b+1)^0,c
  8228  00096C  0EA3               	movlw	163
  8229  00096E  6E1F               	movwf	(___flsub@b+2)^0,c
  8230  000970  0E40               	movlw	64
  8231  000972  6E20               	movwf	(___flsub@b+3)^0,c
  8232  000974  EC03  F026         	call	___flsub	;wreg free
  8233  000978  C01D  F02A         	movff	?___flsub,___fldiv@a
  8234  00097C  C01E  F02B         	movff	?___flsub+1,___fldiv@a+1
  8235  000980  C01F  F02C         	movff	?___flsub+2,___fldiv@a+2
  8236  000984  C020  F02D         	movff	?___flsub+3,___fldiv@a+3
  8237  000988  EC84  F00D         	call	___fldiv	;wreg free
  8238  00098C  C026  F055         	movff	?___fldiv,KTY82_222_Adc2Temperature@Rptc
  8239  000990  C027  F056         	movff	?___fldiv+1,KTY82_222_Adc2Temperature@Rptc+1
  8240  000994  C028  F057         	movff	?___fldiv+2,KTY82_222_Adc2Temperature@Rptc+2
  8241  000998  C029  F058         	movff	?___fldiv+3,KTY82_222_Adc2Temperature@Rptc+3
  8242                           
  8243                           ;src/driver/kty82.c: 61:  if(Rptc <= temptab[0])
  8244  00099C  C19C  F00D         	movff	_temptab,___flge@ff1
  8245  0009A0  C19D  F00E         	movff	_temptab+1,___flge@ff1+1
  8246  0009A4  C19E  F00F         	movff	_temptab+2,___flge@ff1+2
  8247  0009A8  C19F  F010         	movff	_temptab+3,___flge@ff1+3
  8248  0009AC  C055  F011         	movff	KTY82_222_Adc2Temperature@Rptc,___flge@ff2
  8249  0009B0  C056  F012         	movff	KTY82_222_Adc2Temperature@Rptc+1,___flge@ff2+1
  8250  0009B4  C057  F013         	movff	KTY82_222_Adc2Temperature@Rptc+2,___flge@ff2+2
  8251  0009B8  C058  F014         	movff	KTY82_222_Adc2Temperature@Rptc+3,___flge@ff2+3
  8252  0009BC  EC6E  F01C         	call	___flge	;wreg free
  8253  0009C0  A0D8               	btfss	status,0,c
  8254  0009C2  D005               	goto	l7673
  8255                           
  8256                           ;src/driver/kty82.c: 62:  {;src/driver/kty82.c: 64:   return 0;
  8257  0009C4  0E00               	movlw	0
  8258  0009C6  6E40               	movwf	(?_KTY82_222_Adc2Temperature+1)^0,c
  8259  0009C8  0E00               	movlw	0
  8260  0009CA  6E3F               	movwf	?_KTY82_222_Adc2Temperature^0,c
  8261  0009CC  0012               	return	
  8262  0009CE                     l7673:
  8263                           
  8264                           ;src/driver/kty82.c: 68:  i=0;
  8265  0009CE  0E00               	movlw	0
  8266  0009D0  6E5A               	movwf	(KTY82_222_Adc2Temperature@i+1)^0,c
  8267  0009D2  0E00               	movlw	0
  8268  0009D4  6E59               	movwf	KTY82_222_Adc2Temperature@i^0,c
  8269                           
  8270                           ;src/driver/kty82.c: 69:  while(temptab[i]!=-1)
  8271  0009D6  D026               	goto	l7681
  8272  0009D8                     l7675:
  8273                           
  8274                           ;src/driver/kty82.c: 70:  {;src/driver/kty82.c: 71:   if(temptab[i] >= Rptc) break;
  8275  0009D8  0E9C               	movlw	low _temptab
  8276  0009DA  6E41               	movwf	??_KTY82_222_Adc2Temperature^0,c
  8277  0009DC  0E01               	movlw	high _temptab
  8278  0009DE  6E42               	movwf	(??_KTY82_222_Adc2Temperature+1)^0,c
  8279  0009E0  90D8               	bcf	status,0,c
  8280  0009E2  3459               	rlcf	KTY82_222_Adc2Temperature@i^0,w,c
  8281  0009E4  6ED9               	movwf	fsr2l,c
  8282  0009E6  345A               	rlcf	(KTY82_222_Adc2Temperature@i+1)^0,w,c
  8283  0009E8  6EDA               	movwf	fsr2h,c
  8284  0009EA  90D8               	bcf	status,0,c
  8285  0009EC  36D9               	rlcf	fsr2l,f,c
  8286  0009EE  36DA               	rlcf	fsr2h,f,c
  8287  0009F0  5041               	movf	??_KTY82_222_Adc2Temperature^0,w,c
  8288  0009F2  26D9               	addwf	fsr2l,f,c
  8289  0009F4  5042               	movf	(??_KTY82_222_Adc2Temperature+1)^0,w,c
  8290  0009F6  22DA               	addwfc	fsr2h,f,c
  8291  0009F8  CFDE F00D          	movff	postinc2,___flge@ff1
  8292  0009FC  CFDE F00E          	movff	postinc2,___flge@ff1+1
  8293  000A00  CFDE F00F          	movff	postinc2,___flge@ff1+2
  8294  000A04  CFDE F010          	movff	postinc2,___flge@ff1+3
  8295  000A08  C055  F011         	movff	KTY82_222_Adc2Temperature@Rptc,___flge@ff2
  8296  000A0C  C056  F012         	movff	KTY82_222_Adc2Temperature@Rptc+1,___flge@ff2+1
  8297  000A10  C057  F013         	movff	KTY82_222_Adc2Temperature@Rptc+2,___flge@ff2+2
  8298  000A14  C058  F014         	movff	KTY82_222_Adc2Temperature@Rptc+3,___flge@ff2+3
  8299  000A18  EC6E  F01C         	call	___flge	;wreg free
  8300  000A1C  B0D8               	btfsc	status,0,c
  8301  000A1E  D026               	goto	u10340
  8302                           
  8303                           ;src/driver/kty82.c: 72:   i++;
  8304  000A20  4A59               	infsnz	KTY82_222_Adc2Temperature@i^0,f,c
  8305  000A22  2A5A               	incf	(KTY82_222_Adc2Temperature@i+1)^0,f,c
  8306  000A24                     l7681:
  8307                           
  8308                           ;src/driver/kty82.c: 69:  while(temptab[i]!=-1)
  8309  000A24  0E9C               	movlw	low _temptab
  8310  000A26  6E41               	movwf	??_KTY82_222_Adc2Temperature^0,c
  8311  000A28  0E01               	movlw	high _temptab
  8312  000A2A  6E42               	movwf	(??_KTY82_222_Adc2Temperature+1)^0,c
  8313  000A2C  90D8               	bcf	status,0,c
  8314  000A2E  3459               	rlcf	KTY82_222_Adc2Temperature@i^0,w,c
  8315  000A30  6ED9               	movwf	fsr2l,c
  8316  000A32  345A               	rlcf	(KTY82_222_Adc2Temperature@i+1)^0,w,c
  8317  000A34  6EDA               	movwf	fsr2h,c
  8318  000A36  90D8               	bcf	status,0,c
  8319  000A38  36D9               	rlcf	fsr2l,f,c
  8320  000A3A  36DA               	rlcf	fsr2h,f,c
  8321  000A3C  5041               	movf	??_KTY82_222_Adc2Temperature^0,w,c
  8322  000A3E  26D9               	addwf	fsr2l,f,c
  8323  000A40  5042               	movf	(??_KTY82_222_Adc2Temperature+1)^0,w,c
  8324  000A42  22DA               	addwfc	fsr2h,f,c
  8325  000A44  CFDE F00D          	movff	postinc2,___fleq@ff1
  8326  000A48  CFDE F00E          	movff	postinc2,___fleq@ff1+1
  8327  000A4C  CFDE F00F          	movff	postinc2,___fleq@ff1+2
  8328  000A50  CFDE F010          	movff	postinc2,___fleq@ff1+3
  8329  000A54  0E00               	movlw	0
  8330  000A56  6E11               	movwf	___fleq@ff2^0,c
  8331  000A58  0E00               	movlw	0
  8332  000A5A  6E12               	movwf	(___fleq@ff2+1)^0,c
  8333  000A5C  0E80               	movlw	128
  8334  000A5E  6E13               	movwf	(___fleq@ff2+2)^0,c
  8335  000A60  0EBF               	movlw	191
  8336  000A62  6E14               	movwf	(___fleq@ff2+3)^0,c
  8337  000A64  ECC1  F021         	call	___fleq	;wreg free
  8338  000A68  A0D8               	btfss	status,0,c
  8339  000A6A  D7B6               	goto	l7675
  8340  000A6C                     u10340:
  8341                           
  8342                           ;src/driver/kty82.c: 76:  if(temptab[i]!=-1)
  8343  000A6C  0E9C               	movlw	low _temptab
  8344  000A6E  6E41               	movwf	??_KTY82_222_Adc2Temperature^0,c
  8345  000A70  0E01               	movlw	high _temptab
  8346  000A72  6E42               	movwf	(??_KTY82_222_Adc2Temperature+1)^0,c
  8347  000A74  90D8               	bcf	status,0,c
  8348  000A76  3459               	rlcf	KTY82_222_Adc2Temperature@i^0,w,c
  8349  000A78  6ED9               	movwf	fsr2l,c
  8350  000A7A  345A               	rlcf	(KTY82_222_Adc2Temperature@i+1)^0,w,c
  8351  000A7C  6EDA               	movwf	fsr2h,c
  8352  000A7E  90D8               	bcf	status,0,c
  8353  000A80  36D9               	rlcf	fsr2l,f,c
  8354  000A82  36DA               	rlcf	fsr2h,f,c
  8355  000A84  5041               	movf	??_KTY82_222_Adc2Temperature^0,w,c
  8356  000A86  26D9               	addwf	fsr2l,f,c
  8357  000A88  5042               	movf	(??_KTY82_222_Adc2Temperature+1)^0,w,c
  8358  000A8A  22DA               	addwfc	fsr2h,f,c
  8359  000A8C  CFDE F00D          	movff	postinc2,___fleq@ff1
  8360  000A90  CFDE F00E          	movff	postinc2,___fleq@ff1+1
  8361  000A94  CFDE F00F          	movff	postinc2,___fleq@ff1+2
  8362  000A98  CFDE F010          	movff	postinc2,___fleq@ff1+3
  8363  000A9C  0E00               	movlw	0
  8364  000A9E  6E11               	movwf	___fleq@ff2^0,c
  8365  000AA0  0E00               	movlw	0
  8366  000AA2  6E12               	movwf	(___fleq@ff2+1)^0,c
  8367  000AA4  0E80               	movlw	128
  8368  000AA6  6E13               	movwf	(___fleq@ff2+2)^0,c
  8369  000AA8  0EBF               	movlw	191
  8370  000AAA  6E14               	movwf	(___fleq@ff2+3)^0,c
  8371  000AAC  ECC1  F021         	call	___fleq	;wreg free
  8372  000AB0  B0D8               	btfsc	status,0,c
  8373  000AB2  D0BD               	goto	l7693
  8374                           
  8375                           ;src/driver/kty82.c: 77:  {;src/driver/kty82.c: 80:   x = i - (Rptc - temptab[i])/(tempt
      +                          ab[i-1] - temptab[i]);
  8376  000AB4  0E9C               	movlw	low _temptab
  8377  000AB6  6E41               	movwf	??_KTY82_222_Adc2Temperature^0,c
  8378  000AB8  0E01               	movlw	high _temptab
  8379  000ABA  6E42               	movwf	(??_KTY82_222_Adc2Temperature+1)^0,c
  8380  000ABC  90D8               	bcf	status,0,c
  8381  000ABE  3459               	rlcf	KTY82_222_Adc2Temperature@i^0,w,c
  8382  000AC0  6ED9               	movwf	fsr2l,c
  8383  000AC2  345A               	rlcf	(KTY82_222_Adc2Temperature@i+1)^0,w,c
  8384  000AC4  6EDA               	movwf	fsr2h,c
  8385  000AC6  90D8               	bcf	status,0,c
  8386  000AC8  36D9               	rlcf	fsr2l,f,c
  8387  000ACA  36DA               	rlcf	fsr2h,f,c
  8388  000ACC  5041               	movf	??_KTY82_222_Adc2Temperature^0,w,c
  8389  000ACE  26D9               	addwf	fsr2l,f,c
  8390  000AD0  5042               	movf	(??_KTY82_222_Adc2Temperature+1)^0,w,c
  8391  000AD2  22DA               	addwfc	fsr2h,f,c
  8392  000AD4  CFDE F021          	movff	postinc2,___flsub@a
  8393  000AD8  CFDE F022          	movff	postinc2,___flsub@a+1
  8394  000ADC  CFDE F023          	movff	postinc2,___flsub@a+2
  8395  000AE0  CFDE F024          	movff	postinc2,___flsub@a+3
  8396  000AE4  0EFC               	movlw	252
  8397  000AE6  6E43               	movwf	(??_KTY82_222_Adc2Temperature+2)^0,c
  8398  000AE8  0EFF               	movlw	255
  8399  000AEA  6E44               	movwf	(??_KTY82_222_Adc2Temperature+3)^0,c
  8400  000AEC  0E9C               	movlw	low _temptab
  8401  000AEE  6E45               	movwf	(??_KTY82_222_Adc2Temperature+4)^0,c
  8402  000AF0  0E01               	movlw	high _temptab
  8403  000AF2  6E46               	movwf	(??_KTY82_222_Adc2Temperature+5)^0,c
  8404  000AF4  5043               	movf	(??_KTY82_222_Adc2Temperature+2)^0,w,c
  8405  000AF6  2645               	addwf	(??_KTY82_222_Adc2Temperature+4)^0,f,c
  8406  000AF8  5044               	movf	(??_KTY82_222_Adc2Temperature+3)^0,w,c
  8407  000AFA  2246               	addwfc	(??_KTY82_222_Adc2Temperature+5)^0,f,c
  8408  000AFC  90D8               	bcf	status,0,c
  8409  000AFE  3459               	rlcf	KTY82_222_Adc2Temperature@i^0,w,c
  8410  000B00  6ED9               	movwf	fsr2l,c
  8411  000B02  345A               	rlcf	(KTY82_222_Adc2Temperature@i+1)^0,w,c
  8412  000B04  6EDA               	movwf	fsr2h,c
  8413  000B06  90D8               	bcf	status,0,c
  8414  000B08  36D9               	rlcf	fsr2l,f,c
  8415  000B0A  36DA               	rlcf	fsr2h,f,c
  8416  000B0C  5045               	movf	(??_KTY82_222_Adc2Temperature+4)^0,w,c
  8417  000B0E  26D9               	addwf	fsr2l,f,c
  8418  000B10  5046               	movf	(??_KTY82_222_Adc2Temperature+5)^0,w,c
  8419  000B12  22DA               	addwfc	fsr2h,f,c
  8420  000B14  CFDE F01D          	movff	postinc2,___flsub@b
  8421  000B18  CFDE F01E          	movff	postinc2,___flsub@b+1
  8422  000B1C  CFDE F01F          	movff	postinc2,___flsub@b+2
  8423  000B20  CFDE F020          	movff	postinc2,___flsub@b+3
  8424  000B24  EC03  F026         	call	___flsub	;wreg free
  8425  000B28  C01D  F02A         	movff	?___flsub,___fldiv@a
  8426  000B2C  C01E  F02B         	movff	?___flsub+1,___fldiv@a+1
  8427  000B30  C01F  F02C         	movff	?___flsub+2,___fldiv@a+2
  8428  000B34  C020  F02D         	movff	?___flsub+3,___fldiv@a+3
  8429  000B38  0E9C               	movlw	low _temptab
  8430  000B3A  6E47               	movwf	(??_KTY82_222_Adc2Temperature+6)^0,c
  8431  000B3C  0E01               	movlw	high _temptab
  8432  000B3E  6E48               	movwf	(??_KTY82_222_Adc2Temperature+7)^0,c
  8433  000B40  90D8               	bcf	status,0,c
  8434  000B42  3459               	rlcf	KTY82_222_Adc2Temperature@i^0,w,c
  8435  000B44  6ED9               	movwf	fsr2l,c
  8436  000B46  345A               	rlcf	(KTY82_222_Adc2Temperature@i+1)^0,w,c
  8437  000B48  6EDA               	movwf	fsr2h,c
  8438  000B4A  90D8               	bcf	status,0,c
  8439  000B4C  36D9               	rlcf	fsr2l,f,c
  8440  000B4E  36DA               	rlcf	fsr2h,f,c
  8441  000B50  5047               	movf	(??_KTY82_222_Adc2Temperature+6)^0,w,c
  8442  000B52  26D9               	addwf	fsr2l,f,c
  8443  000B54  5048               	movf	(??_KTY82_222_Adc2Temperature+7)^0,w,c
  8444  000B56  22DA               	addwfc	fsr2h,f,c
  8445  000B58  CFDE F021          	movff	postinc2,___flsub@a
  8446  000B5C  CFDE F022          	movff	postinc2,___flsub@a+1
  8447  000B60  CFDE F023          	movff	postinc2,___flsub@a+2
  8448  000B64  CFDE F024          	movff	postinc2,___flsub@a+3
  8449  000B68  C055  F01D         	movff	KTY82_222_Adc2Temperature@Rptc,___flsub@b
  8450  000B6C  C056  F01E         	movff	KTY82_222_Adc2Temperature@Rptc+1,___flsub@b+1
  8451  000B70  C057  F01F         	movff	KTY82_222_Adc2Temperature@Rptc+2,___flsub@b+2
  8452  000B74  C058  F020         	movff	KTY82_222_Adc2Temperature@Rptc+3,___flsub@b+3
  8453  000B78  EC03  F026         	call	___flsub	;wreg free
  8454  000B7C  C01D  F026         	movff	?___flsub,___fldiv@b
  8455  000B80  C01E  F027         	movff	?___flsub+1,___fldiv@b+1
  8456  000B84  C01F  F028         	movff	?___flsub+2,___fldiv@b+2
  8457  000B88  C020  F029         	movff	?___flsub+3,___fldiv@b+3
  8458  000B8C  EC84  F00D         	call	___fldiv	;wreg free
  8459  000B90  C026  F04D         	movff	?___fldiv,_KTY82_222_Adc2Temperature$3105
  8460  000B94  C027  F04E         	movff	?___fldiv+1,_KTY82_222_Adc2Temperature$3105+1
  8461  000B98  C028  F04F         	movff	?___fldiv+2,_KTY82_222_Adc2Temperature$3105+2
  8462  000B9C  C029  F050         	movff	?___fldiv+3,_KTY82_222_Adc2Temperature$3105+3
  8463                           
  8464                           ;src/driver/kty82.c: 77:  {;src/driver/kty82.c: 80:   x = i - (Rptc - temptab[i])/(tempt
      +                          ab[i-1] - temptab[i]);
  8465  000BA0  C059  F00D         	movff	KTY82_222_Adc2Temperature@i,___xxtofl@val
  8466  000BA4  C05A  F00E         	movff	KTY82_222_Adc2Temperature@i+1,___xxtofl@val+1
  8467  000BA8  0E00               	movlw	0
  8468  000BAA  BE0E               	btfsc	(___xxtofl@val+1)^0,7,c
  8469  000BAC  0EFF               	movlw	-1
  8470  000BAE  6E0F               	movwf	(___xxtofl@val+2)^0,c
  8471  000BB0  6E10               	movwf	(___xxtofl@val+3)^0,c
  8472  000BB2  0E01               	movlw	1
  8473  000BB4  ECAB  F017         	call	___xxtofl
  8474  000BB8  C00D  F01D         	movff	?___xxtofl,___flsub@b
  8475  000BBC  C00E  F01E         	movff	?___xxtofl+1,___flsub@b+1
  8476  000BC0  C00F  F01F         	movff	?___xxtofl+2,___flsub@b+2
  8477  000BC4  C010  F020         	movff	?___xxtofl+3,___flsub@b+3
  8478  000BC8  C04D  F021         	movff	_KTY82_222_Adc2Temperature$3105,___flsub@a
  8479  000BCC  C04E  F022         	movff	_KTY82_222_Adc2Temperature$3105+1,___flsub@a+1
  8480  000BD0  C04F  F023         	movff	_KTY82_222_Adc2Temperature$3105+2,___flsub@a+2
  8481  000BD4  C050  F024         	movff	_KTY82_222_Adc2Temperature$3105+3,___flsub@a+3
  8482  000BD8  EC03  F026         	call	___flsub	;wreg free
  8483  000BDC  C01D  F049         	movff	?___flsub,KTY82_222_Adc2Temperature@x
  8484  000BE0  C01E  F04A         	movff	?___flsub+1,KTY82_222_Adc2Temperature@x+1
  8485  000BE4  C01F  F04B         	movff	?___flsub+2,KTY82_222_Adc2Temperature@x+2
  8486  000BE8  C020  F04C         	movff	?___flsub+3,KTY82_222_Adc2Temperature@x+3
  8487                           
  8488                           ;src/driver/kty82.c: 83:   return (s16)(x*10.0);
  8489  000BEC  0E00               	movlw	0
  8490  000BEE  6E11               	movwf	___flmul@a^0,c
  8491  000BF0  0E00               	movlw	0
  8492  000BF2  6E12               	movwf	(___flmul@a+1)^0,c
  8493  000BF4  0E20               	movlw	32
  8494  000BF6  6E13               	movwf	(___flmul@a+2)^0,c
  8495  000BF8  0E41               	movlw	65
  8496  000BFA  6E14               	movwf	(___flmul@a+3)^0,c
  8497  000BFC  C049  F00D         	movff	KTY82_222_Adc2Temperature@x,___flmul@b
  8498  000C00  C04A  F00E         	movff	KTY82_222_Adc2Temperature@x+1,___flmul@b+1
  8499  000C04  C04B  F00F         	movff	KTY82_222_Adc2Temperature@x+2,___flmul@b+2
  8500  000C08  C04C  F010         	movff	KTY82_222_Adc2Temperature@x+3,___flmul@b+3
  8501  000C0C  ECC9  F007         	call	___flmul	;wreg free
  8502  000C10  C00D  F026         	movff	?___flmul,___fltol@f1
  8503  000C14  C00E  F027         	movff	?___flmul+1,___fltol@f1+1
  8504  000C18  C00F  F028         	movff	?___flmul+2,___fltol@f1+2
  8505  000C1C  C010  F029         	movff	?___flmul+3,___fltol@f1+3
  8506  000C20  EC0A  F01E         	call	___fltol	;wreg free
  8507  000C24  C026  F03F         	movff	?___fltol,?_KTY82_222_Adc2Temperature
  8508  000C28  C027  F040         	movff	?___fltol+1,?_KTY82_222_Adc2Temperature+1
  8509  000C2C  0012               	return	
  8510  000C2E                     l7693:
  8511                           
  8512                           ;src/driver/kty82.c: 86:  return 111;
  8513  000C2E  0E00               	movlw	0
  8514  000C30  6E40               	movwf	(?_KTY82_222_Adc2Temperature+1)^0,c
  8515  000C32  0E6F               	movlw	111
  8516  000C34  6E3F               	movwf	?_KTY82_222_Adc2Temperature^0,c
  8517  000C36  0012               	return		;funcret
  8518  000C38                     __end_of_KTY82_222_Adc2Temperature:
  8519                           	opt callstack 0
  8520                           
  8521 ;; *************** function ___xxtofl *****************
  8522 ;; Defined at:
  8523 ;;		line 10 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/xxtofl.c"
  8524 ;; Parameters:    Size  Location     Type
  8525 ;;  sign            1    wreg     unsigned char 
  8526 ;;  val             4   12[COMRAM] long 
  8527 ;; Auto vars:     Size  Location     Type
  8528 ;;  sign            1   20[COMRAM] unsigned char 
  8529 ;;  arg             4   22[COMRAM] unsigned long 
  8530 ;;  exp             1   21[COMRAM] unsigned char 
  8531 ;; Return value:  Size  Location     Type
  8532 ;;                  4   12[COMRAM] unsigned char 
  8533 ;; Registers used:
  8534 ;;		wreg, status,2, status,0
  8535 ;; Tracked objects:
  8536 ;;		On entry : 0/0
  8537 ;;		On exit  : 0/0
  8538 ;;		Unchanged: 0/0
  8539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8540 ;;      Params:         4       0       0       0       0       0       0
  8541 ;;      Locals:         6       0       0       0       0       0       0
  8542 ;;      Temps:          4       0       0       0       0       0       0
  8543 ;;      Totals:        14       0       0       0       0       0       0
  8544 ;;Total ram usage:       14 bytes
  8545 ;; Hardware stack levels used:    1
  8546 ;; Hardware stack levels required when called:    2
  8547 ;; This function calls:
  8548 ;;		Nothing
  8549 ;; This function is called by:
  8550 ;;		_KTY82_222_Adc2Temperature
  8551 ;; This function uses a non-reentrant model
  8552 ;;
  8553                           
  8554                           	psect	text34
  8555  002F56                     __ptext34:
  8556                           	opt callstack 0
  8557  002F56                     ___xxtofl:
  8558                           	opt callstack 24
  8559                           
  8560                           ;incstack = 0
  8561                           ;___xxtofl@sign stored from wreg
  8562  002F56  6E15               	movwf	___xxtofl@sign^0,c
  8563  002F58  5015               	movf	___xxtofl@sign^0,w,c
  8564  002F5A  A4D8               	btfss	status,2,c
  8565  002F5C  AE10               	btfss	(___xxtofl@val+3)^0,7,c
  8566  002F5E  D01A               	goto	l1536
  8567  002F60  C00D  F011         	movff	___xxtofl@val,??___xxtofl
  8568  002F64  C00E  F012         	movff	___xxtofl@val+1,??___xxtofl+1
  8569  002F68  C00F  F013         	movff	___xxtofl@val+2,??___xxtofl+2
  8570  002F6C  C010  F014         	movff	___xxtofl@val+3,??___xxtofl+3
  8571  002F70  1E11               	comf	??___xxtofl^0,f,c
  8572  002F72  1E12               	comf	(??___xxtofl+1)^0,f,c
  8573  002F74  1E13               	comf	(??___xxtofl+2)^0,f,c
  8574  002F76  1E14               	comf	(??___xxtofl+3)^0,f,c
  8575  002F78  2A11               	incf	??___xxtofl^0,f,c
  8576  002F7A  0E00               	movlw	0
  8577  002F7C  2212               	addwfc	(??___xxtofl+1)^0,f,c
  8578  002F7E  2213               	addwfc	(??___xxtofl+2)^0,f,c
  8579  002F80  2214               	addwfc	(??___xxtofl+3)^0,f,c
  8580  002F82  C011  F017         	movff	??___xxtofl,___xxtofl@arg
  8581  002F86  C012  F018         	movff	??___xxtofl+1,___xxtofl@arg+1
  8582  002F8A  C013  F019         	movff	??___xxtofl+2,___xxtofl@arg+2
  8583  002F8E  C014  F01A         	movff	??___xxtofl+3,___xxtofl@arg+3
  8584  002F92  D008               	goto	l7523
  8585  002F94                     l1536:
  8586  002F94  C00D  F017         	movff	___xxtofl@val,___xxtofl@arg
  8587  002F98  C00E  F018         	movff	___xxtofl@val+1,___xxtofl@arg+1
  8588  002F9C  C00F  F019         	movff	___xxtofl@val+2,___xxtofl@arg+2
  8589  002FA0  C010  F01A         	movff	___xxtofl@val+3,___xxtofl@arg+3
  8590  002FA4                     l7523:
  8591  002FA4  500D               	movf	___xxtofl@val^0,w,c
  8592  002FA6  100E               	iorwf	(___xxtofl@val+1)^0,w,c
  8593  002FA8  100F               	iorwf	(___xxtofl@val+2)^0,w,c
  8594  002FAA  1010               	iorwf	(___xxtofl@val+3)^0,w,c
  8595  002FAC  A4D8               	btfss	status,2,c
  8596  002FAE  D009               	goto	l7529
  8597  002FB0  0E00               	movlw	0
  8598  002FB2  6E0D               	movwf	?___xxtofl^0,c
  8599  002FB4  0E00               	movlw	0
  8600  002FB6  6E0E               	movwf	(?___xxtofl+1)^0,c
  8601  002FB8  0E00               	movlw	0
  8602  002FBA  6E0F               	movwf	(?___xxtofl+2)^0,c
  8603  002FBC  0E00               	movlw	0
  8604  002FBE  6E10               	movwf	(?___xxtofl+3)^0,c
  8605  002FC0  0012               	return	
  8606  002FC2                     l7529:
  8607  002FC2  0E96               	movlw	150
  8608  002FC4  6E16               	movwf	___xxtofl@exp^0,c
  8609  002FC6  D006               	goto	l7533
  8610  002FC8                     l7531:
  8611  002FC8  2A16               	incf	___xxtofl@exp^0,f,c
  8612  002FCA  90D8               	bcf	status,0,c
  8613  002FCC  321A               	rrcf	(___xxtofl@arg+3)^0,f,c
  8614  002FCE  3219               	rrcf	(___xxtofl@arg+2)^0,f,c
  8615  002FD0  3218               	rrcf	(___xxtofl@arg+1)^0,f,c
  8616  002FD2  3217               	rrcf	___xxtofl@arg^0,f,c
  8617  002FD4                     l7533:
  8618  002FD4  0E00               	movlw	0
  8619  002FD6  1417               	andwf	___xxtofl@arg^0,w,c
  8620  002FD8  6E11               	movwf	??___xxtofl^0,c
  8621  002FDA  0E00               	movlw	0
  8622  002FDC  1418               	andwf	(___xxtofl@arg+1)^0,w,c
  8623  002FDE  6E12               	movwf	(??___xxtofl+1)^0,c
  8624  002FE0  0E00               	movlw	0
  8625  002FE2  1419               	andwf	(___xxtofl@arg+2)^0,w,c
  8626  002FE4  6E13               	movwf	(??___xxtofl+2)^0,c
  8627  002FE6  0EFE               	movlw	254
  8628  002FE8  141A               	andwf	(___xxtofl@arg+3)^0,w,c
  8629  002FEA  6E14               	movwf	(??___xxtofl+3)^0,c
  8630  002FEC  5011               	movf	??___xxtofl^0,w,c
  8631  002FEE  1012               	iorwf	(??___xxtofl+1)^0,w,c
  8632  002FF0  1013               	iorwf	(??___xxtofl+2)^0,w,c
  8633  002FF2  1014               	iorwf	(??___xxtofl+3)^0,w,c
  8634  002FF4  B4D8               	btfsc	status,2,c
  8635  002FF6  D00D               	goto	l1543
  8636  002FF8  D7E7               	goto	l7531
  8637  002FFA                     l7535:
  8638  002FFA  2A16               	incf	___xxtofl@exp^0,f,c
  8639  002FFC  0E01               	movlw	1
  8640  002FFE  2617               	addwf	___xxtofl@arg^0,f,c
  8641  003000  0E00               	movlw	0
  8642  003002  2218               	addwfc	(___xxtofl@arg+1)^0,f,c
  8643  003004  2219               	addwfc	(___xxtofl@arg+2)^0,f,c
  8644  003006  221A               	addwfc	(___xxtofl@arg+3)^0,f,c
  8645  003008  90D8               	bcf	status,0,c
  8646  00300A  321A               	rrcf	(___xxtofl@arg+3)^0,f,c
  8647  00300C  3219               	rrcf	(___xxtofl@arg+2)^0,f,c
  8648  00300E  3218               	rrcf	(___xxtofl@arg+1)^0,f,c
  8649  003010  3217               	rrcf	___xxtofl@arg^0,f,c
  8650  003012                     l1543:
  8651  003012  0E00               	movlw	0
  8652  003014  1417               	andwf	___xxtofl@arg^0,w,c
  8653  003016  6E11               	movwf	??___xxtofl^0,c
  8654  003018  0E00               	movlw	0
  8655  00301A  1418               	andwf	(___xxtofl@arg+1)^0,w,c
  8656  00301C  6E12               	movwf	(??___xxtofl+1)^0,c
  8657  00301E  0E00               	movlw	0
  8658  003020  1419               	andwf	(___xxtofl@arg+2)^0,w,c
  8659  003022  6E13               	movwf	(??___xxtofl+2)^0,c
  8660  003024  0EFF               	movlw	255
  8661  003026  141A               	andwf	(___xxtofl@arg+3)^0,w,c
  8662  003028  6E14               	movwf	(??___xxtofl+3)^0,c
  8663  00302A  5011               	movf	??___xxtofl^0,w,c
  8664  00302C  1012               	iorwf	(??___xxtofl+1)^0,w,c
  8665  00302E  1013               	iorwf	(??___xxtofl+2)^0,w,c
  8666  003030  1014               	iorwf	(??___xxtofl+3)^0,w,c
  8667  003032  B4D8               	btfsc	status,2,c
  8668  003034  D007               	goto	l7543
  8669  003036  D7E1               	goto	l7535
  8670  003038                     l7541:
  8671  003038  0616               	decf	___xxtofl@exp^0,f,c
  8672  00303A  90D8               	bcf	status,0,c
  8673  00303C  3617               	rlcf	___xxtofl@arg^0,f,c
  8674  00303E  3618               	rlcf	(___xxtofl@arg+1)^0,f,c
  8675  003040  3619               	rlcf	(___xxtofl@arg+2)^0,f,c
  8676  003042  361A               	rlcf	(___xxtofl@arg+3)^0,f,c
  8677  003044                     l7543:
  8678  003044  BE19               	btfsc	(___xxtofl@arg+2)^0,7,c
  8679  003046  D003               	goto	u10090
  8680  003048  0E02               	movlw	2
  8681  00304A  6016               	cpfslt	___xxtofl@exp^0,c
  8682  00304C  D7F5               	goto	l7541
  8683  00304E                     u10090:
  8684  00304E  A016               	btfss	___xxtofl@exp^0,0,c
  8685  003050  9E19               	bcf	(___xxtofl@arg+2)^0,7,c
  8686  003052  90D8               	bcf	status,0,c
  8687  003054  3216               	rrcf	___xxtofl@exp^0,f,c
  8688  003056  C016  F011         	movff	___xxtofl@exp,??___xxtofl
  8689  00305A  6A12               	clrf	(??___xxtofl+1)^0,c
  8690  00305C  6A13               	clrf	(??___xxtofl+2)^0,c
  8691  00305E  6A14               	clrf	(??___xxtofl+3)^0,c
  8692  003060  C011  F014         	movff	??___xxtofl,??___xxtofl+3
  8693  003064  6A13               	clrf	(??___xxtofl+2)^0,c
  8694  003066  6A12               	clrf	(??___xxtofl+1)^0,c
  8695  003068  6A11               	clrf	??___xxtofl^0,c
  8696  00306A  5011               	movf	??___xxtofl^0,w,c
  8697  00306C  1217               	iorwf	___xxtofl@arg^0,f,c
  8698  00306E  5012               	movf	(??___xxtofl+1)^0,w,c
  8699  003070  1218               	iorwf	(___xxtofl@arg+1)^0,f,c
  8700  003072  5013               	movf	(??___xxtofl+2)^0,w,c
  8701  003074  1219               	iorwf	(___xxtofl@arg+2)^0,f,c
  8702  003076  5014               	movf	(??___xxtofl+3)^0,w,c
  8703  003078  121A               	iorwf	(___xxtofl@arg+3)^0,f,c
  8704  00307A  5015               	movf	___xxtofl@sign^0,w,c
  8705  00307C  A4D8               	btfss	status,2,c
  8706  00307E  AE10               	btfss	(___xxtofl@val+3)^0,7,c
  8707  003080  D001               	goto	l7559
  8708  003082  8E1A               	bsf	(___xxtofl@arg+3)^0,7,c
  8709  003084                     l7559:
  8710  003084  C017  F00D         	movff	___xxtofl@arg,?___xxtofl
  8711  003088  C018  F00E         	movff	___xxtofl@arg+1,?___xxtofl+1
  8712  00308C  C019  F00F         	movff	___xxtofl@arg+2,?___xxtofl+2
  8713  003090  C01A  F010         	movff	___xxtofl@arg+3,?___xxtofl+3
  8714  003094  0012               	return		;funcret
  8715  003096                     __end_of___xxtofl:
  8716                           	opt callstack 0
  8717                           
  8718 ;; *************** function ___fltol *****************
  8719 ;; Defined at:
  8720 ;;		line 43 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/fltol.c"
  8721 ;; Parameters:    Size  Location     Type
  8722 ;;  f1              4   37[COMRAM] unsigned char 
  8723 ;; Auto vars:     Size  Location     Type
  8724 ;;  exp1            1   46[COMRAM] unsigned char 
  8725 ;;  sign1           1   45[COMRAM] unsigned char 
  8726 ;; Return value:  Size  Location     Type
  8727 ;;                  4   37[COMRAM] long 
  8728 ;; Registers used:
  8729 ;;		wreg, status,2, status,0
  8730 ;; Tracked objects:
  8731 ;;		On entry : 0/0
  8732 ;;		On exit  : 0/0
  8733 ;;		Unchanged: 0/0
  8734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8735 ;;      Params:         4       0       0       0       0       0       0
  8736 ;;      Locals:         2       0       0       0       0       0       0
  8737 ;;      Temps:          4       0       0       0       0       0       0
  8738 ;;      Totals:        10       0       0       0       0       0       0
  8739 ;;Total ram usage:       10 bytes
  8740 ;; Hardware stack levels used:    1
  8741 ;; Hardware stack levels required when called:    2
  8742 ;; This function calls:
  8743 ;;		Nothing
  8744 ;; This function is called by:
  8745 ;;		_KTY82_222_Adc2Temperature
  8746 ;; This function uses a non-reentrant model
  8747 ;;
  8748                           
  8749                           	psect	text35
  8750  003C14                     __ptext35:
  8751                           	opt callstack 0
  8752  003C14                     ___fltol:
  8753                           	opt callstack 24
  8754                           
  8755                           ;incstack = 0
  8756  003C14  3428               	rlcf	(___fltol@f1+2)^0,w,c
  8757  003C16  3429               	rlcf	(___fltol@f1+3)^0,w,c
  8758  003C18  6E2F               	movwf	___fltol@exp1^0,c
  8759  003C1A  502F               	movf	___fltol@exp1^0,w,c
  8760  003C1C  A4D8               	btfss	status,2,c
  8761  003C1E  D009               	goto	l7479
  8762  003C20                     u9960:
  8763  003C20  0E00               	movlw	0
  8764  003C22  6E26               	movwf	?___fltol^0,c
  8765  003C24  0E00               	movlw	0
  8766  003C26  6E27               	movwf	(?___fltol+1)^0,c
  8767  003C28  0E00               	movlw	0
  8768  003C2A  6E28               	movwf	(?___fltol+2)^0,c
  8769  003C2C  0E00               	movlw	0
  8770  003C2E  6E29               	movwf	(?___fltol+3)^0,c
  8771  003C30  0012               	return	
  8772  003C32                     l7479:
  8773  003C32  C026  F02A         	movff	___fltol@f1,??___fltol
  8774  003C36  C027  F02B         	movff	___fltol@f1+1,??___fltol+1
  8775  003C3A  C028  F02C         	movff	___fltol@f1+2,??___fltol+2
  8776  003C3E  C029  F02D         	movff	___fltol@f1+3,??___fltol+3
  8777  003C42  0E20               	movlw	32
  8778  003C44  D005               	goto	u9970
  8779  003C46                     u9975:
  8780  003C46  90D8               	bcf	status,0,c
  8781  003C48  322D               	rrcf	(??___fltol+3)^0,f,c
  8782  003C4A  322C               	rrcf	(??___fltol+2)^0,f,c
  8783  003C4C  322B               	rrcf	(??___fltol+1)^0,f,c
  8784  003C4E  322A               	rrcf	??___fltol^0,f,c
  8785  003C50                     u9970:
  8786  003C50  2EE8               	decfsz	wreg,f,c
  8787  003C52  D7F9               	goto	u9975
  8788  003C54  502A               	movf	??___fltol^0,w,c
  8789  003C56  6E2E               	movwf	___fltol@sign1^0,c
  8790  003C58  8E28               	bsf	(___fltol@f1+2)^0,7,c
  8791  003C5A  0EFF               	movlw	255
  8792  003C5C  1626               	andwf	___fltol@f1^0,f,c
  8793  003C5E  0EFF               	movlw	255
  8794  003C60  1627               	andwf	(___fltol@f1+1)^0,f,c
  8795  003C62  0EFF               	movlw	255
  8796  003C64  1628               	andwf	(___fltol@f1+2)^0,f,c
  8797  003C66  0E00               	movlw	0
  8798  003C68  1629               	andwf	(___fltol@f1+3)^0,f,c
  8799  003C6A  0E96               	movlw	150
  8800  003C6C  5E2F               	subwf	___fltol@exp1^0,f,c
  8801  003C6E  AE2F               	btfss	___fltol@exp1^0,7,c
  8802  003C70  D00D               	goto	l7499
  8803  003C72  502F               	movf	___fltol@exp1^0,w,c
  8804  003C74  0A80               	xorlw	128
  8805  003C76  0F97               	addlw	151
  8806  003C78  A0D8               	btfss	status,0,c
  8807  003C7A  D7D2               	goto	u9960
  8808  003C7C                     l7495:
  8809  003C7C  90D8               	bcf	status,0,c
  8810  003C7E  3229               	rrcf	(___fltol@f1+3)^0,f,c
  8811  003C80  3228               	rrcf	(___fltol@f1+2)^0,f,c
  8812  003C82  3227               	rrcf	(___fltol@f1+1)^0,f,c
  8813  003C84  3226               	rrcf	___fltol@f1^0,f,c
  8814  003C86  3E2F               	incfsz	___fltol@exp1^0,f,c
  8815  003C88  D7F9               	goto	l7495
  8816  003C8A  D00D               	goto	u10010
  8817  003C8C                     l7499:
  8818  003C8C  0E1F               	movlw	31
  8819  003C8E  642F               	cpfsgt	___fltol@exp1^0,c
  8820  003C90  D007               	goto	l7507
  8821  003C92  D7C6               	goto	u9960
  8822  003C94                     l7505:
  8823  003C94  90D8               	bcf	status,0,c
  8824  003C96  3626               	rlcf	___fltol@f1^0,f,c
  8825  003C98  3627               	rlcf	(___fltol@f1+1)^0,f,c
  8826  003C9A  3628               	rlcf	(___fltol@f1+2)^0,f,c
  8827  003C9C  3629               	rlcf	(___fltol@f1+3)^0,f,c
  8828  003C9E  062F               	decf	___fltol@exp1^0,f,c
  8829  003CA0                     l7507:
  8830  003CA0  502F               	movf	___fltol@exp1^0,w,c
  8831  003CA2  A4D8               	btfss	status,2,c
  8832  003CA4  D7F7               	goto	l7505
  8833  003CA6                     u10010:
  8834  003CA6  502E               	movf	___fltol@sign1^0,w,c
  8835  003CA8  B4D8               	btfsc	status,2,c
  8836  003CAA  D008               	goto	l7513
  8837  003CAC  1E29               	comf	(___fltol@f1+3)^0,f,c
  8838  003CAE  1E28               	comf	(___fltol@f1+2)^0,f,c
  8839  003CB0  1E27               	comf	(___fltol@f1+1)^0,f,c
  8840  003CB2  6C26               	negf	___fltol@f1^0,c
  8841  003CB4  0E00               	movlw	0
  8842  003CB6  2227               	addwfc	(___fltol@f1+1)^0,f,c
  8843  003CB8  2228               	addwfc	(___fltol@f1+2)^0,f,c
  8844  003CBA  2229               	addwfc	(___fltol@f1+3)^0,f,c
  8845  003CBC                     l7513:
  8846  003CBC  C026  F026         	movff	___fltol@f1,?___fltol
  8847  003CC0  C027  F027         	movff	___fltol@f1+1,?___fltol+1
  8848  003CC4  C028  F028         	movff	___fltol@f1+2,?___fltol+2
  8849  003CC8  C029  F029         	movff	___fltol@f1+3,?___fltol+3
  8850  003CCC  0012               	return		;funcret
  8851  003CCE                     __end_of___fltol:
  8852                           	opt callstack 0
  8853                           
  8854 ;; *************** function ___flsub *****************
  8855 ;; Defined at:
  8856 ;;		line 245 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/sprcadd.c"
  8857 ;; Parameters:    Size  Location     Type
  8858 ;;  b               4   28[COMRAM] long 
  8859 ;;  a               4   32[COMRAM] long 
  8860 ;; Auto vars:     Size  Location     Type
  8861 ;;		None
  8862 ;; Return value:  Size  Location     Type
  8863 ;;                  4   28[COMRAM] long 
  8864 ;; Registers used:
  8865 ;;		wreg, status,2, status,0, cstack
  8866 ;; Tracked objects:
  8867 ;;		On entry : 0/0
  8868 ;;		On exit  : 0/0
  8869 ;;		Unchanged: 0/0
  8870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8871 ;;      Params:         8       0       0       0       0       0       0
  8872 ;;      Locals:         0       0       0       0       0       0       0
  8873 ;;      Temps:          0       0       0       0       0       0       0
  8874 ;;      Totals:         8       0       0       0       0       0       0
  8875 ;;Total ram usage:        8 bytes
  8876 ;; Hardware stack levels used:    1
  8877 ;; Hardware stack levels required when called:    3
  8878 ;; This function calls:
  8879 ;;		___fladd
  8880 ;; This function is called by:
  8881 ;;		_KTY82_222_Adc2Temperature
  8882 ;; This function uses a non-reentrant model
  8883 ;;
  8884                           
  8885                           	psect	text36
  8886  004C06                     __ptext36:
  8887                           	opt callstack 0
  8888  004C06                     ___flsub:
  8889                           	opt callstack 23
  8890                           
  8891                           ;incstack = 0
  8892  004C06  0E00               	movlw	0
  8893  004C08  1A21               	xorwf	___flsub@a^0,f,c
  8894  004C0A  0E00               	movlw	0
  8895  004C0C  1A22               	xorwf	(___flsub@a+1)^0,f,c
  8896  004C0E  0E00               	movlw	0
  8897  004C10  1A23               	xorwf	(___flsub@a+2)^0,f,c
  8898  004C12  0E80               	movlw	128
  8899  004C14  1A24               	xorwf	(___flsub@a+3)^0,f,c
  8900  004C16  C01D  F00D         	movff	___flsub@b,___fladd@b
  8901  004C1A  C01E  F00E         	movff	___flsub@b+1,___fladd@b+1
  8902  004C1E  C01F  F00F         	movff	___flsub@b+2,___fladd@b+2
  8903  004C22  C020  F010         	movff	___flsub@b+3,___fladd@b+3
  8904  004C26  C021  F011         	movff	___flsub@a,___fladd@a
  8905  004C2A  C022  F012         	movff	___flsub@a+1,___fladd@a+1
  8906  004C2E  C023  F013         	movff	___flsub@a+2,___fladd@a+2
  8907  004C32  C024  F014         	movff	___flsub@a+3,___fladd@a+3
  8908  004C36  EC5F  F009         	call	___fladd	;wreg free
  8909  004C3A  C00D  F01D         	movff	?___fladd,?___flsub
  8910  004C3E  C00E  F01E         	movff	?___fladd+1,?___flsub+1
  8911  004C42  C00F  F01F         	movff	?___fladd+2,?___flsub+2
  8912  004C46  C010  F020         	movff	?___fladd+3,?___flsub+3
  8913  004C4A  0012               	return		;funcret
  8914  004C4C                     __end_of___flsub:
  8915                           	opt callstack 0
  8916                           
  8917 ;; *************** function ___fladd *****************
  8918 ;; Defined at:
  8919 ;;		line 10 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/sprcadd.c"
  8920 ;; Parameters:    Size  Location     Type
  8921 ;;  b               4   12[COMRAM] long 
  8922 ;;  a               4   16[COMRAM] long 
  8923 ;; Auto vars:     Size  Location     Type
  8924 ;;  grs             1   27[COMRAM] unsigned char 
  8925 ;;  bexp            1   26[COMRAM] unsigned char 
  8926 ;;  aexp            1   25[COMRAM] unsigned char 
  8927 ;;  signs           1   24[COMRAM] unsigned char 
  8928 ;; Return value:  Size  Location     Type
  8929 ;;                  4   12[COMRAM] unsigned char 
  8930 ;; Registers used:
  8931 ;;		wreg, status,2, status,0
  8932 ;; Tracked objects:
  8933 ;;		On entry : 0/0
  8934 ;;		On exit  : 0/0
  8935 ;;		Unchanged: 0/0
  8936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8937 ;;      Params:         8       0       0       0       0       0       0
  8938 ;;      Locals:         4       0       0       0       0       0       0
  8939 ;;      Temps:          4       0       0       0       0       0       0
  8940 ;;      Totals:        16       0       0       0       0       0       0
  8941 ;;Total ram usage:       16 bytes
  8942 ;; Hardware stack levels used:    1
  8943 ;; Hardware stack levels required when called:    2
  8944 ;; This function calls:
  8945 ;;		Nothing
  8946 ;; This function is called by:
  8947 ;;		___flsub
  8948 ;; This function uses a non-reentrant model
  8949 ;;
  8950                           
  8951                           	psect	text37
  8952  0012BE                     __ptext37:
  8953                           	opt callstack 0
  8954  0012BE                     ___fladd:
  8955                           	opt callstack 23
  8956                           
  8957                           ;incstack = 0
  8958  0012BE  5010               	movf	(___fladd@b+3)^0,w,c
  8959  0012C0  0B80               	andlw	128
  8960  0012C2  6E19               	movwf	___fladd@signs^0,c
  8961  0012C4  5010               	movf	(___fladd@b+3)^0,w,c
  8962  0012C6  2410               	addwf	(___fladd@b+3)^0,w,c
  8963  0012C8  6E1B               	movwf	___fladd@bexp^0,c
  8964  0012CA  BE0F               	btfsc	(___fladd@b+2)^0,7,c
  8965  0012CC  801B               	bsf	___fladd@bexp^0,0,c
  8966  0012CE  501B               	movf	___fladd@bexp^0,w,c
  8967  0012D0  B4D8               	btfsc	status,2,c
  8968  0012D2  D00D               	goto	l6743
  8969  0012D4  281B               	incf	___fladd@bexp^0,w,c
  8970  0012D6  A4D8               	btfss	status,2,c
  8971  0012D8  D008               	goto	l6739
  8972  0012DA  0E00               	movlw	0
  8973  0012DC  6E0D               	movwf	___fladd@b^0,c
  8974  0012DE  0E00               	movlw	0
  8975  0012E0  6E0E               	movwf	(___fladd@b+1)^0,c
  8976  0012E2  0E00               	movlw	0
  8977  0012E4  6E0F               	movwf	(___fladd@b+2)^0,c
  8978  0012E6  0E00               	movlw	0
  8979  0012E8  6E10               	movwf	(___fladd@b+3)^0,c
  8980  0012EA                     l6739:
  8981  0012EA  8E0F               	bsf	(___fladd@b+2)^0,7,c
  8982  0012EC  D006               	goto	L8
  8983  0012EE                     l6743:
  8984  0012EE  0E00               	movlw	0
  8985  0012F0  6E0D               	movwf	___fladd@b^0,c
  8986  0012F2  0E00               	movlw	0
  8987  0012F4  6E0E               	movwf	(___fladd@b+1)^0,c
  8988  0012F6  0E00               	movlw	0
  8989  0012F8  6E0F               	movwf	(___fladd@b+2)^0,c
  8990  0012FA                     L8:
  8991  0012FA  0E00               	movlw	0
  8992  0012FC  6E10               	movwf	(___fladd@b+3)^0,c
  8993  0012FE  5014               	movf	(___fladd@a+3)^0,w,c
  8994  001300  0B80               	andlw	128
  8995  001302  6E1A               	movwf	___fladd@aexp^0,c
  8996  001304  5019               	movf	___fladd@signs^0,w,c
  8997  001306  181A               	xorwf	___fladd@aexp^0,w,c
  8998  001308  A4D8               	btfss	status,2,c
  8999  00130A  8C19               	bsf	___fladd@signs^0,6,c
  9000  00130C  5014               	movf	(___fladd@a+3)^0,w,c
  9001  00130E  2414               	addwf	(___fladd@a+3)^0,w,c
  9002  001310  6E1A               	movwf	___fladd@aexp^0,c
  9003  001312  BE13               	btfsc	(___fladd@a+2)^0,7,c
  9004  001314  801A               	bsf	___fladd@aexp^0,0,c
  9005  001316  501A               	movf	___fladd@aexp^0,w,c
  9006  001318  B4D8               	btfsc	status,2,c
  9007  00131A  D00D               	goto	l6767
  9008  00131C  281A               	incf	___fladd@aexp^0,w,c
  9009  00131E  A4D8               	btfss	status,2,c
  9010  001320  D008               	goto	l6763
  9011  001322  0E00               	movlw	0
  9012  001324  6E11               	movwf	___fladd@a^0,c
  9013  001326  0E00               	movlw	0
  9014  001328  6E12               	movwf	(___fladd@a+1)^0,c
  9015  00132A  0E00               	movlw	0
  9016  00132C  6E13               	movwf	(___fladd@a+2)^0,c
  9017  00132E  0E00               	movlw	0
  9018  001330  6E14               	movwf	(___fladd@a+3)^0,c
  9019  001332                     l6763:
  9020  001332  8E13               	bsf	(___fladd@a+2)^0,7,c
  9021  001334  D006               	goto	L9
  9022  001336                     l6767:
  9023  001336  0E00               	movlw	0
  9024  001338  6E11               	movwf	___fladd@a^0,c
  9025  00133A  0E00               	movlw	0
  9026  00133C  6E12               	movwf	(___fladd@a+1)^0,c
  9027  00133E  0E00               	movlw	0
  9028  001340  6E13               	movwf	(___fladd@a+2)^0,c
  9029  001342                     L9:
  9030  001342  0E00               	movlw	0
  9031  001344  6E14               	movwf	(___fladd@a+3)^0,c
  9032  001346  501B               	movf	___fladd@bexp^0,w,c
  9033  001348  5C1A               	subwf	___fladd@aexp^0,w,c
  9034  00134A  B0D8               	btfsc	status,0,c
  9035  00134C  D022               	goto	l6805
  9036  00134E  AC19               	btfss	___fladd@signs^0,6,c
  9037  001350  D002               	goto	l6775
  9038  001352  0E80               	movlw	128
  9039  001354  1A19               	xorwf	___fladd@signs^0,f,c
  9040  001356                     l6775:
  9041  001356  C01B  F01C         	movff	___fladd@bexp,___fladd@grs
  9042  00135A  C01A  F01B         	movff	___fladd@aexp,___fladd@bexp
  9043  00135E  C01C  F01A         	movff	___fladd@grs,___fladd@aexp
  9044  001362  C00D  F01C         	movff	___fladd@b,___fladd@grs
  9045  001366  C011  F00D         	movff	___fladd@a,___fladd@b
  9046  00136A  C01C  F011         	movff	___fladd@grs,___fladd@a
  9047  00136E  C00E  F01C         	movff	___fladd@b+1,___fladd@grs
  9048  001372  C012  F00E         	movff	___fladd@a+1,___fladd@b+1
  9049  001376  C01C  F012         	movff	___fladd@grs,___fladd@a+1
  9050  00137A  C00F  F01C         	movff	___fladd@b+2,___fladd@grs
  9051  00137E  C013  F00F         	movff	___fladd@a+2,___fladd@b+2
  9052  001382  C01C  F013         	movff	___fladd@grs,___fladd@a+2
  9053  001386  C010  F01C         	movff	___fladd@b+3,___fladd@grs
  9054  00138A  C014  F010         	movff	___fladd@a+3,___fladd@b+3
  9055  00138E  C01C  F014         	movff	___fladd@grs,___fladd@a+3
  9056  001392                     l6805:
  9057  001392  0E00               	movlw	0
  9058  001394  6E1C               	movwf	___fladd@grs^0,c
  9059  001396  501B               	movf	___fladd@bexp^0,w,c
  9060  001398  C01A  F015         	movff	___fladd@aexp,??___fladd
  9061  00139C  6A16               	clrf	(??___fladd+1)^0,c
  9062  00139E  5E15               	subwf	??___fladd^0,f,c
  9063  0013A0  0E00               	movlw	0
  9064  0013A2  5A16               	subwfb	(??___fladd+1)^0,f,c
  9065  0013A4  BE16               	btfsc	(??___fladd+1)^0,7,c
  9066  0013A6  D02C               	goto	l1410
  9067  0013A8  5016               	movf	(??___fladd+1)^0,w,c
  9068  0013AA  E104               	bnz	u8610
  9069  0013AC  0E1A               	movlw	26
  9070  0013AE  5C15               	subwf	??___fladd^0,w,c
  9071  0013B0  A0D8               	btfss	status,0,c
  9072  0013B2  D026               	goto	l1410
  9073  0013B4                     u8610:
  9074  0013B4  500D               	movf	___fladd@b^0,w,c
  9075  0013B6  100E               	iorwf	(___fladd@b+1)^0,w,c
  9076  0013B8  100F               	iorwf	(___fladd@b+2)^0,w,c
  9077  0013BA  1010               	iorwf	(___fladd@b+3)^0,w,c
  9078  0013BC  B4D8               	btfsc	status,2,c
  9079  0013BE  D002               	goto	u8620
  9080  0013C0  0E01               	movlw	1
  9081  0013C2  D001               	goto	u8630
  9082  0013C4                     u8620:
  9083  0013C4  0E00               	movlw	0
  9084  0013C6                     u8630:
  9085  0013C6  6E1C               	movwf	___fladd@grs^0,c
  9086  0013C8  0E00               	movlw	0
  9087  0013CA  6E0D               	movwf	___fladd@b^0,c
  9088  0013CC  0E00               	movlw	0
  9089  0013CE  6E0E               	movwf	(___fladd@b+1)^0,c
  9090  0013D0  0E00               	movlw	0
  9091  0013D2  6E0F               	movwf	(___fladd@b+2)^0,c
  9092  0013D4  0E00               	movlw	0
  9093  0013D6  6E10               	movwf	(___fladd@b+3)^0,c
  9094  0013D8  C01A  F01B         	movff	___fladd@aexp,___fladd@bexp
  9095  0013DC  D015               	goto	u8660
  9096  0013DE                     l1411:
  9097  0013DE  A01C               	btfss	___fladd@grs^0,0,c
  9098  0013E0  D005               	goto	l6817
  9099  0013E2  90D8               	bcf	status,0,c
  9100  0013E4  301C               	rrcf	___fladd@grs^0,w,c
  9101  0013E6  0901               	iorlw	1
  9102  0013E8  6E1C               	movwf	___fladd@grs^0,c
  9103  0013EA  D002               	goto	l6819
  9104  0013EC                     l6817:
  9105  0013EC  90D8               	bcf	status,0,c
  9106  0013EE  321C               	rrcf	___fladd@grs^0,f,c
  9107  0013F0                     l6819:
  9108  0013F0  B00D               	btfsc	___fladd@b^0,0,c
  9109  0013F2  8E1C               	bsf	___fladd@grs^0,7,c
  9110  0013F4  3410               	rlcf	(___fladd@b+3)^0,w,c
  9111  0013F6  3210               	rrcf	(___fladd@b+3)^0,f,c
  9112  0013F8  320F               	rrcf	(___fladd@b+2)^0,f,c
  9113  0013FA  320E               	rrcf	(___fladd@b+1)^0,f,c
  9114  0013FC  320D               	rrcf	___fladd@b^0,f,c
  9115  0013FE  2A1B               	incf	___fladd@bexp^0,f,c
  9116  001400                     l1410:
  9117  001400  501A               	movf	___fladd@aexp^0,w,c
  9118  001402  5C1B               	subwf	___fladd@bexp^0,w,c
  9119  001404  A0D8               	btfss	status,0,c
  9120  001406  D7EB               	goto	l1411
  9121  001408                     u8660:
  9122  001408  BC19               	btfsc	___fladd@signs^0,6,c
  9123  00140A  D028               	goto	l6851
  9124  00140C  501B               	movf	___fladd@bexp^0,w,c
  9125  00140E  A4D8               	btfss	status,2,c
  9126  001410  D009               	goto	l6833
  9127  001412  0E00               	movlw	0
  9128  001414  6E0D               	movwf	?___fladd^0,c
  9129  001416  0E00               	movlw	0
  9130  001418  6E0E               	movwf	(?___fladd+1)^0,c
  9131  00141A  0E00               	movlw	0
  9132  00141C  6E0F               	movwf	(?___fladd+2)^0,c
  9133  00141E  0E00               	movlw	0
  9134  001420  6E10               	movwf	(?___fladd+3)^0,c
  9135  001422  0012               	return	
  9136  001424                     l6833:
  9137  001424  5011               	movf	___fladd@a^0,w,c
  9138  001426  260D               	addwf	___fladd@b^0,f,c
  9139  001428  5012               	movf	(___fladd@a+1)^0,w,c
  9140  00142A  220E               	addwfc	(___fladd@b+1)^0,f,c
  9141  00142C  5013               	movf	(___fladd@a+2)^0,w,c
  9142  00142E  220F               	addwfc	(___fladd@b+2)^0,f,c
  9143  001430  5014               	movf	(___fladd@a+3)^0,w,c
  9144  001432  2210               	addwfc	(___fladd@b+3)^0,f,c
  9145  001434  A010               	btfss	(___fladd@b+3)^0,0,c
  9146  001436  D071               	goto	u8790
  9147  001438  A01C               	btfss	___fladd@grs^0,0,c
  9148  00143A  D005               	goto	l6841
  9149  00143C  90D8               	bcf	status,0,c
  9150  00143E  301C               	rrcf	___fladd@grs^0,w,c
  9151  001440  0901               	iorlw	1
  9152  001442  6E1C               	movwf	___fladd@grs^0,c
  9153  001444  D002               	goto	l6843
  9154  001446                     l6841:
  9155  001446  90D8               	bcf	status,0,c
  9156  001448  321C               	rrcf	___fladd@grs^0,f,c
  9157  00144A                     l6843:
  9158  00144A  B00D               	btfsc	___fladd@b^0,0,c
  9159  00144C  8E1C               	bsf	___fladd@grs^0,7,c
  9160  00144E  3410               	rlcf	(___fladd@b+3)^0,w,c
  9161  001450  3210               	rrcf	(___fladd@b+3)^0,f,c
  9162  001452  320F               	rrcf	(___fladd@b+2)^0,f,c
  9163  001454  320E               	rrcf	(___fladd@b+1)^0,f,c
  9164  001456  320D               	rrcf	___fladd@b^0,f,c
  9165  001458  2A1B               	incf	___fladd@bexp^0,f,c
  9166  00145A  D05F               	goto	u8790
  9167  00145C                     l6851:
  9168  00145C  5011               	movf	___fladd@a^0,w,c
  9169  00145E  5C0D               	subwf	___fladd@b^0,w,c
  9170  001460  5012               	movf	(___fladd@a+1)^0,w,c
  9171  001462  580E               	subwfb	(___fladd@b+1)^0,w,c
  9172  001464  5013               	movf	(___fladd@a+2)^0,w,c
  9173  001466  580F               	subwfb	(___fladd@b+2)^0,w,c
  9174  001468  5010               	movf	(___fladd@b+3)^0,w,c
  9175  00146A  0A80               	xorlw	128
  9176  00146C  6E15               	movwf	??___fladd^0,c
  9177  00146E  5014               	movf	(___fladd@a+3)^0,w,c
  9178  001470  0A80               	xorlw	128
  9179  001472  5815               	subwfb	??___fladd^0,w,c
  9180  001474  B0D8               	btfsc	status,0,c
  9181  001476  D025               	goto	l6861
  9182  001478  500D               	movf	___fladd@b^0,w,c
  9183  00147A  5C11               	subwf	___fladd@a^0,w,c
  9184  00147C  6E15               	movwf	??___fladd^0,c
  9185  00147E  500E               	movf	(___fladd@b+1)^0,w,c
  9186  001480  5812               	subwfb	(___fladd@a+1)^0,w,c
  9187  001482  6E16               	movwf	(??___fladd+1)^0,c
  9188  001484  500F               	movf	(___fladd@b+2)^0,w,c
  9189  001486  5813               	subwfb	(___fladd@a+2)^0,w,c
  9190  001488  6E17               	movwf	(??___fladd+2)^0,c
  9191  00148A  5010               	movf	(___fladd@b+3)^0,w,c
  9192  00148C  5814               	subwfb	(___fladd@a+3)^0,w,c
  9193  00148E  6E18               	movwf	(??___fladd+3)^0,c
  9194  001490  0EFF               	movlw	255
  9195  001492  2415               	addwf	??___fladd^0,w,c
  9196  001494  6E0D               	movwf	___fladd@b^0,c
  9197  001496  0EFF               	movlw	255
  9198  001498  2016               	addwfc	(??___fladd+1)^0,w,c
  9199  00149A  6E0E               	movwf	(___fladd@b+1)^0,c
  9200  00149C  0EFF               	movlw	255
  9201  00149E  2017               	addwfc	(??___fladd+2)^0,w,c
  9202  0014A0  6E0F               	movwf	(___fladd@b+2)^0,c
  9203  0014A2  0EFF               	movlw	255
  9204  0014A4  2018               	addwfc	(??___fladd+3)^0,w,c
  9205  0014A6  6E10               	movwf	(___fladd@b+3)^0,c
  9206  0014A8  0E80               	movlw	128
  9207  0014AA  1A19               	xorwf	___fladd@signs^0,f,c
  9208  0014AC  6C1C               	negf	___fladd@grs^0,c
  9209  0014AE  501C               	movf	___fladd@grs^0,w,c
  9210  0014B0  A4D8               	btfss	status,2,c
  9211  0014B2  D00F               	goto	l1426
  9212  0014B4  0E01               	movlw	1
  9213  0014B6  260D               	addwf	___fladd@b^0,f,c
  9214  0014B8  0E00               	movlw	0
  9215  0014BA  220E               	addwfc	(___fladd@b+1)^0,f,c
  9216  0014BC  220F               	addwfc	(___fladd@b+2)^0,f,c
  9217  0014BE  2210               	addwfc	(___fladd@b+3)^0,f,c
  9218  0014C0  D008               	goto	l1426
  9219  0014C2                     l6861:
  9220  0014C2  5011               	movf	___fladd@a^0,w,c
  9221  0014C4  5E0D               	subwf	___fladd@b^0,f,c
  9222  0014C6  5012               	movf	(___fladd@a+1)^0,w,c
  9223  0014C8  5A0E               	subwfb	(___fladd@b+1)^0,f,c
  9224  0014CA  5013               	movf	(___fladd@a+2)^0,w,c
  9225  0014CC  5A0F               	subwfb	(___fladd@b+2)^0,f,c
  9226  0014CE  5014               	movf	(___fladd@a+3)^0,w,c
  9227  0014D0  5A10               	subwfb	(___fladd@b+3)^0,f,c
  9228  0014D2                     l1426:
  9229  0014D2  500D               	movf	___fladd@b^0,w,c
  9230  0014D4  100E               	iorwf	(___fladd@b+1)^0,w,c
  9231  0014D6  100F               	iorwf	(___fladd@b+2)^0,w,c
  9232  0014D8  1010               	iorwf	(___fladd@b+3)^0,w,c
  9233  0014DA  A4D8               	btfss	status,2,c
  9234  0014DC  D01C               	goto	l6885
  9235  0014DE  501C               	movf	___fladd@grs^0,w,c
  9236  0014E0  A4D8               	btfss	status,2,c
  9237  0014E2  D019               	goto	l6885
  9238  0014E4  0E00               	movlw	0
  9239  0014E6  6E0D               	movwf	?___fladd^0,c
  9240  0014E8  0E00               	movlw	0
  9241  0014EA  6E0E               	movwf	(?___fladd+1)^0,c
  9242  0014EC  0E00               	movlw	0
  9243  0014EE  6E0F               	movwf	(?___fladd+2)^0,c
  9244  0014F0  0E00               	movlw	0
  9245  0014F2  6E10               	movwf	(?___fladd+3)^0,c
  9246  0014F4  0012               	return	
  9247  0014F6                     l6869:
  9248  0014F6  90D8               	bcf	status,0,c
  9249  0014F8  360D               	rlcf	___fladd@b^0,f,c
  9250  0014FA  360E               	rlcf	(___fladd@b+1)^0,f,c
  9251  0014FC  360F               	rlcf	(___fladd@b+2)^0,f,c
  9252  0014FE  3610               	rlcf	(___fladd@b+3)^0,f,c
  9253  001500  BE1C               	btfsc	___fladd@grs^0,7,c
  9254  001502  800D               	bsf	___fladd@b^0,0,c
  9255  001504  A01C               	btfss	___fladd@grs^0,0,c
  9256  001506  D002               	goto	l6879
  9257  001508  80D8               	bsf	status,0,c
  9258  00150A  D001               	goto	L10
  9259  00150C                     l6879:
  9260  00150C  90D8               	bcf	status,0,c
  9261  00150E                     L10:
  9262  00150E  361C               	rlcf	___fladd@grs^0,f,c
  9263  001510  501B               	movf	___fladd@bexp^0,w,c
  9264  001512  A4D8               	btfss	status,2,c
  9265  001514  061B               	decf	___fladd@bexp^0,f,c
  9266  001516                     l6885:
  9267  001516  AE0F               	btfss	(___fladd@b+2)^0,7,c
  9268  001518  D7EE               	goto	l6869
  9269  00151A                     u8790:
  9270  00151A  0E00               	movlw	0
  9271  00151C  6E1A               	movwf	___fladd@aexp^0,c
  9272  00151E  AE1C               	btfss	___fladd@grs^0,7,c
  9273  001520  D00B               	goto	l1435
  9274  001522  C01C  F015         	movff	___fladd@grs,??___fladd
  9275  001526  0E7F               	movlw	127
  9276  001528  1615               	andwf	??___fladd^0,f,c
  9277  00152A  B4D8               	btfsc	status,2,c
  9278  00152C  D003               	goto	l1436
  9279  00152E                     u8810:
  9280  00152E  0E01               	movlw	1
  9281  001530  6E1A               	movwf	___fladd@aexp^0,c
  9282  001532  D002               	goto	l1435
  9283  001534                     l1436:
  9284  001534  B00D               	btfsc	___fladd@b^0,0,c
  9285  001536  D7FB               	goto	u8810
  9286  001538                     l1435:
  9287  001538  501A               	movf	___fladd@aexp^0,w,c
  9288  00153A  B4D8               	btfsc	status,2,c
  9289  00153C  D020               	goto	l6905
  9290  00153E  0E01               	movlw	1
  9291  001540  260D               	addwf	___fladd@b^0,f,c
  9292  001542  0E00               	movlw	0
  9293  001544  220E               	addwfc	(___fladd@b+1)^0,f,c
  9294  001546  220F               	addwfc	(___fladd@b+2)^0,f,c
  9295  001548  2210               	addwfc	(___fladd@b+3)^0,f,c
  9296  00154A  A010               	btfss	(___fladd@b+3)^0,0,c
  9297  00154C  D018               	goto	l6905
  9298  00154E  C00D  F015         	movff	___fladd@b,??___fladd
  9299  001552  C00E  F016         	movff	___fladd@b+1,??___fladd+1
  9300  001556  C00F  F017         	movff	___fladd@b+2,??___fladd+2
  9301  00155A  C010  F018         	movff	___fladd@b+3,??___fladd+3
  9302  00155E  3418               	rlcf	(??___fladd+3)^0,w,c
  9303  001560  3218               	rrcf	(??___fladd+3)^0,f,c
  9304  001562  3217               	rrcf	(??___fladd+2)^0,f,c
  9305  001564  3216               	rrcf	(??___fladd+1)^0,f,c
  9306  001566  3215               	rrcf	??___fladd^0,f,c
  9307  001568  C015  F00D         	movff	??___fladd,___fladd@b
  9308  00156C  C016  F00E         	movff	??___fladd+1,___fladd@b+1
  9309  001570  C017  F00F         	movff	??___fladd+2,___fladd@b+2
  9310  001574  C018  F010         	movff	??___fladd+3,___fladd@b+3
  9311  001578  281B               	incf	___fladd@bexp^0,w,c
  9312  00157A  A4D8               	btfss	status,2,c
  9313  00157C  2A1B               	incf	___fladd@bexp^0,f,c
  9314  00157E                     l6905:
  9315  00157E  281B               	incf	___fladd@bexp^0,w,c
  9316  001580  B4D8               	btfsc	status,2,c
  9317  001582  D003               	goto	u8870
  9318  001584  501B               	movf	___fladd@bexp^0,w,c
  9319  001586  A4D8               	btfss	status,2,c
  9320  001588  D00D               	goto	l6913
  9321  00158A                     u8870:
  9322  00158A  0E00               	movlw	0
  9323  00158C  6E0D               	movwf	___fladd@b^0,c
  9324  00158E  0E00               	movlw	0
  9325  001590  6E0E               	movwf	(___fladd@b+1)^0,c
  9326  001592  0E00               	movlw	0
  9327  001594  6E0F               	movwf	(___fladd@b+2)^0,c
  9328  001596  0E00               	movlw	0
  9329  001598  6E10               	movwf	(___fladd@b+3)^0,c
  9330  00159A  501B               	movf	___fladd@bexp^0,w,c
  9331  00159C  A4D8               	btfss	status,2,c
  9332  00159E  D002               	goto	l6913
  9333  0015A0  0E00               	movlw	0
  9334  0015A2  6E19               	movwf	___fladd@signs^0,c
  9335  0015A4                     l6913:
  9336  0015A4  A01B               	btfss	___fladd@bexp^0,0,c
  9337  0015A6  D002               	goto	l6917
  9338  0015A8  8E0F               	bsf	(___fladd@b+2)^0,7,c
  9339  0015AA  D001               	goto	l6919
  9340  0015AC                     l6917:
  9341  0015AC  9E0F               	bcf	(___fladd@b+2)^0,7,c
  9342  0015AE                     l6919:
  9343  0015AE  90D8               	bcf	status,0,c
  9344  0015B0  301B               	rrcf	___fladd@bexp^0,w,c
  9345  0015B2  6E10               	movwf	(___fladd@b+3)^0,c
  9346  0015B4  BE19               	btfsc	___fladd@signs^0,7,c
  9347  0015B6  8E10               	bsf	(___fladd@b+3)^0,7,c
  9348  0015B8  C00D  F00D         	movff	___fladd@b,?___fladd
  9349  0015BC  C00E  F00E         	movff	___fladd@b+1,?___fladd+1
  9350  0015C0  C00F  F00F         	movff	___fladd@b+2,?___fladd+2
  9351  0015C4  C010  F010         	movff	___fladd@b+3,?___fladd+3
  9352  0015C8  0012               	return		;funcret
  9353  0015CA                     __end_of___fladd:
  9354                           	opt callstack 0
  9355                           
  9356 ;; *************** function ___flmul *****************
  9357 ;; Defined at:
  9358 ;;		line 8 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/sprcmul.c"
  9359 ;; Parameters:    Size  Location     Type
  9360 ;;  b               4   12[COMRAM] unsigned char 
  9361 ;;  a               4   16[COMRAM] unsigned char 
  9362 ;; Auto vars:     Size  Location     Type
  9363 ;;  prod            4   31[COMRAM] struct .
  9364 ;;  grs             4   27[COMRAM] unsigned long 
  9365 ;;  temp            2   35[COMRAM] struct .
  9366 ;;  bexp            1   26[COMRAM] unsigned char 
  9367 ;;  aexp            1   25[COMRAM] unsigned char 
  9368 ;;  sign            1   24[COMRAM] unsigned char 
  9369 ;; Return value:  Size  Location     Type
  9370 ;;                  4   12[COMRAM] unsigned char 
  9371 ;; Registers used:
  9372 ;;		wreg, status,2, status,0, prodl, prodh
  9373 ;; Tracked objects:
  9374 ;;		On entry : 0/0
  9375 ;;		On exit  : 0/0
  9376 ;;		Unchanged: 0/0
  9377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9378 ;;      Params:         8       0       0       0       0       0       0
  9379 ;;      Locals:        13       0       0       0       0       0       0
  9380 ;;      Temps:          4       0       0       0       0       0       0
  9381 ;;      Totals:        25       0       0       0       0       0       0
  9382 ;;Total ram usage:       25 bytes
  9383 ;; Hardware stack levels used:    1
  9384 ;; Hardware stack levels required when called:    2
  9385 ;; This function calls:
  9386 ;;		Nothing
  9387 ;; This function is called by:
  9388 ;;		_KTY82_222_Adc2Temperature
  9389 ;; This function uses a non-reentrant model
  9390 ;;
  9391                           
  9392                           	psect	text38
  9393  000F92                     __ptext38:
  9394                           	opt callstack 0
  9395  000F92                     ___flmul:
  9396                           	opt callstack 24
  9397                           
  9398                           ;incstack = 0
  9399  000F92  5010               	movf	(___flmul@b+3)^0,w,c
  9400  000F94  0B80               	andlw	128
  9401  000F96  6E19               	movwf	___flmul@sign^0,c
  9402  000F98  5010               	movf	(___flmul@b+3)^0,w,c
  9403  000F9A  2410               	addwf	(___flmul@b+3)^0,w,c
  9404  000F9C  6E1B               	movwf	___flmul@bexp^0,c
  9405  000F9E  BE0F               	btfsc	(___flmul@b+2)^0,7,c
  9406  000FA0  801B               	bsf	___flmul@bexp^0,0,c
  9407  000FA2  501B               	movf	___flmul@bexp^0,w,c
  9408  000FA4  B4D8               	btfsc	status,2,c
  9409  000FA6  D00D               	goto	l7269
  9410  000FA8  281B               	incf	___flmul@bexp^0,w,c
  9411  000FAA  A4D8               	btfss	status,2,c
  9412  000FAC  D008               	goto	l7267
  9413  000FAE  0E00               	movlw	0
  9414  000FB0  6E0D               	movwf	___flmul@b^0,c
  9415  000FB2  0E00               	movlw	0
  9416  000FB4  6E0E               	movwf	(___flmul@b+1)^0,c
  9417  000FB6  0E00               	movlw	0
  9418  000FB8  6E0F               	movwf	(___flmul@b+2)^0,c
  9419  000FBA  0E00               	movlw	0
  9420  000FBC  6E10               	movwf	(___flmul@b+3)^0,c
  9421  000FBE                     l7267:
  9422  000FBE  8E0F               	bsf	(___flmul@b+2)^0,7,c
  9423  000FC0  D008               	goto	l7271
  9424  000FC2                     l7269:
  9425  000FC2  0E00               	movlw	0
  9426  000FC4  6E0D               	movwf	___flmul@b^0,c
  9427  000FC6  0E00               	movlw	0
  9428  000FC8  6E0E               	movwf	(___flmul@b+1)^0,c
  9429  000FCA  0E00               	movlw	0
  9430  000FCC  6E0F               	movwf	(___flmul@b+2)^0,c
  9431  000FCE  0E00               	movlw	0
  9432  000FD0  6E10               	movwf	(___flmul@b+3)^0,c
  9433  000FD2                     l7271:
  9434  000FD2  5014               	movf	(___flmul@a+3)^0,w,c
  9435  000FD4  0B80               	andlw	128
  9436  000FD6  1A19               	xorwf	___flmul@sign^0,f,c
  9437  000FD8  5014               	movf	(___flmul@a+3)^0,w,c
  9438  000FDA  2414               	addwf	(___flmul@a+3)^0,w,c
  9439  000FDC  6E1A               	movwf	___flmul@aexp^0,c
  9440  000FDE  BE13               	btfsc	(___flmul@a+2)^0,7,c
  9441  000FE0  801A               	bsf	___flmul@aexp^0,0,c
  9442  000FE2  501A               	movf	___flmul@aexp^0,w,c
  9443  000FE4  B4D8               	btfsc	status,2,c
  9444  000FE6  D00D               	goto	l7287
  9445  000FE8  281A               	incf	___flmul@aexp^0,w,c
  9446  000FEA  A4D8               	btfss	status,2,c
  9447  000FEC  D008               	goto	l7285
  9448  000FEE  0E00               	movlw	0
  9449  000FF0  6E11               	movwf	___flmul@a^0,c
  9450  000FF2  0E00               	movlw	0
  9451  000FF4  6E12               	movwf	(___flmul@a+1)^0,c
  9452  000FF6  0E00               	movlw	0
  9453  000FF8  6E13               	movwf	(___flmul@a+2)^0,c
  9454  000FFA  0E00               	movlw	0
  9455  000FFC  6E14               	movwf	(___flmul@a+3)^0,c
  9456  000FFE                     l7285:
  9457  000FFE  8E13               	bsf	(___flmul@a+2)^0,7,c
  9458  001000  D008               	goto	l1495
  9459  001002                     l7287:
  9460  001002  0E00               	movlw	0
  9461  001004  6E11               	movwf	___flmul@a^0,c
  9462  001006  0E00               	movlw	0
  9463  001008  6E12               	movwf	(___flmul@a+1)^0,c
  9464  00100A  0E00               	movlw	0
  9465  00100C  6E13               	movwf	(___flmul@a+2)^0,c
  9466  00100E  0E00               	movlw	0
  9467  001010  6E14               	movwf	(___flmul@a+3)^0,c
  9468  001012                     l1495:
  9469  001012  501A               	movf	___flmul@aexp^0,w,c
  9470  001014  B4D8               	btfsc	status,2,c
  9471  001016  D003               	goto	u9710
  9472  001018  501B               	movf	___flmul@bexp^0,w,c
  9473  00101A  A4D8               	btfss	status,2,c
  9474  00101C  D009               	goto	l7295
  9475  00101E                     u9710:
  9476  00101E  0E00               	movlw	0
  9477  001020  6E0D               	movwf	?___flmul^0,c
  9478  001022  0E00               	movlw	0
  9479  001024  6E0E               	movwf	(?___flmul+1)^0,c
  9480  001026  0E00               	movlw	0
  9481  001028  6E0F               	movwf	(?___flmul+2)^0,c
  9482  00102A  0E00               	movlw	0
  9483  00102C  6E10               	movwf	(?___flmul+3)^0,c
  9484  00102E  0012               	return	
  9485  001030                     l7295:
  9486  001030  5013               	movf	(___flmul@a+2)^0,w,c
  9487  001032  020D               	mulwf	___flmul@b^0,c
  9488  001034  CFF3 F024          	movff	prodl,___flmul@temp
  9489  001038  CFF4 F025          	movff	prodh,___flmul@temp+1
  9490  00103C  5024               	movf	___flmul@temp^0,w,c
  9491  00103E  6E1C               	movwf	___flmul@grs^0,c
  9492  001040  6A1D               	clrf	(___flmul@grs+1)^0,c
  9493  001042  6A1E               	clrf	(___flmul@grs+2)^0,c
  9494  001044  6A1F               	clrf	(___flmul@grs+3)^0,c
  9495  001046  5025               	movf	(___flmul@temp+1)^0,w,c
  9496  001048  6E20               	movwf	___flmul@prod^0,c
  9497  00104A  6A21               	clrf	(___flmul@prod+1)^0,c
  9498  00104C  6A22               	clrf	(___flmul@prod+2)^0,c
  9499  00104E  6A23               	clrf	(___flmul@prod+3)^0,c
  9500  001050  5012               	movf	(___flmul@a+1)^0,w,c
  9501  001052  020E               	mulwf	(___flmul@b+1)^0,c
  9502  001054  CFF3 F024          	movff	prodl,___flmul@temp
  9503  001058  CFF4 F025          	movff	prodh,___flmul@temp+1
  9504  00105C  5024               	movf	___flmul@temp^0,w,c
  9505  00105E  261C               	addwf	___flmul@grs^0,f,c
  9506  001060  0E00               	movlw	0
  9507  001062  221D               	addwfc	(___flmul@grs+1)^0,f,c
  9508  001064  221E               	addwfc	(___flmul@grs+2)^0,f,c
  9509  001066  221F               	addwfc	(___flmul@grs+3)^0,f,c
  9510  001068  5025               	movf	(___flmul@temp+1)^0,w,c
  9511  00106A  2620               	addwf	___flmul@prod^0,f,c
  9512  00106C  0E00               	movlw	0
  9513  00106E  2221               	addwfc	(___flmul@prod+1)^0,f,c
  9514  001070  2222               	addwfc	(___flmul@prod+2)^0,f,c
  9515  001072  2223               	addwfc	(___flmul@prod+3)^0,f,c
  9516  001074  5011               	movf	___flmul@a^0,w,c
  9517  001076  020F               	mulwf	(___flmul@b+2)^0,c
  9518  001078  CFF3 F024          	movff	prodl,___flmul@temp
  9519  00107C  CFF4 F025          	movff	prodh,___flmul@temp+1
  9520  001080  5024               	movf	___flmul@temp^0,w,c
  9521  001082  261C               	addwf	___flmul@grs^0,f,c
  9522  001084  0E00               	movlw	0
  9523  001086  221D               	addwfc	(___flmul@grs+1)^0,f,c
  9524  001088  221E               	addwfc	(___flmul@grs+2)^0,f,c
  9525  00108A  221F               	addwfc	(___flmul@grs+3)^0,f,c
  9526  00108C  5025               	movf	(___flmul@temp+1)^0,w,c
  9527  00108E  2620               	addwf	___flmul@prod^0,f,c
  9528  001090  0E00               	movlw	0
  9529  001092  2221               	addwfc	(___flmul@prod+1)^0,f,c
  9530  001094  2222               	addwfc	(___flmul@prod+2)^0,f,c
  9531  001096  2223               	addwfc	(___flmul@prod+3)^0,f,c
  9532  001098  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  9533  00109C  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  9534  0010A0  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  9535  0010A4  6A1C               	clrf	___flmul@grs^0,c
  9536  0010A6  5011               	movf	___flmul@a^0,w,c
  9537  0010A8  020E               	mulwf	(___flmul@b+1)^0,c
  9538  0010AA  CFF3 F024          	movff	prodl,___flmul@temp
  9539  0010AE  CFF4 F025          	movff	prodh,___flmul@temp+1
  9540  0010B2  5024               	movf	___flmul@temp^0,w,c
  9541  0010B4  261C               	addwf	___flmul@grs^0,f,c
  9542  0010B6  5025               	movf	(___flmul@temp+1)^0,w,c
  9543  0010B8  221D               	addwfc	(___flmul@grs+1)^0,f,c
  9544  0010BA  0E00               	movlw	0
  9545  0010BC  221E               	addwfc	(___flmul@grs+2)^0,f,c
  9546  0010BE  0E00               	movlw	0
  9547  0010C0  221F               	addwfc	(___flmul@grs+3)^0,f,c
  9548  0010C2  5012               	movf	(___flmul@a+1)^0,w,c
  9549  0010C4  020D               	mulwf	___flmul@b^0,c
  9550  0010C6  CFF3 F024          	movff	prodl,___flmul@temp
  9551  0010CA  CFF4 F025          	movff	prodh,___flmul@temp+1
  9552  0010CE  5024               	movf	___flmul@temp^0,w,c
  9553  0010D0  261C               	addwf	___flmul@grs^0,f,c
  9554  0010D2  5025               	movf	(___flmul@temp+1)^0,w,c
  9555  0010D4  221D               	addwfc	(___flmul@grs+1)^0,f,c
  9556  0010D6  0E00               	movlw	0
  9557  0010D8  221E               	addwfc	(___flmul@grs+2)^0,f,c
  9558  0010DA  0E00               	movlw	0
  9559  0010DC  221F               	addwfc	(___flmul@grs+3)^0,f,c
  9560  0010DE  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  9561  0010E2  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  9562  0010E6  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  9563  0010EA  6A1C               	clrf	___flmul@grs^0,c
  9564  0010EC  5011               	movf	___flmul@a^0,w,c
  9565  0010EE  020D               	mulwf	___flmul@b^0,c
  9566  0010F0  CFF3 F024          	movff	prodl,___flmul@temp
  9567  0010F4  CFF4 F025          	movff	prodh,___flmul@temp+1
  9568  0010F8  5024               	movf	___flmul@temp^0,w,c
  9569  0010FA  261C               	addwf	___flmul@grs^0,f,c
  9570  0010FC  5025               	movf	(___flmul@temp+1)^0,w,c
  9571  0010FE  221D               	addwfc	(___flmul@grs+1)^0,f,c
  9572  001100  0E00               	movlw	0
  9573  001102  221E               	addwfc	(___flmul@grs+2)^0,f,c
  9574  001104  0E00               	movlw	0
  9575  001106  221F               	addwfc	(___flmul@grs+3)^0,f,c
  9576  001108  5013               	movf	(___flmul@a+2)^0,w,c
  9577  00110A  020E               	mulwf	(___flmul@b+1)^0,c
  9578  00110C  CFF3 F024          	movff	prodl,___flmul@temp
  9579  001110  CFF4 F025          	movff	prodh,___flmul@temp+1
  9580  001114  5024               	movf	___flmul@temp^0,w,c
  9581  001116  2620               	addwf	___flmul@prod^0,f,c
  9582  001118  5025               	movf	(___flmul@temp+1)^0,w,c
  9583  00111A  2221               	addwfc	(___flmul@prod+1)^0,f,c
  9584  00111C  0E00               	movlw	0
  9585  00111E  2222               	addwfc	(___flmul@prod+2)^0,f,c
  9586  001120  0E00               	movlw	0
  9587  001122  2223               	addwfc	(___flmul@prod+3)^0,f,c
  9588  001124  5012               	movf	(___flmul@a+1)^0,w,c
  9589  001126  020F               	mulwf	(___flmul@b+2)^0,c
  9590  001128  CFF3 F024          	movff	prodl,___flmul@temp
  9591  00112C  CFF4 F025          	movff	prodh,___flmul@temp+1
  9592  001130  5024               	movf	___flmul@temp^0,w,c
  9593  001132  2620               	addwf	___flmul@prod^0,f,c
  9594  001134  5025               	movf	(___flmul@temp+1)^0,w,c
  9595  001136  2221               	addwfc	(___flmul@prod+1)^0,f,c
  9596  001138  0E00               	movlw	0
  9597  00113A  2222               	addwfc	(___flmul@prod+2)^0,f,c
  9598  00113C  0E00               	movlw	0
  9599  00113E  2223               	addwfc	(___flmul@prod+3)^0,f,c
  9600  001140  5013               	movf	(___flmul@a+2)^0,w,c
  9601  001142  020F               	mulwf	(___flmul@b+2)^0,c
  9602  001144  CFF3 F024          	movff	prodl,___flmul@temp
  9603  001148  CFF4 F025          	movff	prodh,___flmul@temp+1
  9604  00114C  5024               	movf	___flmul@temp^0,w,c
  9605  00114E  6E15               	movwf	??___flmul^0,c
  9606  001150  5025               	movf	(___flmul@temp+1)^0,w,c
  9607  001152  6E16               	movwf	(??___flmul+1)^0,c
  9608  001154  6A17               	clrf	(??___flmul+2)^0,c
  9609  001156  6A18               	clrf	(??___flmul+3)^0,c
  9610  001158  C017  F018         	movff	??___flmul+2,??___flmul+3
  9611  00115C  C016  F017         	movff	??___flmul+1,??___flmul+2
  9612  001160  C015  F016         	movff	??___flmul,??___flmul+1
  9613  001164  6A15               	clrf	??___flmul^0,c
  9614  001166  5015               	movf	??___flmul^0,w,c
  9615  001168  2620               	addwf	___flmul@prod^0,f,c
  9616  00116A  5016               	movf	(??___flmul+1)^0,w,c
  9617  00116C  2221               	addwfc	(___flmul@prod+1)^0,f,c
  9618  00116E  5017               	movf	(??___flmul+2)^0,w,c
  9619  001170  2222               	addwfc	(___flmul@prod+2)^0,f,c
  9620  001172  5018               	movf	(??___flmul+3)^0,w,c
  9621  001174  2223               	addwfc	(___flmul@prod+3)^0,f,c
  9622  001176  501F               	movf	(___flmul@grs+3)^0,w,c
  9623  001178  2620               	addwf	___flmul@prod^0,f,c
  9624  00117A  0E00               	movlw	0
  9625  00117C  2221               	addwfc	(___flmul@prod+1)^0,f,c
  9626  00117E  2222               	addwfc	(___flmul@prod+2)^0,f,c
  9627  001180  2223               	addwfc	(___flmul@prod+3)^0,f,c
  9628  001182  C01E  F01F         	movff	___flmul@grs+2,___flmul@grs+3
  9629  001186  C01D  F01E         	movff	___flmul@grs+1,___flmul@grs+2
  9630  00118A  C01C  F01D         	movff	___flmul@grs,___flmul@grs+1
  9631  00118E  6A1C               	clrf	___flmul@grs^0,c
  9632  001190  501A               	movf	___flmul@aexp^0,w,c
  9633  001192  C01B  F015         	movff	___flmul@bexp,??___flmul
  9634  001196  6A16               	clrf	(??___flmul+1)^0,c
  9635  001198  2615               	addwf	??___flmul^0,f,c
  9636  00119A  0E00               	movlw	0
  9637  00119C  2216               	addwfc	(??___flmul+1)^0,f,c
  9638  00119E  0E82               	movlw	130
  9639  0011A0  2415               	addwf	??___flmul^0,w,c
  9640  0011A2  6E24               	movwf	___flmul@temp^0,c
  9641  0011A4  0EFF               	movlw	255
  9642  0011A6  2016               	addwfc	(??___flmul+1)^0,w,c
  9643  0011A8  6E25               	movwf	(___flmul@temp+1)^0,c
  9644  0011AA  D00F               	goto	l7343
  9645  0011AC                     l7337:
  9646  0011AC  90D8               	bcf	status,0,c
  9647  0011AE  3620               	rlcf	___flmul@prod^0,f,c
  9648  0011B0  3621               	rlcf	(___flmul@prod+1)^0,f,c
  9649  0011B2  3622               	rlcf	(___flmul@prod+2)^0,f,c
  9650  0011B4  3623               	rlcf	(___flmul@prod+3)^0,f,c
  9651  0011B6  BE1F               	btfsc	(___flmul@grs+3)^0,7,c
  9652  0011B8  8020               	bsf	___flmul@prod^0,0,c
  9653  0011BA  90D8               	bcf	status,0,c
  9654  0011BC  361C               	rlcf	___flmul@grs^0,f,c
  9655  0011BE  361D               	rlcf	(___flmul@grs+1)^0,f,c
  9656  0011C0  361E               	rlcf	(___flmul@grs+2)^0,f,c
  9657  0011C2  361F               	rlcf	(___flmul@grs+3)^0,f,c
  9658  0011C4  0624               	decf	___flmul@temp^0,f,c
  9659  0011C6  A0D8               	btfss	status,0,c
  9660  0011C8  0625               	decf	(___flmul@temp+1)^0,f,c
  9661  0011CA                     l7343:
  9662  0011CA  AE22               	btfss	(___flmul@prod+2)^0,7,c
  9663  0011CC  D7EF               	goto	l7337
  9664  0011CE  0E00               	movlw	0
  9665  0011D0  6E1A               	movwf	___flmul@aexp^0,c
  9666  0011D2  AE1F               	btfss	(___flmul@grs+3)^0,7,c
  9667  0011D4  D017               	goto	l1504
  9668  0011D6  0EFF               	movlw	255
  9669  0011D8  141C               	andwf	___flmul@grs^0,w,c
  9670  0011DA  6E15               	movwf	??___flmul^0,c
  9671  0011DC  0EFF               	movlw	255
  9672  0011DE  141D               	andwf	(___flmul@grs+1)^0,w,c
  9673  0011E0  6E16               	movwf	(??___flmul+1)^0,c
  9674  0011E2  0EFF               	movlw	255
  9675  0011E4  141E               	andwf	(___flmul@grs+2)^0,w,c
  9676  0011E6  6E17               	movwf	(??___flmul+2)^0,c
  9677  0011E8  0E7F               	movlw	127
  9678  0011EA  141F               	andwf	(___flmul@grs+3)^0,w,c
  9679  0011EC  6E18               	movwf	(??___flmul+3)^0,c
  9680  0011EE  5015               	movf	??___flmul^0,w,c
  9681  0011F0  1016               	iorwf	(??___flmul+1)^0,w,c
  9682  0011F2  1017               	iorwf	(??___flmul+2)^0,w,c
  9683  0011F4  1018               	iorwf	(??___flmul+3)^0,w,c
  9684  0011F6  B4D8               	btfsc	status,2,c
  9685  0011F8  D003               	goto	l1505
  9686  0011FA                     u9750:
  9687  0011FA  0E01               	movlw	1
  9688  0011FC  6E1A               	movwf	___flmul@aexp^0,c
  9689  0011FE  D002               	goto	l1504
  9690  001200                     l1505:
  9691  001200  B020               	btfsc	___flmul@prod^0,0,c
  9692  001202  D7FB               	goto	u9750
  9693  001204                     l1504:
  9694  001204  501A               	movf	___flmul@aexp^0,w,c
  9695  001206  B4D8               	btfsc	status,2,c
  9696  001208  D01F               	goto	l7363
  9697  00120A  0E01               	movlw	1
  9698  00120C  2620               	addwf	___flmul@prod^0,f,c
  9699  00120E  0E00               	movlw	0
  9700  001210  2221               	addwfc	(___flmul@prod+1)^0,f,c
  9701  001212  2222               	addwfc	(___flmul@prod+2)^0,f,c
  9702  001214  2223               	addwfc	(___flmul@prod+3)^0,f,c
  9703  001216  A023               	btfss	(___flmul@prod+3)^0,0,c
  9704  001218  D017               	goto	l7363
  9705  00121A  C020  F015         	movff	___flmul@prod,??___flmul
  9706  00121E  C021  F016         	movff	___flmul@prod+1,??___flmul+1
  9707  001222  C022  F017         	movff	___flmul@prod+2,??___flmul+2
  9708  001226  C023  F018         	movff	___flmul@prod+3,??___flmul+3
  9709  00122A  3418               	rlcf	(??___flmul+3)^0,w,c
  9710  00122C  3218               	rrcf	(??___flmul+3)^0,f,c
  9711  00122E  3217               	rrcf	(??___flmul+2)^0,f,c
  9712  001230  3216               	rrcf	(??___flmul+1)^0,f,c
  9713  001232  3215               	rrcf	??___flmul^0,f,c
  9714  001234  C015  F020         	movff	??___flmul,___flmul@prod
  9715  001238  C016  F021         	movff	??___flmul+1,___flmul@prod+1
  9716  00123C  C017  F022         	movff	??___flmul+2,___flmul@prod+2
  9717  001240  C018  F023         	movff	??___flmul+3,___flmul@prod+3
  9718  001244  4A24               	infsnz	___flmul@temp^0,f,c
  9719  001246  2A25               	incf	(___flmul@temp+1)^0,f,c
  9720  001248                     l7363:
  9721  001248  BE25               	btfsc	(___flmul@temp+1)^0,7,c
  9722  00124A  D00D               	goto	l7367
  9723  00124C  5025               	movf	(___flmul@temp+1)^0,w,c
  9724  00124E  E103               	bnz	u9790
  9725  001250  2824               	incf	___flmul@temp^0,w,c
  9726  001252  A0D8               	btfss	status,0,c
  9727  001254  D008               	goto	l7367
  9728  001256                     u9790:
  9729  001256  0E00               	movlw	0
  9730  001258  6E20               	movwf	___flmul@prod^0,c
  9731  00125A  0E00               	movlw	0
  9732  00125C  6E21               	movwf	(___flmul@prod+1)^0,c
  9733  00125E  0E80               	movlw	128
  9734  001260  6E22               	movwf	(___flmul@prod+2)^0,c
  9735  001262  0E7F               	movlw	127
  9736  001264  D020               	goto	L11
  9737  001266                     l7367:
  9738  001266  BE25               	btfsc	(___flmul@temp+1)^0,7,c
  9739  001268  D005               	goto	u9800
  9740  00126A  5025               	movf	(___flmul@temp+1)^0,w,c
  9741  00126C  E10E               	bnz	l1512
  9742  00126E  0424               	decf	___flmul@temp^0,w,c
  9743  001270  B0D8               	btfsc	status,0,c
  9744  001272  D00B               	goto	l1512
  9745  001274                     u9800:
  9746  001274  0E00               	movlw	0
  9747  001276  6E20               	movwf	___flmul@prod^0,c
  9748  001278  0E00               	movlw	0
  9749  00127A  6E21               	movwf	(___flmul@prod+1)^0,c
  9750  00127C  0E00               	movlw	0
  9751  00127E  6E22               	movwf	(___flmul@prod+2)^0,c
  9752  001280  0E00               	movlw	0
  9753  001282  6E23               	movwf	(___flmul@prod+3)^0,c
  9754  001284  0E00               	movlw	0
  9755  001286  6E19               	movwf	___flmul@sign^0,c
  9756  001288  D00F               	goto	l7379
  9757  00128A                     l1512:
  9758  00128A  C024  F01B         	movff	___flmul@temp,___flmul@bexp
  9759  00128E  0EFF               	movlw	255
  9760  001290  1620               	andwf	___flmul@prod^0,f,c
  9761  001292  0EFF               	movlw	255
  9762  001294  1621               	andwf	(___flmul@prod+1)^0,f,c
  9763  001296  0E7F               	movlw	127
  9764  001298  1622               	andwf	(___flmul@prod+2)^0,f,c
  9765  00129A  0E00               	movlw	0
  9766  00129C  1623               	andwf	(___flmul@prod+3)^0,f,c
  9767  00129E  B01B               	btfsc	___flmul@bexp^0,0,c
  9768  0012A0  8E22               	bsf	(___flmul@prod+2)^0,7,c
  9769  0012A2  90D8               	bcf	status,0,c
  9770  0012A4  301B               	rrcf	___flmul@bexp^0,w,c
  9771  0012A6                     L11:
  9772  0012A6  6E23               	movwf	(___flmul@prod+3)^0,c
  9773  0012A8                     l7379:
  9774  0012A8  5019               	movf	___flmul@sign^0,w,c
  9775  0012AA  1223               	iorwf	(___flmul@prod+3)^0,f,c
  9776  0012AC  C020  F00D         	movff	___flmul@prod,?___flmul
  9777  0012B0  C021  F00E         	movff	___flmul@prod+1,?___flmul+1
  9778  0012B4  C022  F00F         	movff	___flmul@prod+2,?___flmul+2
  9779  0012B8  C023  F010         	movff	___flmul@prod+3,?___flmul+3
  9780  0012BC  0012               	return		;funcret
  9781  0012BE                     __end_of___flmul:
  9782                           	opt callstack 0
  9783                           
  9784 ;; *************** function ___flge *****************
  9785 ;; Defined at:
  9786 ;;		line 4 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/flge.c"
  9787 ;; Parameters:    Size  Location     Type
  9788 ;;  ff1             4   12[COMRAM] unsigned char 
  9789 ;;  ff2             4   16[COMRAM] unsigned char 
  9790 ;; Auto vars:     Size  Location     Type
  9791 ;;		None
  9792 ;; Return value:  Size  Location     Type
  9793 ;;		None               void
  9794 ;; Registers used:
  9795 ;;		wreg, status,2, status,0
  9796 ;; Tracked objects:
  9797 ;;		On entry : 0/0
  9798 ;;		On exit  : 0/0
  9799 ;;		Unchanged: 0/0
  9800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9801 ;;      Params:         8       0       0       0       0       0       0
  9802 ;;      Locals:         0       0       0       0       0       0       0
  9803 ;;      Temps:          4       0       0       0       0       0       0
  9804 ;;      Totals:        12       0       0       0       0       0       0
  9805 ;;Total ram usage:       12 bytes
  9806 ;; Hardware stack levels used:    1
  9807 ;; Hardware stack levels required when called:    2
  9808 ;; This function calls:
  9809 ;;		Nothing
  9810 ;; This function is called by:
  9811 ;;		_KTY82_222_Adc2Temperature
  9812 ;; This function uses a non-reentrant model
  9813 ;;
  9814                           
  9815                           	psect	text39
  9816  0038DC                     __ptext39:
  9817                           	opt callstack 0
  9818  0038DC                     ___flge:
  9819                           	opt callstack 24
  9820                           
  9821                           ;incstack = 0
  9822  0038DC  0E00               	movlw	0
  9823  0038DE  140D               	andwf	___flge@ff1^0,w,c
  9824  0038E0  6E15               	movwf	??___flge^0,c
  9825  0038E2  0E00               	movlw	0
  9826  0038E4  140E               	andwf	(___flge@ff1+1)^0,w,c
  9827  0038E6  6E16               	movwf	(??___flge+1)^0,c
  9828  0038E8  0E80               	movlw	128
  9829  0038EA  140F               	andwf	(___flge@ff1+2)^0,w,c
  9830  0038EC  6E17               	movwf	(??___flge+2)^0,c
  9831  0038EE  0E7F               	movlw	127
  9832  0038F0  1410               	andwf	(___flge@ff1+3)^0,w,c
  9833  0038F2  6E18               	movwf	(??___flge+3)^0,c
  9834  0038F4  5015               	movf	??___flge^0,w,c
  9835  0038F6  1016               	iorwf	(??___flge+1)^0,w,c
  9836  0038F8  1017               	iorwf	(??___flge+2)^0,w,c
  9837  0038FA  1018               	iorwf	(??___flge+3)^0,w,c
  9838  0038FC  A4D8               	btfss	status,2,c
  9839  0038FE  D008               	goto	l7455
  9840  003900  0E00               	movlw	0
  9841  003902  6E0D               	movwf	___flge@ff1^0,c
  9842  003904  0E00               	movlw	0
  9843  003906  6E0E               	movwf	(___flge@ff1+1)^0,c
  9844  003908  0E00               	movlw	0
  9845  00390A  6E0F               	movwf	(___flge@ff1+2)^0,c
  9846  00390C  0E00               	movlw	0
  9847  00390E  6E10               	movwf	(___flge@ff1+3)^0,c
  9848  003910                     l7455:
  9849  003910  0E00               	movlw	0
  9850  003912  1411               	andwf	___flge@ff2^0,w,c
  9851  003914  6E15               	movwf	??___flge^0,c
  9852  003916  0E00               	movlw	0
  9853  003918  1412               	andwf	(___flge@ff2+1)^0,w,c
  9854  00391A  6E16               	movwf	(??___flge+1)^0,c
  9855  00391C  0E80               	movlw	128
  9856  00391E  1413               	andwf	(___flge@ff2+2)^0,w,c
  9857  003920  6E17               	movwf	(??___flge+2)^0,c
  9858  003922  0E7F               	movlw	127
  9859  003924  1414               	andwf	(___flge@ff2+3)^0,w,c
  9860  003926  6E18               	movwf	(??___flge+3)^0,c
  9861  003928  5015               	movf	??___flge^0,w,c
  9862  00392A  1016               	iorwf	(??___flge+1)^0,w,c
  9863  00392C  1017               	iorwf	(??___flge+2)^0,w,c
  9864  00392E  1018               	iorwf	(??___flge+3)^0,w,c
  9865  003930  A4D8               	btfss	status,2,c
  9866  003932  D008               	goto	l7459
  9867  003934  0E00               	movlw	0
  9868  003936  6E11               	movwf	___flge@ff2^0,c
  9869  003938  0E00               	movlw	0
  9870  00393A  6E12               	movwf	(___flge@ff2+1)^0,c
  9871  00393C  0E00               	movlw	0
  9872  00393E  6E13               	movwf	(___flge@ff2+2)^0,c
  9873  003940  0E00               	movlw	0
  9874  003942  6E14               	movwf	(___flge@ff2+3)^0,c
  9875  003944                     l7459:
  9876  003944  AE10               	btfss	(___flge@ff1+3)^0,7,c
  9877  003946  D009               	goto	l7463
  9878  003948  6C0D               	negf	___flge@ff1^0,c
  9879  00394A  1E0E               	comf	(___flge@ff1+1)^0,f,c
  9880  00394C  B0D8               	btfsc	status,0,c
  9881  00394E  2A0E               	incf	(___flge@ff1+1)^0,f,c
  9882  003950  1E0F               	comf	(___flge@ff1+2)^0,f,c
  9883  003952  B0D8               	btfsc	status,0,c
  9884  003954  2A0F               	incf	(___flge@ff1+2)^0,f,c
  9885  003956  0E80               	movlw	128
  9886  003958  5610               	subfwb	(___flge@ff1+3)^0,f,c
  9887  00395A                     l7463:
  9888  00395A  AE14               	btfss	(___flge@ff2+3)^0,7,c
  9889  00395C  D009               	goto	l1146
  9890  00395E  6C11               	negf	___flge@ff2^0,c
  9891  003960  1E12               	comf	(___flge@ff2+1)^0,f,c
  9892  003962  B0D8               	btfsc	status,0,c
  9893  003964  2A12               	incf	(___flge@ff2+1)^0,f,c
  9894  003966  1E13               	comf	(___flge@ff2+2)^0,f,c
  9895  003968  B0D8               	btfsc	status,0,c
  9896  00396A  2A13               	incf	(___flge@ff2+2)^0,f,c
  9897  00396C  0E80               	movlw	128
  9898  00396E  5614               	subfwb	(___flge@ff2+3)^0,f,c
  9899  003970                     l1146:
  9900  003970  0E00               	movlw	0
  9901  003972  1A0D               	xorwf	___flge@ff1^0,f,c
  9902  003974  0E00               	movlw	0
  9903  003976  1A0E               	xorwf	(___flge@ff1+1)^0,f,c
  9904  003978  0E00               	movlw	0
  9905  00397A  1A0F               	xorwf	(___flge@ff1+2)^0,f,c
  9906  00397C  0E80               	movlw	128
  9907  00397E  1A10               	xorwf	(___flge@ff1+3)^0,f,c
  9908  003980  0E00               	movlw	0
  9909  003982  1A11               	xorwf	___flge@ff2^0,f,c
  9910  003984  0E00               	movlw	0
  9911  003986  1A12               	xorwf	(___flge@ff2+1)^0,f,c
  9912  003988  0E00               	movlw	0
  9913  00398A  1A13               	xorwf	(___flge@ff2+2)^0,f,c
  9914  00398C  0E80               	movlw	128
  9915  00398E  1A14               	xorwf	(___flge@ff2+3)^0,f,c
  9916  003990  5011               	movf	___flge@ff2^0,w,c
  9917  003992  5C0D               	subwf	___flge@ff1^0,w,c
  9918  003994  5012               	movf	(___flge@ff2+1)^0,w,c
  9919  003996  580E               	subwfb	(___flge@ff1+1)^0,w,c
  9920  003998  5013               	movf	(___flge@ff2+2)^0,w,c
  9921  00399A  580F               	subwfb	(___flge@ff1+2)^0,w,c
  9922  00399C  5014               	movf	(___flge@ff2+3)^0,w,c
  9923  00399E  5810               	subwfb	(___flge@ff1+3)^0,w,c
  9924  0039A0  B0D8               	btfsc	status,0,c
  9925  0039A2  D002               	goto	l7469
  9926  0039A4  90D8               	bcf	status,0,c
  9927  0039A6  0012               	return	
  9928  0039A8                     l7469:
  9929  0039A8  80D8               	bsf	status,0,c
  9930  0039AA  0012               	return		;funcret
  9931  0039AC                     __end_of___flge:
  9932                           	opt callstack 0
  9933                           
  9934 ;; *************** function ___fleq *****************
  9935 ;; Defined at:
  9936 ;;		line 4 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/fleq.c"
  9937 ;; Parameters:    Size  Location     Type
  9938 ;;  ff1             4   12[COMRAM] unsigned char 
  9939 ;;  ff2             4   16[COMRAM] unsigned char 
  9940 ;; Auto vars:     Size  Location     Type
  9941 ;;		None
  9942 ;; Return value:  Size  Location     Type
  9943 ;;		None               void
  9944 ;; Registers used:
  9945 ;;		wreg, status,2, status,0
  9946 ;; Tracked objects:
  9947 ;;		On entry : 0/0
  9948 ;;		On exit  : 0/0
  9949 ;;		Unchanged: 0/0
  9950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9951 ;;      Params:         8       0       0       0       0       0       0
  9952 ;;      Locals:         0       0       0       0       0       0       0
  9953 ;;      Temps:          4       0       0       0       0       0       0
  9954 ;;      Totals:        12       0       0       0       0       0       0
  9955 ;;Total ram usage:       12 bytes
  9956 ;; Hardware stack levels used:    1
  9957 ;; Hardware stack levels required when called:    2
  9958 ;; This function calls:
  9959 ;;		Nothing
  9960 ;; This function is called by:
  9961 ;;		_KTY82_222_Adc2Temperature
  9962 ;; This function uses a non-reentrant model
  9963 ;;
  9964                           
  9965                           	psect	text40
  9966  004382                     __ptext40:
  9967                           	opt callstack 0
  9968  004382                     ___fleq:
  9969                           	opt callstack 24
  9970                           
  9971                           ;incstack = 0
  9972  004382  0E00               	movlw	0
  9973  004384  140D               	andwf	___fleq@ff1^0,w,c
  9974  004386  6E15               	movwf	??___fleq^0,c
  9975  004388  0E00               	movlw	0
  9976  00438A  140E               	andwf	(___fleq@ff1+1)^0,w,c
  9977  00438C  6E16               	movwf	(??___fleq+1)^0,c
  9978  00438E  0E80               	movlw	128
  9979  004390  140F               	andwf	(___fleq@ff1+2)^0,w,c
  9980  004392  6E17               	movwf	(??___fleq+2)^0,c
  9981  004394  0E7F               	movlw	127
  9982  004396  1410               	andwf	(___fleq@ff1+3)^0,w,c
  9983  004398  6E18               	movwf	(??___fleq+3)^0,c
  9984  00439A  5015               	movf	??___fleq^0,w,c
  9985  00439C  1016               	iorwf	(??___fleq+1)^0,w,c
  9986  00439E  1017               	iorwf	(??___fleq+2)^0,w,c
  9987  0043A0  1018               	iorwf	(??___fleq+3)^0,w,c
  9988  0043A2  A4D8               	btfss	status,2,c
  9989  0043A4  D008               	goto	l7439
  9990  0043A6  0E00               	movlw	0
  9991  0043A8  6E0D               	movwf	___fleq@ff1^0,c
  9992  0043AA  0E00               	movlw	0
  9993  0043AC  6E0E               	movwf	(___fleq@ff1+1)^0,c
  9994  0043AE  0E00               	movlw	0
  9995  0043B0  6E0F               	movwf	(___fleq@ff1+2)^0,c
  9996  0043B2  0E00               	movlw	0
  9997  0043B4  6E10               	movwf	(___fleq@ff1+3)^0,c
  9998  0043B6                     l7439:
  9999  0043B6  0E00               	movlw	0
 10000  0043B8  1411               	andwf	___fleq@ff2^0,w,c
 10001  0043BA  6E15               	movwf	??___fleq^0,c
 10002  0043BC  0E00               	movlw	0
 10003  0043BE  1412               	andwf	(___fleq@ff2+1)^0,w,c
 10004  0043C0  6E16               	movwf	(??___fleq+1)^0,c
 10005  0043C2  0E80               	movlw	128
 10006  0043C4  1413               	andwf	(___fleq@ff2+2)^0,w,c
 10007  0043C6  6E17               	movwf	(??___fleq+2)^0,c
 10008  0043C8  0E7F               	movlw	127
 10009  0043CA  1414               	andwf	(___fleq@ff2+3)^0,w,c
 10010  0043CC  6E18               	movwf	(??___fleq+3)^0,c
 10011  0043CE  5015               	movf	??___fleq^0,w,c
 10012  0043D0  1016               	iorwf	(??___fleq+1)^0,w,c
 10013  0043D2  1017               	iorwf	(??___fleq+2)^0,w,c
 10014  0043D4  1018               	iorwf	(??___fleq+3)^0,w,c
 10015  0043D6  A4D8               	btfss	status,2,c
 10016  0043D8  D008               	goto	l7443
 10017  0043DA  0E00               	movlw	0
 10018  0043DC  6E11               	movwf	___fleq@ff2^0,c
 10019  0043DE  0E00               	movlw	0
 10020  0043E0  6E12               	movwf	(___fleq@ff2+1)^0,c
 10021  0043E2  0E00               	movlw	0
 10022  0043E4  6E13               	movwf	(___fleq@ff2+2)^0,c
 10023  0043E6  0E00               	movlw	0
 10024  0043E8  6E14               	movwf	(___fleq@ff2+3)^0,c
 10025  0043EA                     l7443:
 10026  0043EA  5011               	movf	___fleq@ff2^0,w,c
 10027  0043EC  180D               	xorwf	___fleq@ff1^0,w,c
 10028  0043EE  E10A               	bnz	u9900
 10029  0043F0  5012               	movf	(___fleq@ff2+1)^0,w,c
 10030  0043F2  180E               	xorwf	(___fleq@ff1+1)^0,w,c
 10031  0043F4  E107               	bnz	u9900
 10032  0043F6  5013               	movf	(___fleq@ff2+2)^0,w,c
 10033  0043F8  180F               	xorwf	(___fleq@ff1+2)^0,w,c
 10034  0043FA  E104               	bnz	u9900
 10035  0043FC  5014               	movf	(___fleq@ff2+3)^0,w,c
 10036  0043FE  1810               	xorwf	(___fleq@ff1+3)^0,w,c
 10037  004400  B4D8               	btfsc	status,2,c
 10038  004402  D002               	goto	l7447
 10039  004404                     u9900:
 10040  004404  90D8               	bcf	status,0,c
 10041  004406  0012               	return	
 10042  004408                     l7447:
 10043  004408  80D8               	bsf	status,0,c
 10044  00440A  0012               	return		;funcret
 10045  00440C                     __end_of___fleq:
 10046                           	opt callstack 0
 10047                           
 10048 ;; *************** function ___fldiv *****************
 10049 ;; Defined at:
 10050 ;;		line 11 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/sprcdiv.c"
 10051 ;; Parameters:    Size  Location     Type
 10052 ;;  b               4   37[COMRAM] unsigned char 
 10053 ;;  a               4   41[COMRAM] unsigned char 
 10054 ;; Auto vars:     Size  Location     Type
 10055 ;;  grs             4   56[COMRAM] unsigned long 
 10056 ;;  rem             4   49[COMRAM] unsigned long 
 10057 ;;  new_exp         2   54[COMRAM] short 
 10058 ;;  aexp            1   61[COMRAM] unsigned char 
 10059 ;;  bexp            1   60[COMRAM] unsigned char 
 10060 ;;  sign            1   53[COMRAM] unsigned char 
 10061 ;; Return value:  Size  Location     Type
 10062 ;;                  4   37[COMRAM] unsigned char 
 10063 ;; Registers used:
 10064 ;;		wreg, status,2, status,0
 10065 ;; Tracked objects:
 10066 ;;		On entry : 0/0
 10067 ;;		On exit  : 0/0
 10068 ;;		Unchanged: 0/0
 10069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10070 ;;      Params:         8       0       0       0       0       0       0
 10071 ;;      Locals:        13       0       0       0       0       0       0
 10072 ;;      Temps:          4       0       0       0       0       0       0
 10073 ;;      Totals:        25       0       0       0       0       0       0
 10074 ;;Total ram usage:       25 bytes
 10075 ;; Hardware stack levels used:    1
 10076 ;; Hardware stack levels required when called:    2
 10077 ;; This function calls:
 10078 ;;		Nothing
 10079 ;; This function is called by:
 10080 ;;		_KTY82_222_Adc2Temperature
 10081 ;; This function uses a non-reentrant model
 10082 ;;
 10083                           
 10084                           	psect	text41
 10085  001B08                     __ptext41:
 10086                           	opt callstack 0
 10087  001B08                     ___fldiv:
 10088                           	opt callstack 24
 10089                           
 10090                           ;incstack = 0
 10091  001B08  5029               	movf	(___fldiv@b+3)^0,w,c
 10092  001B0A  0B80               	andlw	128
 10093  001B0C  6E36               	movwf	___fldiv@sign^0,c
 10094  001B0E  5029               	movf	(___fldiv@b+3)^0,w,c
 10095  001B10  2429               	addwf	(___fldiv@b+3)^0,w,c
 10096  001B12  6E3D               	movwf	___fldiv@bexp^0,c
 10097  001B14  BE28               	btfsc	(___fldiv@b+2)^0,7,c
 10098  001B16  803D               	bsf	___fldiv@bexp^0,0,c
 10099  001B18  503D               	movf	___fldiv@bexp^0,w,c
 10100  001B1A  B4D8               	btfsc	status,2,c
 10101  001B1C  D00D               	goto	l7133
 10102  001B1E  283D               	incf	___fldiv@bexp^0,w,c
 10103  001B20  A4D8               	btfss	status,2,c
 10104  001B22  D008               	goto	l7129
 10105  001B24  0E00               	movlw	0
 10106  001B26  6E26               	movwf	___fldiv@b^0,c
 10107  001B28  0E00               	movlw	0
 10108  001B2A  6E27               	movwf	(___fldiv@b+1)^0,c
 10109  001B2C  0E00               	movlw	0
 10110  001B2E  6E28               	movwf	(___fldiv@b+2)^0,c
 10111  001B30  0E00               	movlw	0
 10112  001B32  6E29               	movwf	(___fldiv@b+3)^0,c
 10113  001B34                     l7129:
 10114  001B34  8E28               	bsf	(___fldiv@b+2)^0,7,c
 10115  001B36  D006               	goto	L12
 10116  001B38                     l7133:
 10117  001B38  0E00               	movlw	0
 10118  001B3A  6E26               	movwf	___fldiv@b^0,c
 10119  001B3C  0E00               	movlw	0
 10120  001B3E  6E27               	movwf	(___fldiv@b+1)^0,c
 10121  001B40  0E00               	movlw	0
 10122  001B42  6E28               	movwf	(___fldiv@b+2)^0,c
 10123  001B44                     L12:
 10124  001B44  0E00               	movlw	0
 10125  001B46  6E29               	movwf	(___fldiv@b+3)^0,c
 10126  001B48  502D               	movf	(___fldiv@a+3)^0,w,c
 10127  001B4A  0B80               	andlw	128
 10128  001B4C  1A36               	xorwf	___fldiv@sign^0,f,c
 10129  001B4E  502D               	movf	(___fldiv@a+3)^0,w,c
 10130  001B50  242D               	addwf	(___fldiv@a+3)^0,w,c
 10131  001B52  6E3E               	movwf	___fldiv@aexp^0,c
 10132  001B54  BE2C               	btfsc	(___fldiv@a+2)^0,7,c
 10133  001B56  803E               	bsf	___fldiv@aexp^0,0,c
 10134  001B58  503E               	movf	___fldiv@aexp^0,w,c
 10135  001B5A  B4D8               	btfsc	status,2,c
 10136  001B5C  D00D               	goto	l7153
 10137  001B5E  283E               	incf	___fldiv@aexp^0,w,c
 10138  001B60  A4D8               	btfss	status,2,c
 10139  001B62  D008               	goto	l7149
 10140  001B64  0E00               	movlw	0
 10141  001B66  6E2A               	movwf	___fldiv@a^0,c
 10142  001B68  0E00               	movlw	0
 10143  001B6A  6E2B               	movwf	(___fldiv@a+1)^0,c
 10144  001B6C  0E00               	movlw	0
 10145  001B6E  6E2C               	movwf	(___fldiv@a+2)^0,c
 10146  001B70  0E00               	movlw	0
 10147  001B72  6E2D               	movwf	(___fldiv@a+3)^0,c
 10148  001B74                     l7149:
 10149  001B74  8E2C               	bsf	(___fldiv@a+2)^0,7,c
 10150  001B76  D006               	goto	L13
 10151  001B78                     l7153:
 10152  001B78  0E00               	movlw	0
 10153  001B7A  6E2A               	movwf	___fldiv@a^0,c
 10154  001B7C  0E00               	movlw	0
 10155  001B7E  6E2B               	movwf	(___fldiv@a+1)^0,c
 10156  001B80  0E00               	movlw	0
 10157  001B82  6E2C               	movwf	(___fldiv@a+2)^0,c
 10158  001B84                     L13:
 10159  001B84  0E00               	movlw	0
 10160  001B86  6E2D               	movwf	(___fldiv@a+3)^0,c
 10161  001B88  502A               	movf	___fldiv@a^0,w,c
 10162  001B8A  102B               	iorwf	(___fldiv@a+1)^0,w,c
 10163  001B8C  102C               	iorwf	(___fldiv@a+2)^0,w,c
 10164  001B8E  102D               	iorwf	(___fldiv@a+3)^0,w,c
 10165  001B90  A4D8               	btfss	status,2,c
 10166  001B92  D017               	goto	l7167
 10167  001B94  0E00               	movlw	0
 10168  001B96  6E26               	movwf	___fldiv@b^0,c
 10169  001B98  0E00               	movlw	0
 10170  001B9A  6E27               	movwf	(___fldiv@b+1)^0,c
 10171  001B9C  0E00               	movlw	0
 10172  001B9E  6E28               	movwf	(___fldiv@b+2)^0,c
 10173  001BA0  0E00               	movlw	0
 10174  001BA2  6E29               	movwf	(___fldiv@b+3)^0,c
 10175  001BA4  0E80               	movlw	128
 10176  001BA6  1228               	iorwf	(___fldiv@b+2)^0,f,c
 10177  001BA8  0E7F               	movlw	127
 10178  001BAA  1229               	iorwf	(___fldiv@b+3)^0,f,c
 10179  001BAC                     l7161:
 10180  001BAC  5036               	movf	___fldiv@sign^0,w,c
 10181  001BAE  1229               	iorwf	(___fldiv@b+3)^0,f,c
 10182  001BB0  C026  F026         	movff	___fldiv@b,?___fldiv
 10183  001BB4  C027  F027         	movff	___fldiv@b+1,?___fldiv+1
 10184  001BB8  C028  F028         	movff	___fldiv@b+2,?___fldiv+2
 10185  001BBC  C029  F029         	movff	___fldiv@b+3,?___fldiv+3
 10186  001BC0  0012               	return	
 10187  001BC2                     l7167:
 10188  001BC2  503D               	movf	___fldiv@bexp^0,w,c
 10189  001BC4  A4D8               	btfss	status,2,c
 10190  001BC6  D009               	goto	l7175
 10191  001BC8  0E00               	movlw	0
 10192  001BCA  6E26               	movwf	?___fldiv^0,c
 10193  001BCC  0E00               	movlw	0
 10194  001BCE  6E27               	movwf	(?___fldiv+1)^0,c
 10195  001BD0  0E00               	movlw	0
 10196  001BD2  6E28               	movwf	(?___fldiv+2)^0,c
 10197  001BD4  0E00               	movlw	0
 10198  001BD6  6E29               	movwf	(?___fldiv+3)^0,c
 10199  001BD8  0012               	return	
 10200  001BDA                     l7175:
 10201  001BDA  503E               	movf	___fldiv@aexp^0,w,c
 10202  001BDC  C03D  F02E         	movff	___fldiv@bexp,??___fldiv
 10203  001BE0  6A2F               	clrf	(??___fldiv+1)^0,c
 10204  001BE2  5E2E               	subwf	??___fldiv^0,f,c
 10205  001BE4  0E00               	movlw	0
 10206  001BE6  5A2F               	subwfb	(??___fldiv+1)^0,f,c
 10207  001BE8  0E7F               	movlw	127
 10208  001BEA  242E               	addwf	??___fldiv^0,w,c
 10209  001BEC  6E37               	movwf	___fldiv@new_exp^0,c
 10210  001BEE  0E00               	movlw	0
 10211  001BF0  202F               	addwfc	(??___fldiv+1)^0,w,c
 10212  001BF2  6E38               	movwf	(___fldiv@new_exp+1)^0,c
 10213  001BF4  C026  F032         	movff	___fldiv@b,___fldiv@rem
 10214  001BF8  C027  F033         	movff	___fldiv@b+1,___fldiv@rem+1
 10215  001BFC  C028  F034         	movff	___fldiv@b+2,___fldiv@rem+2
 10216  001C00  C029  F035         	movff	___fldiv@b+3,___fldiv@rem+3
 10217  001C04  0E00               	movlw	0
 10218  001C06  6E26               	movwf	___fldiv@b^0,c
 10219  001C08  0E00               	movlw	0
 10220  001C0A  6E27               	movwf	(___fldiv@b+1)^0,c
 10221  001C0C  0E00               	movlw	0
 10222  001C0E  6E28               	movwf	(___fldiv@b+2)^0,c
 10223  001C10  0E00               	movlw	0
 10224  001C12  6E29               	movwf	(___fldiv@b+3)^0,c
 10225  001C14  0E00               	movlw	0
 10226  001C16  6E39               	movwf	___fldiv@grs^0,c
 10227  001C18  0E00               	movlw	0
 10228  001C1A  6E3A               	movwf	(___fldiv@grs+1)^0,c
 10229  001C1C  0E00               	movlw	0
 10230  001C1E  6E3B               	movwf	(___fldiv@grs+2)^0,c
 10231  001C20  0E00               	movlw	0
 10232  001C22  6E3C               	movwf	(___fldiv@grs+3)^0,c
 10233  001C24  0E00               	movlw	0
 10234  001C26  6E3E               	movwf	___fldiv@aexp^0,c
 10235  001C28  D028               	goto	l1465
 10236  001C2A                     l7185:
 10237  001C2A  503E               	movf	___fldiv@aexp^0,w,c
 10238  001C2C  B4D8               	btfsc	status,2,c
 10239  001C2E  D011               	goto	l7193
 10240  001C30  90D8               	bcf	status,0,c
 10241  001C32  3632               	rlcf	___fldiv@rem^0,f,c
 10242  001C34  3633               	rlcf	(___fldiv@rem+1)^0,f,c
 10243  001C36  3634               	rlcf	(___fldiv@rem+2)^0,f,c
 10244  001C38  3635               	rlcf	(___fldiv@rem+3)^0,f,c
 10245  001C3A  90D8               	bcf	status,0,c
 10246  001C3C  3626               	rlcf	___fldiv@b^0,f,c
 10247  001C3E  3627               	rlcf	(___fldiv@b+1)^0,f,c
 10248  001C40  3628               	rlcf	(___fldiv@b+2)^0,f,c
 10249  001C42  3629               	rlcf	(___fldiv@b+3)^0,f,c
 10250  001C44  BE3C               	btfsc	(___fldiv@grs+3)^0,7,c
 10251  001C46  8026               	bsf	___fldiv@b^0,0,c
 10252  001C48  90D8               	bcf	status,0,c
 10253  001C4A  3639               	rlcf	___fldiv@grs^0,f,c
 10254  001C4C  363A               	rlcf	(___fldiv@grs+1)^0,f,c
 10255  001C4E  363B               	rlcf	(___fldiv@grs+2)^0,f,c
 10256  001C50  363C               	rlcf	(___fldiv@grs+3)^0,f,c
 10257  001C52                     l7193:
 10258  001C52  502A               	movf	___fldiv@a^0,w,c
 10259  001C54  5C32               	subwf	___fldiv@rem^0,w,c
 10260  001C56  502B               	movf	(___fldiv@a+1)^0,w,c
 10261  001C58  5833               	subwfb	(___fldiv@rem+1)^0,w,c
 10262  001C5A  502C               	movf	(___fldiv@a+2)^0,w,c
 10263  001C5C  5834               	subwfb	(___fldiv@rem+2)^0,w,c
 10264  001C5E  502D               	movf	(___fldiv@a+3)^0,w,c
 10265  001C60  5835               	subwfb	(___fldiv@rem+3)^0,w,c
 10266  001C62  A0D8               	btfss	status,0,c
 10267  001C64  D009               	goto	l7199
 10268  001C66  8C3C               	bsf	(___fldiv@grs+3)^0,6,c
 10269  001C68  502A               	movf	___fldiv@a^0,w,c
 10270  001C6A  5E32               	subwf	___fldiv@rem^0,f,c
 10271  001C6C  502B               	movf	(___fldiv@a+1)^0,w,c
 10272  001C6E  5A33               	subwfb	(___fldiv@rem+1)^0,f,c
 10273  001C70  502C               	movf	(___fldiv@a+2)^0,w,c
 10274  001C72  5A34               	subwfb	(___fldiv@rem+2)^0,f,c
 10275  001C74  502D               	movf	(___fldiv@a+3)^0,w,c
 10276  001C76  5A35               	subwfb	(___fldiv@rem+3)^0,f,c
 10277  001C78                     l7199:
 10278  001C78  2A3E               	incf	___fldiv@aexp^0,f,c
 10279  001C7A                     l1465:
 10280  001C7A  0E19               	movlw	25
 10281  001C7C  643E               	cpfsgt	___fldiv@aexp^0,c
 10282  001C7E  D7D5               	goto	l7185
 10283  001C80  5032               	movf	___fldiv@rem^0,w,c
 10284  001C82  1033               	iorwf	(___fldiv@rem+1)^0,w,c
 10285  001C84  1034               	iorwf	(___fldiv@rem+2)^0,w,c
 10286  001C86  1035               	iorwf	(___fldiv@rem+3)^0,w,c
 10287  001C88  B4D8               	btfsc	status,2,c
 10288  001C8A  D011               	goto	l7211
 10289  001C8C  8039               	bsf	___fldiv@grs^0,0,c
 10290  001C8E  D00F               	goto	l7211
 10291  001C90                     l7205:
 10292  001C90  90D8               	bcf	status,0,c
 10293  001C92  3626               	rlcf	___fldiv@b^0,f,c
 10294  001C94  3627               	rlcf	(___fldiv@b+1)^0,f,c
 10295  001C96  3628               	rlcf	(___fldiv@b+2)^0,f,c
 10296  001C98  3629               	rlcf	(___fldiv@b+3)^0,f,c
 10297  001C9A  BE3C               	btfsc	(___fldiv@grs+3)^0,7,c
 10298  001C9C  8026               	bsf	___fldiv@b^0,0,c
 10299  001C9E  90D8               	bcf	status,0,c
 10300  001CA0  3639               	rlcf	___fldiv@grs^0,f,c
 10301  001CA2  363A               	rlcf	(___fldiv@grs+1)^0,f,c
 10302  001CA4  363B               	rlcf	(___fldiv@grs+2)^0,f,c
 10303  001CA6  363C               	rlcf	(___fldiv@grs+3)^0,f,c
 10304  001CA8  0637               	decf	___fldiv@new_exp^0,f,c
 10305  001CAA  A0D8               	btfss	status,0,c
 10306  001CAC  0638               	decf	(___fldiv@new_exp+1)^0,f,c
 10307  001CAE                     l7211:
 10308  001CAE  AE28               	btfss	(___fldiv@b+2)^0,7,c
 10309  001CB0  D7EF               	goto	l7205
 10310  001CB2  0E00               	movlw	0
 10311  001CB4  6E3E               	movwf	___fldiv@aexp^0,c
 10312  001CB6  AE3C               	btfss	(___fldiv@grs+3)^0,7,c
 10313  001CB8  D017               	goto	l1476
 10314  001CBA  0EFF               	movlw	255
 10315  001CBC  1439               	andwf	___fldiv@grs^0,w,c
 10316  001CBE  6E2E               	movwf	??___fldiv^0,c
 10317  001CC0  0EFF               	movlw	255
 10318  001CC2  143A               	andwf	(___fldiv@grs+1)^0,w,c
 10319  001CC4  6E2F               	movwf	(??___fldiv+1)^0,c
 10320  001CC6  0EFF               	movlw	255
 10321  001CC8  143B               	andwf	(___fldiv@grs+2)^0,w,c
 10322  001CCA  6E30               	movwf	(??___fldiv+2)^0,c
 10323  001CCC  0E7F               	movlw	127
 10324  001CCE  143C               	andwf	(___fldiv@grs+3)^0,w,c
 10325  001CD0  6E31               	movwf	(??___fldiv+3)^0,c
 10326  001CD2  502E               	movf	??___fldiv^0,w,c
 10327  001CD4  102F               	iorwf	(??___fldiv+1)^0,w,c
 10328  001CD6  1030               	iorwf	(??___fldiv+2)^0,w,c
 10329  001CD8  1031               	iorwf	(??___fldiv+3)^0,w,c
 10330  001CDA  B4D8               	btfsc	status,2,c
 10331  001CDC  D003               	goto	l1477
 10332  001CDE                     u9570:
 10333  001CDE  0E01               	movlw	1
 10334  001CE0  6E3E               	movwf	___fldiv@aexp^0,c
 10335  001CE2  D002               	goto	l1476
 10336  001CE4                     l1477:
 10337  001CE4  B026               	btfsc	___fldiv@b^0,0,c
 10338  001CE6  D7FB               	goto	u9570
 10339  001CE8                     l1476:
 10340  001CE8  503E               	movf	___fldiv@aexp^0,w,c
 10341  001CEA  B4D8               	btfsc	status,2,c
 10342  001CEC  D01F               	goto	l7231
 10343  001CEE  0E01               	movlw	1
 10344  001CF0  2626               	addwf	___fldiv@b^0,f,c
 10345  001CF2  0E00               	movlw	0
 10346  001CF4  2227               	addwfc	(___fldiv@b+1)^0,f,c
 10347  001CF6  2228               	addwfc	(___fldiv@b+2)^0,f,c
 10348  001CF8  2229               	addwfc	(___fldiv@b+3)^0,f,c
 10349  001CFA  A029               	btfss	(___fldiv@b+3)^0,0,c
 10350  001CFC  D017               	goto	l7231
 10351  001CFE  C026  F02E         	movff	___fldiv@b,??___fldiv
 10352  001D02  C027  F02F         	movff	___fldiv@b+1,??___fldiv+1
 10353  001D06  C028  F030         	movff	___fldiv@b+2,??___fldiv+2
 10354  001D0A  C029  F031         	movff	___fldiv@b+3,??___fldiv+3
 10355  001D0E  3431               	rlcf	(??___fldiv+3)^0,w,c
 10356  001D10  3231               	rrcf	(??___fldiv+3)^0,f,c
 10357  001D12  3230               	rrcf	(??___fldiv+2)^0,f,c
 10358  001D14  322F               	rrcf	(??___fldiv+1)^0,f,c
 10359  001D16  322E               	rrcf	??___fldiv^0,f,c
 10360  001D18  C02E  F026         	movff	??___fldiv,___fldiv@b
 10361  001D1C  C02F  F027         	movff	??___fldiv+1,___fldiv@b+1
 10362  001D20  C030  F028         	movff	??___fldiv+2,___fldiv@b+2
 10363  001D24  C031  F029         	movff	??___fldiv+3,___fldiv@b+3
 10364  001D28  4A37               	infsnz	___fldiv@new_exp^0,f,c
 10365  001D2A  2A38               	incf	(___fldiv@new_exp+1)^0,f,c
 10366  001D2C                     l7231:
 10367  001D2C  BE38               	btfsc	(___fldiv@new_exp+1)^0,7,c
 10368  001D2E  D010               	goto	l7235
 10369  001D30  5038               	movf	(___fldiv@new_exp+1)^0,w,c
 10370  001D32  E103               	bnz	u9610
 10371  001D34  2837               	incf	___fldiv@new_exp^0,w,c
 10372  001D36  A0D8               	btfss	status,0,c
 10373  001D38  D00B               	goto	l7235
 10374  001D3A                     u9610:
 10375  001D3A  0E00               	movlw	0
 10376  001D3C  6E38               	movwf	(___fldiv@new_exp+1)^0,c
 10377  001D3E  6837               	setf	___fldiv@new_exp^0,c
 10378  001D40  0E00               	movlw	0
 10379  001D42  6E26               	movwf	___fldiv@b^0,c
 10380  001D44  0E00               	movlw	0
 10381  001D46  6E27               	movwf	(___fldiv@b+1)^0,c
 10382  001D48  0E00               	movlw	0
 10383  001D4A  6E28               	movwf	(___fldiv@b+2)^0,c
 10384  001D4C  0E00               	movlw	0
 10385  001D4E  6E29               	movwf	(___fldiv@b+3)^0,c
 10386  001D50                     l7235:
 10387  001D50  BE38               	btfsc	(___fldiv@new_exp+1)^0,7,c
 10388  001D52  D005               	goto	u9620
 10389  001D54  5038               	movf	(___fldiv@new_exp+1)^0,w,c
 10390  001D56  E111               	bnz	l7239
 10391  001D58  0437               	decf	___fldiv@new_exp^0,w,c
 10392  001D5A  B0D8               	btfsc	status,0,c
 10393  001D5C  D00E               	goto	l7239
 10394  001D5E                     u9620:
 10395  001D5E  0E00               	movlw	0
 10396  001D60  6E38               	movwf	(___fldiv@new_exp+1)^0,c
 10397  001D62  0E00               	movlw	0
 10398  001D64  6E37               	movwf	___fldiv@new_exp^0,c
 10399  001D66  0E00               	movlw	0
 10400  001D68  6E26               	movwf	___fldiv@b^0,c
 10401  001D6A  0E00               	movlw	0
 10402  001D6C  6E27               	movwf	(___fldiv@b+1)^0,c
 10403  001D6E  0E00               	movlw	0
 10404  001D70  6E28               	movwf	(___fldiv@b+2)^0,c
 10405  001D72  0E00               	movlw	0
 10406  001D74  6E29               	movwf	(___fldiv@b+3)^0,c
 10407  001D76  0E00               	movlw	0
 10408  001D78  6E36               	movwf	___fldiv@sign^0,c
 10409  001D7A                     l7239:
 10410  001D7A  C037  F03D         	movff	___fldiv@new_exp,___fldiv@bexp
 10411  001D7E  A03D               	btfss	___fldiv@bexp^0,0,c
 10412  001D80  D002               	goto	l7245
 10413  001D82  8E28               	bsf	(___fldiv@b+2)^0,7,c
 10414  001D84  D001               	goto	l7247
 10415  001D86                     l7245:
 10416  001D86  9E28               	bcf	(___fldiv@b+2)^0,7,c
 10417  001D88                     l7247:
 10418  001D88  90D8               	bcf	status,0,c
 10419  001D8A  303D               	rrcf	___fldiv@bexp^0,w,c
 10420  001D8C  6E29               	movwf	(___fldiv@b+3)^0,c
 10421  001D8E  D70E               	goto	l7161
 10422  001D90                     __end_of___fldiv:
 10423                           	opt callstack 0
 10424                           
 10425 ;; *************** function _readFWD *****************
 10426 ;; Defined at:
 10427 ;;		line 107 in file "src/driver/adc.c"
 10428 ;; Parameters:    Size  Location     Type
 10429 ;;		None
 10430 ;; Auto vars:     Size  Location     Type
 10431 ;;  fwd_volt        4   38[COMRAM] unsigned long 
 10432 ;; Return value:  Size  Location     Type
 10433 ;;                  2   36[COMRAM] unsigned short 
 10434 ;; Registers used:
 10435 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10436 ;; Tracked objects:
 10437 ;;		On entry : 3F/0
 10438 ;;		On exit  : 0/0
 10439 ;;		Unchanged: 0/0
 10440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10441 ;;      Params:         2       0       0       0       0       0       0
 10442 ;;      Locals:         4       0       0       0       0       0       0
 10443 ;;      Temps:          0       0       0       0       0       0       0
 10444 ;;      Totals:         6       0       0       0       0       0       0
 10445 ;;Total ram usage:        6 bytes
 10446 ;; Hardware stack levels used:    1
 10447 ;; Hardware stack levels required when called:    5
 10448 ;; This function calls:
 10449 ;;		_adc_voltage
 10450 ;; This function is called by:
 10451 ;;		_alarm
 10452 ;; This function uses a non-reentrant model
 10453 ;;
 10454                           
 10455                           	psect	text42
 10456  004E56                     __ptext42:
 10457                           	opt callstack 0
 10458  004E56                     _readFWD:
 10459                           	opt callstack 23
 10460                           
 10461                           ; BSR set to: 0
 10462                           ;src/driver/adc.c: 109:  u32 fwd_volt = adc_voltage(PIN_RF_V);
 10463                           
 10464                           ;incstack = 0
 10465  004E56  0EE8               	movlw	low _PIN_RF_V_DEF
 10466  004E58  6E19               	movwf	adc_voltage@gpio^0,c
 10467  004E5A  0E7C               	movlw	high _PIN_RF_V_DEF
 10468  004E5C  6E1A               	movwf	(adc_voltage@gpio+1)^0,c
 10469  004E5E  EC80  F023         	call	_adc_voltage	;wreg free
 10470  004E62  C019  F027         	movff	?_adc_voltage,readFWD@fwd_volt
 10471  004E66  C01A  F028         	movff	?_adc_voltage+1,readFWD@fwd_volt+1
 10472  004E6A  C01B  F029         	movff	?_adc_voltage+2,readFWD@fwd_volt+2
 10473  004E6E  C01C  F02A         	movff	?_adc_voltage+3,readFWD@fwd_volt+3
 10474                           
 10475                           ;src/driver/adc.c: 111:  return fwd_volt;
 10476  004E72  C027  F025         	movff	readFWD@fwd_volt,?_readFWD
 10477  004E76  C028  F026         	movff	readFWD@fwd_volt+1,?_readFWD+1
 10478  004E7A  0012               	return		;funcret
 10479  004E7C                     __end_of_readFWD:
 10480                           	opt callstack 0
 10481                           
 10482 ;; *************** function _adc_voltage *****************
 10483 ;; Defined at:
 10484 ;;		line 68 in file "src/driver/adc.c"
 10485 ;; Parameters:    Size  Location     Type
 10486 ;;  gpio            2   24[COMRAM] PTR const struct gpio_pi
 10487 ;;		 -> PIN_VOLTAGE_DEF(5), PIN_RF_V_DEF(5), PIN_RF_R_DEF(5), PIN_TEMP_DEF(5), 
 10488 ;; Auto vars:     Size  Location     Type
 10489 ;;  mV              4   32[COMRAM] unsigned long 
 10490 ;;  adcval          4   28[COMRAM] unsigned long 
 10491 ;; Return value:  Size  Location     Type
 10492 ;;                  4   24[COMRAM] unsigned long 
 10493 ;; Registers used:
 10494 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10495 ;; Tracked objects:
 10496 ;;		On entry : 3F/0
 10497 ;;		On exit  : 0/0
 10498 ;;		Unchanged: 0/0
 10499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10500 ;;      Params:         4       0       0       0       0       0       0
 10501 ;;      Locals:         8       0       0       0       0       0       0
 10502 ;;      Temps:          0       0       0       0       0       0       0
 10503 ;;      Totals:        12       0       0       0       0       0       0
 10504 ;;Total ram usage:       12 bytes
 10505 ;; Hardware stack levels used:    1
 10506 ;; Hardware stack levels required when called:    4
 10507 ;; This function calls:
 10508 ;;		___lmul
 10509 ;;		_adc_sample
 10510 ;; This function is called by:
 10511 ;;		_readKTY82
 10512 ;;		_readPowerVoltage
 10513 ;;		_readFWD
 10514 ;; This function uses a non-reentrant model
 10515 ;;
 10516                           
 10517                           	psect	text43
 10518  004700                     __ptext43:
 10519                           	opt callstack 0
 10520  004700                     _adc_voltage:
 10521                           	opt callstack 23
 10522                           
 10523                           ; BSR set to: 0
 10524                           ;src/driver/adc.c: 68: u32 adc_voltage(gpio_pin gpio);src/driver/adc.c: 69: {;src/driver
      +                          /adc.c: 72:  u32 adcval = adc_sample(gpio);
 10525                           
 10526                           ;incstack = 0
 10527  004700  C019  F011         	movff	adc_voltage@gpio,adc_sample@gpio
 10528  004704  C01A  F012         	movff	adc_voltage@gpio+1,adc_sample@gpio+1
 10529  004708  EC11  F025         	call	_adc_sample	;wreg free
 10530  00470C  C011  F01D         	movff	?_adc_sample,adc_voltage@adcval
 10531  004710  C012  F01E         	movff	?_adc_sample+1,adc_voltage@adcval+1
 10532  004714  6A1F               	clrf	(adc_voltage@adcval+2)^0,c
 10533  004716  6A20               	clrf	(adc_voltage@adcval+3)^0,c
 10534                           
 10535                           ;src/driver/adc.c: 73:  u32 mV = (adcval*3300L)/(1<<10);
 10536  004718  C01D  F00D         	movff	adc_voltage@adcval,___lmul@multiplier
 10537  00471C  C01E  F00E         	movff	adc_voltage@adcval+1,___lmul@multiplier+1
 10538  004720  C01F  F00F         	movff	adc_voltage@adcval+2,___lmul@multiplier+2
 10539  004724  C020  F010         	movff	adc_voltage@adcval+3,___lmul@multiplier+3
 10540  004728  0EE4               	movlw	228
 10541  00472A  6E11               	movwf	___lmul@multiplicand^0,c
 10542  00472C  0E0C               	movlw	12
 10543  00472E  6E12               	movwf	(___lmul@multiplicand+1)^0,c
 10544  004730  0E00               	movlw	0
 10545  004732  6E13               	movwf	(___lmul@multiplicand+2)^0,c
 10546  004734  0E00               	movlw	0
 10547  004736  6E14               	movwf	(___lmul@multiplicand+3)^0,c
 10548  004738  EC3D  F025         	call	___lmul	;wreg free
 10549  00473C  0E0B               	movlw	11
 10550  00473E  D005               	goto	u10360
 10551  004740                     u10365:
 10552  004740  90D8               	bcf	status,0,c
 10553  004742  3210               	rrcf	(?___lmul+3)^0,f,c
 10554  004744  320F               	rrcf	(?___lmul+2)^0,f,c
 10555  004746  320E               	rrcf	(?___lmul+1)^0,f,c
 10556  004748  320D               	rrcf	?___lmul^0,f,c
 10557  00474A                     u10360:
 10558  00474A  2EE8               	decfsz	wreg,f,c
 10559  00474C  D7F9               	goto	u10365
 10560  00474E  C00D  F021         	movff	?___lmul,adc_voltage@mV
 10561  004752  C00E  F022         	movff	?___lmul+1,adc_voltage@mV+1
 10562  004756  C00F  F023         	movff	?___lmul+2,adc_voltage@mV+2
 10563  00475A  C010  F024         	movff	?___lmul+3,adc_voltage@mV+3
 10564                           
 10565                           ;src/driver/adc.c: 75:  return mV;
 10566  00475E  C021  F019         	movff	adc_voltage@mV,?_adc_voltage
 10567  004762  C022  F01A         	movff	adc_voltage@mV+1,?_adc_voltage+1
 10568  004766  C023  F01B         	movff	adc_voltage@mV+2,?_adc_voltage+2
 10569  00476A  C024  F01C         	movff	adc_voltage@mV+3,?_adc_voltage+3
 10570  00476E  0012               	return		;funcret
 10571  004770                     __end_of_adc_voltage:
 10572                           	opt callstack 0
 10573                           
 10574 ;; *************** function _adc_sample *****************
 10575 ;; Defined at:
 10576 ;;		line 45 in file "src/driver/adc.c"
 10577 ;; Parameters:    Size  Location     Type
 10578 ;;  gpio            2   16[COMRAM] PTR const struct gpio_pi
 10579 ;;		 -> PIN_VOLTAGE_DEF(5), PIN_RF_V_DEF(5), PIN_RF_R_DEF(5), PIN_TEMP_DEF(5), 
 10580 ;; Auto vars:     Size  Location     Type
 10581 ;;  result          2   20[COMRAM] unsigned short 
 10582 ;;  ch              2   22[COMRAM] int 
 10583 ;; Return value:  Size  Location     Type
 10584 ;;                  2   16[COMRAM] unsigned short 
 10585 ;; Registers used:
 10586 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 10587 ;; Tracked objects:
 10588 ;;		On entry : 3F/0
 10589 ;;		On exit  : 0/0
 10590 ;;		Unchanged: 0/0
 10591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10592 ;;      Params:         2       0       0       0       0       0       0
 10593 ;;      Locals:         4       0       0       0       0       0       0
 10594 ;;      Temps:          2       0       0       0       0       0       0
 10595 ;;      Totals:         8       0       0       0       0       0       0
 10596 ;;Total ram usage:        8 bytes
 10597 ;; Hardware stack levels used:    1
 10598 ;; Hardware stack levels required when called:    3
 10599 ;; This function calls:
 10600 ;;		_gpio_to_ch
 10601 ;; This function is called by:
 10602 ;;		_adc_voltage
 10603 ;; This function uses a non-reentrant model
 10604 ;;
 10605                           
 10606                           	psect	text44
 10607  004A22                     __ptext44:
 10608                           	opt callstack 0
 10609  004A22                     _adc_sample:
 10610                           	opt callstack 23
 10611                           
 10612                           ; BSR set to: 0
 10613                           ;src/driver/adc.c: 45: u16 adc_sample(gpio_pin gpio);src/driver/adc.c: 46: {;src/driver/
      +                          adc.c: 47:     int ch = gpio_to_ch(gpio);
 10614                           
 10615                           ;incstack = 0
 10616  004A22  C011  F00D         	movff	adc_sample@gpio,gpio_to_ch@gpio
 10617  004A26  C012  F00E         	movff	adc_sample@gpio+1,gpio_to_ch@gpio+1
 10618  004A2A  EC03  F013         	call	_gpio_to_ch	;wreg free
 10619  004A2E  C00D  F017         	movff	?_gpio_to_ch,adc_sample@ch
 10620  004A32  C00E  F018         	movff	?_gpio_to_ch+1,adc_sample@ch+1
 10621                           
 10622                           ;src/driver/adc.c: 48:     if(ch>=0) {
 10623  004A36  BE18               	btfsc	(adc_sample@ch+1)^0,7,c
 10624  004A38  D01B               	goto	l7081
 10625                           
 10626                           ;src/driver/adc.c: 50:   ADCON1bits.PCFG = 0;
 10627  004A3A  0EF0               	movlw	-16
 10628  004A3C  16C1               	andwf	193,f,c	;volatile
 10629                           
 10630                           ;src/driver/adc.c: 51:         ADCON0bits.CHS = ch;
 10631  004A3E  C017  F013         	movff	adc_sample@ch,??_adc_sample
 10632  004A42  4613               	rlncf	??_adc_sample^0,f,c
 10633  004A44  4613               	rlncf	??_adc_sample^0,f,c
 10634  004A46  50C2               	movf	194,w,c	;volatile
 10635  004A48  1813               	xorwf	??_adc_sample^0,w,c
 10636  004A4A  0BC3               	andlw	-61
 10637  004A4C  1813               	xorwf	??_adc_sample^0,w,c
 10638  004A4E  6EC2               	movwf	194,c	;volatile
 10639                           
 10640                           ;src/driver/adc.c: 53:         ADCON0bits.GODONE = 1;
 10641  004A50  82C2               	bsf	194,1,c	;volatile
 10642  004A52                     l277:
 10643  004A52  B2C2               	btfsc	194,1,c	;volatile
 10644  004A54  D7FE               	goto	l277
 10645                           
 10646                           ;src/driver/adc.c: 56:   ADCON1bits.PCFG = 0xF;
 10647  004A56  0E0F               	movlw	15
 10648  004A58  12C1               	iorwf	193,f,c	;volatile
 10649                           
 10650                           ;src/driver/adc.c: 58:   u16 result = (u16)ADRESH<<8 | (u16)ADRESL;
 10651  004A5A  50C4               	movf	196,w,c	;volatile
 10652  004A5C  6E13               	movwf	??_adc_sample^0,c
 10653  004A5E  50C3               	movf	195,w,c	;volatile
 10654  004A60  6E15               	movwf	adc_sample@result^0,c
 10655  004A62  C013  F016         	movff	??_adc_sample,adc_sample@result+1
 10656                           
 10657                           ;src/driver/adc.c: 60:         return result;
 10658  004A66  C015  F011         	movff	adc_sample@result,?_adc_sample
 10659  004A6A  C016  F012         	movff	adc_sample@result+1,?_adc_sample+1
 10660  004A6E  0012               	return	
 10661  004A70                     l7081:
 10662                           
 10663                           ;src/driver/adc.c: 62:     return 0;
 10664  004A70  0E00               	movlw	0
 10665  004A72  6E12               	movwf	(?_adc_sample+1)^0,c
 10666  004A74  0E00               	movlw	0
 10667  004A76  6E11               	movwf	?_adc_sample^0,c
 10668  004A78  0012               	return		;funcret
 10669  004A7A                     __end_of_adc_sample:
 10670                           	opt callstack 0
 10671                           
 10672 ;; *************** function _calc_power *****************
 10673 ;; Defined at:
 10674 ;;		line 55 in file "src/power.c"
 10675 ;; Parameters:    Size  Location     Type
 10676 ;;  v               2   26[COMRAM] unsigned short 
 10677 ;; Auto vars:     Size  Location     Type
 10678 ;;  dBm             4   32[COMRAM] long 
 10679 ;; Return value:  Size  Location     Type
 10680 ;;                  1    wreg      void 
 10681 ;; Registers used:
 10682 ;;		wreg, status,2, status,0, cstack
 10683 ;; Tracked objects:
 10684 ;;		On entry : 0/0
 10685 ;;		On exit  : 3F/0
 10686 ;;		Unchanged: 0/0
 10687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10688 ;;      Params:         2       0       0       0       0       0       0
 10689 ;;      Locals:         4       0       0       0       0       0       0
 10690 ;;      Temps:          4       0       0       0       0       0       0
 10691 ;;      Totals:        10       0       0       0       0       0       0
 10692 ;;Total ram usage:       10 bytes
 10693 ;; Hardware stack levels used:    1
 10694 ;; Hardware stack levels required when called:    3
 10695 ;; This function calls:
 10696 ;;		___aldiv
 10697 ;;		___lmul
 10698 ;; This function is called by:
 10699 ;;		_alarm
 10700 ;; This function uses a non-reentrant model
 10701 ;;
 10702                           
 10703                           	psect	text45
 10704  003428                     __ptext45:
 10705                           	opt callstack 0
 10706  003428                     _calc_power:
 10707                           	opt callstack 25
 10708                           
 10709                           ;src/power.c: 55: void calc_power(u16 v);src/power.c: 56: {;src/power.c: 57:  s32 dBm = 
      +                          40L * ((s32)v - 420L);
 10710                           
 10711                           ;incstack = 0
 10712  003428  501B               	movf	calc_power@v^0,w,c
 10713  00342A  6E1D               	movwf	??_calc_power^0,c
 10714  00342C  501C               	movf	(calc_power@v+1)^0,w,c
 10715  00342E  6E1E               	movwf	(??_calc_power+1)^0,c
 10716  003430  6A1F               	clrf	(??_calc_power+2)^0,c
 10717  003432  6A20               	clrf	(??_calc_power+3)^0,c
 10718  003434  0E5C               	movlw	92
 10719  003436  241D               	addwf	??_calc_power^0,w,c
 10720  003438  6E0D               	movwf	___lmul@multiplier^0,c
 10721  00343A  0EFE               	movlw	254
 10722  00343C  201E               	addwfc	(??_calc_power+1)^0,w,c
 10723  00343E  6E0E               	movwf	(___lmul@multiplier+1)^0,c
 10724  003440  0EFF               	movlw	255
 10725  003442  201F               	addwfc	(??_calc_power+2)^0,w,c
 10726  003444  6E0F               	movwf	(___lmul@multiplier+2)^0,c
 10727  003446  0EFF               	movlw	255
 10728  003448  2020               	addwfc	(??_calc_power+3)^0,w,c
 10729  00344A  6E10               	movwf	(___lmul@multiplier+3)^0,c
 10730  00344C  0E28               	movlw	40
 10731  00344E  6E11               	movwf	___lmul@multiplicand^0,c
 10732  003450  0E00               	movlw	0
 10733  003452  6E12               	movwf	(___lmul@multiplicand+1)^0,c
 10734  003454  0E00               	movlw	0
 10735  003456  6E13               	movwf	(___lmul@multiplicand+2)^0,c
 10736  003458  0E00               	movlw	0
 10737  00345A  6E14               	movwf	(___lmul@multiplicand+3)^0,c
 10738  00345C  EC3D  F025         	call	___lmul	;wreg free
 10739  003460  C00D  F021         	movff	?___lmul,calc_power@dBm
 10740  003464  C00E  F022         	movff	?___lmul+1,calc_power@dBm+1
 10741  003468  C00F  F023         	movff	?___lmul+2,calc_power@dBm+2
 10742  00346C  C010  F024         	movff	?___lmul+3,calc_power@dBm+3
 10743                           
 10744                           ;src/power.c: 58:  dBm /= (2080L - 420L);
 10745  003470  C021  F00D         	movff	calc_power@dBm,___aldiv@dividend
 10746  003474  C022  F00E         	movff	calc_power@dBm+1,___aldiv@dividend+1
 10747  003478  C023  F00F         	movff	calc_power@dBm+2,___aldiv@dividend+2
 10748  00347C  C024  F010         	movff	calc_power@dBm+3,___aldiv@dividend+3
 10749  003480  0E7C               	movlw	124
 10750  003482  6E11               	movwf	___aldiv@divisor^0,c
 10751  003484  0E06               	movlw	6
 10752  003486  6E12               	movwf	(___aldiv@divisor+1)^0,c
 10753  003488  0E00               	movlw	0
 10754  00348A  6E13               	movwf	(___aldiv@divisor+2)^0,c
 10755  00348C  0E00               	movlw	0
 10756  00348E  6E14               	movwf	(___aldiv@divisor+3)^0,c
 10757  003490  ECA4  F01D         	call	___aldiv	;wreg free
 10758  003494  C00D  F021         	movff	?___aldiv,calc_power@dBm
 10759  003498  C00E  F022         	movff	?___aldiv+1,calc_power@dBm+1
 10760  00349C  C00F  F023         	movff	?___aldiv+2,calc_power@dBm+2
 10761  0034A0  C010  F024         	movff	?___aldiv+3,calc_power@dBm+3
 10762                           
 10763                           ;src/power.c: 65:  power_dBm = (s8)dBm;
 10764  0034A4  C021  F08F         	movff	calc_power@dBm,_power_dBm
 10765                           
 10766                           ;src/power.c: 67:  power_blink = 1;
 10767  0034A8  0E01               	movlw	1
 10768  0034AA  0100               	movlb	0	; () banked
 10769  0034AC  6F96               	movwf	_power_blink& (0+255),b
 10770                           
 10771                           ; BSR set to: 0
 10772                           ;src/power.c: 68:  if(dBm > 10) power_blink = 2;
 10773  0034AE  BE24               	btfsc	(calc_power@dBm+3)^0,7,c
 10774  0034B0  D00A               	goto	l7873
 10775  0034B2  5024               	movf	(calc_power@dBm+3)^0,w,c
 10776  0034B4  1023               	iorwf	(calc_power@dBm+2)^0,w,c
 10777  0034B6  1022               	iorwf	(calc_power@dBm+1)^0,w,c
 10778  0034B8  E104               	bnz	u10580
 10779  0034BA  0E0B               	movlw	11
 10780  0034BC  5C21               	subwf	calc_power@dBm^0,w,c
 10781  0034BE  A0D8               	btfss	status,0,c
 10782  0034C0  D002               	goto	l7873
 10783  0034C2                     u10580:
 10784                           
 10785                           ; BSR set to: 0
 10786  0034C2  0E02               	movlw	2
 10787  0034C4  6F96               	movwf	_power_blink& (0+255),b
 10788  0034C6                     l7873:
 10789                           
 10790                           ; BSR set to: 0
 10791                           ;src/power.c: 69:  if(dBm > 20) power_blink = 3;
 10792  0034C6  BE24               	btfsc	(calc_power@dBm+3)^0,7,c
 10793  0034C8  D00A               	goto	l7877
 10794  0034CA  5024               	movf	(calc_power@dBm+3)^0,w,c
 10795  0034CC  1023               	iorwf	(calc_power@dBm+2)^0,w,c
 10796  0034CE  1022               	iorwf	(calc_power@dBm+1)^0,w,c
 10797  0034D0  E104               	bnz	u10590
 10798  0034D2  0E15               	movlw	21
 10799  0034D4  5C21               	subwf	calc_power@dBm^0,w,c
 10800  0034D6  A0D8               	btfss	status,0,c
 10801  0034D8  D002               	goto	l7877
 10802  0034DA                     u10590:
 10803                           
 10804                           ; BSR set to: 0
 10805  0034DA  0E03               	movlw	3
 10806  0034DC  6F96               	movwf	_power_blink& (0+255),b
 10807  0034DE                     l7877:
 10808                           
 10809                           ; BSR set to: 0
 10810                           ;src/power.c: 70:  if(dBm > 27) power_blink = 4;
 10811  0034DE  BE24               	btfsc	(calc_power@dBm+3)^0,7,c
 10812  0034E0  D00A               	goto	l7881
 10813  0034E2  5024               	movf	(calc_power@dBm+3)^0,w,c
 10814  0034E4  1023               	iorwf	(calc_power@dBm+2)^0,w,c
 10815  0034E6  1022               	iorwf	(calc_power@dBm+1)^0,w,c
 10816  0034E8  E104               	bnz	u10600
 10817  0034EA  0E1C               	movlw	28
 10818  0034EC  5C21               	subwf	calc_power@dBm^0,w,c
 10819  0034EE  A0D8               	btfss	status,0,c
 10820  0034F0  D002               	goto	l7881
 10821  0034F2                     u10600:
 10822                           
 10823                           ; BSR set to: 0
 10824  0034F2  0E04               	movlw	4
 10825  0034F4  6F96               	movwf	_power_blink& (0+255),b
 10826  0034F6                     l7881:
 10827                           
 10828                           ; BSR set to: 0
 10829                           ;src/power.c: 71:  if(dBm > 30) power_blink = 5;
 10830  0034F6  BE24               	btfsc	(calc_power@dBm+3)^0,7,c
 10831  0034F8  D00A               	goto	l7885
 10832  0034FA  5024               	movf	(calc_power@dBm+3)^0,w,c
 10833  0034FC  1023               	iorwf	(calc_power@dBm+2)^0,w,c
 10834  0034FE  1022               	iorwf	(calc_power@dBm+1)^0,w,c
 10835  003500  E104               	bnz	u10610
 10836  003502  0E1F               	movlw	31
 10837  003504  5C21               	subwf	calc_power@dBm^0,w,c
 10838  003506  A0D8               	btfss	status,0,c
 10839  003508  D002               	goto	l7885
 10840  00350A                     u10610:
 10841                           
 10842                           ; BSR set to: 0
 10843  00350A  0E05               	movlw	5
 10844  00350C  6F96               	movwf	_power_blink& (0+255),b
 10845  00350E                     l7885:
 10846                           
 10847                           ; BSR set to: 0
 10848                           ;src/power.c: 72:  if(dBm > 33) power_blink = 6;
 10849  00350E  BE24               	btfsc	(calc_power@dBm+3)^0,7,c
 10850  003510  D00A               	goto	l7889
 10851  003512  5024               	movf	(calc_power@dBm+3)^0,w,c
 10852  003514  1023               	iorwf	(calc_power@dBm+2)^0,w,c
 10853  003516  1022               	iorwf	(calc_power@dBm+1)^0,w,c
 10854  003518  E104               	bnz	u10620
 10855  00351A  0E22               	movlw	34
 10856  00351C  5C21               	subwf	calc_power@dBm^0,w,c
 10857  00351E  A0D8               	btfss	status,0,c
 10858  003520  D002               	goto	l7889
 10859  003522                     u10620:
 10860                           
 10861                           ; BSR set to: 0
 10862  003522  0E06               	movlw	6
 10863  003524  6F96               	movwf	_power_blink& (0+255),b
 10864  003526                     l7889:
 10865                           
 10866                           ; BSR set to: 0
 10867                           ;src/power.c: 73:  if(dBm > 36) power_blink = 7;
 10868  003526  BE24               	btfsc	(calc_power@dBm+3)^0,7,c
 10869  003528  0012               	return	
 10870  00352A  5024               	movf	(calc_power@dBm+3)^0,w,c
 10871  00352C  1023               	iorwf	(calc_power@dBm+2)^0,w,c
 10872  00352E  1022               	iorwf	(calc_power@dBm+1)^0,w,c
 10873  003530  E104               	bnz	u10630
 10874  003532  0E25               	movlw	37
 10875  003534  5C21               	subwf	calc_power@dBm^0,w,c
 10876  003536  A0D8               	btfss	status,0,c
 10877  003538  0012               	return	
 10878  00353A                     u10630:
 10879                           
 10880                           ; BSR set to: 0
 10881  00353A  0E07               	movlw	7
 10882  00353C  6F96               	movwf	_power_blink& (0+255),b
 10883                           
 10884                           ; BSR set to: 0
 10885  00353E  0012               	return		;funcret
 10886  003540                     __end_of_calc_power:
 10887                           	opt callstack 0
 10888                           
 10889 ;; *************** function ___lmul *****************
 10890 ;; Defined at:
 10891 ;;		line 15 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/Umul32.c"
 10892 ;; Parameters:    Size  Location     Type
 10893 ;;  multiplier      4   12[COMRAM] unsigned long 
 10894 ;;  multiplicand    4   16[COMRAM] unsigned long 
 10895 ;; Auto vars:     Size  Location     Type
 10896 ;;  product         4   20[COMRAM] unsigned long 
 10897 ;; Return value:  Size  Location     Type
 10898 ;;                  4   12[COMRAM] unsigned long 
 10899 ;; Registers used:
 10900 ;;		wreg, status,2, status,0
 10901 ;; Tracked objects:
 10902 ;;		On entry : 0/0
 10903 ;;		On exit  : 0/0
 10904 ;;		Unchanged: 0/0
 10905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10906 ;;      Params:         8       0       0       0       0       0       0
 10907 ;;      Locals:         4       0       0       0       0       0       0
 10908 ;;      Temps:          0       0       0       0       0       0       0
 10909 ;;      Totals:        12       0       0       0       0       0       0
 10910 ;;Total ram usage:       12 bytes
 10911 ;; Hardware stack levels used:    1
 10912 ;; Hardware stack levels required when called:    2
 10913 ;; This function calls:
 10914 ;;		Nothing
 10915 ;; This function is called by:
 10916 ;;		_adc_voltage
 10917 ;;		_calc_power
 10918 ;; This function uses a non-reentrant model
 10919 ;;
 10920                           
 10921                           	psect	text46
 10922  004A7A                     __ptext46:
 10923                           	opt callstack 0
 10924  004A7A                     ___lmul:
 10925                           	opt callstack 24
 10926                           
 10927                           ; BSR set to: 0
 10928                           ;incstack = 0
 10929  004A7A  0E00               	movlw	0
 10930  004A7C  6E15               	movwf	___lmul@product^0,c
 10931  004A7E  0E00               	movlw	0
 10932  004A80  6E16               	movwf	(___lmul@product+1)^0,c
 10933  004A82  0E00               	movlw	0
 10934  004A84  6E17               	movwf	(___lmul@product+2)^0,c
 10935  004A86  0E00               	movlw	0
 10936  004A88  6E18               	movwf	(___lmul@product+3)^0,c
 10937  004A8A                     l7087:
 10938  004A8A  A00D               	btfss	___lmul@multiplier^0,0,c
 10939  004A8C  D008               	goto	l7091
 10940  004A8E  5011               	movf	___lmul@multiplicand^0,w,c
 10941  004A90  2615               	addwf	___lmul@product^0,f,c
 10942  004A92  5012               	movf	(___lmul@multiplicand+1)^0,w,c
 10943  004A94  2216               	addwfc	(___lmul@product+1)^0,f,c
 10944  004A96  5013               	movf	(___lmul@multiplicand+2)^0,w,c
 10945  004A98  2217               	addwfc	(___lmul@product+2)^0,f,c
 10946  004A9A  5014               	movf	(___lmul@multiplicand+3)^0,w,c
 10947  004A9C  2218               	addwfc	(___lmul@product+3)^0,f,c
 10948  004A9E                     l7091:
 10949  004A9E  90D8               	bcf	status,0,c
 10950  004AA0  3611               	rlcf	___lmul@multiplicand^0,f,c
 10951  004AA2  3612               	rlcf	(___lmul@multiplicand+1)^0,f,c
 10952  004AA4  3613               	rlcf	(___lmul@multiplicand+2)^0,f,c
 10953  004AA6  3614               	rlcf	(___lmul@multiplicand+3)^0,f,c
 10954  004AA8  90D8               	bcf	status,0,c
 10955  004AAA  3210               	rrcf	(___lmul@multiplier+3)^0,f,c
 10956  004AAC  320F               	rrcf	(___lmul@multiplier+2)^0,f,c
 10957  004AAE  320E               	rrcf	(___lmul@multiplier+1)^0,f,c
 10958  004AB0  320D               	rrcf	___lmul@multiplier^0,f,c
 10959  004AB2  500D               	movf	___lmul@multiplier^0,w,c
 10960  004AB4  100E               	iorwf	(___lmul@multiplier+1)^0,w,c
 10961  004AB6  100F               	iorwf	(___lmul@multiplier+2)^0,w,c
 10962  004AB8  1010               	iorwf	(___lmul@multiplier+3)^0,w,c
 10963  004ABA  A4D8               	btfss	status,2,c
 10964  004ABC  D7E6               	goto	l7087
 10965  004ABE  C015  F00D         	movff	___lmul@product,?___lmul
 10966  004AC2  C016  F00E         	movff	___lmul@product+1,?___lmul+1
 10967  004AC6  C017  F00F         	movff	___lmul@product+2,?___lmul+2
 10968  004ACA  C018  F010         	movff	___lmul@product+3,?___lmul+3
 10969  004ACE  0012               	return		;funcret
 10970  004AD0                     __end_of___lmul:
 10971                           	opt callstack 0
 10972                           
 10973 ;; *************** function ___aldiv *****************
 10974 ;; Defined at:
 10975 ;;		line 7 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/aldiv.c"
 10976 ;; Parameters:    Size  Location     Type
 10977 ;;  dividend        4   12[COMRAM] long 
 10978 ;;  divisor         4   16[COMRAM] long 
 10979 ;; Auto vars:     Size  Location     Type
 10980 ;;  quotient        4   22[COMRAM] long 
 10981 ;;  sign            1   21[COMRAM] unsigned char 
 10982 ;;  counter         1   20[COMRAM] unsigned char 
 10983 ;; Return value:  Size  Location     Type
 10984 ;;                  4   12[COMRAM] long 
 10985 ;; Registers used:
 10986 ;;		wreg, status,2, status,0
 10987 ;; Tracked objects:
 10988 ;;		On entry : 0/0
 10989 ;;		On exit  : 0/0
 10990 ;;		Unchanged: 0/0
 10991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10992 ;;      Params:         8       0       0       0       0       0       0
 10993 ;;      Locals:         6       0       0       0       0       0       0
 10994 ;;      Temps:          0       0       0       0       0       0       0
 10995 ;;      Totals:        14       0       0       0       0       0       0
 10996 ;;Total ram usage:       14 bytes
 10997 ;; Hardware stack levels used:    1
 10998 ;; Hardware stack levels required when called:    2
 10999 ;; This function calls:
 11000 ;;		Nothing
 11001 ;; This function is called by:
 11002 ;;		_calc_power
 11003 ;; This function uses a non-reentrant model
 11004 ;;
 11005                           
 11006                           	psect	text47
 11007  003B48                     __ptext47:
 11008                           	opt callstack 0
 11009  003B48                     ___aldiv:
 11010                           	opt callstack 25
 11011                           
 11012                           ;incstack = 0
 11013  003B48  0E00               	movlw	0
 11014  003B4A  6E16               	movwf	___aldiv@sign^0,c
 11015  003B4C  AE14               	btfss	(___aldiv@divisor+3)^0,7,c
 11016  003B4E  D00A               	goto	l7727
 11017  003B50  1E14               	comf	(___aldiv@divisor+3)^0,f,c
 11018  003B52  1E13               	comf	(___aldiv@divisor+2)^0,f,c
 11019  003B54  1E12               	comf	(___aldiv@divisor+1)^0,f,c
 11020  003B56  6C11               	negf	___aldiv@divisor^0,c
 11021  003B58  0E00               	movlw	0
 11022  003B5A  2212               	addwfc	(___aldiv@divisor+1)^0,f,c
 11023  003B5C  2213               	addwfc	(___aldiv@divisor+2)^0,f,c
 11024  003B5E  2214               	addwfc	(___aldiv@divisor+3)^0,f,c
 11025  003B60  0E01               	movlw	1
 11026  003B62  6E16               	movwf	___aldiv@sign^0,c
 11027  003B64                     l7727:
 11028  003B64  AE10               	btfss	(___aldiv@dividend+3)^0,7,c
 11029  003B66  D00A               	goto	l7733
 11030  003B68  1E10               	comf	(___aldiv@dividend+3)^0,f,c
 11031  003B6A  1E0F               	comf	(___aldiv@dividend+2)^0,f,c
 11032  003B6C  1E0E               	comf	(___aldiv@dividend+1)^0,f,c
 11033  003B6E  6C0D               	negf	___aldiv@dividend^0,c
 11034  003B70  0E00               	movlw	0
 11035  003B72  220E               	addwfc	(___aldiv@dividend+1)^0,f,c
 11036  003B74  220F               	addwfc	(___aldiv@dividend+2)^0,f,c
 11037  003B76  2210               	addwfc	(___aldiv@dividend+3)^0,f,c
 11038  003B78  0E01               	movlw	1
 11039  003B7A  1A16               	xorwf	___aldiv@sign^0,f,c
 11040  003B7C                     l7733:
 11041  003B7C  0E00               	movlw	0
 11042  003B7E  6E17               	movwf	___aldiv@quotient^0,c
 11043  003B80  0E00               	movlw	0
 11044  003B82  6E18               	movwf	(___aldiv@quotient+1)^0,c
 11045  003B84  0E00               	movlw	0
 11046  003B86  6E19               	movwf	(___aldiv@quotient+2)^0,c
 11047  003B88  0E00               	movlw	0
 11048  003B8A  6E1A               	movwf	(___aldiv@quotient+3)^0,c
 11049  003B8C  5011               	movf	___aldiv@divisor^0,w,c
 11050  003B8E  1012               	iorwf	(___aldiv@divisor+1)^0,w,c
 11051  003B90  1013               	iorwf	(___aldiv@divisor+2)^0,w,c
 11052  003B92  1014               	iorwf	(___aldiv@divisor+3)^0,w,c
 11053  003B94  B4D8               	btfsc	status,2,c
 11054  003B96  D02A               	goto	l7755
 11055  003B98  0E01               	movlw	1
 11056  003B9A  6E15               	movwf	___aldiv@counter^0,c
 11057  003B9C  D006               	goto	l7741
 11058  003B9E                     l7739:
 11059  003B9E  90D8               	bcf	status,0,c
 11060  003BA0  3611               	rlcf	___aldiv@divisor^0,f,c
 11061  003BA2  3612               	rlcf	(___aldiv@divisor+1)^0,f,c
 11062  003BA4  3613               	rlcf	(___aldiv@divisor+2)^0,f,c
 11063  003BA6  3614               	rlcf	(___aldiv@divisor+3)^0,f,c
 11064  003BA8  2A15               	incf	___aldiv@counter^0,f,c
 11065  003BAA                     l7741:
 11066  003BAA  AE14               	btfss	(___aldiv@divisor+3)^0,7,c
 11067  003BAC  D7F8               	goto	l7739
 11068  003BAE                     u10420:
 11069  003BAE  90D8               	bcf	status,0,c
 11070  003BB0  3617               	rlcf	___aldiv@quotient^0,f,c
 11071  003BB2  3618               	rlcf	(___aldiv@quotient+1)^0,f,c
 11072  003BB4  3619               	rlcf	(___aldiv@quotient+2)^0,f,c
 11073  003BB6  361A               	rlcf	(___aldiv@quotient+3)^0,f,c
 11074  003BB8  5011               	movf	___aldiv@divisor^0,w,c
 11075  003BBA  5C0D               	subwf	___aldiv@dividend^0,w,c
 11076  003BBC  5012               	movf	(___aldiv@divisor+1)^0,w,c
 11077  003BBE  580E               	subwfb	(___aldiv@dividend+1)^0,w,c
 11078  003BC0  5013               	movf	(___aldiv@divisor+2)^0,w,c
 11079  003BC2  580F               	subwfb	(___aldiv@dividend+2)^0,w,c
 11080  003BC4  5014               	movf	(___aldiv@divisor+3)^0,w,c
 11081  003BC6  5810               	subwfb	(___aldiv@dividend+3)^0,w,c
 11082  003BC8  A0D8               	btfss	status,0,c
 11083  003BCA  D009               	goto	l7751
 11084  003BCC  5011               	movf	___aldiv@divisor^0,w,c
 11085  003BCE  5E0D               	subwf	___aldiv@dividend^0,f,c
 11086  003BD0  5012               	movf	(___aldiv@divisor+1)^0,w,c
 11087  003BD2  5A0E               	subwfb	(___aldiv@dividend+1)^0,f,c
 11088  003BD4  5013               	movf	(___aldiv@divisor+2)^0,w,c
 11089  003BD6  5A0F               	subwfb	(___aldiv@dividend+2)^0,f,c
 11090  003BD8  5014               	movf	(___aldiv@divisor+3)^0,w,c
 11091  003BDA  5A10               	subwfb	(___aldiv@dividend+3)^0,f,c
 11092  003BDC  8017               	bsf	___aldiv@quotient^0,0,c
 11093  003BDE                     l7751:
 11094  003BDE  90D8               	bcf	status,0,c
 11095  003BE0  3214               	rrcf	(___aldiv@divisor+3)^0,f,c
 11096  003BE2  3213               	rrcf	(___aldiv@divisor+2)^0,f,c
 11097  003BE4  3212               	rrcf	(___aldiv@divisor+1)^0,f,c
 11098  003BE6  3211               	rrcf	___aldiv@divisor^0,f,c
 11099  003BE8  2E15               	decfsz	___aldiv@counter^0,f,c
 11100  003BEA  D7E1               	goto	u10420
 11101  003BEC                     l7755:
 11102  003BEC  5016               	movf	___aldiv@sign^0,w,c
 11103  003BEE  B4D8               	btfsc	status,2,c
 11104  003BF0  D008               	goto	l7759
 11105  003BF2  1E1A               	comf	(___aldiv@quotient+3)^0,f,c
 11106  003BF4  1E19               	comf	(___aldiv@quotient+2)^0,f,c
 11107  003BF6  1E18               	comf	(___aldiv@quotient+1)^0,f,c
 11108  003BF8  6C17               	negf	___aldiv@quotient^0,c
 11109  003BFA  0E00               	movlw	0
 11110  003BFC  2218               	addwfc	(___aldiv@quotient+1)^0,f,c
 11111  003BFE  2219               	addwfc	(___aldiv@quotient+2)^0,f,c
 11112  003C00  221A               	addwfc	(___aldiv@quotient+3)^0,f,c
 11113  003C02                     l7759:
 11114  003C02  C017  F00D         	movff	___aldiv@quotient,?___aldiv
 11115  003C06  C018  F00E         	movff	___aldiv@quotient+1,?___aldiv+1
 11116  003C0A  C019  F00F         	movff	___aldiv@quotient+2,?___aldiv+2
 11117  003C0E  C01A  F010         	movff	___aldiv@quotient+3,?___aldiv+3
 11118  003C12  0012               	return		;funcret
 11119  003C14                     __end_of___aldiv:
 11120                           	opt callstack 0
 11121                           
 11122 ;; *************** function _adf4351_set_tune *****************
 11123 ;; Defined at:
 11124 ;;		line 136 in file "src/driver/adf4351.c"
 11125 ;; Parameters:    Size  Location     Type
 11126 ;;  ctx             2   38[COMRAM] PTR struct adf4351_ctx
 11127 ;;		 -> g_adf4351(55), 
 11128 ;;  icp             1   40[COMRAM] unsigned char 
 11129 ;;  pout            1   41[COMRAM] unsigned char 
 11130 ;;  lownoise        2   42[COMRAM] int 
 11131 ;; Auto vars:     Size  Location     Type
 11132 ;;		None
 11133 ;; Return value:  Size  Location     Type
 11134 ;;                  1    wreg      void 
 11135 ;; Registers used:
 11136 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11137 ;; Tracked objects:
 11138 ;;		On entry : 3F/0
 11139 ;;		On exit  : 0/0
 11140 ;;		Unchanged: 0/0
 11141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11142 ;;      Params:         6       0       0       0       0       0       0
 11143 ;;      Locals:         2       0       0       0       0       0       0
 11144 ;;      Temps:          0       0       0       0       0       0       0
 11145 ;;      Totals:         8       0       0       0       0       0       0
 11146 ;;Total ram usage:        8 bytes
 11147 ;; Hardware stack levels used:    1
 11148 ;; Hardware stack levels required when called:    5
 11149 ;; This function calls:
 11150 ;;		_adf4351_setup
 11151 ;; This function is called by:
 11152 ;;		_main
 11153 ;;		_check_adf4351_lock
 11154 ;; This function uses a non-reentrant model
 11155 ;;
 11156                           
 11157                           	psect	text48
 11158  0047D8                     __ptext48:
 11159                           	opt callstack 0
 11160  0047D8                     _adf4351_set_tune:
 11161                           	opt callstack 24
 11162                           
 11163                           ; BSR set to: 0
 11164                           ;src/driver/adf4351.c: 136: void adf4351_set_tune(adf4351_ctx* ctx, u8 icp, u8 pout, BOO
      +                          L lownoise);src/driver/adf4351.c: 137: {;src/driver/adf4351.c: 141:     ctx->reg2.lownoi
      +                          se = lownoise?0:3;
 11165                           
 11166                           ;incstack = 0
 11167  0047D8  502B               	movf	adf4351_set_tune@lownoise^0,w,c
 11168  0047DA  102C               	iorwf	(adf4351_set_tune@lownoise+1)^0,w,c
 11169  0047DC  A4D8               	btfss	status,2,c
 11170  0047DE  D004               	goto	l7931
 11171                           
 11172                           ; BSR set to: 0
 11173  0047E0  0E00               	movlw	0
 11174  0047E2  6E2E               	movwf	(_adf4351_set_tune$437+1)^0,c
 11175  0047E4  0E03               	movlw	3
 11176  0047E6  D003               	goto	L14
 11177  0047E8                     l7931:
 11178                           
 11179                           ; BSR set to: 0
 11180  0047E8  0E00               	movlw	0
 11181  0047EA  6E2E               	movwf	(_adf4351_set_tune$437+1)^0,c
 11182  0047EC  0E00               	movlw	0
 11183  0047EE                     L14:
 11184  0047EE  6E2D               	movwf	_adf4351_set_tune$437^0,c
 11185                           
 11186                           ; BSR set to: 0
 11187  0047F0  EE20 F00B          	lfsr	2,11
 11188  0047F4  5027               	movf	adf4351_set_tune@ctx^0,w,c
 11189  0047F6  26D9               	addwf	fsr2l,f,c
 11190  0047F8  5028               	movf	(adf4351_set_tune@ctx+1)^0,w,c
 11191  0047FA  22DA               	addwfc	fsr2h,f,c
 11192  0047FC  C02D  FFDF         	movff	_adf4351_set_tune$437,indf2
 11193                           
 11194                           ; BSR set to: 0
 11195                           ;src/driver/adf4351.c: 142:     ctx->reg2.cpc = icp;
 11196  004800  EE20 F012          	lfsr	2,18
 11197  004804  5027               	movf	adf4351_set_tune@ctx^0,w,c
 11198  004806  26D9               	addwf	fsr2l,f,c
 11199  004808  5028               	movf	(adf4351_set_tune@ctx+1)^0,w,c
 11200  00480A  22DA               	addwfc	fsr2h,f,c
 11201  00480C  C029  FFDF         	movff	adf4351_set_tune@icp,indf2
 11202                           
 11203                           ; BSR set to: 0
 11204                           ;src/driver/adf4351.c: 143:     ctx->reg4.rfoutpwr = pout;
 11205  004810  EE20 F029          	lfsr	2,41
 11206  004814  5027               	movf	adf4351_set_tune@ctx^0,w,c
 11207  004816  26D9               	addwf	fsr2l,f,c
 11208  004818  5028               	movf	(adf4351_set_tune@ctx+1)^0,w,c
 11209  00481A  22DA               	addwfc	fsr2h,f,c
 11210  00481C  C02A  FFDF         	movff	adf4351_set_tune@pout,indf2
 11211                           
 11212                           ; BSR set to: 0
 11213                           ;src/driver/adf4351.c: 145:     if(ctx->reg4.vcopd == 0) {
 11214  004820  EE20 F023          	lfsr	2,35
 11215  004824  5027               	movf	adf4351_set_tune@ctx^0,w,c
 11216  004826  26D9               	addwf	fsr2l,f,c
 11217  004828  5028               	movf	(adf4351_set_tune@ctx+1)^0,w,c
 11218  00482A  22DA               	addwfc	fsr2h,f,c
 11219  00482C  50DF               	movf	indf2,w,c
 11220  00482E  A4D8               	btfss	status,2,c
 11221  004830  0012               	return	
 11222                           
 11223                           ; BSR set to: 0
 11224                           ;src/driver/adf4351.c: 146:         adf4351_setup(ctx);
 11225  004832  C027  F025         	movff	adf4351_set_tune@ctx,adf4351_setup@ctx
 11226  004836  C028  F026         	movff	adf4351_set_tune@ctx+1,adf4351_setup@ctx+1
 11227  00483A  ECDE  F025         	call	_adf4351_setup	;wreg free
 11228  00483E  0012               	return		;funcret
 11229  004840                     __end_of_adf4351_set_tune:
 11230                           	opt callstack 0
 11231                           
 11232 ;; *************** function _adf4351_setup *****************
 11233 ;; Defined at:
 11234 ;;		line 165 in file "src/driver/adf4351.c"
 11235 ;; Parameters:    Size  Location     Type
 11236 ;;  ctx             2   36[COMRAM] PTR struct adf4351_ctx
 11237 ;;		 -> g_adf4351(55), 
 11238 ;; Auto vars:     Size  Location     Type
 11239 ;;		None
 11240 ;; Return value:  Size  Location     Type
 11241 ;;                  1    wreg      void 
 11242 ;; Registers used:
 11243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11244 ;; Tracked objects:
 11245 ;;		On entry : 0/0
 11246 ;;		On exit  : 0/0
 11247 ;;		Unchanged: 0/0
 11248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11249 ;;      Params:         2       0       0       0       0       0       0
 11250 ;;      Locals:         0       0       0       0       0       0       0
 11251 ;;      Temps:          0       0       0       0       0       0       0
 11252 ;;      Totals:         2       0       0       0       0       0       0
 11253 ;;Total ram usage:        2 bytes
 11254 ;; Hardware stack levels used:    1
 11255 ;; Hardware stack levels required when called:    4
 11256 ;; This function calls:
 11257 ;;		_adf4351_write_reg0
 11258 ;;		_adf4351_write_reg1
 11259 ;;		_adf4351_write_reg2
 11260 ;;		_adf4351_write_reg3
 11261 ;;		_adf4351_write_reg4
 11262 ;;		_adf4351_write_reg5
 11263 ;; This function is called by:
 11264 ;;		_adf4351_set_freq
 11265 ;;		_adf4351_set_mode
 11266 ;;		_adf4351_set_tune
 11267 ;; This function uses a non-reentrant model
 11268 ;;
 11269                           
 11270                           	psect	text49
 11271  004BBC                     __ptext49:
 11272                           	opt callstack 0
 11273  004BBC                     _adf4351_setup:
 11274                           	opt callstack 23
 11275                           
 11276                           ;src/driver/adf4351.c: 165: static void adf4351_setup(adf4351_ctx* ctx);src/driver/adf43
      +                          51.c: 166: {;src/driver/adf4351.c: 167:     adf4351_write_reg5(ctx);
 11277                           
 11278                           ;incstack = 0
 11279  004BBC  C025  F019         	movff	adf4351_setup@ctx,adf4351_write_reg5@ctx
 11280  004BC0  C026  F01A         	movff	adf4351_setup@ctx+1,adf4351_write_reg5@ctx+1
 11281  004BC4  EC46  F023         	call	_adf4351_write_reg5	;wreg free
 11282                           
 11283                           ;src/driver/adf4351.c: 168:     adf4351_write_reg4(ctx);
 11284  004BC8  C025  F019         	movff	adf4351_setup@ctx,adf4351_write_reg4@ctx
 11285  004BCC  C026  F01A         	movff	adf4351_setup@ctx+1,adf4351_write_reg4@ctx+1
 11286  004BD0  EC36  F00C         	call	_adf4351_write_reg4	;wreg free
 11287                           
 11288                           ;src/driver/adf4351.c: 169:     adf4351_write_reg3(ctx);
 11289  004BD4  C025  F019         	movff	adf4351_setup@ctx,adf4351_write_reg3@ctx
 11290  004BD8  C026  F01A         	movff	adf4351_setup@ctx+1,adf4351_write_reg3@ctx+1
 11291  004BDC  ECE0  F013         	call	_adf4351_write_reg3	;wreg free
 11292                           
 11293                           ;src/driver/adf4351.c: 170:     adf4351_write_reg2(ctx);
 11294  004BE0  C025  F019         	movff	adf4351_setup@ctx,adf4351_write_reg2@ctx
 11295  004BE4  C026  F01A         	movff	adf4351_setup@ctx+1,adf4351_write_reg2@ctx+1
 11296  004BE8  EC1C  F006         	call	_adf4351_write_reg2	;wreg free
 11297                           
 11298                           ;src/driver/adf4351.c: 171:     adf4351_write_reg1(ctx);
 11299  004BEC  C025  F019         	movff	adf4351_setup@ctx,adf4351_write_reg1@ctx
 11300  004BF0  C026  F01A         	movff	adf4351_setup@ctx+1,adf4351_write_reg1@ctx+1
 11301  004BF4  ECA0  F01A         	call	_adf4351_write_reg1	;wreg free
 11302                           
 11303                           ;src/driver/adf4351.c: 172:     adf4351_write_reg0(ctx);
 11304  004BF8  C025  F019         	movff	adf4351_setup@ctx,adf4351_write_reg0@ctx
 11305  004BFC  C026  F01A         	movff	adf4351_setup@ctx+1,adf4351_write_reg0@ctx+1
 11306  004C00  EC67  F01E         	call	_adf4351_write_reg0	;wreg free
 11307  004C04  0012               	return		;funcret
 11308  004C06                     __end_of_adf4351_setup:
 11309                           	opt callstack 0
 11310                           
 11311 ;; *************** function _adf4351_write_reg5 *****************
 11312 ;; Defined at:
 11313 ;;		line 399 in file "src/driver/adf4351.c"
 11314 ;; Parameters:    Size  Location     Type
 11315 ;;  ctx             2   24[COMRAM] PTR struct adf4351_ctx
 11316 ;;		 -> g_adf4351(55), 
 11317 ;; Auto vars:     Size  Location     Type
 11318 ;;  data            4   31[COMRAM] unsigned long 
 11319 ;; Return value:  Size  Location     Type
 11320 ;;                  1    wreg      void 
 11321 ;; Registers used:
 11322 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11323 ;; Tracked objects:
 11324 ;;		On entry : 0/0
 11325 ;;		On exit  : 0/0
 11326 ;;		Unchanged: 0/0
 11327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11328 ;;      Params:         2       0       0       0       0       0       0
 11329 ;;      Locals:         4       0       0       0       0       0       0
 11330 ;;      Temps:          5       0       0       0       0       0       0
 11331 ;;      Totals:        11       0       0       0       0       0       0
 11332 ;;Total ram usage:       11 bytes
 11333 ;; Hardware stack levels used:    1
 11334 ;; Hardware stack levels required when called:    3
 11335 ;; This function calls:
 11336 ;;		_adf4351_write_latch
 11337 ;; This function is called by:
 11338 ;;		_adf4351_setup
 11339 ;; This function uses a non-reentrant model
 11340 ;;
 11341                           
 11342                           	psect	text50
 11343  00468C                     __ptext50:
 11344                           	opt callstack 0
 11345  00468C                     _adf4351_write_reg5:
 11346                           	opt callstack 23
 11347                           
 11348                           ;src/driver/adf4351.c: 399: static void adf4351_write_reg5(adf4351_ctx* ctx);src/driver/
      +                          adf4351.c: 400: {;src/driver/adf4351.c: 401:     if(ctx->init) {
 11349                           
 11350                           ;incstack = 0
 11351  00468C  C019  FFD9         	movff	adf4351_write_reg5@ctx,fsr2l
 11352  004690  C01A  FFDA         	movff	adf4351_write_reg5@ctx+1,fsr2h
 11353  004694  50DE               	movf	postinc2,w,c
 11354  004696  10DE               	iorwf	postinc2,w,c
 11355  004698  B4D8               	btfsc	status,2,c
 11356  00469A  0012               	return	
 11357                           
 11358                           ;src/driver/adf4351.c: 402:         u32 data = 5;
 11359  00469C  0E05               	movlw	5
 11360  00469E  6E20               	movwf	adf4351_write_reg5@data^0,c
 11361  0046A0  0E00               	movlw	0
 11362  0046A2  6E21               	movwf	(adf4351_write_reg5@data+1)^0,c
 11363  0046A4  0E00               	movlw	0
 11364  0046A6  6E22               	movwf	(adf4351_write_reg5@data+2)^0,c
 11365  0046A8  0E00               	movlw	0
 11366  0046AA  6E23               	movwf	(adf4351_write_reg5@data+3)^0,c
 11367                           
 11368                           ;src/driver/adf4351.c: 404:         data |= (((u32)ctx->reg5.ldpinmod&0x0003)<<22);
 11369  0046AC  EE20 F02A          	lfsr	2,42
 11370  0046B0  5019               	movf	adf4351_write_reg5@ctx^0,w,c
 11371  0046B2  26D9               	addwf	fsr2l,f,c
 11372  0046B4  501A               	movf	(adf4351_write_reg5@ctx+1)^0,w,c
 11373  0046B6  22DA               	addwfc	fsr2h,f,c
 11374  0046B8  50DF               	movf	indf2,w,c
 11375  0046BA  6E1B               	movwf	??_adf4351_write_reg5^0,c
 11376  0046BC  0E03               	movlw	3
 11377  0046BE  161B               	andwf	??_adf4351_write_reg5^0,f,c
 11378  0046C0  C01B  F01C         	movff	??_adf4351_write_reg5,??_adf4351_write_reg5+1
 11379  0046C4  6A1D               	clrf	(??_adf4351_write_reg5+2)^0,c
 11380  0046C6  6A1E               	clrf	(??_adf4351_write_reg5+3)^0,c
 11381  0046C8  6A1F               	clrf	(??_adf4351_write_reg5+4)^0,c
 11382  0046CA  0E16               	movlw	22
 11383  0046CC                     u9175:
 11384  0046CC  90D8               	bcf	status,0,c
 11385  0046CE  361C               	rlcf	(??_adf4351_write_reg5+1)^0,f,c
 11386  0046D0  361D               	rlcf	(??_adf4351_write_reg5+2)^0,f,c
 11387  0046D2  361E               	rlcf	(??_adf4351_write_reg5+3)^0,f,c
 11388  0046D4  361F               	rlcf	(??_adf4351_write_reg5+4)^0,f,c
 11389  0046D6  2EE8               	decfsz	wreg,f,c
 11390  0046D8  D7F9               	goto	u9175
 11391  0046DA  501C               	movf	(??_adf4351_write_reg5+1)^0,w,c
 11392  0046DC  1220               	iorwf	adf4351_write_reg5@data^0,f,c
 11393  0046DE  501D               	movf	(??_adf4351_write_reg5+2)^0,w,c
 11394  0046E0  1221               	iorwf	(adf4351_write_reg5@data+1)^0,f,c
 11395  0046E2  501E               	movf	(??_adf4351_write_reg5+3)^0,w,c
 11396  0046E4  1222               	iorwf	(adf4351_write_reg5@data+2)^0,f,c
 11397  0046E6  501F               	movf	(??_adf4351_write_reg5+4)^0,w,c
 11398  0046E8  1223               	iorwf	(adf4351_write_reg5@data+3)^0,f,c
 11399                           
 11400                           ;src/driver/adf4351.c: 407:         adf4351_write_latch(data);
 11401  0046EA  C020  F00D         	movff	adf4351_write_reg5@data,adf4351_write_latch@value
 11402  0046EE  C021  F00E         	movff	adf4351_write_reg5@data+1,adf4351_write_latch@value+1
 11403  0046F2  C022  F00F         	movff	adf4351_write_reg5@data+2,adf4351_write_latch@value+2
 11404  0046F6  C023  F010         	movff	adf4351_write_reg5@data+3,adf4351_write_latch@value+3
 11405  0046FA  ECB8  F014         	call	_adf4351_write_latch	;wreg free
 11406  0046FE  0012               	return		;funcret
 11407  004700                     __end_of_adf4351_write_reg5:
 11408                           	opt callstack 0
 11409                           
 11410 ;; *************** function _adf4351_write_reg4 *****************
 11411 ;; Defined at:
 11412 ;;		line 377 in file "src/driver/adf4351.c"
 11413 ;; Parameters:    Size  Location     Type
 11414 ;;  ctx             2   24[COMRAM] PTR struct adf4351_ctx
 11415 ;;		 -> g_adf4351(55), 
 11416 ;; Auto vars:     Size  Location     Type
 11417 ;;  data            4   31[COMRAM] unsigned long 
 11418 ;; Return value:  Size  Location     Type
 11419 ;;                  1    wreg      void 
 11420 ;; Registers used:
 11421 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11422 ;; Tracked objects:
 11423 ;;		On entry : 0/0
 11424 ;;		On exit  : 0/0
 11425 ;;		Unchanged: 0/0
 11426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11427 ;;      Params:         2       0       0       0       0       0       0
 11428 ;;      Locals:         4       0       0       0       0       0       0
 11429 ;;      Temps:          5       0       0       0       0       0       0
 11430 ;;      Totals:        11       0       0       0       0       0       0
 11431 ;;Total ram usage:       11 bytes
 11432 ;; Hardware stack levels used:    1
 11433 ;; Hardware stack levels required when called:    3
 11434 ;; This function calls:
 11435 ;;		_adf4351_write_latch
 11436 ;; This function is called by:
 11437 ;;		_adf4351_set_rfout_enable
 11438 ;;		_adf4351_set_mode
 11439 ;;		_adf4351_setup
 11440 ;; This function uses a non-reentrant model
 11441 ;;
 11442                           
 11443                           	psect	text51
 11444  00186C                     __ptext51:
 11445                           	opt callstack 0
 11446  00186C                     _adf4351_write_reg4:
 11447                           	opt callstack 23
 11448                           
 11449                           ;src/driver/adf4351.c: 377: static void adf4351_write_reg4(adf4351_ctx* ctx);src/driver/
      +                          adf4351.c: 378: {;src/driver/adf4351.c: 379:     if(ctx->init) {
 11450                           
 11451                           ;incstack = 0
 11452  00186C  C019  FFD9         	movff	adf4351_write_reg4@ctx,fsr2l
 11453  001870  C01A  FFDA         	movff	adf4351_write_reg4@ctx+1,fsr2h
 11454  001874  50DE               	movf	postinc2,w,c
 11455  001876  10DE               	iorwf	postinc2,w,c
 11456  001878  B4D8               	btfsc	status,2,c
 11457  00187A  0012               	return	
 11458                           
 11459                           ;src/driver/adf4351.c: 380:         u32 data = 4;
 11460  00187C  0E04               	movlw	4
 11461  00187E  6E20               	movwf	adf4351_write_reg4@data^0,c
 11462  001880  0E00               	movlw	0
 11463  001882  6E21               	movwf	(adf4351_write_reg4@data+1)^0,c
 11464  001884  0E00               	movlw	0
 11465  001886  6E22               	movwf	(adf4351_write_reg4@data+2)^0,c
 11466  001888  0E00               	movlw	0
 11467  00188A  6E23               	movwf	(adf4351_write_reg4@data+3)^0,c
 11468                           
 11469                           ;src/driver/adf4351.c: 382:         data |= (((u32)ctx->reg4.rfoutpwr&0x0003)<<3);
 11470  00188C  EE20 F029          	lfsr	2,41
 11471  001890  5019               	movf	adf4351_write_reg4@ctx^0,w,c
 11472  001892  26D9               	addwf	fsr2l,f,c
 11473  001894  501A               	movf	(adf4351_write_reg4@ctx+1)^0,w,c
 11474  001896  22DA               	addwfc	fsr2h,f,c
 11475  001898  50DF               	movf	indf2,w,c
 11476  00189A  6E1B               	movwf	??_adf4351_write_reg4^0,c
 11477  00189C  0E03               	movlw	3
 11478  00189E  161B               	andwf	??_adf4351_write_reg4^0,f,c
 11479  0018A0  C01B  F01C         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
 11480  0018A4  6A1D               	clrf	(??_adf4351_write_reg4+2)^0,c
 11481  0018A6  6A1E               	clrf	(??_adf4351_write_reg4+3)^0,c
 11482  0018A8  6A1F               	clrf	(??_adf4351_write_reg4+4)^0,c
 11483  0018AA  0E03               	movlw	3
 11484  0018AC                     u8955:
 11485  0018AC  90D8               	bcf	status,0,c
 11486  0018AE  361C               	rlcf	(??_adf4351_write_reg4+1)^0,f,c
 11487  0018B0  361D               	rlcf	(??_adf4351_write_reg4+2)^0,f,c
 11488  0018B2  361E               	rlcf	(??_adf4351_write_reg4+3)^0,f,c
 11489  0018B4  361F               	rlcf	(??_adf4351_write_reg4+4)^0,f,c
 11490  0018B6  2EE8               	decfsz	wreg,f,c
 11491  0018B8  D7F9               	goto	u8955
 11492  0018BA  501C               	movf	(??_adf4351_write_reg4+1)^0,w,c
 11493  0018BC  1220               	iorwf	adf4351_write_reg4@data^0,f,c
 11494  0018BE  501D               	movf	(??_adf4351_write_reg4+2)^0,w,c
 11495  0018C0  1221               	iorwf	(adf4351_write_reg4@data+1)^0,f,c
 11496  0018C2  501E               	movf	(??_adf4351_write_reg4+3)^0,w,c
 11497  0018C4  1222               	iorwf	(adf4351_write_reg4@data+2)^0,f,c
 11498  0018C6  501F               	movf	(??_adf4351_write_reg4+4)^0,w,c
 11499  0018C8  1223               	iorwf	(adf4351_write_reg4@data+3)^0,f,c
 11500                           
 11501                           ;src/driver/adf4351.c: 383:         data |= (((u32)ctx->reg4.rfoutena&0x0001)<<5);
 11502  0018CA  EE20 F028          	lfsr	2,40
 11503  0018CE  5019               	movf	adf4351_write_reg4@ctx^0,w,c
 11504  0018D0  26D9               	addwf	fsr2l,f,c
 11505  0018D2  501A               	movf	(adf4351_write_reg4@ctx+1)^0,w,c
 11506  0018D4  22DA               	addwfc	fsr2h,f,c
 11507  0018D6  50DF               	movf	indf2,w,c
 11508  0018D8  6E1B               	movwf	??_adf4351_write_reg4^0,c
 11509  0018DA  0E01               	movlw	1
 11510  0018DC  161B               	andwf	??_adf4351_write_reg4^0,f,c
 11511  0018DE  C01B  F01C         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
 11512  0018E2  6A1D               	clrf	(??_adf4351_write_reg4+2)^0,c
 11513  0018E4  6A1E               	clrf	(??_adf4351_write_reg4+3)^0,c
 11514  0018E6  6A1F               	clrf	(??_adf4351_write_reg4+4)^0,c
 11515  0018E8  0E05               	movlw	5
 11516  0018EA                     u8965:
 11517  0018EA  90D8               	bcf	status,0,c
 11518  0018EC  361C               	rlcf	(??_adf4351_write_reg4+1)^0,f,c
 11519  0018EE  361D               	rlcf	(??_adf4351_write_reg4+2)^0,f,c
 11520  0018F0  361E               	rlcf	(??_adf4351_write_reg4+3)^0,f,c
 11521  0018F2  361F               	rlcf	(??_adf4351_write_reg4+4)^0,f,c
 11522  0018F4  2EE8               	decfsz	wreg,f,c
 11523  0018F6  D7F9               	goto	u8965
 11524  0018F8  501C               	movf	(??_adf4351_write_reg4+1)^0,w,c
 11525  0018FA  1220               	iorwf	adf4351_write_reg4@data^0,f,c
 11526  0018FC  501D               	movf	(??_adf4351_write_reg4+2)^0,w,c
 11527  0018FE  1221               	iorwf	(adf4351_write_reg4@data+1)^0,f,c
 11528  001900  501E               	movf	(??_adf4351_write_reg4+3)^0,w,c
 11529  001902  1222               	iorwf	(adf4351_write_reg4@data+2)^0,f,c
 11530  001904  501F               	movf	(??_adf4351_write_reg4+4)^0,w,c
 11531  001906  1223               	iorwf	(adf4351_write_reg4@data+3)^0,f,c
 11532                           
 11533                           ;src/driver/adf4351.c: 384:         data |= (((u32)ctx->reg4.auxpwrout&0x0003)<<6);
 11534  001908  EE20 F027          	lfsr	2,39
 11535  00190C  5019               	movf	adf4351_write_reg4@ctx^0,w,c
 11536  00190E  26D9               	addwf	fsr2l,f,c
 11537  001910  501A               	movf	(adf4351_write_reg4@ctx+1)^0,w,c
 11538  001912  22DA               	addwfc	fsr2h,f,c
 11539  001914  50DF               	movf	indf2,w,c
 11540  001916  6E1B               	movwf	??_adf4351_write_reg4^0,c
 11541  001918  0E03               	movlw	3
 11542  00191A  161B               	andwf	??_adf4351_write_reg4^0,f,c
 11543  00191C  C01B  F01C         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
 11544  001920  6A1D               	clrf	(??_adf4351_write_reg4+2)^0,c
 11545  001922  6A1E               	clrf	(??_adf4351_write_reg4+3)^0,c
 11546  001924  6A1F               	clrf	(??_adf4351_write_reg4+4)^0,c
 11547  001926  0E06               	movlw	6
 11548  001928                     u8975:
 11549  001928  90D8               	bcf	status,0,c
 11550  00192A  361C               	rlcf	(??_adf4351_write_reg4+1)^0,f,c
 11551  00192C  361D               	rlcf	(??_adf4351_write_reg4+2)^0,f,c
 11552  00192E  361E               	rlcf	(??_adf4351_write_reg4+3)^0,f,c
 11553  001930  361F               	rlcf	(??_adf4351_write_reg4+4)^0,f,c
 11554  001932  2EE8               	decfsz	wreg,f,c
 11555  001934  D7F9               	goto	u8975
 11556  001936  501C               	movf	(??_adf4351_write_reg4+1)^0,w,c
 11557  001938  1220               	iorwf	adf4351_write_reg4@data^0,f,c
 11558  00193A  501D               	movf	(??_adf4351_write_reg4+2)^0,w,c
 11559  00193C  1221               	iorwf	(adf4351_write_reg4@data+1)^0,f,c
 11560  00193E  501E               	movf	(??_adf4351_write_reg4+3)^0,w,c
 11561  001940  1222               	iorwf	(adf4351_write_reg4@data+2)^0,f,c
 11562  001942  501F               	movf	(??_adf4351_write_reg4+4)^0,w,c
 11563  001944  1223               	iorwf	(adf4351_write_reg4@data+3)^0,f,c
 11564                           
 11565                           ;src/driver/adf4351.c: 385:         data |= (((u32)ctx->reg4.auxoutena&0x0001)<<8);
 11566  001946  EE20 F026          	lfsr	2,38
 11567  00194A  5019               	movf	adf4351_write_reg4@ctx^0,w,c
 11568  00194C  26D9               	addwf	fsr2l,f,c
 11569  00194E  501A               	movf	(adf4351_write_reg4@ctx+1)^0,w,c
 11570  001950  22DA               	addwfc	fsr2h,f,c
 11571  001952  50DF               	movf	indf2,w,c
 11572  001954  6E1B               	movwf	??_adf4351_write_reg4^0,c
 11573  001956  0E01               	movlw	1
 11574  001958  161B               	andwf	??_adf4351_write_reg4^0,f,c
 11575  00195A  C01B  F01C         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
 11576  00195E  6A1D               	clrf	(??_adf4351_write_reg4+2)^0,c
 11577  001960  6A1E               	clrf	(??_adf4351_write_reg4+3)^0,c
 11578  001962  6A1F               	clrf	(??_adf4351_write_reg4+4)^0,c
 11579  001964  C01E  F01F         	movff	??_adf4351_write_reg4+3,??_adf4351_write_reg4+4
 11580  001968  C01D  F01E         	movff	??_adf4351_write_reg4+2,??_adf4351_write_reg4+3
 11581  00196C  C01C  F01D         	movff	??_adf4351_write_reg4+1,??_adf4351_write_reg4+2
 11582  001970  6A1C               	clrf	(??_adf4351_write_reg4+1)^0,c
 11583  001972  501C               	movf	(??_adf4351_write_reg4+1)^0,w,c
 11584  001974  1220               	iorwf	adf4351_write_reg4@data^0,f,c
 11585  001976  501D               	movf	(??_adf4351_write_reg4+2)^0,w,c
 11586  001978  1221               	iorwf	(adf4351_write_reg4@data+1)^0,f,c
 11587  00197A  501E               	movf	(??_adf4351_write_reg4+3)^0,w,c
 11588  00197C  1222               	iorwf	(adf4351_write_reg4@data+2)^0,f,c
 11589  00197E  501F               	movf	(??_adf4351_write_reg4+4)^0,w,c
 11590  001980  1223               	iorwf	(adf4351_write_reg4@data+3)^0,f,c
 11591                           
 11592                           ;src/driver/adf4351.c: 386:         data |= (((u32)ctx->reg4.auxoutsel&0x0001)<<9);
 11593  001982  EE20 F025          	lfsr	2,37
 11594  001986  5019               	movf	adf4351_write_reg4@ctx^0,w,c
 11595  001988  26D9               	addwf	fsr2l,f,c
 11596  00198A  501A               	movf	(adf4351_write_reg4@ctx+1)^0,w,c
 11597  00198C  22DA               	addwfc	fsr2h,f,c
 11598  00198E  50DF               	movf	indf2,w,c
 11599  001990  6E1B               	movwf	??_adf4351_write_reg4^0,c
 11600  001992  0E01               	movlw	1
 11601  001994  161B               	andwf	??_adf4351_write_reg4^0,f,c
 11602  001996  C01B  F01C         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
 11603  00199A  6A1D               	clrf	(??_adf4351_write_reg4+2)^0,c
 11604  00199C  6A1E               	clrf	(??_adf4351_write_reg4+3)^0,c
 11605  00199E  6A1F               	clrf	(??_adf4351_write_reg4+4)^0,c
 11606  0019A0  0E09               	movlw	9
 11607  0019A2                     u8985:
 11608  0019A2  90D8               	bcf	status,0,c
 11609  0019A4  361C               	rlcf	(??_adf4351_write_reg4+1)^0,f,c
 11610  0019A6  361D               	rlcf	(??_adf4351_write_reg4+2)^0,f,c
 11611  0019A8  361E               	rlcf	(??_adf4351_write_reg4+3)^0,f,c
 11612  0019AA  361F               	rlcf	(??_adf4351_write_reg4+4)^0,f,c
 11613  0019AC  2EE8               	decfsz	wreg,f,c
 11614  0019AE  D7F9               	goto	u8985
 11615  0019B0  501C               	movf	(??_adf4351_write_reg4+1)^0,w,c
 11616  0019B2  1220               	iorwf	adf4351_write_reg4@data^0,f,c
 11617  0019B4  501D               	movf	(??_adf4351_write_reg4+2)^0,w,c
 11618  0019B6  1221               	iorwf	(adf4351_write_reg4@data+1)^0,f,c
 11619  0019B8  501E               	movf	(??_adf4351_write_reg4+3)^0,w,c
 11620  0019BA  1222               	iorwf	(adf4351_write_reg4@data+2)^0,f,c
 11621  0019BC  501F               	movf	(??_adf4351_write_reg4+4)^0,w,c
 11622  0019BE  1223               	iorwf	(adf4351_write_reg4@data+3)^0,f,c
 11623                           
 11624                           ;src/driver/adf4351.c: 387:         data |= (((u32)ctx->reg4.mtld&0x0001)<<10);
 11625  0019C0  EE20 F024          	lfsr	2,36
 11626  0019C4  5019               	movf	adf4351_write_reg4@ctx^0,w,c
 11627  0019C6  26D9               	addwf	fsr2l,f,c
 11628  0019C8  501A               	movf	(adf4351_write_reg4@ctx+1)^0,w,c
 11629  0019CA  22DA               	addwfc	fsr2h,f,c
 11630  0019CC  50DF               	movf	indf2,w,c
 11631  0019CE  6E1B               	movwf	??_adf4351_write_reg4^0,c
 11632  0019D0  0E01               	movlw	1
 11633  0019D2  161B               	andwf	??_adf4351_write_reg4^0,f,c
 11634  0019D4  C01B  F01C         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
 11635  0019D8  6A1D               	clrf	(??_adf4351_write_reg4+2)^0,c
 11636  0019DA  6A1E               	clrf	(??_adf4351_write_reg4+3)^0,c
 11637  0019DC  6A1F               	clrf	(??_adf4351_write_reg4+4)^0,c
 11638  0019DE  0E0A               	movlw	10
 11639  0019E0                     u8995:
 11640  0019E0  90D8               	bcf	status,0,c
 11641  0019E2  361C               	rlcf	(??_adf4351_write_reg4+1)^0,f,c
 11642  0019E4  361D               	rlcf	(??_adf4351_write_reg4+2)^0,f,c
 11643  0019E6  361E               	rlcf	(??_adf4351_write_reg4+3)^0,f,c
 11644  0019E8  361F               	rlcf	(??_adf4351_write_reg4+4)^0,f,c
 11645  0019EA  2EE8               	decfsz	wreg,f,c
 11646  0019EC  D7F9               	goto	u8995
 11647  0019EE  501C               	movf	(??_adf4351_write_reg4+1)^0,w,c
 11648  0019F0  1220               	iorwf	adf4351_write_reg4@data^0,f,c
 11649  0019F2  501D               	movf	(??_adf4351_write_reg4+2)^0,w,c
 11650  0019F4  1221               	iorwf	(adf4351_write_reg4@data+1)^0,f,c
 11651  0019F6  501E               	movf	(??_adf4351_write_reg4+3)^0,w,c
 11652  0019F8  1222               	iorwf	(adf4351_write_reg4@data+2)^0,f,c
 11653  0019FA  501F               	movf	(??_adf4351_write_reg4+4)^0,w,c
 11654  0019FC  1223               	iorwf	(adf4351_write_reg4@data+3)^0,f,c
 11655                           
 11656                           ;src/driver/adf4351.c: 388:         data |= (((u32)ctx->reg4.vcopd&0x0001)<<11);
 11657  0019FE  EE20 F023          	lfsr	2,35
 11658  001A02  5019               	movf	adf4351_write_reg4@ctx^0,w,c
 11659  001A04  26D9               	addwf	fsr2l,f,c
 11660  001A06  501A               	movf	(adf4351_write_reg4@ctx+1)^0,w,c
 11661  001A08  22DA               	addwfc	fsr2h,f,c
 11662  001A0A  50DF               	movf	indf2,w,c
 11663  001A0C  6E1B               	movwf	??_adf4351_write_reg4^0,c
 11664  001A0E  0E01               	movlw	1
 11665  001A10  161B               	andwf	??_adf4351_write_reg4^0,f,c
 11666  001A12  C01B  F01C         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
 11667  001A16  6A1D               	clrf	(??_adf4351_write_reg4+2)^0,c
 11668  001A18  6A1E               	clrf	(??_adf4351_write_reg4+3)^0,c
 11669  001A1A  6A1F               	clrf	(??_adf4351_write_reg4+4)^0,c
 11670  001A1C  0E0B               	movlw	11
 11671  001A1E                     u9005:
 11672  001A1E  90D8               	bcf	status,0,c
 11673  001A20  361C               	rlcf	(??_adf4351_write_reg4+1)^0,f,c
 11674  001A22  361D               	rlcf	(??_adf4351_write_reg4+2)^0,f,c
 11675  001A24  361E               	rlcf	(??_adf4351_write_reg4+3)^0,f,c
 11676  001A26  361F               	rlcf	(??_adf4351_write_reg4+4)^0,f,c
 11677  001A28  2EE8               	decfsz	wreg,f,c
 11678  001A2A  D7F9               	goto	u9005
 11679  001A2C  501C               	movf	(??_adf4351_write_reg4+1)^0,w,c
 11680  001A2E  1220               	iorwf	adf4351_write_reg4@data^0,f,c
 11681  001A30  501D               	movf	(??_adf4351_write_reg4+2)^0,w,c
 11682  001A32  1221               	iorwf	(adf4351_write_reg4@data+1)^0,f,c
 11683  001A34  501E               	movf	(??_adf4351_write_reg4+3)^0,w,c
 11684  001A36  1222               	iorwf	(adf4351_write_reg4@data+2)^0,f,c
 11685  001A38  501F               	movf	(??_adf4351_write_reg4+4)^0,w,c
 11686  001A3A  1223               	iorwf	(adf4351_write_reg4@data+3)^0,f,c
 11687                           
 11688                           ;src/driver/adf4351.c: 389:         data |= (((u32)ctx->reg4.bsclkdiv&0x00FF)<<12);
 11689  001A3C  EE20 F022          	lfsr	2,34
 11690  001A40  5019               	movf	adf4351_write_reg4@ctx^0,w,c
 11691  001A42  26D9               	addwf	fsr2l,f,c
 11692  001A44  501A               	movf	(adf4351_write_reg4@ctx+1)^0,w,c
 11693  001A46  22DA               	addwfc	fsr2h,f,c
 11694  001A48  50DF               	movf	indf2,w,c
 11695  001A4A  6E1B               	movwf	??_adf4351_write_reg4^0,c
 11696  001A4C  C01B  F01C         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
 11697  001A50  6A1D               	clrf	(??_adf4351_write_reg4+2)^0,c
 11698  001A52  6A1E               	clrf	(??_adf4351_write_reg4+3)^0,c
 11699  001A54  6A1F               	clrf	(??_adf4351_write_reg4+4)^0,c
 11700  001A56  0E0C               	movlw	12
 11701  001A58                     u9015:
 11702  001A58  90D8               	bcf	status,0,c
 11703  001A5A  361C               	rlcf	(??_adf4351_write_reg4+1)^0,f,c
 11704  001A5C  361D               	rlcf	(??_adf4351_write_reg4+2)^0,f,c
 11705  001A5E  361E               	rlcf	(??_adf4351_write_reg4+3)^0,f,c
 11706  001A60  361F               	rlcf	(??_adf4351_write_reg4+4)^0,f,c
 11707  001A62  2EE8               	decfsz	wreg,f,c
 11708  001A64  D7F9               	goto	u9015
 11709  001A66  501C               	movf	(??_adf4351_write_reg4+1)^0,w,c
 11710  001A68  1220               	iorwf	adf4351_write_reg4@data^0,f,c
 11711  001A6A  501D               	movf	(??_adf4351_write_reg4+2)^0,w,c
 11712  001A6C  1221               	iorwf	(adf4351_write_reg4@data+1)^0,f,c
 11713  001A6E  501E               	movf	(??_adf4351_write_reg4+3)^0,w,c
 11714  001A70  1222               	iorwf	(adf4351_write_reg4@data+2)^0,f,c
 11715  001A72  501F               	movf	(??_adf4351_write_reg4+4)^0,w,c
 11716  001A74  1223               	iorwf	(adf4351_write_reg4@data+3)^0,f,c
 11717                           
 11718                           ;src/driver/adf4351.c: 390:         data |= (((u32)ctx->reg4.divsel&0x0007)<<20);
 11719  001A76  EE20 F021          	lfsr	2,33
 11720  001A7A  5019               	movf	adf4351_write_reg4@ctx^0,w,c
 11721  001A7C  26D9               	addwf	fsr2l,f,c
 11722  001A7E  501A               	movf	(adf4351_write_reg4@ctx+1)^0,w,c
 11723  001A80  22DA               	addwfc	fsr2h,f,c
 11724  001A82  50DF               	movf	indf2,w,c
 11725  001A84  6E1B               	movwf	??_adf4351_write_reg4^0,c
 11726  001A86  0E07               	movlw	7
 11727  001A88  161B               	andwf	??_adf4351_write_reg4^0,f,c
 11728  001A8A  C01B  F01C         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
 11729  001A8E  6A1D               	clrf	(??_adf4351_write_reg4+2)^0,c
 11730  001A90  6A1E               	clrf	(??_adf4351_write_reg4+3)^0,c
 11731  001A92  6A1F               	clrf	(??_adf4351_write_reg4+4)^0,c
 11732  001A94  0E14               	movlw	20
 11733  001A96                     u9025:
 11734  001A96  90D8               	bcf	status,0,c
 11735  001A98  361C               	rlcf	(??_adf4351_write_reg4+1)^0,f,c
 11736  001A9A  361D               	rlcf	(??_adf4351_write_reg4+2)^0,f,c
 11737  001A9C  361E               	rlcf	(??_adf4351_write_reg4+3)^0,f,c
 11738  001A9E  361F               	rlcf	(??_adf4351_write_reg4+4)^0,f,c
 11739  001AA0  2EE8               	decfsz	wreg,f,c
 11740  001AA2  D7F9               	goto	u9025
 11741  001AA4  501C               	movf	(??_adf4351_write_reg4+1)^0,w,c
 11742  001AA6  1220               	iorwf	adf4351_write_reg4@data^0,f,c
 11743  001AA8  501D               	movf	(??_adf4351_write_reg4+2)^0,w,c
 11744  001AAA  1221               	iorwf	(adf4351_write_reg4@data+1)^0,f,c
 11745  001AAC  501E               	movf	(??_adf4351_write_reg4+3)^0,w,c
 11746  001AAE  1222               	iorwf	(adf4351_write_reg4@data+2)^0,f,c
 11747  001AB0  501F               	movf	(??_adf4351_write_reg4+4)^0,w,c
 11748  001AB2  1223               	iorwf	(adf4351_write_reg4@data+3)^0,f,c
 11749                           
 11750                           ;src/driver/adf4351.c: 391:         data |= (((u32)ctx->reg4.fbsel&0x0001)<<23);
 11751  001AB4  EE20 F020          	lfsr	2,32
 11752  001AB8  5019               	movf	adf4351_write_reg4@ctx^0,w,c
 11753  001ABA  26D9               	addwf	fsr2l,f,c
 11754  001ABC  501A               	movf	(adf4351_write_reg4@ctx+1)^0,w,c
 11755  001ABE  22DA               	addwfc	fsr2h,f,c
 11756  001AC0  50DF               	movf	indf2,w,c
 11757  001AC2  6E1B               	movwf	??_adf4351_write_reg4^0,c
 11758  001AC4  0E01               	movlw	1
 11759  001AC6  161B               	andwf	??_adf4351_write_reg4^0,f,c
 11760  001AC8  C01B  F01C         	movff	??_adf4351_write_reg4,??_adf4351_write_reg4+1
 11761  001ACC  6A1D               	clrf	(??_adf4351_write_reg4+2)^0,c
 11762  001ACE  6A1E               	clrf	(??_adf4351_write_reg4+3)^0,c
 11763  001AD0  6A1F               	clrf	(??_adf4351_write_reg4+4)^0,c
 11764  001AD2  0E17               	movlw	23
 11765  001AD4                     u9035:
 11766  001AD4  90D8               	bcf	status,0,c
 11767  001AD6  361C               	rlcf	(??_adf4351_write_reg4+1)^0,f,c
 11768  001AD8  361D               	rlcf	(??_adf4351_write_reg4+2)^0,f,c
 11769  001ADA  361E               	rlcf	(??_adf4351_write_reg4+3)^0,f,c
 11770  001ADC  361F               	rlcf	(??_adf4351_write_reg4+4)^0,f,c
 11771  001ADE  2EE8               	decfsz	wreg,f,c
 11772  001AE0  D7F9               	goto	u9035
 11773  001AE2  501C               	movf	(??_adf4351_write_reg4+1)^0,w,c
 11774  001AE4  1220               	iorwf	adf4351_write_reg4@data^0,f,c
 11775  001AE6  501D               	movf	(??_adf4351_write_reg4+2)^0,w,c
 11776  001AE8  1221               	iorwf	(adf4351_write_reg4@data+1)^0,f,c
 11777  001AEA  501E               	movf	(??_adf4351_write_reg4+3)^0,w,c
 11778  001AEC  1222               	iorwf	(adf4351_write_reg4@data+2)^0,f,c
 11779  001AEE  501F               	movf	(??_adf4351_write_reg4+4)^0,w,c
 11780  001AF0  1223               	iorwf	(adf4351_write_reg4@data+3)^0,f,c
 11781                           
 11782                           ;src/driver/adf4351.c: 395:         adf4351_write_latch(data);
 11783  001AF2  C020  F00D         	movff	adf4351_write_reg4@data,adf4351_write_latch@value
 11784  001AF6  C021  F00E         	movff	adf4351_write_reg4@data+1,adf4351_write_latch@value+1
 11785  001AFA  C022  F00F         	movff	adf4351_write_reg4@data+2,adf4351_write_latch@value+2
 11786  001AFE  C023  F010         	movff	adf4351_write_reg4@data+3,adf4351_write_latch@value+3
 11787  001B02  ECB8  F014         	call	_adf4351_write_latch	;wreg free
 11788  001B06  0012               	return		;funcret
 11789  001B08                     __end_of_adf4351_write_reg4:
 11790                           	opt callstack 0
 11791                           
 11792 ;; *************** function _adf4351_write_reg3 *****************
 11793 ;; Defined at:
 11794 ;;		line 359 in file "src/driver/adf4351.c"
 11795 ;; Parameters:    Size  Location     Type
 11796 ;;  ctx             2   24[COMRAM] PTR struct adf4351_ctx
 11797 ;;		 -> g_adf4351(55), 
 11798 ;; Auto vars:     Size  Location     Type
 11799 ;;  data            4   32[COMRAM] unsigned long 
 11800 ;; Return value:  Size  Location     Type
 11801 ;;                  1    wreg      void 
 11802 ;; Registers used:
 11803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11804 ;; Tracked objects:
 11805 ;;		On entry : 0/0
 11806 ;;		On exit  : 0/0
 11807 ;;		Unchanged: 0/0
 11808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11809 ;;      Params:         2       0       0       0       0       0       0
 11810 ;;      Locals:         4       0       0       0       0       0       0
 11811 ;;      Temps:          6       0       0       0       0       0       0
 11812 ;;      Totals:        12       0       0       0       0       0       0
 11813 ;;Total ram usage:       12 bytes
 11814 ;; Hardware stack levels used:    1
 11815 ;; Hardware stack levels required when called:    3
 11816 ;; This function calls:
 11817 ;;		_adf4351_write_latch
 11818 ;; This function is called by:
 11819 ;;		_adf4351_setup
 11820 ;; This function uses a non-reentrant model
 11821 ;;
 11822                           
 11823                           	psect	text52
 11824  0027C0                     __ptext52:
 11825                           	opt callstack 0
 11826  0027C0                     _adf4351_write_reg3:
 11827                           	opt callstack 23
 11828                           
 11829                           ;src/driver/adf4351.c: 359: static void adf4351_write_reg3(adf4351_ctx* ctx);src/driver/
      +                          adf4351.c: 360: {;src/driver/adf4351.c: 361:     if(ctx->init) {
 11830                           
 11831                           ;incstack = 0
 11832  0027C0  C019  FFD9         	movff	adf4351_write_reg3@ctx,fsr2l
 11833  0027C4  C01A  FFDA         	movff	adf4351_write_reg3@ctx+1,fsr2h
 11834  0027C8  50DE               	movf	postinc2,w,c
 11835  0027CA  10DE               	iorwf	postinc2,w,c
 11836  0027CC  B4D8               	btfsc	status,2,c
 11837  0027CE  0012               	return	
 11838                           
 11839                           ;src/driver/adf4351.c: 362:         u32 data = 3;
 11840  0027D0  0E03               	movlw	3
 11841  0027D2  6E21               	movwf	adf4351_write_reg3@data^0,c
 11842  0027D4  0E00               	movlw	0
 11843  0027D6  6E22               	movwf	(adf4351_write_reg3@data+1)^0,c
 11844  0027D8  0E00               	movlw	0
 11845  0027DA  6E23               	movwf	(adf4351_write_reg3@data+2)^0,c
 11846  0027DC  0E00               	movlw	0
 11847  0027DE  6E24               	movwf	(adf4351_write_reg3@data+3)^0,c
 11848                           
 11849                           ;src/driver/adf4351.c: 364:         data |= (((u32)ctx->reg3.clkdiv&0x0FFF)<<3);
 11850  0027E0  EE20 F01E          	lfsr	2,30
 11851  0027E4  5019               	movf	adf4351_write_reg3@ctx^0,w,c
 11852  0027E6  26D9               	addwf	fsr2l,f,c
 11853  0027E8  501A               	movf	(adf4351_write_reg3@ctx+1)^0,w,c
 11854  0027EA  22DA               	addwfc	fsr2h,f,c
 11855  0027EC  CFDE F01B          	movff	postinc2,??_adf4351_write_reg3
 11856  0027F0  CFDD F01C          	movff	postdec2,??_adf4351_write_reg3+1
 11857  0027F4  0EFF               	movlw	255
 11858  0027F6  141B               	andwf	??_adf4351_write_reg3^0,w,c
 11859  0027F8  6E1D               	movwf	(??_adf4351_write_reg3+2)^0,c
 11860  0027FA  0E0F               	movlw	15
 11861  0027FC  141C               	andwf	(??_adf4351_write_reg3+1)^0,w,c
 11862  0027FE  6E1E               	movwf	(??_adf4351_write_reg3+3)^0,c
 11863  002800  6A1F               	clrf	(??_adf4351_write_reg3+4)^0,c
 11864  002802  6A20               	clrf	(??_adf4351_write_reg3+5)^0,c
 11865  002804  0E03               	movlw	3
 11866  002806                     u9195:
 11867  002806  90D8               	bcf	status,0,c
 11868  002808  361D               	rlcf	(??_adf4351_write_reg3+2)^0,f,c
 11869  00280A  361E               	rlcf	(??_adf4351_write_reg3+3)^0,f,c
 11870  00280C  361F               	rlcf	(??_adf4351_write_reg3+4)^0,f,c
 11871  00280E  3620               	rlcf	(??_adf4351_write_reg3+5)^0,f,c
 11872  002810  2EE8               	decfsz	wreg,f,c
 11873  002812  D7F9               	goto	u9195
 11874  002814  501D               	movf	(??_adf4351_write_reg3+2)^0,w,c
 11875  002816  1221               	iorwf	adf4351_write_reg3@data^0,f,c
 11876  002818  501E               	movf	(??_adf4351_write_reg3+3)^0,w,c
 11877  00281A  1222               	iorwf	(adf4351_write_reg3@data+1)^0,f,c
 11878  00281C  501F               	movf	(??_adf4351_write_reg3+4)^0,w,c
 11879  00281E  1223               	iorwf	(adf4351_write_reg3@data+2)^0,f,c
 11880  002820  5020               	movf	(??_adf4351_write_reg3+5)^0,w,c
 11881  002822  1224               	iorwf	(adf4351_write_reg3@data+3)^0,f,c
 11882                           
 11883                           ;src/driver/adf4351.c: 365:         data |= (((u32)ctx->reg3.clkdivmode&0x0003)<<15);
 11884  002824  EE20 F01D          	lfsr	2,29
 11885  002828  5019               	movf	adf4351_write_reg3@ctx^0,w,c
 11886  00282A  26D9               	addwf	fsr2l,f,c
 11887  00282C  501A               	movf	(adf4351_write_reg3@ctx+1)^0,w,c
 11888  00282E  22DA               	addwfc	fsr2h,f,c
 11889  002830  50DF               	movf	indf2,w,c
 11890  002832  6E1B               	movwf	??_adf4351_write_reg3^0,c
 11891  002834  0E03               	movlw	3
 11892  002836  161B               	andwf	??_adf4351_write_reg3^0,f,c
 11893  002838  C01B  F01C         	movff	??_adf4351_write_reg3,??_adf4351_write_reg3+1
 11894  00283C  6A1D               	clrf	(??_adf4351_write_reg3+2)^0,c
 11895  00283E  6A1E               	clrf	(??_adf4351_write_reg3+3)^0,c
 11896  002840  6A1F               	clrf	(??_adf4351_write_reg3+4)^0,c
 11897  002842  0E0F               	movlw	15
 11898  002844                     u9205:
 11899  002844  90D8               	bcf	status,0,c
 11900  002846  361C               	rlcf	(??_adf4351_write_reg3+1)^0,f,c
 11901  002848  361D               	rlcf	(??_adf4351_write_reg3+2)^0,f,c
 11902  00284A  361E               	rlcf	(??_adf4351_write_reg3+3)^0,f,c
 11903  00284C  361F               	rlcf	(??_adf4351_write_reg3+4)^0,f,c
 11904  00284E  2EE8               	decfsz	wreg,f,c
 11905  002850  D7F9               	goto	u9205
 11906  002852  501C               	movf	(??_adf4351_write_reg3+1)^0,w,c
 11907  002854  1221               	iorwf	adf4351_write_reg3@data^0,f,c
 11908  002856  501D               	movf	(??_adf4351_write_reg3+2)^0,w,c
 11909  002858  1222               	iorwf	(adf4351_write_reg3@data+1)^0,f,c
 11910  00285A  501E               	movf	(??_adf4351_write_reg3+3)^0,w,c
 11911  00285C  1223               	iorwf	(adf4351_write_reg3@data+2)^0,f,c
 11912  00285E  501F               	movf	(??_adf4351_write_reg3+4)^0,w,c
 11913  002860  1224               	iorwf	(adf4351_write_reg3@data+3)^0,f,c
 11914                           
 11915                           ;src/driver/adf4351.c: 366:         data |= (((u32)ctx->reg3.csr&0x0001)<<18);
 11916  002862  EE20 F01C          	lfsr	2,28
 11917  002866  5019               	movf	adf4351_write_reg3@ctx^0,w,c
 11918  002868  26D9               	addwf	fsr2l,f,c
 11919  00286A  501A               	movf	(adf4351_write_reg3@ctx+1)^0,w,c
 11920  00286C  22DA               	addwfc	fsr2h,f,c
 11921  00286E  50DF               	movf	indf2,w,c
 11922  002870  6E1B               	movwf	??_adf4351_write_reg3^0,c
 11923  002872  0E01               	movlw	1
 11924  002874  161B               	andwf	??_adf4351_write_reg3^0,f,c
 11925  002876  C01B  F01C         	movff	??_adf4351_write_reg3,??_adf4351_write_reg3+1
 11926  00287A  6A1D               	clrf	(??_adf4351_write_reg3+2)^0,c
 11927  00287C  6A1E               	clrf	(??_adf4351_write_reg3+3)^0,c
 11928  00287E  6A1F               	clrf	(??_adf4351_write_reg3+4)^0,c
 11929  002880  0E12               	movlw	18
 11930  002882                     u9215:
 11931  002882  90D8               	bcf	status,0,c
 11932  002884  361C               	rlcf	(??_adf4351_write_reg3+1)^0,f,c
 11933  002886  361D               	rlcf	(??_adf4351_write_reg3+2)^0,f,c
 11934  002888  361E               	rlcf	(??_adf4351_write_reg3+3)^0,f,c
 11935  00288A  361F               	rlcf	(??_adf4351_write_reg3+4)^0,f,c
 11936  00288C  2EE8               	decfsz	wreg,f,c
 11937  00288E  D7F9               	goto	u9215
 11938  002890  501C               	movf	(??_adf4351_write_reg3+1)^0,w,c
 11939  002892  1221               	iorwf	adf4351_write_reg3@data^0,f,c
 11940  002894  501D               	movf	(??_adf4351_write_reg3+2)^0,w,c
 11941  002896  1222               	iorwf	(adf4351_write_reg3@data+1)^0,f,c
 11942  002898  501E               	movf	(??_adf4351_write_reg3+3)^0,w,c
 11943  00289A  1223               	iorwf	(adf4351_write_reg3@data+2)^0,f,c
 11944  00289C  501F               	movf	(??_adf4351_write_reg3+4)^0,w,c
 11945  00289E  1224               	iorwf	(adf4351_write_reg3@data+3)^0,f,c
 11946                           
 11947                           ;src/driver/adf4351.c: 367:         data |= (((u32)ctx->reg3.chcancel&0x0001)<<21);
 11948  0028A0  EE20 F01B          	lfsr	2,27
 11949  0028A4  5019               	movf	adf4351_write_reg3@ctx^0,w,c
 11950  0028A6  26D9               	addwf	fsr2l,f,c
 11951  0028A8  501A               	movf	(adf4351_write_reg3@ctx+1)^0,w,c
 11952  0028AA  22DA               	addwfc	fsr2h,f,c
 11953  0028AC  50DF               	movf	indf2,w,c
 11954  0028AE  6E1B               	movwf	??_adf4351_write_reg3^0,c
 11955  0028B0  0E01               	movlw	1
 11956  0028B2  161B               	andwf	??_adf4351_write_reg3^0,f,c
 11957  0028B4  C01B  F01C         	movff	??_adf4351_write_reg3,??_adf4351_write_reg3+1
 11958  0028B8  6A1D               	clrf	(??_adf4351_write_reg3+2)^0,c
 11959  0028BA  6A1E               	clrf	(??_adf4351_write_reg3+3)^0,c
 11960  0028BC  6A1F               	clrf	(??_adf4351_write_reg3+4)^0,c
 11961  0028BE  0E15               	movlw	21
 11962  0028C0                     u9225:
 11963  0028C0  90D8               	bcf	status,0,c
 11964  0028C2  361C               	rlcf	(??_adf4351_write_reg3+1)^0,f,c
 11965  0028C4  361D               	rlcf	(??_adf4351_write_reg3+2)^0,f,c
 11966  0028C6  361E               	rlcf	(??_adf4351_write_reg3+3)^0,f,c
 11967  0028C8  361F               	rlcf	(??_adf4351_write_reg3+4)^0,f,c
 11968  0028CA  2EE8               	decfsz	wreg,f,c
 11969  0028CC  D7F9               	goto	u9225
 11970  0028CE  501C               	movf	(??_adf4351_write_reg3+1)^0,w,c
 11971  0028D0  1221               	iorwf	adf4351_write_reg3@data^0,f,c
 11972  0028D2  501D               	movf	(??_adf4351_write_reg3+2)^0,w,c
 11973  0028D4  1222               	iorwf	(adf4351_write_reg3@data+1)^0,f,c
 11974  0028D6  501E               	movf	(??_adf4351_write_reg3+3)^0,w,c
 11975  0028D8  1223               	iorwf	(adf4351_write_reg3@data+2)^0,f,c
 11976  0028DA  501F               	movf	(??_adf4351_write_reg3+4)^0,w,c
 11977  0028DC  1224               	iorwf	(adf4351_write_reg3@data+3)^0,f,c
 11978                           
 11979                           ;src/driver/adf4351.c: 368:         data |= (((u32)ctx->reg3.abp&0x0001)<<22);
 11980  0028DE  EE20 F01A          	lfsr	2,26
 11981  0028E2  5019               	movf	adf4351_write_reg3@ctx^0,w,c
 11982  0028E4  26D9               	addwf	fsr2l,f,c
 11983  0028E6  501A               	movf	(adf4351_write_reg3@ctx+1)^0,w,c
 11984  0028E8  22DA               	addwfc	fsr2h,f,c
 11985  0028EA  50DF               	movf	indf2,w,c
 11986  0028EC  6E1B               	movwf	??_adf4351_write_reg3^0,c
 11987  0028EE  0E01               	movlw	1
 11988  0028F0  161B               	andwf	??_adf4351_write_reg3^0,f,c
 11989  0028F2  C01B  F01C         	movff	??_adf4351_write_reg3,??_adf4351_write_reg3+1
 11990  0028F6  6A1D               	clrf	(??_adf4351_write_reg3+2)^0,c
 11991  0028F8  6A1E               	clrf	(??_adf4351_write_reg3+3)^0,c
 11992  0028FA  6A1F               	clrf	(??_adf4351_write_reg3+4)^0,c
 11993  0028FC  0E16               	movlw	22
 11994  0028FE                     u9235:
 11995  0028FE  90D8               	bcf	status,0,c
 11996  002900  361C               	rlcf	(??_adf4351_write_reg3+1)^0,f,c
 11997  002902  361D               	rlcf	(??_adf4351_write_reg3+2)^0,f,c
 11998  002904  361E               	rlcf	(??_adf4351_write_reg3+3)^0,f,c
 11999  002906  361F               	rlcf	(??_adf4351_write_reg3+4)^0,f,c
 12000  002908  2EE8               	decfsz	wreg,f,c
 12001  00290A  D7F9               	goto	u9235
 12002  00290C  501C               	movf	(??_adf4351_write_reg3+1)^0,w,c
 12003  00290E  1221               	iorwf	adf4351_write_reg3@data^0,f,c
 12004  002910  501D               	movf	(??_adf4351_write_reg3+2)^0,w,c
 12005  002912  1222               	iorwf	(adf4351_write_reg3@data+1)^0,f,c
 12006  002914  501E               	movf	(??_adf4351_write_reg3+3)^0,w,c
 12007  002916  1223               	iorwf	(adf4351_write_reg3@data+2)^0,f,c
 12008  002918  501F               	movf	(??_adf4351_write_reg3+4)^0,w,c
 12009  00291A  1224               	iorwf	(adf4351_write_reg3@data+3)^0,f,c
 12010                           
 12011                           ;src/driver/adf4351.c: 369:         data |= (((u32)ctx->reg3.bscm&0x0001)<<23);
 12012  00291C  EE20 F019          	lfsr	2,25
 12013  002920  5019               	movf	adf4351_write_reg3@ctx^0,w,c
 12014  002922  26D9               	addwf	fsr2l,f,c
 12015  002924  501A               	movf	(adf4351_write_reg3@ctx+1)^0,w,c
 12016  002926  22DA               	addwfc	fsr2h,f,c
 12017  002928  50DF               	movf	indf2,w,c
 12018  00292A  6E1B               	movwf	??_adf4351_write_reg3^0,c
 12019  00292C  0E01               	movlw	1
 12020  00292E  161B               	andwf	??_adf4351_write_reg3^0,f,c
 12021  002930  C01B  F01C         	movff	??_adf4351_write_reg3,??_adf4351_write_reg3+1
 12022  002934  6A1D               	clrf	(??_adf4351_write_reg3+2)^0,c
 12023  002936  6A1E               	clrf	(??_adf4351_write_reg3+3)^0,c
 12024  002938  6A1F               	clrf	(??_adf4351_write_reg3+4)^0,c
 12025  00293A  0E17               	movlw	23
 12026  00293C                     u9245:
 12027  00293C  90D8               	bcf	status,0,c
 12028  00293E  361C               	rlcf	(??_adf4351_write_reg3+1)^0,f,c
 12029  002940  361D               	rlcf	(??_adf4351_write_reg3+2)^0,f,c
 12030  002942  361E               	rlcf	(??_adf4351_write_reg3+3)^0,f,c
 12031  002944  361F               	rlcf	(??_adf4351_write_reg3+4)^0,f,c
 12032  002946  2EE8               	decfsz	wreg,f,c
 12033  002948  D7F9               	goto	u9245
 12034  00294A  501C               	movf	(??_adf4351_write_reg3+1)^0,w,c
 12035  00294C  1221               	iorwf	adf4351_write_reg3@data^0,f,c
 12036  00294E  501D               	movf	(??_adf4351_write_reg3+2)^0,w,c
 12037  002950  1222               	iorwf	(adf4351_write_reg3@data+1)^0,f,c
 12038  002952  501E               	movf	(??_adf4351_write_reg3+3)^0,w,c
 12039  002954  1223               	iorwf	(adf4351_write_reg3@data+2)^0,f,c
 12040  002956  501F               	movf	(??_adf4351_write_reg3+4)^0,w,c
 12041  002958  1224               	iorwf	(adf4351_write_reg3@data+3)^0,f,c
 12042                           
 12043                           ;src/driver/adf4351.c: 373:         adf4351_write_latch(data);
 12044  00295A  C021  F00D         	movff	adf4351_write_reg3@data,adf4351_write_latch@value
 12045  00295E  C022  F00E         	movff	adf4351_write_reg3@data+1,adf4351_write_latch@value+1
 12046  002962  C023  F00F         	movff	adf4351_write_reg3@data+2,adf4351_write_latch@value+2
 12047  002966  C024  F010         	movff	adf4351_write_reg3@data+3,adf4351_write_latch@value+3
 12048  00296A  ECB8  F014         	call	_adf4351_write_latch	;wreg free
 12049  00296E  0012               	return		;funcret
 12050  002970                     __end_of_adf4351_write_reg3:
 12051                           	opt callstack 0
 12052                           
 12053 ;; *************** function _adf4351_write_reg2 *****************
 12054 ;; Defined at:
 12055 ;;		line 332 in file "src/driver/adf4351.c"
 12056 ;; Parameters:    Size  Location     Type
 12057 ;;  ctx             2   24[COMRAM] PTR struct adf4351_ctx
 12058 ;;		 -> g_adf4351(55), 
 12059 ;; Auto vars:     Size  Location     Type
 12060 ;;  data            4   32[COMRAM] unsigned long 
 12061 ;; Return value:  Size  Location     Type
 12062 ;;                  1    wreg      void 
 12063 ;; Registers used:
 12064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12065 ;; Tracked objects:
 12066 ;;		On entry : 0/0
 12067 ;;		On exit  : 0/0
 12068 ;;		Unchanged: 0/0
 12069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12070 ;;      Params:         2       0       0       0       0       0       0
 12071 ;;      Locals:         4       0       0       0       0       0       0
 12072 ;;      Temps:          6       0       0       0       0       0       0
 12073 ;;      Totals:        12       0       0       0       0       0       0
 12074 ;;Total ram usage:       12 bytes
 12075 ;; Hardware stack levels used:    1
 12076 ;; Hardware stack levels required when called:    3
 12077 ;; This function calls:
 12078 ;;		_adf4351_write_latch
 12079 ;; This function is called by:
 12080 ;;		_adf4351_set_rfout_enable
 12081 ;;		_adf4351_set_mode
 12082 ;;		_adf4351_setup
 12083 ;; This function uses a non-reentrant model
 12084 ;;
 12085                           
 12086                           	psect	text53
 12087  000C38                     __ptext53:
 12088                           	opt callstack 0
 12089  000C38                     _adf4351_write_reg2:
 12090                           	opt callstack 23
 12091                           
 12092                           ;src/driver/adf4351.c: 332: static void adf4351_write_reg2(adf4351_ctx* ctx);src/driver/
      +                          adf4351.c: 333: {;src/driver/adf4351.c: 334:     if(ctx->init) {
 12093                           
 12094                           ;incstack = 0
 12095  000C38  C019  FFD9         	movff	adf4351_write_reg2@ctx,fsr2l
 12096  000C3C  C01A  FFDA         	movff	adf4351_write_reg2@ctx+1,fsr2h
 12097  000C40  50DE               	movf	postinc2,w,c
 12098  000C42  10DE               	iorwf	postinc2,w,c
 12099  000C44  B4D8               	btfsc	status,2,c
 12100  000C46  0012               	return	
 12101                           
 12102                           ;src/driver/adf4351.c: 335:         u32 data = 2;
 12103  000C48  0E02               	movlw	2
 12104  000C4A  6E21               	movwf	adf4351_write_reg2@data^0,c
 12105  000C4C  0E00               	movlw	0
 12106  000C4E  6E22               	movwf	(adf4351_write_reg2@data+1)^0,c
 12107  000C50  0E00               	movlw	0
 12108  000C52  6E23               	movwf	(adf4351_write_reg2@data+2)^0,c
 12109  000C54  0E00               	movlw	0
 12110  000C56  6E24               	movwf	(adf4351_write_reg2@data+3)^0,c
 12111                           
 12112                           ;src/driver/adf4351.c: 337:         data |= (((u32)ctx->reg2.cntreset&0x0001)<<3);
 12113  000C58  EE20 F018          	lfsr	2,24
 12114  000C5C  5019               	movf	adf4351_write_reg2@ctx^0,w,c
 12115  000C5E  26D9               	addwf	fsr2l,f,c
 12116  000C60  501A               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 12117  000C62  22DA               	addwfc	fsr2h,f,c
 12118  000C64  50DF               	movf	indf2,w,c
 12119  000C66  6E1B               	movwf	??_adf4351_write_reg2^0,c
 12120  000C68  0E01               	movlw	1
 12121  000C6A  161B               	andwf	??_adf4351_write_reg2^0,f,c
 12122  000C6C  C01B  F01C         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 12123  000C70  6A1D               	clrf	(??_adf4351_write_reg2+2)^0,c
 12124  000C72  6A1E               	clrf	(??_adf4351_write_reg2+3)^0,c
 12125  000C74  6A1F               	clrf	(??_adf4351_write_reg2+4)^0,c
 12126  000C76  0E03               	movlw	3
 12127  000C78                     u9055:
 12128  000C78  90D8               	bcf	status,0,c
 12129  000C7A  361C               	rlcf	(??_adf4351_write_reg2+1)^0,f,c
 12130  000C7C  361D               	rlcf	(??_adf4351_write_reg2+2)^0,f,c
 12131  000C7E  361E               	rlcf	(??_adf4351_write_reg2+3)^0,f,c
 12132  000C80  361F               	rlcf	(??_adf4351_write_reg2+4)^0,f,c
 12133  000C82  2EE8               	decfsz	wreg,f,c
 12134  000C84  D7F9               	goto	u9055
 12135  000C86  501C               	movf	(??_adf4351_write_reg2+1)^0,w,c
 12136  000C88  1221               	iorwf	adf4351_write_reg2@data^0,f,c
 12137  000C8A  501D               	movf	(??_adf4351_write_reg2+2)^0,w,c
 12138  000C8C  1222               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 12139  000C8E  501E               	movf	(??_adf4351_write_reg2+3)^0,w,c
 12140  000C90  1223               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 12141  000C92  501F               	movf	(??_adf4351_write_reg2+4)^0,w,c
 12142  000C94  1224               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 12143                           
 12144                           ;src/driver/adf4351.c: 338:         data |= (((u32)ctx->reg2.cpts&0x0001)<<4);
 12145  000C96  EE20 F017          	lfsr	2,23
 12146  000C9A  5019               	movf	adf4351_write_reg2@ctx^0,w,c
 12147  000C9C  26D9               	addwf	fsr2l,f,c
 12148  000C9E  501A               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 12149  000CA0  22DA               	addwfc	fsr2h,f,c
 12150  000CA2  50DF               	movf	indf2,w,c
 12151  000CA4  6E1B               	movwf	??_adf4351_write_reg2^0,c
 12152  000CA6  0E01               	movlw	1
 12153  000CA8  161B               	andwf	??_adf4351_write_reg2^0,f,c
 12154  000CAA  C01B  F01C         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 12155  000CAE  6A1D               	clrf	(??_adf4351_write_reg2+2)^0,c
 12156  000CB0  6A1E               	clrf	(??_adf4351_write_reg2+3)^0,c
 12157  000CB2  6A1F               	clrf	(??_adf4351_write_reg2+4)^0,c
 12158  000CB4  0E04               	movlw	4
 12159  000CB6                     u9065:
 12160  000CB6  90D8               	bcf	status,0,c
 12161  000CB8  361C               	rlcf	(??_adf4351_write_reg2+1)^0,f,c
 12162  000CBA  361D               	rlcf	(??_adf4351_write_reg2+2)^0,f,c
 12163  000CBC  361E               	rlcf	(??_adf4351_write_reg2+3)^0,f,c
 12164  000CBE  361F               	rlcf	(??_adf4351_write_reg2+4)^0,f,c
 12165  000CC0  2EE8               	decfsz	wreg,f,c
 12166  000CC2  D7F9               	goto	u9065
 12167  000CC4  501C               	movf	(??_adf4351_write_reg2+1)^0,w,c
 12168  000CC6  1221               	iorwf	adf4351_write_reg2@data^0,f,c
 12169  000CC8  501D               	movf	(??_adf4351_write_reg2+2)^0,w,c
 12170  000CCA  1222               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 12171  000CCC  501E               	movf	(??_adf4351_write_reg2+3)^0,w,c
 12172  000CCE  1223               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 12173  000CD0  501F               	movf	(??_adf4351_write_reg2+4)^0,w,c
 12174  000CD2  1224               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 12175                           
 12176                           ;src/driver/adf4351.c: 339:         data |= (((u32)ctx->reg2.pd&0x0001)<<5);
 12177  000CD4  EE20 F016          	lfsr	2,22
 12178  000CD8  5019               	movf	adf4351_write_reg2@ctx^0,w,c
 12179  000CDA  26D9               	addwf	fsr2l,f,c
 12180  000CDC  501A               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 12181  000CDE  22DA               	addwfc	fsr2h,f,c
 12182  000CE0  50DF               	movf	indf2,w,c
 12183  000CE2  6E1B               	movwf	??_adf4351_write_reg2^0,c
 12184  000CE4  0E01               	movlw	1
 12185  000CE6  161B               	andwf	??_adf4351_write_reg2^0,f,c
 12186  000CE8  C01B  F01C         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 12187  000CEC  6A1D               	clrf	(??_adf4351_write_reg2+2)^0,c
 12188  000CEE  6A1E               	clrf	(??_adf4351_write_reg2+3)^0,c
 12189  000CF0  6A1F               	clrf	(??_adf4351_write_reg2+4)^0,c
 12190  000CF2  0E05               	movlw	5
 12191  000CF4                     u9075:
 12192  000CF4  90D8               	bcf	status,0,c
 12193  000CF6  361C               	rlcf	(??_adf4351_write_reg2+1)^0,f,c
 12194  000CF8  361D               	rlcf	(??_adf4351_write_reg2+2)^0,f,c
 12195  000CFA  361E               	rlcf	(??_adf4351_write_reg2+3)^0,f,c
 12196  000CFC  361F               	rlcf	(??_adf4351_write_reg2+4)^0,f,c
 12197  000CFE  2EE8               	decfsz	wreg,f,c
 12198  000D00  D7F9               	goto	u9075
 12199  000D02  501C               	movf	(??_adf4351_write_reg2+1)^0,w,c
 12200  000D04  1221               	iorwf	adf4351_write_reg2@data^0,f,c
 12201  000D06  501D               	movf	(??_adf4351_write_reg2+2)^0,w,c
 12202  000D08  1222               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 12203  000D0A  501E               	movf	(??_adf4351_write_reg2+3)^0,w,c
 12204  000D0C  1223               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 12205  000D0E  501F               	movf	(??_adf4351_write_reg2+4)^0,w,c
 12206  000D10  1224               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 12207                           
 12208                           ;src/driver/adf4351.c: 340:         data |= (((u32)ctx->reg2.pdpol&0x0001)<<6);
 12209  000D12  EE20 F015          	lfsr	2,21
 12210  000D16  5019               	movf	adf4351_write_reg2@ctx^0,w,c
 12211  000D18  26D9               	addwf	fsr2l,f,c
 12212  000D1A  501A               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 12213  000D1C  22DA               	addwfc	fsr2h,f,c
 12214  000D1E  50DF               	movf	indf2,w,c
 12215  000D20  6E1B               	movwf	??_adf4351_write_reg2^0,c
 12216  000D22  0E01               	movlw	1
 12217  000D24  161B               	andwf	??_adf4351_write_reg2^0,f,c
 12218  000D26  C01B  F01C         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 12219  000D2A  6A1D               	clrf	(??_adf4351_write_reg2+2)^0,c
 12220  000D2C  6A1E               	clrf	(??_adf4351_write_reg2+3)^0,c
 12221  000D2E  6A1F               	clrf	(??_adf4351_write_reg2+4)^0,c
 12222  000D30  0E06               	movlw	6
 12223  000D32                     u9085:
 12224  000D32  90D8               	bcf	status,0,c
 12225  000D34  361C               	rlcf	(??_adf4351_write_reg2+1)^0,f,c
 12226  000D36  361D               	rlcf	(??_adf4351_write_reg2+2)^0,f,c
 12227  000D38  361E               	rlcf	(??_adf4351_write_reg2+3)^0,f,c
 12228  000D3A  361F               	rlcf	(??_adf4351_write_reg2+4)^0,f,c
 12229  000D3C  2EE8               	decfsz	wreg,f,c
 12230  000D3E  D7F9               	goto	u9085
 12231  000D40  501C               	movf	(??_adf4351_write_reg2+1)^0,w,c
 12232  000D42  1221               	iorwf	adf4351_write_reg2@data^0,f,c
 12233  000D44  501D               	movf	(??_adf4351_write_reg2+2)^0,w,c
 12234  000D46  1222               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 12235  000D48  501E               	movf	(??_adf4351_write_reg2+3)^0,w,c
 12236  000D4A  1223               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 12237  000D4C  501F               	movf	(??_adf4351_write_reg2+4)^0,w,c
 12238  000D4E  1224               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 12239                           
 12240                           ;src/driver/adf4351.c: 341:         data |= (((u32)ctx->reg2.ldp&0x0001)<<7);
 12241  000D50  EE20 F014          	lfsr	2,20
 12242  000D54  5019               	movf	adf4351_write_reg2@ctx^0,w,c
 12243  000D56  26D9               	addwf	fsr2l,f,c
 12244  000D58  501A               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 12245  000D5A  22DA               	addwfc	fsr2h,f,c
 12246  000D5C  50DF               	movf	indf2,w,c
 12247  000D5E  6E1B               	movwf	??_adf4351_write_reg2^0,c
 12248  000D60  0E01               	movlw	1
 12249  000D62  161B               	andwf	??_adf4351_write_reg2^0,f,c
 12250  000D64  C01B  F01C         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 12251  000D68  6A1D               	clrf	(??_adf4351_write_reg2+2)^0,c
 12252  000D6A  6A1E               	clrf	(??_adf4351_write_reg2+3)^0,c
 12253  000D6C  6A1F               	clrf	(??_adf4351_write_reg2+4)^0,c
 12254  000D6E  0E07               	movlw	7
 12255  000D70                     u9095:
 12256  000D70  90D8               	bcf	status,0,c
 12257  000D72  361C               	rlcf	(??_adf4351_write_reg2+1)^0,f,c
 12258  000D74  361D               	rlcf	(??_adf4351_write_reg2+2)^0,f,c
 12259  000D76  361E               	rlcf	(??_adf4351_write_reg2+3)^0,f,c
 12260  000D78  361F               	rlcf	(??_adf4351_write_reg2+4)^0,f,c
 12261  000D7A  2EE8               	decfsz	wreg,f,c
 12262  000D7C  D7F9               	goto	u9095
 12263  000D7E  501C               	movf	(??_adf4351_write_reg2+1)^0,w,c
 12264  000D80  1221               	iorwf	adf4351_write_reg2@data^0,f,c
 12265  000D82  501D               	movf	(??_adf4351_write_reg2+2)^0,w,c
 12266  000D84  1222               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 12267  000D86  501E               	movf	(??_adf4351_write_reg2+3)^0,w,c
 12268  000D88  1223               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 12269  000D8A  501F               	movf	(??_adf4351_write_reg2+4)^0,w,c
 12270  000D8C  1224               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 12271                           
 12272                           ;src/driver/adf4351.c: 342:         data |= (((u32)ctx->reg2.ldf&0x0001)<<8);
 12273  000D8E  EE20 F013          	lfsr	2,19
 12274  000D92  5019               	movf	adf4351_write_reg2@ctx^0,w,c
 12275  000D94  26D9               	addwf	fsr2l,f,c
 12276  000D96  501A               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 12277  000D98  22DA               	addwfc	fsr2h,f,c
 12278  000D9A  50DF               	movf	indf2,w,c
 12279  000D9C  6E1B               	movwf	??_adf4351_write_reg2^0,c
 12280  000D9E  0E01               	movlw	1
 12281  000DA0  161B               	andwf	??_adf4351_write_reg2^0,f,c
 12282  000DA2  C01B  F01C         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 12283  000DA6  6A1D               	clrf	(??_adf4351_write_reg2+2)^0,c
 12284  000DA8  6A1E               	clrf	(??_adf4351_write_reg2+3)^0,c
 12285  000DAA  6A1F               	clrf	(??_adf4351_write_reg2+4)^0,c
 12286  000DAC  C01E  F01F         	movff	??_adf4351_write_reg2+3,??_adf4351_write_reg2+4
 12287  000DB0  C01D  F01E         	movff	??_adf4351_write_reg2+2,??_adf4351_write_reg2+3
 12288  000DB4  C01C  F01D         	movff	??_adf4351_write_reg2+1,??_adf4351_write_reg2+2
 12289  000DB8  6A1C               	clrf	(??_adf4351_write_reg2+1)^0,c
 12290  000DBA  501C               	movf	(??_adf4351_write_reg2+1)^0,w,c
 12291  000DBC  1221               	iorwf	adf4351_write_reg2@data^0,f,c
 12292  000DBE  501D               	movf	(??_adf4351_write_reg2+2)^0,w,c
 12293  000DC0  1222               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 12294  000DC2  501E               	movf	(??_adf4351_write_reg2+3)^0,w,c
 12295  000DC4  1223               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 12296  000DC6  501F               	movf	(??_adf4351_write_reg2+4)^0,w,c
 12297  000DC8  1224               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 12298                           
 12299                           ;src/driver/adf4351.c: 343:         data |= (((u32)ctx->reg2.cpc&0x000F)<<9);
 12300  000DCA  EE20 F012          	lfsr	2,18
 12301  000DCE  5019               	movf	adf4351_write_reg2@ctx^0,w,c
 12302  000DD0  26D9               	addwf	fsr2l,f,c
 12303  000DD2  501A               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 12304  000DD4  22DA               	addwfc	fsr2h,f,c
 12305  000DD6  50DF               	movf	indf2,w,c
 12306  000DD8  6E1B               	movwf	??_adf4351_write_reg2^0,c
 12307  000DDA  0E0F               	movlw	15
 12308  000DDC  161B               	andwf	??_adf4351_write_reg2^0,f,c
 12309  000DDE  C01B  F01C         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 12310  000DE2  6A1D               	clrf	(??_adf4351_write_reg2+2)^0,c
 12311  000DE4  6A1E               	clrf	(??_adf4351_write_reg2+3)^0,c
 12312  000DE6  6A1F               	clrf	(??_adf4351_write_reg2+4)^0,c
 12313  000DE8  0E09               	movlw	9
 12314  000DEA                     u9105:
 12315  000DEA  90D8               	bcf	status,0,c
 12316  000DEC  361C               	rlcf	(??_adf4351_write_reg2+1)^0,f,c
 12317  000DEE  361D               	rlcf	(??_adf4351_write_reg2+2)^0,f,c
 12318  000DF0  361E               	rlcf	(??_adf4351_write_reg2+3)^0,f,c
 12319  000DF2  361F               	rlcf	(??_adf4351_write_reg2+4)^0,f,c
 12320  000DF4  2EE8               	decfsz	wreg,f,c
 12321  000DF6  D7F9               	goto	u9105
 12322  000DF8  501C               	movf	(??_adf4351_write_reg2+1)^0,w,c
 12323  000DFA  1221               	iorwf	adf4351_write_reg2@data^0,f,c
 12324  000DFC  501D               	movf	(??_adf4351_write_reg2+2)^0,w,c
 12325  000DFE  1222               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 12326  000E00  501E               	movf	(??_adf4351_write_reg2+3)^0,w,c
 12327  000E02  1223               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 12328  000E04  501F               	movf	(??_adf4351_write_reg2+4)^0,w,c
 12329  000E06  1224               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 12330                           
 12331                           ;src/driver/adf4351.c: 344:         data |= (((u32)ctx->reg2.dblbuff&0x0001)<<13);
 12332  000E08  EE20 F011          	lfsr	2,17
 12333  000E0C  5019               	movf	adf4351_write_reg2@ctx^0,w,c
 12334  000E0E  26D9               	addwf	fsr2l,f,c
 12335  000E10  501A               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 12336  000E12  22DA               	addwfc	fsr2h,f,c
 12337  000E14  50DF               	movf	indf2,w,c
 12338  000E16  6E1B               	movwf	??_adf4351_write_reg2^0,c
 12339  000E18  0E01               	movlw	1
 12340  000E1A  161B               	andwf	??_adf4351_write_reg2^0,f,c
 12341  000E1C  C01B  F01C         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 12342  000E20  6A1D               	clrf	(??_adf4351_write_reg2+2)^0,c
 12343  000E22  6A1E               	clrf	(??_adf4351_write_reg2+3)^0,c
 12344  000E24  6A1F               	clrf	(??_adf4351_write_reg2+4)^0,c
 12345  000E26  0E0D               	movlw	13
 12346  000E28                     u9115:
 12347  000E28  90D8               	bcf	status,0,c
 12348  000E2A  361C               	rlcf	(??_adf4351_write_reg2+1)^0,f,c
 12349  000E2C  361D               	rlcf	(??_adf4351_write_reg2+2)^0,f,c
 12350  000E2E  361E               	rlcf	(??_adf4351_write_reg2+3)^0,f,c
 12351  000E30  361F               	rlcf	(??_adf4351_write_reg2+4)^0,f,c
 12352  000E32  2EE8               	decfsz	wreg,f,c
 12353  000E34  D7F9               	goto	u9115
 12354  000E36  501C               	movf	(??_adf4351_write_reg2+1)^0,w,c
 12355  000E38  1221               	iorwf	adf4351_write_reg2@data^0,f,c
 12356  000E3A  501D               	movf	(??_adf4351_write_reg2+2)^0,w,c
 12357  000E3C  1222               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 12358  000E3E  501E               	movf	(??_adf4351_write_reg2+3)^0,w,c
 12359  000E40  1223               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 12360  000E42  501F               	movf	(??_adf4351_write_reg2+4)^0,w,c
 12361  000E44  1224               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 12362                           
 12363                           ;src/driver/adf4351.c: 345:         data |= (((u32)ctx->reg2.rcnt&0x03FF)<<14);
 12364  000E46  EE20 F00F          	lfsr	2,15
 12365  000E4A  5019               	movf	adf4351_write_reg2@ctx^0,w,c
 12366  000E4C  26D9               	addwf	fsr2l,f,c
 12367  000E4E  501A               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 12368  000E50  22DA               	addwfc	fsr2h,f,c
 12369  000E52  CFDE F01B          	movff	postinc2,??_adf4351_write_reg2
 12370  000E56  CFDD F01C          	movff	postdec2,??_adf4351_write_reg2+1
 12371  000E5A  0EFF               	movlw	255
 12372  000E5C  141B               	andwf	??_adf4351_write_reg2^0,w,c
 12373  000E5E  6E1D               	movwf	(??_adf4351_write_reg2+2)^0,c
 12374  000E60  0E03               	movlw	3
 12375  000E62  141C               	andwf	(??_adf4351_write_reg2+1)^0,w,c
 12376  000E64  6E1E               	movwf	(??_adf4351_write_reg2+3)^0,c
 12377  000E66  6A1F               	clrf	(??_adf4351_write_reg2+4)^0,c
 12378  000E68  6A20               	clrf	(??_adf4351_write_reg2+5)^0,c
 12379  000E6A  0E0E               	movlw	14
 12380  000E6C                     u9125:
 12381  000E6C  90D8               	bcf	status,0,c
 12382  000E6E  361D               	rlcf	(??_adf4351_write_reg2+2)^0,f,c
 12383  000E70  361E               	rlcf	(??_adf4351_write_reg2+3)^0,f,c
 12384  000E72  361F               	rlcf	(??_adf4351_write_reg2+4)^0,f,c
 12385  000E74  3620               	rlcf	(??_adf4351_write_reg2+5)^0,f,c
 12386  000E76  2EE8               	decfsz	wreg,f,c
 12387  000E78  D7F9               	goto	u9125
 12388  000E7A  501D               	movf	(??_adf4351_write_reg2+2)^0,w,c
 12389  000E7C  1221               	iorwf	adf4351_write_reg2@data^0,f,c
 12390  000E7E  501E               	movf	(??_adf4351_write_reg2+3)^0,w,c
 12391  000E80  1222               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 12392  000E82  501F               	movf	(??_adf4351_write_reg2+4)^0,w,c
 12393  000E84  1223               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 12394  000E86  5020               	movf	(??_adf4351_write_reg2+5)^0,w,c
 12395  000E88  1224               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 12396                           
 12397                           ;src/driver/adf4351.c: 346:         data |= (((u32)ctx->reg2.refdiv&0x0001)<<24);
 12398  000E8A  EE20 F00E          	lfsr	2,14
 12399  000E8E  5019               	movf	adf4351_write_reg2@ctx^0,w,c
 12400  000E90  26D9               	addwf	fsr2l,f,c
 12401  000E92  501A               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 12402  000E94  22DA               	addwfc	fsr2h,f,c
 12403  000E96  50DF               	movf	indf2,w,c
 12404  000E98  6E1B               	movwf	??_adf4351_write_reg2^0,c
 12405  000E9A  0E01               	movlw	1
 12406  000E9C  161B               	andwf	??_adf4351_write_reg2^0,f,c
 12407  000E9E  C01B  F01C         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 12408  000EA2  6A1D               	clrf	(??_adf4351_write_reg2+2)^0,c
 12409  000EA4  6A1E               	clrf	(??_adf4351_write_reg2+3)^0,c
 12410  000EA6  6A1F               	clrf	(??_adf4351_write_reg2+4)^0,c
 12411  000EA8  C01C  F01F         	movff	??_adf4351_write_reg2+1,??_adf4351_write_reg2+4
 12412  000EAC  6A1E               	clrf	(??_adf4351_write_reg2+3)^0,c
 12413  000EAE  6A1D               	clrf	(??_adf4351_write_reg2+2)^0,c
 12414  000EB0  6A1C               	clrf	(??_adf4351_write_reg2+1)^0,c
 12415  000EB2  501C               	movf	(??_adf4351_write_reg2+1)^0,w,c
 12416  000EB4  1221               	iorwf	adf4351_write_reg2@data^0,f,c
 12417  000EB6  501D               	movf	(??_adf4351_write_reg2+2)^0,w,c
 12418  000EB8  1222               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 12419  000EBA  501E               	movf	(??_adf4351_write_reg2+3)^0,w,c
 12420  000EBC  1223               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 12421  000EBE  501F               	movf	(??_adf4351_write_reg2+4)^0,w,c
 12422  000EC0  1224               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 12423                           
 12424                           ;src/driver/adf4351.c: 347:         data |= (((u32)ctx->reg2.refdbl&0x0001)<<25);
 12425  000EC2  EE20 F00D          	lfsr	2,13
 12426  000EC6  5019               	movf	adf4351_write_reg2@ctx^0,w,c
 12427  000EC8  26D9               	addwf	fsr2l,f,c
 12428  000ECA  501A               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 12429  000ECC  22DA               	addwfc	fsr2h,f,c
 12430  000ECE  50DF               	movf	indf2,w,c
 12431  000ED0  6E1B               	movwf	??_adf4351_write_reg2^0,c
 12432  000ED2  0E01               	movlw	1
 12433  000ED4  161B               	andwf	??_adf4351_write_reg2^0,f,c
 12434  000ED6  C01B  F01C         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 12435  000EDA  6A1D               	clrf	(??_adf4351_write_reg2+2)^0,c
 12436  000EDC  6A1E               	clrf	(??_adf4351_write_reg2+3)^0,c
 12437  000EDE  6A1F               	clrf	(??_adf4351_write_reg2+4)^0,c
 12438  000EE0  0E19               	movlw	25
 12439  000EE2                     u9135:
 12440  000EE2  90D8               	bcf	status,0,c
 12441  000EE4  361C               	rlcf	(??_adf4351_write_reg2+1)^0,f,c
 12442  000EE6  361D               	rlcf	(??_adf4351_write_reg2+2)^0,f,c
 12443  000EE8  361E               	rlcf	(??_adf4351_write_reg2+3)^0,f,c
 12444  000EEA  361F               	rlcf	(??_adf4351_write_reg2+4)^0,f,c
 12445  000EEC  2EE8               	decfsz	wreg,f,c
 12446  000EEE  D7F9               	goto	u9135
 12447  000EF0  501C               	movf	(??_adf4351_write_reg2+1)^0,w,c
 12448  000EF2  1221               	iorwf	adf4351_write_reg2@data^0,f,c
 12449  000EF4  501D               	movf	(??_adf4351_write_reg2+2)^0,w,c
 12450  000EF6  1222               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 12451  000EF8  501E               	movf	(??_adf4351_write_reg2+3)^0,w,c
 12452  000EFA  1223               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 12453  000EFC  501F               	movf	(??_adf4351_write_reg2+4)^0,w,c
 12454  000EFE  1224               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 12455                           
 12456                           ;src/driver/adf4351.c: 348:         data |= (((u32)ctx->reg2.muxout&0x0007)<<26);
 12457  000F00  EE20 F00C          	lfsr	2,12
 12458  000F04  5019               	movf	adf4351_write_reg2@ctx^0,w,c
 12459  000F06  26D9               	addwf	fsr2l,f,c
 12460  000F08  501A               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 12461  000F0A  22DA               	addwfc	fsr2h,f,c
 12462  000F0C  50DF               	movf	indf2,w,c
 12463  000F0E  6E1B               	movwf	??_adf4351_write_reg2^0,c
 12464  000F10  0E07               	movlw	7
 12465  000F12  161B               	andwf	??_adf4351_write_reg2^0,f,c
 12466  000F14  C01B  F01C         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 12467  000F18  6A1D               	clrf	(??_adf4351_write_reg2+2)^0,c
 12468  000F1A  6A1E               	clrf	(??_adf4351_write_reg2+3)^0,c
 12469  000F1C  6A1F               	clrf	(??_adf4351_write_reg2+4)^0,c
 12470  000F1E  0E1A               	movlw	26
 12471  000F20                     u9145:
 12472  000F20  90D8               	bcf	status,0,c
 12473  000F22  361C               	rlcf	(??_adf4351_write_reg2+1)^0,f,c
 12474  000F24  361D               	rlcf	(??_adf4351_write_reg2+2)^0,f,c
 12475  000F26  361E               	rlcf	(??_adf4351_write_reg2+3)^0,f,c
 12476  000F28  361F               	rlcf	(??_adf4351_write_reg2+4)^0,f,c
 12477  000F2A  2EE8               	decfsz	wreg,f,c
 12478  000F2C  D7F9               	goto	u9145
 12479  000F2E  501C               	movf	(??_adf4351_write_reg2+1)^0,w,c
 12480  000F30  1221               	iorwf	adf4351_write_reg2@data^0,f,c
 12481  000F32  501D               	movf	(??_adf4351_write_reg2+2)^0,w,c
 12482  000F34  1222               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 12483  000F36  501E               	movf	(??_adf4351_write_reg2+3)^0,w,c
 12484  000F38  1223               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 12485  000F3A  501F               	movf	(??_adf4351_write_reg2+4)^0,w,c
 12486  000F3C  1224               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 12487                           
 12488                           ;src/driver/adf4351.c: 349:         data |= (((u32)ctx->reg2.lownoise&0x0003)<<29);
 12489  000F3E  EE20 F00B          	lfsr	2,11
 12490  000F42  5019               	movf	adf4351_write_reg2@ctx^0,w,c
 12491  000F44  26D9               	addwf	fsr2l,f,c
 12492  000F46  501A               	movf	(adf4351_write_reg2@ctx+1)^0,w,c
 12493  000F48  22DA               	addwfc	fsr2h,f,c
 12494  000F4A  50DF               	movf	indf2,w,c
 12495  000F4C  6E1B               	movwf	??_adf4351_write_reg2^0,c
 12496  000F4E  0E03               	movlw	3
 12497  000F50  161B               	andwf	??_adf4351_write_reg2^0,f,c
 12498  000F52  C01B  F01C         	movff	??_adf4351_write_reg2,??_adf4351_write_reg2+1
 12499  000F56  6A1D               	clrf	(??_adf4351_write_reg2+2)^0,c
 12500  000F58  6A1E               	clrf	(??_adf4351_write_reg2+3)^0,c
 12501  000F5A  6A1F               	clrf	(??_adf4351_write_reg2+4)^0,c
 12502  000F5C  0E1D               	movlw	29
 12503  000F5E                     u9155:
 12504  000F5E  90D8               	bcf	status,0,c
 12505  000F60  361C               	rlcf	(??_adf4351_write_reg2+1)^0,f,c
 12506  000F62  361D               	rlcf	(??_adf4351_write_reg2+2)^0,f,c
 12507  000F64  361E               	rlcf	(??_adf4351_write_reg2+3)^0,f,c
 12508  000F66  361F               	rlcf	(??_adf4351_write_reg2+4)^0,f,c
 12509  000F68  2EE8               	decfsz	wreg,f,c
 12510  000F6A  D7F9               	goto	u9155
 12511  000F6C  501C               	movf	(??_adf4351_write_reg2+1)^0,w,c
 12512  000F6E  1221               	iorwf	adf4351_write_reg2@data^0,f,c
 12513  000F70  501D               	movf	(??_adf4351_write_reg2+2)^0,w,c
 12514  000F72  1222               	iorwf	(adf4351_write_reg2@data+1)^0,f,c
 12515  000F74  501E               	movf	(??_adf4351_write_reg2+3)^0,w,c
 12516  000F76  1223               	iorwf	(adf4351_write_reg2@data+2)^0,f,c
 12517  000F78  501F               	movf	(??_adf4351_write_reg2+4)^0,w,c
 12518  000F7A  1224               	iorwf	(adf4351_write_reg2@data+3)^0,f,c
 12519                           
 12520                           ;src/driver/adf4351.c: 355:         adf4351_write_latch(data);
 12521  000F7C  C021  F00D         	movff	adf4351_write_reg2@data,adf4351_write_latch@value
 12522  000F80  C022  F00E         	movff	adf4351_write_reg2@data+1,adf4351_write_latch@value+1
 12523  000F84  C023  F00F         	movff	adf4351_write_reg2@data+2,adf4351_write_latch@value+2
 12524  000F88  C024  F010         	movff	adf4351_write_reg2@data+3,adf4351_write_latch@value+3
 12525  000F8C  ECB8  F014         	call	_adf4351_write_latch	;wreg free
 12526  000F90  0012               	return		;funcret
 12527  000F92                     __end_of_adf4351_write_reg2:
 12528                           	opt callstack 0
 12529                           
 12530 ;; *************** function _adf4351_write_reg1 *****************
 12531 ;; Defined at:
 12532 ;;		line 318 in file "src/driver/adf4351.c"
 12533 ;; Parameters:    Size  Location     Type
 12534 ;;  ctx             2   24[COMRAM] PTR struct adf4351_ctx
 12535 ;;		 -> g_adf4351(55), 
 12536 ;; Auto vars:     Size  Location     Type
 12537 ;;  data            4   32[COMRAM] unsigned long 
 12538 ;; Return value:  Size  Location     Type
 12539 ;;                  1    wreg      void 
 12540 ;; Registers used:
 12541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12542 ;; Tracked objects:
 12543 ;;		On entry : 0/0
 12544 ;;		On exit  : 0/0
 12545 ;;		Unchanged: 0/0
 12546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12547 ;;      Params:         2       0       0       0       0       0       0
 12548 ;;      Locals:         4       0       0       0       0       0       0
 12549 ;;      Temps:          6       0       0       0       0       0       0
 12550 ;;      Totals:        12       0       0       0       0       0       0
 12551 ;;Total ram usage:       12 bytes
 12552 ;; Hardware stack levels used:    1
 12553 ;; Hardware stack levels required when called:    3
 12554 ;; This function calls:
 12555 ;;		_adf4351_write_latch
 12556 ;; This function is called by:
 12557 ;;		_adf4351_setup
 12558 ;; This function uses a non-reentrant model
 12559 ;;
 12560                           
 12561                           	psect	text54
 12562  003540                     __ptext54:
 12563                           	opt callstack 0
 12564  003540                     _adf4351_write_reg1:
 12565                           	opt callstack 23
 12566                           
 12567                           ;src/driver/adf4351.c: 318: static void adf4351_write_reg1(adf4351_ctx* ctx);src/driver/
      +                          adf4351.c: 319: {;src/driver/adf4351.c: 320:     if(ctx->init) {
 12568                           
 12569                           ;incstack = 0
 12570  003540  C019  FFD9         	movff	adf4351_write_reg1@ctx,fsr2l
 12571  003544  C01A  FFDA         	movff	adf4351_write_reg1@ctx+1,fsr2h
 12572  003548  50DE               	movf	postinc2,w,c
 12573  00354A  10DE               	iorwf	postinc2,w,c
 12574  00354C  B4D8               	btfsc	status,2,c
 12575  00354E  0012               	return	
 12576                           
 12577                           ;src/driver/adf4351.c: 321:         u32 data = 1;
 12578  003550  0E01               	movlw	1
 12579  003552  6E21               	movwf	adf4351_write_reg1@data^0,c
 12580  003554  0E00               	movlw	0
 12581  003556  6E22               	movwf	(adf4351_write_reg1@data+1)^0,c
 12582  003558  0E00               	movlw	0
 12583  00355A  6E23               	movwf	(adf4351_write_reg1@data+2)^0,c
 12584  00355C  0E00               	movlw	0
 12585  00355E  6E24               	movwf	(adf4351_write_reg1@data+3)^0,c
 12586                           
 12587                           ;src/driver/adf4351.c: 323:         data |= (((u32)ctx->reg1.mod&0x0FFF)<<3);
 12588  003560  EE20 F009          	lfsr	2,9
 12589  003564  5019               	movf	adf4351_write_reg1@ctx^0,w,c
 12590  003566  26D9               	addwf	fsr2l,f,c
 12591  003568  501A               	movf	(adf4351_write_reg1@ctx+1)^0,w,c
 12592  00356A  22DA               	addwfc	fsr2h,f,c
 12593  00356C  CFDE F01B          	movff	postinc2,??_adf4351_write_reg1
 12594  003570  CFDD F01C          	movff	postdec2,??_adf4351_write_reg1+1
 12595  003574  0EFF               	movlw	255
 12596  003576  141B               	andwf	??_adf4351_write_reg1^0,w,c
 12597  003578  6E1D               	movwf	(??_adf4351_write_reg1+2)^0,c
 12598  00357A  0E0F               	movlw	15
 12599  00357C  141C               	andwf	(??_adf4351_write_reg1+1)^0,w,c
 12600  00357E  6E1E               	movwf	(??_adf4351_write_reg1+3)^0,c
 12601  003580  6A1F               	clrf	(??_adf4351_write_reg1+4)^0,c
 12602  003582  6A20               	clrf	(??_adf4351_write_reg1+5)^0,c
 12603  003584  0E03               	movlw	3
 12604  003586                     u9265:
 12605  003586  90D8               	bcf	status,0,c
 12606  003588  361D               	rlcf	(??_adf4351_write_reg1+2)^0,f,c
 12607  00358A  361E               	rlcf	(??_adf4351_write_reg1+3)^0,f,c
 12608  00358C  361F               	rlcf	(??_adf4351_write_reg1+4)^0,f,c
 12609  00358E  3620               	rlcf	(??_adf4351_write_reg1+5)^0,f,c
 12610  003590  2EE8               	decfsz	wreg,f,c
 12611  003592  D7F9               	goto	u9265
 12612  003594  501D               	movf	(??_adf4351_write_reg1+2)^0,w,c
 12613  003596  1221               	iorwf	adf4351_write_reg1@data^0,f,c
 12614  003598  501E               	movf	(??_adf4351_write_reg1+3)^0,w,c
 12615  00359A  1222               	iorwf	(adf4351_write_reg1@data+1)^0,f,c
 12616  00359C  501F               	movf	(??_adf4351_write_reg1+4)^0,w,c
 12617  00359E  1223               	iorwf	(adf4351_write_reg1@data+2)^0,f,c
 12618  0035A0  5020               	movf	(??_adf4351_write_reg1+5)^0,w,c
 12619  0035A2  1224               	iorwf	(adf4351_write_reg1@data+3)^0,f,c
 12620                           
 12621                           ;src/driver/adf4351.c: 324:         data |= (((u32)ctx->reg1.phase&0x0FFF)<<15);
 12622  0035A4  EE20 F007          	lfsr	2,7
 12623  0035A8  5019               	movf	adf4351_write_reg1@ctx^0,w,c
 12624  0035AA  26D9               	addwf	fsr2l,f,c
 12625  0035AC  501A               	movf	(adf4351_write_reg1@ctx+1)^0,w,c
 12626  0035AE  22DA               	addwfc	fsr2h,f,c
 12627  0035B0  CFDE F01B          	movff	postinc2,??_adf4351_write_reg1
 12628  0035B4  CFDD F01C          	movff	postdec2,??_adf4351_write_reg1+1
 12629  0035B8  0EFF               	movlw	255
 12630  0035BA  141B               	andwf	??_adf4351_write_reg1^0,w,c
 12631  0035BC  6E1D               	movwf	(??_adf4351_write_reg1+2)^0,c
 12632  0035BE  0E0F               	movlw	15
 12633  0035C0  141C               	andwf	(??_adf4351_write_reg1+1)^0,w,c
 12634  0035C2  6E1E               	movwf	(??_adf4351_write_reg1+3)^0,c
 12635  0035C4  6A1F               	clrf	(??_adf4351_write_reg1+4)^0,c
 12636  0035C6  6A20               	clrf	(??_adf4351_write_reg1+5)^0,c
 12637  0035C8  0E0F               	movlw	15
 12638  0035CA                     u9275:
 12639  0035CA  90D8               	bcf	status,0,c
 12640  0035CC  361D               	rlcf	(??_adf4351_write_reg1+2)^0,f,c
 12641  0035CE  361E               	rlcf	(??_adf4351_write_reg1+3)^0,f,c
 12642  0035D0  361F               	rlcf	(??_adf4351_write_reg1+4)^0,f,c
 12643  0035D2  3620               	rlcf	(??_adf4351_write_reg1+5)^0,f,c
 12644  0035D4  2EE8               	decfsz	wreg,f,c
 12645  0035D6  D7F9               	goto	u9275
 12646  0035D8  501D               	movf	(??_adf4351_write_reg1+2)^0,w,c
 12647  0035DA  1221               	iorwf	adf4351_write_reg1@data^0,f,c
 12648  0035DC  501E               	movf	(??_adf4351_write_reg1+3)^0,w,c
 12649  0035DE  1222               	iorwf	(adf4351_write_reg1@data+1)^0,f,c
 12650  0035E0  501F               	movf	(??_adf4351_write_reg1+4)^0,w,c
 12651  0035E2  1223               	iorwf	(adf4351_write_reg1@data+2)^0,f,c
 12652  0035E4  5020               	movf	(??_adf4351_write_reg1+5)^0,w,c
 12653  0035E6  1224               	iorwf	(adf4351_write_reg1@data+3)^0,f,c
 12654                           
 12655                           ;src/driver/adf4351.c: 325:         data |= (((u32)ctx->reg1.prescaler&0x0001)<<27);
 12656  0035E8  EE20 F006          	lfsr	2,6
 12657  0035EC  5019               	movf	adf4351_write_reg1@ctx^0,w,c
 12658  0035EE  26D9               	addwf	fsr2l,f,c
 12659  0035F0  501A               	movf	(adf4351_write_reg1@ctx+1)^0,w,c
 12660  0035F2  22DA               	addwfc	fsr2h,f,c
 12661  0035F4  50DF               	movf	indf2,w,c
 12662  0035F6  6E1B               	movwf	??_adf4351_write_reg1^0,c
 12663  0035F8  0E01               	movlw	1
 12664  0035FA  161B               	andwf	??_adf4351_write_reg1^0,f,c
 12665  0035FC  C01B  F01C         	movff	??_adf4351_write_reg1,??_adf4351_write_reg1+1
 12666  003600  6A1D               	clrf	(??_adf4351_write_reg1+2)^0,c
 12667  003602  6A1E               	clrf	(??_adf4351_write_reg1+3)^0,c
 12668  003604  6A1F               	clrf	(??_adf4351_write_reg1+4)^0,c
 12669  003606  0E1B               	movlw	27
 12670  003608                     u9285:
 12671  003608  90D8               	bcf	status,0,c
 12672  00360A  361C               	rlcf	(??_adf4351_write_reg1+1)^0,f,c
 12673  00360C  361D               	rlcf	(??_adf4351_write_reg1+2)^0,f,c
 12674  00360E  361E               	rlcf	(??_adf4351_write_reg1+3)^0,f,c
 12675  003610  361F               	rlcf	(??_adf4351_write_reg1+4)^0,f,c
 12676  003612  2EE8               	decfsz	wreg,f,c
 12677  003614  D7F9               	goto	u9285
 12678  003616  501C               	movf	(??_adf4351_write_reg1+1)^0,w,c
 12679  003618  1221               	iorwf	adf4351_write_reg1@data^0,f,c
 12680  00361A  501D               	movf	(??_adf4351_write_reg1+2)^0,w,c
 12681  00361C  1222               	iorwf	(adf4351_write_reg1@data+1)^0,f,c
 12682  00361E  501E               	movf	(??_adf4351_write_reg1+3)^0,w,c
 12683  003620  1223               	iorwf	(adf4351_write_reg1@data+2)^0,f,c
 12684  003622  501F               	movf	(??_adf4351_write_reg1+4)^0,w,c
 12685  003624  1224               	iorwf	(adf4351_write_reg1@data+3)^0,f,c
 12686                           
 12687                           ;src/driver/adf4351.c: 328:         adf4351_write_latch(data);
 12688  003626  C021  F00D         	movff	adf4351_write_reg1@data,adf4351_write_latch@value
 12689  00362A  C022  F00E         	movff	adf4351_write_reg1@data+1,adf4351_write_latch@value+1
 12690  00362E  C023  F00F         	movff	adf4351_write_reg1@data+2,adf4351_write_latch@value+2
 12691  003632  C024  F010         	movff	adf4351_write_reg1@data+3,adf4351_write_latch@value+3
 12692  003636  ECB8  F014         	call	_adf4351_write_latch	;wreg free
 12693  00363A  0012               	return		;funcret
 12694  00363C                     __end_of_adf4351_write_reg1:
 12695                           	opt callstack 0
 12696                           
 12697 ;; *************** function _adf4351_write_reg0 *****************
 12698 ;; Defined at:
 12699 ;;		line 305 in file "src/driver/adf4351.c"
 12700 ;; Parameters:    Size  Location     Type
 12701 ;;  ctx             2   24[COMRAM] PTR struct adf4351_ctx
 12702 ;;		 -> g_adf4351(55), 
 12703 ;; Auto vars:     Size  Location     Type
 12704 ;;  data            4   32[COMRAM] unsigned long 
 12705 ;; Return value:  Size  Location     Type
 12706 ;;                  1    wreg      void 
 12707 ;; Registers used:
 12708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12709 ;; Tracked objects:
 12710 ;;		On entry : 0/0
 12711 ;;		On exit  : 0/0
 12712 ;;		Unchanged: 0/0
 12713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12714 ;;      Params:         2       0       0       0       0       0       0
 12715 ;;      Locals:         4       0       0       0       0       0       0
 12716 ;;      Temps:          6       0       0       0       0       0       0
 12717 ;;      Totals:        12       0       0       0       0       0       0
 12718 ;;Total ram usage:       12 bytes
 12719 ;; Hardware stack levels used:    1
 12720 ;; Hardware stack levels required when called:    3
 12721 ;; This function calls:
 12722 ;;		_adf4351_write_latch
 12723 ;; This function is called by:
 12724 ;;		_adf4351_setup
 12725 ;; This function uses a non-reentrant model
 12726 ;;
 12727                           
 12728                           	psect	text55
 12729  003CCE                     __ptext55:
 12730                           	opt callstack 0
 12731  003CCE                     _adf4351_write_reg0:
 12732                           	opt callstack 23
 12733                           
 12734                           ;src/driver/adf4351.c: 305: static void adf4351_write_reg0(adf4351_ctx* ctx);src/driver/
      +                          adf4351.c: 306: {;src/driver/adf4351.c: 307:  if(ctx->init) {
 12735                           
 12736                           ;incstack = 0
 12737  003CCE  C019  FFD9         	movff	adf4351_write_reg0@ctx,fsr2l
 12738  003CD2  C01A  FFDA         	movff	adf4351_write_reg0@ctx+1,fsr2h
 12739  003CD6  50DE               	movf	postinc2,w,c
 12740  003CD8  10DE               	iorwf	postinc2,w,c
 12741  003CDA  B4D8               	btfsc	status,2,c
 12742  003CDC  0012               	return	
 12743                           
 12744                           ;src/driver/adf4351.c: 308:         u32 data = 0;
 12745  003CDE  0E00               	movlw	0
 12746  003CE0  6E21               	movwf	adf4351_write_reg0@data^0,c
 12747  003CE2  0E00               	movlw	0
 12748  003CE4  6E22               	movwf	(adf4351_write_reg0@data+1)^0,c
 12749  003CE6  0E00               	movlw	0
 12750  003CE8  6E23               	movwf	(adf4351_write_reg0@data+2)^0,c
 12751  003CEA  0E00               	movlw	0
 12752  003CEC  6E24               	movwf	(adf4351_write_reg0@data+3)^0,c
 12753                           
 12754                           ;src/driver/adf4351.c: 310:         data |= (((u32)ctx->reg0.frac&0x0FFF)<<3);
 12755  003CEE  EE20 F004          	lfsr	2,4
 12756  003CF2  5019               	movf	adf4351_write_reg0@ctx^0,w,c
 12757  003CF4  26D9               	addwf	fsr2l,f,c
 12758  003CF6  501A               	movf	(adf4351_write_reg0@ctx+1)^0,w,c
 12759  003CF8  22DA               	addwfc	fsr2h,f,c
 12760  003CFA  CFDE F01B          	movff	postinc2,??_adf4351_write_reg0
 12761  003CFE  CFDD F01C          	movff	postdec2,??_adf4351_write_reg0+1
 12762  003D02  0EFF               	movlw	255
 12763  003D04  141B               	andwf	??_adf4351_write_reg0^0,w,c
 12764  003D06  6E1D               	movwf	(??_adf4351_write_reg0+2)^0,c
 12765  003D08  0E0F               	movlw	15
 12766  003D0A  141C               	andwf	(??_adf4351_write_reg0+1)^0,w,c
 12767  003D0C  6E1E               	movwf	(??_adf4351_write_reg0+3)^0,c
 12768  003D0E  6A1F               	clrf	(??_adf4351_write_reg0+4)^0,c
 12769  003D10  6A20               	clrf	(??_adf4351_write_reg0+5)^0,c
 12770  003D12  0E03               	movlw	3
 12771  003D14                     u9305:
 12772  003D14  90D8               	bcf	status,0,c
 12773  003D16  361D               	rlcf	(??_adf4351_write_reg0+2)^0,f,c
 12774  003D18  361E               	rlcf	(??_adf4351_write_reg0+3)^0,f,c
 12775  003D1A  361F               	rlcf	(??_adf4351_write_reg0+4)^0,f,c
 12776  003D1C  3620               	rlcf	(??_adf4351_write_reg0+5)^0,f,c
 12777  003D1E  2EE8               	decfsz	wreg,f,c
 12778  003D20  D7F9               	goto	u9305
 12779  003D22  501D               	movf	(??_adf4351_write_reg0+2)^0,w,c
 12780  003D24  1221               	iorwf	adf4351_write_reg0@data^0,f,c
 12781  003D26  501E               	movf	(??_adf4351_write_reg0+3)^0,w,c
 12782  003D28  1222               	iorwf	(adf4351_write_reg0@data+1)^0,f,c
 12783  003D2A  501F               	movf	(??_adf4351_write_reg0+4)^0,w,c
 12784  003D2C  1223               	iorwf	(adf4351_write_reg0@data+2)^0,f,c
 12785  003D2E  5020               	movf	(??_adf4351_write_reg0+5)^0,w,c
 12786  003D30  1224               	iorwf	(adf4351_write_reg0@data+3)^0,f,c
 12787                           
 12788                           ;src/driver/adf4351.c: 311:         data |= (((u32)ctx->reg0.integer&0xFFFF)<<15);
 12789  003D32  EE20 F002          	lfsr	2,2
 12790  003D36  5019               	movf	adf4351_write_reg0@ctx^0,w,c
 12791  003D38  26D9               	addwf	fsr2l,f,c
 12792  003D3A  501A               	movf	(adf4351_write_reg0@ctx+1)^0,w,c
 12793  003D3C  22DA               	addwfc	fsr2h,f,c
 12794  003D3E  CFDE F01B          	movff	postinc2,??_adf4351_write_reg0
 12795  003D42  CFDD F01C          	movff	postdec2,??_adf4351_write_reg0+1
 12796  003D46  501B               	movf	??_adf4351_write_reg0^0,w,c
 12797  003D48  6E1D               	movwf	(??_adf4351_write_reg0+2)^0,c
 12798  003D4A  501C               	movf	(??_adf4351_write_reg0+1)^0,w,c
 12799  003D4C  6E1E               	movwf	(??_adf4351_write_reg0+3)^0,c
 12800  003D4E  6A1F               	clrf	(??_adf4351_write_reg0+4)^0,c
 12801  003D50  6A20               	clrf	(??_adf4351_write_reg0+5)^0,c
 12802  003D52  0E0F               	movlw	15
 12803  003D54                     u9315:
 12804  003D54  90D8               	bcf	status,0,c
 12805  003D56  361D               	rlcf	(??_adf4351_write_reg0+2)^0,f,c
 12806  003D58  361E               	rlcf	(??_adf4351_write_reg0+3)^0,f,c
 12807  003D5A  361F               	rlcf	(??_adf4351_write_reg0+4)^0,f,c
 12808  003D5C  3620               	rlcf	(??_adf4351_write_reg0+5)^0,f,c
 12809  003D5E  2EE8               	decfsz	wreg,f,c
 12810  003D60  D7F9               	goto	u9315
 12811  003D62  501D               	movf	(??_adf4351_write_reg0+2)^0,w,c
 12812  003D64  1221               	iorwf	adf4351_write_reg0@data^0,f,c
 12813  003D66  501E               	movf	(??_adf4351_write_reg0+3)^0,w,c
 12814  003D68  1222               	iorwf	(adf4351_write_reg0@data+1)^0,f,c
 12815  003D6A  501F               	movf	(??_adf4351_write_reg0+4)^0,w,c
 12816  003D6C  1223               	iorwf	(adf4351_write_reg0@data+2)^0,f,c
 12817  003D6E  5020               	movf	(??_adf4351_write_reg0+5)^0,w,c
 12818  003D70  1224               	iorwf	(adf4351_write_reg0@data+3)^0,f,c
 12819                           
 12820                           ;src/driver/adf4351.c: 314:         adf4351_write_latch(data);
 12821  003D72  C021  F00D         	movff	adf4351_write_reg0@data,adf4351_write_latch@value
 12822  003D76  C022  F00E         	movff	adf4351_write_reg0@data+1,adf4351_write_latch@value+1
 12823  003D7A  C023  F00F         	movff	adf4351_write_reg0@data+2,adf4351_write_latch@value+2
 12824  003D7E  C024  F010         	movff	adf4351_write_reg0@data+3,adf4351_write_latch@value+3
 12825  003D82  ECB8  F014         	call	_adf4351_write_latch	;wreg free
 12826  003D86  0012               	return		;funcret
 12827  003D88                     __end_of_adf4351_write_reg0:
 12828                           	opt callstack 0
 12829                           
 12830 ;; *************** function _adf4351_write_latch *****************
 12831 ;; Defined at:
 12832 ;;		line 429 in file "src/driver/adf4351.c"
 12833 ;; Parameters:    Size  Location     Type
 12834 ;;  value           4   12[COMRAM] unsigned long 
 12835 ;; Auto vars:     Size  Location     Type
 12836 ;;  mask            4   20[COMRAM] unsigned long 
 12837 ;; Return value:  Size  Location     Type
 12838 ;;                  1    wreg      void 
 12839 ;; Registers used:
 12840 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 12841 ;; Tracked objects:
 12842 ;;		On entry : 0/0
 12843 ;;		On exit  : 0/0
 12844 ;;		Unchanged: 0/0
 12845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12846 ;;      Params:         4       0       0       0       0       0       0
 12847 ;;      Locals:         4       0       0       0       0       0       0
 12848 ;;      Temps:          4       0       0       0       0       0       0
 12849 ;;      Totals:        12       0       0       0       0       0       0
 12850 ;;Total ram usage:       12 bytes
 12851 ;; Hardware stack levels used:    1
 12852 ;; Hardware stack levels required when called:    2
 12853 ;; This function calls:
 12854 ;;		Nothing
 12855 ;; This function is called by:
 12856 ;;		_adf4351_write_reg0
 12857 ;;		_adf4351_write_reg1
 12858 ;;		_adf4351_write_reg2
 12859 ;;		_adf4351_write_reg3
 12860 ;;		_adf4351_write_reg4
 12861 ;;		_adf4351_write_reg5
 12862 ;; This function uses a non-reentrant model
 12863 ;;
 12864                           
 12865                           	psect	text56
 12866  002970                     __ptext56:
 12867                           	opt callstack 0
 12868  002970                     _adf4351_write_latch:
 12869                           	opt callstack 23
 12870                           
 12871                           ;src/driver/adf4351.c: 429: static void adf4351_write_latch(u32 value);src/driver/adf435
      +                          1.c: 430: {;src/driver/adf4351.c: 432:     u32 mask = 0x80000000ULL;
 12872                           
 12873                           ;incstack = 0
 12874  002970  0E00               	movlw	0
 12875  002972  6E15               	movwf	adf4351_write_latch@mask^0,c
 12876  002974  0E00               	movlw	0
 12877  002976  6E16               	movwf	(adf4351_write_latch@mask+1)^0,c
 12878  002978  0E00               	movlw	0
 12879  00297A  6E17               	movwf	(adf4351_write_latch@mask+2)^0,c
 12880  00297C  0E80               	movlw	128
 12881  00297E  6E18               	movwf	(adf4351_write_latch@mask+3)^0,c
 12882                           
 12883                           ;src/driver/adf4351.c: 434:     *((PIN_SIO_CLK)->pPORT) &= ~(PIN_SIO_CLK)->mask;
 12884  002980  0E05               	movlw	low (_PIN_SIO_CLK_DEF+4)
 12885  002982  6EF6               	movwf	tblptrl,c
 12886  002984  0E7D               	movlw	high (_PIN_SIO_CLK_DEF+4)
 12887  002986  6EF7               	movwf	tblptrh,c
 12888  002988                     	if	0	;tblptru may be non-zero
 12889  002988                     	endif
 12890  002988                     	if	0	;tblptru may be non-zero
 12891  002988                     	endif
 12892  002988  0008               	tblrd		*
 12893  00298A  50F5               	movf	tablat,w,c
 12894  00298C  0AFF               	xorlw	255
 12895  00298E  6E11               	movwf	??_adf4351_write_latch^0,c
 12896  002990  0E01               	movlw	low _PIN_SIO_CLK_DEF
 12897  002992  6EF6               	movwf	tblptrl,c
 12898  002994                     	if	1	;There is more than 1 active tblptr byte
 12899  002994  0E7D               	movlw	high _PIN_SIO_CLK_DEF
 12900  002996  6EF7               	movwf	tblptrh,c
 12901  002998                     	endif
 12902  002998                     	if	0	;There are less than 3 active tblptr bytes
 12903  002998                     	endif
 12904  002998  0009               	tblrd		*+
 12905  00299A  CFF5 F012          	movff	tablat,??_adf4351_write_latch+1
 12906  00299E  0009               	tblrd		*+
 12907  0029A0  CFF5 F013          	movff	tablat,??_adf4351_write_latch+2
 12908  0029A4  C012  FFD9         	movff	??_adf4351_write_latch+1,fsr2l
 12909  0029A8  C013  FFDA         	movff	??_adf4351_write_latch+2,fsr2h
 12910  0029AC  5011               	movf	??_adf4351_write_latch^0,w,c
 12911  0029AE  16DF               	andwf	indf2,f,c
 12912                           
 12913                           ;src/driver/adf4351.c: 435:     _delay((unsigned long)((1)*(8000000/4000000.0)));
 12914  0029B0  D000               	nop2		;2 cycle nop
 12915                           
 12916                           ;src/driver/adf4351.c: 437:     while(mask) {
 12917  0029B2  D079               	goto	l6647
 12918  0029B4                     l6633:
 12919                           
 12920                           ;src/driver/adf4351.c: 438:         if(value&mask) {
 12921  0029B4  5015               	movf	adf4351_write_latch@mask^0,w,c
 12922  0029B6  140D               	andwf	adf4351_write_latch@value^0,w,c
 12923  0029B8  6E11               	movwf	??_adf4351_write_latch^0,c
 12924  0029BA  5016               	movf	(adf4351_write_latch@mask+1)^0,w,c
 12925  0029BC  140E               	andwf	(adf4351_write_latch@value+1)^0,w,c
 12926  0029BE  6E12               	movwf	(??_adf4351_write_latch+1)^0,c
 12927  0029C0  5017               	movf	(adf4351_write_latch@mask+2)^0,w,c
 12928  0029C2  140F               	andwf	(adf4351_write_latch@value+2)^0,w,c
 12929  0029C4  6E13               	movwf	(??_adf4351_write_latch+2)^0,c
 12930  0029C6  5018               	movf	(adf4351_write_latch@mask+3)^0,w,c
 12931  0029C8  1410               	andwf	(adf4351_write_latch@value+3)^0,w,c
 12932  0029CA  6E14               	movwf	(??_adf4351_write_latch+3)^0,c
 12933  0029CC  5011               	movf	??_adf4351_write_latch^0,w,c
 12934  0029CE  1012               	iorwf	(??_adf4351_write_latch+1)^0,w,c
 12935  0029D0  1013               	iorwf	(??_adf4351_write_latch+2)^0,w,c
 12936  0029D2  1014               	iorwf	(??_adf4351_write_latch+3)^0,w,c
 12937  0029D4  B4D8               	btfsc	status,2,c
 12938  0029D6  D018               	goto	l6637
 12939                           
 12940                           ;src/driver/adf4351.c: 439:             *((PIN_SIO_DATA)->pPORT) |= (PIN_SIO_DATA)->mask
      +                          ;
 12941  0029D8  0E0A               	movlw	low (_PIN_SIO_DATA_DEF+4)
 12942  0029DA  6EF6               	movwf	tblptrl,c
 12943  0029DC  0E7D               	movlw	high (_PIN_SIO_DATA_DEF+4)
 12944  0029DE  6EF7               	movwf	tblptrh,c
 12945  0029E0                     	if	0	;tblptru may be non-zero
 12946  0029E0                     	endif
 12947  0029E0                     	if	0	;tblptru may be non-zero
 12948  0029E0                     	endif
 12949  0029E0  0008               	tblrd		*
 12950  0029E2  CFF5 F011          	movff	tablat,??_adf4351_write_latch
 12951  0029E6  0E06               	movlw	low _PIN_SIO_DATA_DEF
 12952  0029E8  6EF6               	movwf	tblptrl,c
 12953  0029EA                     	if	1	;There is more than 1 active tblptr byte
 12954  0029EA  0E7D               	movlw	high _PIN_SIO_DATA_DEF
 12955  0029EC  6EF7               	movwf	tblptrh,c
 12956  0029EE                     	endif
 12957  0029EE                     	if	0	;There are less than 3 active tblptr bytes
 12958  0029EE                     	endif
 12959  0029EE  0009               	tblrd		*+
 12960  0029F0  CFF5 F012          	movff	tablat,??_adf4351_write_latch+1
 12961  0029F4  0009               	tblrd		*+
 12962  0029F6  CFF5 F013          	movff	tablat,??_adf4351_write_latch+2
 12963  0029FA  C012  FFD9         	movff	??_adf4351_write_latch+1,fsr2l
 12964  0029FE  C013  FFDA         	movff	??_adf4351_write_latch+2,fsr2h
 12965  002A02  5011               	movf	??_adf4351_write_latch^0,w,c
 12966  002A04  12DF               	iorwf	indf2,f,c
 12967                           
 12968                           ;src/driver/adf4351.c: 440:         } else {
 12969  002A06  D018               	goto	l6639
 12970  002A08                     l6637:
 12971                           
 12972                           ;src/driver/adf4351.c: 441:             *((PIN_SIO_DATA)->pPORT) &= ~(PIN_SIO_DATA)->mas
      +                          k;
 12973  002A08  0E0A               	movlw	low (_PIN_SIO_DATA_DEF+4)
 12974  002A0A  6EF6               	movwf	tblptrl,c
 12975  002A0C  0E7D               	movlw	high (_PIN_SIO_DATA_DEF+4)
 12976  002A0E  6EF7               	movwf	tblptrh,c
 12977  002A10                     	if	0	;tblptru may be non-zero
 12978  002A10                     	endif
 12979  002A10                     	if	0	;tblptru may be non-zero
 12980  002A10                     	endif
 12981  002A10  0008               	tblrd		*
 12982  002A12  50F5               	movf	tablat,w,c
 12983  002A14  0AFF               	xorlw	255
 12984  002A16  6E11               	movwf	??_adf4351_write_latch^0,c
 12985  002A18  0E06               	movlw	low _PIN_SIO_DATA_DEF
 12986  002A1A  6EF6               	movwf	tblptrl,c
 12987  002A1C                     	if	1	;There is more than 1 active tblptr byte
 12988  002A1C  0E7D               	movlw	high _PIN_SIO_DATA_DEF
 12989  002A1E  6EF7               	movwf	tblptrh,c
 12990  002A20                     	endif
 12991  002A20                     	if	0	;There are less than 3 active tblptr bytes
 12992  002A20                     	endif
 12993  002A20  0009               	tblrd		*+
 12994  002A22  CFF5 F012          	movff	tablat,??_adf4351_write_latch+1
 12995  002A26  0009               	tblrd		*+
 12996  002A28  CFF5 F013          	movff	tablat,??_adf4351_write_latch+2
 12997  002A2C  C012  FFD9         	movff	??_adf4351_write_latch+1,fsr2l
 12998  002A30  C013  FFDA         	movff	??_adf4351_write_latch+2,fsr2h
 12999  002A34  5011               	movf	??_adf4351_write_latch^0,w,c
 13000  002A36  16DF               	andwf	indf2,f,c
 13001  002A38                     l6639:
 13002                           
 13003                           ;src/driver/adf4351.c: 443:         _delay((unsigned long)((1)*(8000000/4000000.0)));
 13004  002A38  D000               	nop2		;2 cycle nop
 13005                           
 13006                           ;src/driver/adf4351.c: 444:         *((PIN_SIO_CLK)->pPORT) |= (PIN_SIO_CLK)->mask;
 13007  002A3A  0E05               	movlw	low (_PIN_SIO_CLK_DEF+4)
 13008  002A3C  6EF6               	movwf	tblptrl,c
 13009  002A3E  0E7D               	movlw	high (_PIN_SIO_CLK_DEF+4)
 13010  002A40  6EF7               	movwf	tblptrh,c
 13011  002A42                     	if	0	;tblptru may be non-zero
 13012  002A42                     	endif
 13013  002A42                     	if	0	;tblptru may be non-zero
 13014  002A42                     	endif
 13015  002A42  0008               	tblrd		*
 13016  002A44  CFF5 F011          	movff	tablat,??_adf4351_write_latch
 13017  002A48  0E01               	movlw	low _PIN_SIO_CLK_DEF
 13018  002A4A  6EF6               	movwf	tblptrl,c
 13019  002A4C                     	if	1	;There is more than 1 active tblptr byte
 13020  002A4C  0E7D               	movlw	high _PIN_SIO_CLK_DEF
 13021  002A4E  6EF7               	movwf	tblptrh,c
 13022  002A50                     	endif
 13023  002A50                     	if	0	;There are less than 3 active tblptr bytes
 13024  002A50                     	endif
 13025  002A50  0009               	tblrd		*+
 13026  002A52  CFF5 F012          	movff	tablat,??_adf4351_write_latch+1
 13027  002A56  0009               	tblrd		*+
 13028  002A58  CFF5 F013          	movff	tablat,??_adf4351_write_latch+2
 13029  002A5C  C012  FFD9         	movff	??_adf4351_write_latch+1,fsr2l
 13030  002A60  C013  FFDA         	movff	??_adf4351_write_latch+2,fsr2h
 13031  002A64  5011               	movf	??_adf4351_write_latch^0,w,c
 13032  002A66  12DF               	iorwf	indf2,f,c
 13033                           
 13034                           ;src/driver/adf4351.c: 445:         _delay((unsigned long)((1)*(8000000/4000000.0)));
 13035  002A68  D000               	nop2		;2 cycle nop
 13036                           
 13037                           ;src/driver/adf4351.c: 446:         *((PIN_SIO_CLK)->pPORT) &= ~(PIN_SIO_CLK)->mask;
 13038  002A6A  0E05               	movlw	low (_PIN_SIO_CLK_DEF+4)
 13039  002A6C  6EF6               	movwf	tblptrl,c
 13040  002A6E  0E7D               	movlw	high (_PIN_SIO_CLK_DEF+4)
 13041  002A70  6EF7               	movwf	tblptrh,c
 13042  002A72                     	if	0	;tblptru may be non-zero
 13043  002A72                     	endif
 13044  002A72                     	if	0	;tblptru may be non-zero
 13045  002A72                     	endif
 13046  002A72  0008               	tblrd		*
 13047  002A74  50F5               	movf	tablat,w,c
 13048  002A76  0AFF               	xorlw	255
 13049  002A78  6E11               	movwf	??_adf4351_write_latch^0,c
 13050  002A7A  0E01               	movlw	low _PIN_SIO_CLK_DEF
 13051  002A7C  6EF6               	movwf	tblptrl,c
 13052  002A7E                     	if	1	;There is more than 1 active tblptr byte
 13053  002A7E  0E7D               	movlw	high _PIN_SIO_CLK_DEF
 13054  002A80  6EF7               	movwf	tblptrh,c
 13055  002A82                     	endif
 13056  002A82                     	if	0	;There are less than 3 active tblptr bytes
 13057  002A82                     	endif
 13058  002A82  0009               	tblrd		*+
 13059  002A84  CFF5 F012          	movff	tablat,??_adf4351_write_latch+1
 13060  002A88  0009               	tblrd		*+
 13061  002A8A  CFF5 F013          	movff	tablat,??_adf4351_write_latch+2
 13062  002A8E  C012  FFD9         	movff	??_adf4351_write_latch+1,fsr2l
 13063  002A92  C013  FFDA         	movff	??_adf4351_write_latch+2,fsr2h
 13064  002A96  5011               	movf	??_adf4351_write_latch^0,w,c
 13065  002A98  16DF               	andwf	indf2,f,c
 13066                           
 13067                           ;src/driver/adf4351.c: 447:         _delay((unsigned long)((1)*(8000000/4000000.0)));
 13068  002A9A  D000               	nop2		;2 cycle nop
 13069                           
 13070                           ;src/driver/adf4351.c: 449:         mask >>= 1;
 13071  002A9C  90D8               	bcf	status,0,c
 13072  002A9E  3218               	rrcf	(adf4351_write_latch@mask+3)^0,f,c
 13073  002AA0  3217               	rrcf	(adf4351_write_latch@mask+2)^0,f,c
 13074  002AA2  3216               	rrcf	(adf4351_write_latch@mask+1)^0,f,c
 13075  002AA4  3215               	rrcf	adf4351_write_latch@mask^0,f,c
 13076  002AA6                     l6647:
 13077                           
 13078                           ;src/driver/adf4351.c: 437:     while(mask) {
 13079  002AA6  5015               	movf	adf4351_write_latch@mask^0,w,c
 13080  002AA8  1016               	iorwf	(adf4351_write_latch@mask+1)^0,w,c
 13081  002AAA  1017               	iorwf	(adf4351_write_latch@mask+2)^0,w,c
 13082  002AAC  1018               	iorwf	(adf4351_write_latch@mask+3)^0,w,c
 13083  002AAE  A4D8               	btfss	status,2,c
 13084  002AB0  D781               	goto	l6633
 13085                           
 13086                           ;src/driver/adf4351.c: 453:  *((PIN_ADF_LE)->pPORT) |= (PIN_ADF_LE)->mask;
 13087  002AB2  0E0F               	movlw	low (_PIN_ADF_LE_DEF+4)
 13088  002AB4  6EF6               	movwf	tblptrl,c
 13089  002AB6  0E7D               	movlw	high (_PIN_ADF_LE_DEF+4)
 13090  002AB8  6EF7               	movwf	tblptrh,c
 13091  002ABA                     	if	0	;tblptru may be non-zero
 13092  002ABA                     	endif
 13093  002ABA                     	if	0	;tblptru may be non-zero
 13094  002ABA                     	endif
 13095  002ABA  0008               	tblrd		*
 13096  002ABC  CFF5 F011          	movff	tablat,??_adf4351_write_latch
 13097  002AC0  0E0B               	movlw	low _PIN_ADF_LE_DEF
 13098  002AC2  6EF6               	movwf	tblptrl,c
 13099  002AC4                     	if	1	;There is more than 1 active tblptr byte
 13100  002AC4  0E7D               	movlw	high _PIN_ADF_LE_DEF
 13101  002AC6  6EF7               	movwf	tblptrh,c
 13102  002AC8                     	endif
 13103  002AC8                     	if	0	;There are less than 3 active tblptr bytes
 13104  002AC8                     	endif
 13105  002AC8  0009               	tblrd		*+
 13106  002ACA  CFF5 F012          	movff	tablat,??_adf4351_write_latch+1
 13107  002ACE  0009               	tblrd		*+
 13108  002AD0  CFF5 F013          	movff	tablat,??_adf4351_write_latch+2
 13109  002AD4  C012  FFD9         	movff	??_adf4351_write_latch+1,fsr2l
 13110  002AD8  C013  FFDA         	movff	??_adf4351_write_latch+2,fsr2h
 13111  002ADC  5011               	movf	??_adf4351_write_latch^0,w,c
 13112  002ADE  12DF               	iorwf	indf2,f,c
 13113                           
 13114                           ;src/driver/adf4351.c: 454:  _delay((unsigned long)((1)*(8000000/4000000.0)));
 13115  002AE0  D000               	nop2		;2 cycle nop
 13116                           
 13117                           ;src/driver/adf4351.c: 455:  *((PIN_ADF_LE)->pPORT) &= ~(PIN_ADF_LE)->mask;
 13118  002AE2  0E0F               	movlw	low (_PIN_ADF_LE_DEF+4)
 13119  002AE4  6EF6               	movwf	tblptrl,c
 13120  002AE6  0E7D               	movlw	high (_PIN_ADF_LE_DEF+4)
 13121  002AE8  6EF7               	movwf	tblptrh,c
 13122  002AEA                     	if	0	;tblptru may be non-zero
 13123  002AEA                     	endif
 13124  002AEA                     	if	0	;tblptru may be non-zero
 13125  002AEA                     	endif
 13126  002AEA  0008               	tblrd		*
 13127  002AEC  50F5               	movf	tablat,w,c
 13128  002AEE  0AFF               	xorlw	255
 13129  002AF0  6E11               	movwf	??_adf4351_write_latch^0,c
 13130  002AF2  0E0B               	movlw	low _PIN_ADF_LE_DEF
 13131  002AF4  6EF6               	movwf	tblptrl,c
 13132  002AF6                     	if	1	;There is more than 1 active tblptr byte
 13133  002AF6  0E7D               	movlw	high _PIN_ADF_LE_DEF
 13134  002AF8  6EF7               	movwf	tblptrh,c
 13135  002AFA                     	endif
 13136  002AFA                     	if	0	;There are less than 3 active tblptr bytes
 13137  002AFA                     	endif
 13138  002AFA  0009               	tblrd		*+
 13139  002AFC  CFF5 F012          	movff	tablat,??_adf4351_write_latch+1
 13140  002B00  0009               	tblrd		*+
 13141  002B02  CFF5 F013          	movff	tablat,??_adf4351_write_latch+2
 13142  002B06  C012  FFD9         	movff	??_adf4351_write_latch+1,fsr2l
 13143  002B0A  C013  FFDA         	movff	??_adf4351_write_latch+2,fsr2h
 13144  002B0E  5011               	movf	??_adf4351_write_latch^0,w,c
 13145  002B10  16DF               	andwf	indf2,f,c
 13146                           
 13147                           ;src/driver/adf4351.c: 456:  _delay((unsigned long)((50)*(8000000/4000000.0)));
 13148  002B12  0E21               	movlw	33
 13149  002B14                     u11367:
 13150  002B14  2EE8               	decfsz	wreg,f,c
 13151  002B16  D7FE               	bra	u11367
 13152  002B18  F000               	nop	
 13153  002B1A  0012               	return		;funcret
 13154  002B1C                     __end_of_adf4351_write_latch:
 13155                           	opt callstack 0
 13156                           
 13157 ;; *************** function _adf4351_get_lock *****************
 13158 ;; Defined at:
 13159 ;;		line 86 in file "src/driver/adf4351.c"
 13160 ;; Parameters:    Size  Location     Type
 13161 ;;  ctx             2   28[BANK0 ] PTR struct adf4351_ctx
 13162 ;;		 -> g_adf4351(55), 
 13163 ;; Auto vars:     Size  Location     Type
 13164 ;;  lock            1   35[BANK0 ] unsigned char 
 13165 ;; Return value:  Size  Location     Type
 13166 ;;                  2   28[BANK0 ] int 
 13167 ;; Registers used:
 13168 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13169 ;; Tracked objects:
 13170 ;;		On entry : 3F/0
 13171 ;;		On exit  : 3F/0
 13172 ;;		Unchanged: 0/0
 13173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13174 ;;      Params:         0       2       0       0       0       0       0
 13175 ;;      Locals:         0       3       0       0       0       0       0
 13176 ;;      Temps:          0       3       0       0       0       0       0
 13177 ;;      Totals:         0       8       0       0       0       0       0
 13178 ;;Total ram usage:        8 bytes
 13179 ;; Hardware stack levels used:    1
 13180 ;; Hardware stack levels required when called:   10
 13181 ;; This function calls:
 13182 ;;		_printf
 13183 ;; This function is called by:
 13184 ;;		_check_adf4351_lock
 13185 ;;		_pa_update
 13186 ;;		_update_led
 13187 ;;		_handle_cmd
 13188 ;; This function uses a non-reentrant model
 13189 ;;
 13190                           
 13191                           	psect	text57
 13192  004612                     __ptext57:
 13193                           	opt callstack 0
 13194  004612                     _adf4351_get_lock:
 13195                           	opt callstack 18
 13196                           
 13197                           ; BSR set to: 0
 13198                           ;src/driver/adf4351.c: 86: BOOL adf4351_get_lock(adf4351_ctx* ctx);src/driver/adf4351.c:
      +                           87: {;src/driver/adf4351.c: 88:  u8 lock = (((*((PIN_ADF_LOCK)->pPORT) & (PIN_ADF_LOCK)
      +                          ->mask) != 0)==0)?0:1;
 13199                           
 13200                           ;incstack = 0
 13201  004612  0E19               	movlw	low (_PIN_ADF_LOCK_DEF+4)
 13202  004614  6EF6               	movwf	tblptrl,c
 13203  004616  0E7D               	movlw	high (_PIN_ADF_LOCK_DEF+4)
 13204  004618  6EF7               	movwf	tblptrh,c
 13205  00461A                     	if	0	;tblptru may be non-zero
 13206  00461A                     	endif
 13207  00461A                     	if	0	;tblptru may be non-zero
 13208  00461A                     	endif
 13209  00461A  0008               	tblrd		*
 13210  00461C  CFF5 F0D7          	movff	tablat,??_adf4351_get_lock
 13211  004620  0E15               	movlw	low _PIN_ADF_LOCK_DEF
 13212  004622  6EF6               	movwf	tblptrl,c
 13213  004624                     	if	1	;There is more than 1 active tblptr byte
 13214  004624  0E7D               	movlw	high _PIN_ADF_LOCK_DEF
 13215  004626  6EF7               	movwf	tblptrh,c
 13216  004628                     	endif
 13217  004628                     	if	0	;There are less than 3 active tblptr bytes
 13218  004628                     	endif
 13219  004628  0009               	tblrd		*+
 13220  00462A  CFF5 F0D8          	movff	tablat,??_adf4351_get_lock+1
 13221  00462E  0009               	tblrd		*+
 13222  004630  CFF5 F0D9          	movff	tablat,??_adf4351_get_lock+2
 13223  004634  C0D8  FFD9         	movff	??_adf4351_get_lock+1,fsr2l
 13224  004638  C0D9  FFDA         	movff	??_adf4351_get_lock+2,fsr2h
 13225  00463C  50DF               	movf	indf2,w,c
 13226  00463E  15D7               	andwf	??_adf4351_get_lock& (0+255),w,b
 13227  004640  0900               	iorlw	0
 13228  004642  B4D8               	btfsc	status,2,c
 13229  004644  D002               	goto	u10470
 13230  004646  0E01               	movlw	1
 13231  004648  D001               	goto	u10480
 13232  00464A                     u10470:
 13233  00464A  0E00               	movlw	0
 13234  00464C                     u10480:
 13235  00464C  6FDC               	movwf	adf4351_get_lock@lock& (0+255),b
 13236                           
 13237                           ; BSR set to: 0
 13238                           ;src/driver/adf4351.c: 89:  static u8 lastlock = 255;;src/driver/adf4351.c: 91:  if(lock
      +                           != lastlock)
 13239  00464E  51FF               	movf	adf4351_get_lock@lastlock& (0+255),w,b
 13240  004650  19DC               	xorwf	adf4351_get_lock@lock& (0+255),w,b
 13241  004652  B4D8               	btfsc	status,2,c
 13242  004654  D017               	goto	l7793
 13243                           
 13244                           ; BSR set to: 0
 13245                           ;src/driver/adf4351.c: 92:  {;src/driver/adf4351.c: 93:   printf("UPC 00 09 ADF4351 %s\n
      +                          ",lock?"LOCKED":"UNLOCKED");
 13246  004656  51DC               	movf	adf4351_get_lock@lock& (0+255),w,b
 13247  004658  A4D8               	btfss	status,2,c
 13248  00465A  D004               	goto	l7787
 13249                           
 13250                           ; BSR set to: 0
 13251  00465C  0ECF               	movlw	low STR_3
 13252  00465E  6FDA               	movwf	_adf4351_get_lock$290& (0+255),b
 13253  004660  0E7F               	movlw	high STR_3
 13254  004662  D003               	goto	L15
 13255  004664                     l7787:
 13256                           
 13257                           ; BSR set to: 0
 13258  004664  0ED1               	movlw	low (STR_3+2)
 13259  004666  6FDA               	movwf	_adf4351_get_lock$290& (0+255),b
 13260  004668  0E7F               	movlw	high (STR_3+2)
 13261  00466A                     L15:
 13262  00466A  6FDB               	movwf	(_adf4351_get_lock$290+1)& (0+255),b
 13263                           
 13264                           ; BSR set to: 0
 13265  00466C  0E0D               	movlw	low STR_1
 13266  00466E  6FCB               	movwf	printf@fmt& (0+255),b
 13267  004670  0E7F               	movlw	high STR_1
 13268  004672  6FCC               	movwf	(printf@fmt+1)& (0+255),b
 13269  004674  C0DA  F0CD         	movff	_adf4351_get_lock$290,?_printf+2
 13270  004678  C0DB  F0CE         	movff	_adf4351_get_lock$290+1,?_printf+3
 13271  00467C  EC60  F027         	call	_printf	;wreg free
 13272                           
 13273                           ; BSR set to: 0
 13274                           ;src/driver/adf4351.c: 94:   lastlock = lock;
 13275  004680  C0DC  F0FF         	movff	adf4351_get_lock@lock,adf4351_get_lock@lastlock
 13276  004684                     l7793:
 13277                           
 13278                           ; BSR set to: 0
 13279                           ;src/driver/adf4351.c: 97:  return lock;
 13280  004684  C0DC  F0D5         	movff	adf4351_get_lock@lock,?_adf4351_get_lock
 13281  004688  6BD6               	clrf	(?_adf4351_get_lock+1)& (0+255),b
 13282                           
 13283                           ; BSR set to: 0
 13284  00468A  0012               	return		;funcret
 13285  00468C                     __end_of_adf4351_get_lock:
 13286                           	opt callstack 0
 13287                           
 13288 ;; *************** function _printf *****************
 13289 ;; Defined at:
 13290 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/printf.c"
 13291 ;; Parameters:    Size  Location     Type
 13292 ;;  fmt             2   18[BANK0 ] PTR const unsigned char 
 13293 ;;		 -> STR_37(35), STR_36(30), STR_35(31), STR_32(19), 
 13294 ;;		 -> STR_29(33), STR_28(17), STR_27(14), STR_26(14), 
 13295 ;;		 -> STR_25(17), STR_24(15), STR_23(15), STR_22(14), 
 13296 ;;		 -> STR_21(14), STR_20(27), STR_19(39), STR_18(14), 
 13297 ;;		 -> STR_17(19), STR_14(23), STR_11(44), STR_8(36), 
 13298 ;;		 -> STR_7(7), STR_6(55), STR_5(72), STR_4(74), 
 13299 ;;		 -> STR_1(22), 
 13300 ;; Auto vars:     Size  Location     Type
 13301 ;;  ret             2    0        int 
 13302 ;;  ap              1  100[COMRAM] PTR void [1]
 13303 ;;		 -> ?_printf(2), 
 13304 ;; Return value:  Size  Location     Type
 13305 ;;                  2   18[BANK0 ] int 
 13306 ;; Registers used:
 13307 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13308 ;; Tracked objects:
 13309 ;;		On entry : 3F/0
 13310 ;;		On exit  : 3F/0
 13311 ;;		Unchanged: 0/0
 13312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13313 ;;      Params:         0      10       0       0       0       0       0
 13314 ;;      Locals:         3       0       0       0       0       0       0
 13315 ;;      Temps:          0       0       0       0       0       0       0
 13316 ;;      Totals:         3      10       0       0       0       0       0
 13317 ;;Total ram usage:       13 bytes
 13318 ;; Hardware stack levels used:    1
 13319 ;; Hardware stack levels required when called:    9
 13320 ;; This function calls:
 13321 ;;		_vfprintf
 13322 ;; This function is called by:
 13323 ;;		_adf4351_get_lock
 13324 ;;		_adf4351_calc_rcnt_block
 13325 ;;		_receive_downconverter_data
 13326 ;;		_main
 13327 ;;		_check_adf4351_lock
 13328 ;;		_setLOCK_LED
 13329 ;;		_setPTT_LED
 13330 ;;		_handle_cmd
 13331 ;;		_alarm
 13332 ;; This function uses a non-reentrant model
 13333 ;;
 13334                           
 13335                           	psect	text58
 13336  004EC0                     __ptext58:
 13337                           	opt callstack 0
 13338  004EC0                     _printf:
 13339                           	opt callstack 18
 13340                           
 13341                           ; BSR set to: 0
 13342                           
 13343                           ; BSR set to: 0
 13344                           ;incstack = 0
 13345  004EC0  0ECD               	movlw	low (?_printf+2)
 13346  004EC2  6E65               	movwf	printf@ap^0,c
 13347                           
 13348                           ; BSR set to: 0
 13349  004EC4  0E00               	movlw	0
 13350  004EC6  6E5C               	movwf	vfprintf@fp^0,c
 13351  004EC8  0E00               	movlw	0
 13352  004ECA  6E5D               	movwf	(vfprintf@fp+1)^0,c
 13353  004ECC  C0CB  F05E         	movff	printf@fmt,vfprintf@fmt
 13354  004ED0  C0CC  F05F         	movff	printf@fmt+1,vfprintf@fmt+1
 13355  004ED4  0E65               	movlw	low printf@ap
 13356  004ED6  6E60               	movwf	vfprintf@ap^0,c
 13357  004ED8  ECB8  F025         	call	_vfprintf	;wreg free
 13358                           
 13359                           ; BSR set to: 0
 13360  004EDC  0012               	return		;funcret
 13361  004EDE                     __end_of_printf:
 13362                           	opt callstack 0
 13363                           
 13364 ;; *************** function _vfprintf *****************
 13365 ;; Defined at:
 13366 ;;		line 1368 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c"
 13367 ;; Parameters:    Size  Location     Type
 13368 ;;  fp              2   91[COMRAM] PTR struct _IO_FILE
 13369 ;;		 -> NULL(0), 
 13370 ;;  fmt             2   93[COMRAM] PTR const unsigned char 
 13371 ;;		 -> STR_37(35), STR_36(30), STR_35(31), STR_32(19), 
 13372 ;;		 -> STR_29(33), STR_28(17), STR_27(14), STR_26(14), 
 13373 ;;		 -> STR_25(17), STR_24(15), STR_23(15), STR_22(14), 
 13374 ;;		 -> STR_21(14), STR_20(27), STR_19(39), STR_18(14), 
 13375 ;;		 -> STR_17(19), STR_14(23), STR_11(44), STR_8(36), 
 13376 ;;		 -> STR_7(7), STR_6(55), STR_5(72), STR_4(74), 
 13377 ;;		 -> STR_1(22), 
 13378 ;;  ap              1   95[COMRAM] PTR PTR void 
 13379 ;;		 -> printf@ap(1), 
 13380 ;; Auto vars:     Size  Location     Type
 13381 ;;  cfmt            2   96[COMRAM] PTR unsigned char 
 13382 ;;		 -> STR_37(35), STR_36(30), STR_35(31), STR_32(19), 
 13383 ;;		 -> STR_29(33), STR_28(17), STR_27(14), STR_26(14), 
 13384 ;;		 -> STR_25(17), STR_24(15), STR_23(15), STR_22(14), 
 13385 ;;		 -> STR_21(14), STR_20(27), STR_19(39), STR_18(14), 
 13386 ;;		 -> STR_17(19), STR_14(23), STR_11(44), STR_8(36), 
 13387 ;;		 -> STR_7(7), STR_6(55), STR_5(72), STR_4(74), 
 13388 ;;		 -> STR_1(22), 
 13389 ;; Return value:  Size  Location     Type
 13390 ;;                  2   91[COMRAM] int 
 13391 ;; Registers used:
 13392 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13393 ;; Tracked objects:
 13394 ;;		On entry : 3F/0
 13395 ;;		On exit  : 3F/0
 13396 ;;		Unchanged: 0/0
 13397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13398 ;;      Params:         5       0       0       0       0       0       0
 13399 ;;      Locals:         2       0       0       0       0       0       0
 13400 ;;      Temps:          0       0       0       0       0       0       0
 13401 ;;      Totals:         7       0       0       0       0       0       0
 13402 ;;Total ram usage:        7 bytes
 13403 ;; Hardware stack levels used:    1
 13404 ;; Hardware stack levels required when called:    8
 13405 ;; This function calls:
 13406 ;;		_vfpfcnvrt
 13407 ;; This function is called by:
 13408 ;;		_printf
 13409 ;; This function uses a non-reentrant model
 13410 ;;
 13411                           
 13412                           	psect	text59
 13413  004B70                     __ptext59:
 13414                           	opt callstack 0
 13415  004B70                     _vfprintf:
 13416                           	opt callstack 18
 13417                           
 13418                           ; BSR set to: 0
 13419                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1368: int vfprintf(FILE *fp, 
      +                          const char *fmt, va_list ap);/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1
      +                          369: {;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1371:     char *cfmt;;/
      +                          opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1373:     cfmt = (char *)fmt;
 13420                           
 13421                           ; BSR set to: 0
 13422                           ;incstack = 0
 13423  004B70  C05E  F061         	movff	vfprintf@fmt,vfprintf@cfmt
 13424  004B74  C05F  F062         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
 13425                           
 13426                           ; BSR set to: 0
 13427                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1374:     nout = 0;
 13428  004B78  0E00               	movlw	0
 13429  004B7A  6F85               	movwf	(_nout+1)& (0+255),b
 13430  004B7C  0E00               	movlw	0
 13431  004B7E  6F84               	movwf	_nout& (0+255),b
 13432                           
 13433                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1375:     while (*cfmt) {
 13434  004B80  D00F               	goto	l6725
 13435  004B82                     l6723:
 13436                           
 13437                           ; BSR set to: 0
 13438                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1376:         nout += vfpfcnv
      +                          rt(fp, &cfmt, ap);
 13439  004B82  C05C  F04B         	movff	vfprintf@fp,vfpfcnvrt@fp
 13440  004B86  C05D  F04C         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
 13441  004B8A  0E61               	movlw	low vfprintf@cfmt
 13442  004B8C  6E4D               	movwf	vfpfcnvrt@fmt^0,c
 13443  004B8E  C060  F04E         	movff	vfprintf@ap,vfpfcnvrt@ap
 13444  004B92  EC79  F002         	call	_vfpfcnvrt	;wreg free
 13445  004B96  504B               	movf	?_vfpfcnvrt^0,w,c
 13446  004B98  0100               	movlb	0	; () banked
 13447  004B9A  2784               	addwf	_nout& (0+255),f,b
 13448  004B9C  504C               	movf	(?_vfpfcnvrt+1)^0,w,c
 13449  004B9E  2385               	addwfc	(_nout+1)& (0+255),f,b
 13450  004BA0                     l6725:
 13451                           
 13452                           ; BSR set to: 0
 13453                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1375:     while (*cfmt) {
 13454  004BA0  C061  FFF6         	movff	vfprintf@cfmt,tblptrl
 13455  004BA4  C062  FFF7         	movff	vfprintf@cfmt+1,tblptrh
 13456  004BA8                     	if	0	;tblptru may be non-zero
 13457  004BA8                     	endif
 13458  004BA8                     	if	0	;tblptru may be non-zero
 13459  004BA8                     	endif
 13460  004BA8  0008               	tblrd		*
 13461  004BAA  50F5               	movf	tablat,w,c
 13462  004BAC  0900               	iorlw	0
 13463  004BAE  A4D8               	btfss	status,2,c
 13464  004BB0  D7E8               	goto	l6723
 13465                           
 13466                           ; BSR set to: 0
 13467                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1378:     return nout;
 13468  004BB2  C084  F05C         	movff	_nout,?_vfprintf
 13469  004BB6  C085  F05D         	movff	_nout+1,?_vfprintf+1
 13470                           
 13471                           ; BSR set to: 0
 13472  004BBA  0012               	return		;funcret
 13473  004BBC                     __end_of_vfprintf:
 13474                           	opt callstack 0
 13475                           
 13476 ;; *************** function _vfpfcnvrt *****************
 13477 ;; Defined at:
 13478 ;;		line 670 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c"
 13479 ;; Parameters:    Size  Location     Type
 13480 ;;  fp              2   74[COMRAM] PTR struct _IO_FILE
 13481 ;;		 -> NULL(0), 
 13482 ;;  fmt             1   76[COMRAM] PTR PTR unsigned char 
 13483 ;;		 -> vfprintf@cfmt(2), 
 13484 ;;  ap              1   77[COMRAM] PTR PTR void 
 13485 ;;		 -> printf@ap(1), 
 13486 ;; Auto vars:     Size  Location     Type
 13487 ;;  llu             8   10[BANK0 ] unsigned long long 
 13488 ;;  ll              8    2[BANK0 ] long long 
 13489 ;;  f               4    0        long long 
 13490 ;;  vp              3    0        PTR void 
 13491 ;;  ct              3    0        unsigned char [3]
 13492 ;;  cp              2    0[BANK0 ] PTR unsigned char 
 13493 ;;		 -> ?_printf(2), calc_power@v(2), STR_34(4), STR_33(3), 
 13494 ;;		 -> STR_31(4), STR_30(3), STR_16(3), STR_15(3), 
 13495 ;;		 -> STR_13(5), STR_12(5), STR_10(5), STR_9(5), 
 13496 ;;		 -> down_rxbuf(101), STR_3(9), STR_2(7), 
 13497 ;;  i               2    0        int 
 13498 ;;  done            2    0        int 
 13499 ;;  c               1    0        unsigned char 
 13500 ;; Return value:  Size  Location     Type
 13501 ;;                  2   74[COMRAM] int 
 13502 ;; Registers used:
 13503 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13504 ;; Tracked objects:
 13505 ;;		On entry : 3F/0
 13506 ;;		On exit  : 0/0
 13507 ;;		Unchanged: 0/0
 13508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13509 ;;      Params:         4       0       0       0       0       0       0
 13510 ;;      Locals:         0      18       0       0       0       0       0
 13511 ;;      Temps:         13       0       0       0       0       0       0
 13512 ;;      Totals:        17      18       0       0       0       0       0
 13513 ;;Total ram usage:       35 bytes
 13514 ;; Hardware stack levels used:    1
 13515 ;; Hardware stack levels required when called:    7
 13516 ;; This function calls:
 13517 ;;		_dtoa
 13518 ;;		_fputc
 13519 ;;		_stoa
 13520 ;;		_strncmp
 13521 ;;		_utoa
 13522 ;; This function is called by:
 13523 ;;		_vfprintf
 13524 ;; This function uses a non-reentrant model
 13525 ;;
 13526                           
 13527                           	psect	text60
 13528  0004F2                     __ptext60:
 13529                           	opt callstack 0
 13530  0004F2                     _vfpfcnvrt:
 13531                           	opt callstack 18
 13532                           
 13533                           ; BSR set to: 0
 13534                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 670: static int vfpfcnvrt(FIL
      +                          E *fp, char *fmt[], va_list ap);/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c
      +                          : 671: {;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 672:     char c, *cp,
      +                           ct[3];;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 673:     int done, i;;
      +                          /opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 674:     long long ll;;/opt/mi
      +                          crochip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 675:     unsigned long long llu;
 13535                           
 13536                           ; BSR set to: 0
 13537                           ;incstack = 0
 13538  0004F2  504D               	movf	vfpfcnvrt@fmt^0,w,c
 13539  0004F4  6ED9               	movwf	fsr2l,c
 13540  0004F6  6ADA               	clrf	fsr2h,c
 13541  0004F8  CFDE FFF6          	movff	postinc2,tblptrl
 13542  0004FC  CFDD FFF7          	movff	postdec2,tblptrh
 13543  000500                     	if	0	;tblptru may be non-zero
 13544  000500                     	endif
 13545  000500                     	if	0	;tblptru may be non-zero
 13546  000500                     	endif
 13547  000500  0008               	tblrd		*
 13548  000502  50F5               	movf	tablat,w,c
 13549  000504  0A25               	xorlw	37
 13550  000506  A4D8               	btfss	status,2,c
 13551  000508  D1D0               	goto	l6619
 13552                           
 13553                           ; BSR set to: 0
 13554                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 681:         ++*fmt;
 13555  00050A  504D               	movf	vfpfcnvrt@fmt^0,w,c
 13556  00050C  6ED9               	movwf	fsr2l,c
 13557  00050E  6ADA               	clrf	fsr2h,c
 13558  000510  2ADE               	incf	postinc2,f,c
 13559  000512  0E00               	movlw	0
 13560  000514  22DD               	addwfc	postdec2,f,c
 13561                           
 13562                           ; BSR set to: 0
 13563                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 683:         flags = width = 
      +                          0;
 13564  000516  0E00               	movlw	0
 13565  000518  6E68               	movwf	(_width+1)^0,c
 13566  00051A  0E00               	movlw	0
 13567  00051C  6E67               	movwf	_width^0,c
 13568  00051E  C067  F06B         	movff	_width,_flags
 13569  000522  C068  F06C         	movff	_width+1,_flags+1
 13570                           
 13571                           ; BSR set to: 0
 13572                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 684:         prec = -1;
 13573  000526  6869               	setf	_prec^0,c
 13574  000528  686A               	setf	(_prec+1)^0,c
 13575                           
 13576                           ; BSR set to: 0
 13577                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 825:         if ((*fmt[0] == 
      +                          'd') || (*fmt[0] == 'i')) {
 13578  00052A  504D               	movf	vfpfcnvrt@fmt^0,w,c
 13579  00052C  6ED9               	movwf	fsr2l,c
 13580  00052E  6ADA               	clrf	fsr2h,c
 13581  000530  CFDE FFF6          	movff	postinc2,tblptrl
 13582  000534  CFDD FFF7          	movff	postdec2,tblptrh
 13583  000538                     	if	0	;tblptru may be non-zero
 13584  000538                     	endif
 13585  000538                     	if	0	;tblptru may be non-zero
 13586  000538                     	endif
 13587  000538  0008               	tblrd		*
 13588  00053A  50F5               	movf	tablat,w,c
 13589  00053C  0A64               	xorlw	100
 13590  00053E  B4D8               	btfsc	status,2,c
 13591  000540  D00C               	goto	u8300
 13592                           
 13593                           ; BSR set to: 0
 13594  000542  504D               	movf	vfpfcnvrt@fmt^0,w,c
 13595  000544  6ED9               	movwf	fsr2l,c
 13596  000546  6ADA               	clrf	fsr2h,c
 13597  000548  CFDE FFF6          	movff	postinc2,tblptrl
 13598  00054C  CFDD FFF7          	movff	postdec2,tblptrh
 13599  000550                     	if	0	;tblptru may be non-zero
 13600  000550                     	endif
 13601  000550                     	if	0	;tblptru may be non-zero
 13602  000550                     	endif
 13603  000550  0008               	tblrd		*
 13604  000552  50F5               	movf	tablat,w,c
 13605  000554  0A69               	xorlw	105
 13606  000556  A4D8               	btfss	status,2,c
 13607  000558  D036               	goto	l6561
 13608  00055A                     u8300:
 13609                           
 13610                           ; BSR set to: 0
 13611                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 827:             ++*fmt;
 13612  00055A  504D               	movf	vfpfcnvrt@fmt^0,w,c
 13613  00055C  6ED9               	movwf	fsr2l,c
 13614  00055E  6ADA               	clrf	fsr2h,c
 13615  000560  2ADE               	incf	postinc2,f,c
 13616  000562  0E00               	movlw	0
 13617  000564  22DD               	addwfc	postdec2,f,c
 13618                           
 13619                           ; BSR set to: 0
 13620                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 828:             ll = (long l
      +                          ong)(*(int *)__va_arg(*(int **)ap, (int)0));
 13621  000566  504E               	movf	vfpfcnvrt@ap^0,w,c
 13622  000568  6ED9               	movwf	fsr2l,c
 13623  00056A  6ADA               	clrf	fsr2h,c
 13624  00056C  50DF               	movf	indf2,w,c
 13625  00056E  2ADF               	incf	indf2,f,c
 13626  000570  2ADF               	incf	indf2,f,c
 13627  000572  6ED9               	movwf	fsr2l,c
 13628  000574  6ADA               	clrf	fsr2h,c
 13629  000576  CFDE F0BB          	movff	postinc2,vfpfcnvrt@ll
 13630  00057A  CFDD F0BC          	movff	postdec2,vfpfcnvrt@ll+1
 13631  00057E  0E00               	movlw	0
 13632  000580  BFBC               	btfsc	(vfpfcnvrt@ll+1)& (0+255),7,b
 13633  000582  0EFF               	movlw	-1
 13634  000584  6FBD               	movwf	(vfpfcnvrt@ll+2)& (0+255),b
 13635  000586  6FBE               	movwf	(vfpfcnvrt@ll+3)& (0+255),b
 13636  000588  6FBF               	movwf	(vfpfcnvrt@ll+4)& (0+255),b
 13637  00058A  6FC0               	movwf	(vfpfcnvrt@ll+5)& (0+255),b
 13638  00058C  6FC1               	movwf	(vfpfcnvrt@ll+6)& (0+255),b
 13639  00058E  6FC2               	movwf	(vfpfcnvrt@ll+7)& (0+255),b
 13640                           
 13641                           ; BSR set to: 0
 13642                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 830:             return dtoa(
      +                          fp, ll);
 13643  000590  C04B  F027         	movff	vfpfcnvrt@fp,dtoa@fp
 13644  000594  C04C  F028         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
 13645  000598  C0BB  F029         	movff	vfpfcnvrt@ll,dtoa@d
 13646  00059C  C0BC  F02A         	movff	vfpfcnvrt@ll+1,dtoa@d+1
 13647  0005A0  C0BD  F02B         	movff	vfpfcnvrt@ll+2,dtoa@d+2
 13648  0005A4  C0BE  F02C         	movff	vfpfcnvrt@ll+3,dtoa@d+3
 13649  0005A8  C0BF  F02D         	movff	vfpfcnvrt@ll+4,dtoa@d+4
 13650  0005AC  C0C0  F02E         	movff	vfpfcnvrt@ll+5,dtoa@d+5
 13651  0005B0  C0C1  F02F         	movff	vfpfcnvrt@ll+6,dtoa@d+6
 13652  0005B4  C0C2  F030         	movff	vfpfcnvrt@ll+7,dtoa@d+7
 13653  0005B8  ECC8  F00E         	call	_dtoa	;wreg free
 13654  0005BC  C027  F04B         	movff	?_dtoa,?_vfpfcnvrt
 13655  0005C0  C028  F04C         	movff	?_dtoa+1,?_vfpfcnvrt+1
 13656  0005C4  0012               	return	
 13657  0005C6                     l6561:
 13658                           
 13659                           ; BSR set to: 0
 13660                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 835:         if (!strncmp(*fm
      +                          t, "ld", ((sizeof("ld")/sizeof("ld"[0]))-1)) || !strncmp(*fmt, "li", ((sizeof("li")/size
      +                          of("li"[0]))-1))) {
 13661  0005C6  504D               	movf	vfpfcnvrt@fmt^0,w,c
 13662  0005C8  6ED9               	movwf	fsr2l,c
 13663  0005CA  6ADA               	clrf	fsr2h,c
 13664  0005CC  CFDE F00D          	movff	postinc2,strncmp@_l
 13665  0005D0  CFDD F00E          	movff	postdec2,strncmp@_l+1
 13666  0005D4  0EED               	movlw	low STR_38
 13667  0005D6  6E0F               	movwf	strncmp@_r^0,c
 13668  0005D8  0E7F               	movlw	high STR_38
 13669  0005DA  6E10               	movwf	(strncmp@_r+1)^0,c
 13670  0005DC  0E00               	movlw	0
 13671  0005DE  6E12               	movwf	(strncmp@n+1)^0,c
 13672  0005E0  0E02               	movlw	2
 13673  0005E2  6E11               	movwf	strncmp@n^0,c
 13674  0005E4  EC70  F01F         	call	_strncmp	;wreg free
 13675  0005E8  500D               	movf	?_strncmp^0,w,c
 13676  0005EA  100E               	iorwf	(?_strncmp+1)^0,w,c
 13677  0005EC  B4D8               	btfsc	status,2,c
 13678  0005EE  D015               	goto	u8320
 13679  0005F0  504D               	movf	vfpfcnvrt@fmt^0,w,c
 13680  0005F2  6ED9               	movwf	fsr2l,c
 13681  0005F4  6ADA               	clrf	fsr2h,c
 13682  0005F6  CFDE F00D          	movff	postinc2,strncmp@_l
 13683  0005FA  CFDD F00E          	movff	postdec2,strncmp@_l+1
 13684  0005FE  0EF0               	movlw	low STR_42
 13685  000600  6E0F               	movwf	strncmp@_r^0,c
 13686  000602  0E7F               	movlw	high STR_42
 13687  000604  6E10               	movwf	(strncmp@_r+1)^0,c
 13688  000606  0E00               	movlw	0
 13689  000608  6E12               	movwf	(strncmp@n+1)^0,c
 13690  00060A  0E02               	movlw	2
 13691  00060C  6E11               	movwf	strncmp@n^0,c
 13692  00060E  EC70  F01F         	call	_strncmp	;wreg free
 13693  000612  500D               	movf	?_strncmp^0,w,c
 13694  000614  100E               	iorwf	(?_strncmp+1)^0,w,c
 13695  000616  A4D8               	btfss	status,2,c
 13696  000618  D055               	goto	l6573
 13697  00061A                     u8320:
 13698                           
 13699                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 836: ;/opt/microchip/xc8/v2.1
      +                          0/pic/sources/c99/common/doprnt.c: 838:             *fmt += ((sizeof("ld")/sizeof("ld"[0
      +                          ]))-1);
 13700  00061A  504D               	movf	vfpfcnvrt@fmt^0,w,c
 13701  00061C  6ED9               	movwf	fsr2l,c
 13702  00061E  6ADA               	clrf	fsr2h,c
 13703  000620  0E02               	movlw	2
 13704  000622  26DE               	addwf	postinc2,f,c
 13705  000624  0E00               	movlw	0
 13706  000626  22DD               	addwfc	postdec2,f,c
 13707                           
 13708                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 839:             ll = (long l
      +                          ong)(*(long *)__va_arg(*(long **)ap, (long)0));
 13709  000628  504E               	movf	vfpfcnvrt@ap^0,w,c
 13710  00062A  6ED9               	movwf	fsr2l,c
 13711  00062C  6ADA               	clrf	fsr2h,c
 13712  00062E  CFDF F04F          	movff	indf2,??_vfpfcnvrt
 13713  000632  0E04               	movlw	4
 13714  000634  26DF               	addwf	indf2,f,c
 13715  000636  504F               	movf	??_vfpfcnvrt^0,w,c
 13716  000638  6ED9               	movwf	fsr2l,c
 13717  00063A  6ADA               	clrf	fsr2h,c
 13718  00063C  CFDE F050          	movff	postinc2,??_vfpfcnvrt+1
 13719  000640  CFDE F051          	movff	postinc2,??_vfpfcnvrt+2
 13720  000644  CFDE F052          	movff	postinc2,??_vfpfcnvrt+3
 13721  000648  CFDE F053          	movff	postinc2,??_vfpfcnvrt+4
 13722  00064C  C050  F054         	movff	??_vfpfcnvrt+1,??_vfpfcnvrt+5
 13723  000650  C051  F055         	movff	??_vfpfcnvrt+2,??_vfpfcnvrt+6
 13724  000654  C052  F056         	movff	??_vfpfcnvrt+3,??_vfpfcnvrt+7
 13725  000658  C053  F057         	movff	??_vfpfcnvrt+4,??_vfpfcnvrt+8
 13726  00065C  6A58               	clrf	(??_vfpfcnvrt+9)^0,c
 13727  00065E  BE57               	btfsc	(??_vfpfcnvrt+8)^0,7,c
 13728  000660  6858               	setf	(??_vfpfcnvrt+9)^0,c
 13729  000662  C058  F059         	movff	??_vfpfcnvrt+9,??_vfpfcnvrt+10
 13730  000666  C058  F05A         	movff	??_vfpfcnvrt+9,??_vfpfcnvrt+11
 13731  00066A  C058  F05B         	movff	??_vfpfcnvrt+9,??_vfpfcnvrt+12
 13732  00066E  C054  F0BB         	movff	??_vfpfcnvrt+5,vfpfcnvrt@ll
 13733  000672  C055  F0BC         	movff	??_vfpfcnvrt+6,vfpfcnvrt@ll+1
 13734  000676  C056  F0BD         	movff	??_vfpfcnvrt+7,vfpfcnvrt@ll+2
 13735  00067A  C057  F0BE         	movff	??_vfpfcnvrt+8,vfpfcnvrt@ll+3
 13736  00067E  C058  F0BF         	movff	??_vfpfcnvrt+9,vfpfcnvrt@ll+4
 13737  000682  C059  F0C0         	movff	??_vfpfcnvrt+10,vfpfcnvrt@ll+5
 13738  000686  C05A  F0C1         	movff	??_vfpfcnvrt+11,vfpfcnvrt@ll+6
 13739  00068A  C05B  F0C2         	movff	??_vfpfcnvrt+12,vfpfcnvrt@ll+7
 13740                           
 13741                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 841:             return dtoa(
      +                          fp, ll);
 13742  00068E  C04B  F027         	movff	vfpfcnvrt@fp,dtoa@fp
 13743  000692  C04C  F028         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
 13744  000696  C0BB  F029         	movff	vfpfcnvrt@ll,dtoa@d
 13745  00069A  C0BC  F02A         	movff	vfpfcnvrt@ll+1,dtoa@d+1
 13746  00069E  C0BD  F02B         	movff	vfpfcnvrt@ll+2,dtoa@d+2
 13747  0006A2  C0BE  F02C         	movff	vfpfcnvrt@ll+3,dtoa@d+3
 13748  0006A6  C0BF  F02D         	movff	vfpfcnvrt@ll+4,dtoa@d+4
 13749  0006AA  C0C0  F02E         	movff	vfpfcnvrt@ll+5,dtoa@d+5
 13750  0006AE  C0C1  F02F         	movff	vfpfcnvrt@ll+6,dtoa@d+6
 13751  0006B2  C0C2  F030         	movff	vfpfcnvrt@ll+7,dtoa@d+7
 13752  0006B6  ECC8  F00E         	call	_dtoa	;wreg free
 13753  0006BA  C027  F04B         	movff	?_dtoa,?_vfpfcnvrt
 13754  0006BE  C028  F04C         	movff	?_dtoa+1,?_vfpfcnvrt+1
 13755  0006C2  0012               	return	
 13756  0006C4                     l6573:
 13757                           
 13758                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1149:         if (*fmt[0] == 
      +                          's') {
 13759  0006C4  504D               	movf	vfpfcnvrt@fmt^0,w,c
 13760  0006C6  6ED9               	movwf	fsr2l,c
 13761  0006C8  6ADA               	clrf	fsr2h,c
 13762  0006CA  CFDE FFF6          	movff	postinc2,tblptrl
 13763  0006CE  CFDD FFF7          	movff	postdec2,tblptrh
 13764  0006D2                     	if	0	;tblptru may be non-zero
 13765  0006D2                     	endif
 13766  0006D2                     	if	0	;tblptru may be non-zero
 13767  0006D2                     	endif
 13768  0006D2  0008               	tblrd		*
 13769  0006D4  50F5               	movf	tablat,w,c
 13770  0006D6  0A73               	xorlw	115
 13771  0006D8  A4D8               	btfss	status,2,c
 13772  0006DA  D021               	goto	l6583
 13773                           
 13774                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1151:             ++*fmt;
 13775  0006DC  504D               	movf	vfpfcnvrt@fmt^0,w,c
 13776  0006DE  6ED9               	movwf	fsr2l,c
 13777  0006E0  6ADA               	clrf	fsr2h,c
 13778  0006E2  2ADE               	incf	postinc2,f,c
 13779  0006E4  0E00               	movlw	0
 13780  0006E6  22DD               	addwfc	postdec2,f,c
 13781                           
 13782                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1152:             cp = (*(cha
      +                          r * *)__va_arg(*(char * **)ap, (char *)0));
 13783  0006E8  504E               	movf	vfpfcnvrt@ap^0,w,c
 13784  0006EA  6ED9               	movwf	fsr2l,c
 13785  0006EC  6ADA               	clrf	fsr2h,c
 13786  0006EE  0E02               	movlw	2
 13787  0006F0  26DF               	addwf	indf2,f,c
 13788  0006F2  5CDF               	subwf	indf2,w,c
 13789  0006F4  6ED9               	movwf	fsr2l,c
 13790  0006F6  6ADA               	clrf	fsr2h,c
 13791  0006F8  CFDE F0B9          	movff	postinc2,vfpfcnvrt@cp
 13792  0006FC  CFDE F0BA          	movff	postinc2,vfpfcnvrt@cp+1
 13793                           
 13794                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1154:             return stoa
      +                          (fp, cp);
 13795  000700  C04B  F012         	movff	vfpfcnvrt@fp,stoa@fp
 13796  000704  C04C  F013         	movff	vfpfcnvrt@fp+1,stoa@fp+1
 13797  000708  C0B9  F014         	movff	vfpfcnvrt@cp,stoa@s
 13798  00070C  C0BA  F015         	movff	vfpfcnvrt@cp+1,stoa@s+1
 13799  000710  EC4B  F018         	call	_stoa	;wreg free
 13800  000714  C012  F04B         	movff	?_stoa,?_vfpfcnvrt
 13801  000718  C013  F04C         	movff	?_stoa+1,?_vfpfcnvrt+1
 13802  00071C  0012               	return	
 13803  00071E                     l6583:
 13804                           
 13805                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1182:         if (*fmt[0] == 
      +                          'u') {
 13806  00071E  504D               	movf	vfpfcnvrt@fmt^0,w,c
 13807  000720  6ED9               	movwf	fsr2l,c
 13808  000722  6ADA               	clrf	fsr2h,c
 13809  000724  CFDE FFF6          	movff	postinc2,tblptrl
 13810  000728  CFDD FFF7          	movff	postdec2,tblptrh
 13811  00072C                     	if	0	;tblptru may be non-zero
 13812  00072C                     	endif
 13813  00072C                     	if	0	;tblptru may be non-zero
 13814  00072C                     	endif
 13815  00072C  0008               	tblrd		*
 13816  00072E  50F5               	movf	tablat,w,c
 13817  000730  0A75               	xorlw	117
 13818  000732  A4D8               	btfss	status,2,c
 13819  000734  D038               	goto	l6593
 13820                           
 13821                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1184:             ++*fmt;
 13822  000736  504D               	movf	vfpfcnvrt@fmt^0,w,c
 13823  000738  6ED9               	movwf	fsr2l,c
 13824  00073A  6ADA               	clrf	fsr2h,c
 13825  00073C  2ADE               	incf	postinc2,f,c
 13826  00073E  0E00               	movlw	0
 13827  000740  22DD               	addwfc	postdec2,f,c
 13828                           
 13829                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1185:             llu = (unsi
      +                          gned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned int)0));
 13830  000742  504E               	movf	vfpfcnvrt@ap^0,w,c
 13831  000744  6ED9               	movwf	fsr2l,c
 13832  000746  6ADA               	clrf	fsr2h,c
 13833  000748  50DF               	movf	indf2,w,c
 13834  00074A  2ADF               	incf	indf2,f,c
 13835  00074C  2ADF               	incf	indf2,f,c
 13836  00074E  6ED9               	movwf	fsr2l,c
 13837  000750  6ADA               	clrf	fsr2h,c
 13838  000752  CFDE F04F          	movff	postinc2,??_vfpfcnvrt
 13839  000756  CFDD F050          	movff	postdec2,??_vfpfcnvrt+1
 13840  00075A  C04F  F0C3         	movff	??_vfpfcnvrt,vfpfcnvrt@llu
 13841  00075E  C050  F0C4         	movff	??_vfpfcnvrt+1,vfpfcnvrt@llu+1
 13842  000762  0100               	movlb	0	; () banked
 13843  000764  6BC5               	clrf	(vfpfcnvrt@llu+2)& (0+255),b
 13844  000766  6BC6               	clrf	(vfpfcnvrt@llu+3)& (0+255),b
 13845  000768  6BC7               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
 13846  00076A  6BC8               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
 13847  00076C  6BC9               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
 13848  00076E  6BCA               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
 13849                           
 13850                           ; BSR set to: 0
 13851                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1187:             return utoa
      +                          (fp, llu);
 13852  000770  C04B  F026         	movff	vfpfcnvrt@fp,utoa@fp
 13853  000774  C04C  F027         	movff	vfpfcnvrt@fp+1,utoa@fp+1
 13854  000778  C0C3  F028         	movff	vfpfcnvrt@llu,utoa@d
 13855  00077C  C0C4  F029         	movff	vfpfcnvrt@llu+1,utoa@d+1
 13856  000780  C0C5  F02A         	movff	vfpfcnvrt@llu+2,utoa@d+2
 13857  000784  C0C6  F02B         	movff	vfpfcnvrt@llu+3,utoa@d+3
 13858  000788  C0C7  F02C         	movff	vfpfcnvrt@llu+4,utoa@d+4
 13859  00078C  C0C8  F02D         	movff	vfpfcnvrt@llu+5,utoa@d+5
 13860  000790  C0C9  F02E         	movff	vfpfcnvrt@llu+6,utoa@d+6
 13861  000794  C0CA  F02F         	movff	vfpfcnvrt@llu+7,utoa@d+7
 13862  000798  EC8E  F015         	call	_utoa	;wreg free
 13863  00079C  C026  F04B         	movff	?_utoa,?_vfpfcnvrt
 13864  0007A0  C027  F04C         	movff	?_utoa+1,?_vfpfcnvrt+1
 13865  0007A4  0012               	return	
 13866  0007A6                     l6593:
 13867                           
 13868                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1192:         if (!strncmp(*f
      +                          mt, "lu", ((sizeof("lu")/sizeof("lu"[0]))-1))) {
 13869  0007A6  504D               	movf	vfpfcnvrt@fmt^0,w,c
 13870  0007A8  6ED9               	movwf	fsr2l,c
 13871  0007AA  6ADA               	clrf	fsr2h,c
 13872  0007AC  CFDE F00D          	movff	postinc2,strncmp@_l
 13873  0007B0  CFDD F00E          	movff	postdec2,strncmp@_l+1
 13874  0007B4  0EF3               	movlw	low STR_47
 13875  0007B6  6E0F               	movwf	strncmp@_r^0,c
 13876  0007B8  0E7F               	movlw	high STR_47
 13877  0007BA  6E10               	movwf	(strncmp@_r+1)^0,c
 13878  0007BC  0E00               	movlw	0
 13879  0007BE  6E12               	movwf	(strncmp@n+1)^0,c
 13880  0007C0  0E02               	movlw	2
 13881  0007C2  6E11               	movwf	strncmp@n^0,c
 13882  0007C4  EC70  F01F         	call	_strncmp	;wreg free
 13883  0007C8  500D               	movf	?_strncmp^0,w,c
 13884  0007CA  100E               	iorwf	(?_strncmp+1)^0,w,c
 13885  0007CC  A4D8               	btfss	status,2,c
 13886  0007CE  D041               	goto	l6603
 13887                           
 13888                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1194:             *fmt += ((s
      +                          izeof("lu")/sizeof("lu"[0]))-1);
 13889  0007D0  504D               	movf	vfpfcnvrt@fmt^0,w,c
 13890  0007D2  6ED9               	movwf	fsr2l,c
 13891  0007D4  6ADA               	clrf	fsr2h,c
 13892  0007D6  0E02               	movlw	2
 13893  0007D8  26DE               	addwf	postinc2,f,c
 13894  0007DA  0E00               	movlw	0
 13895  0007DC  22DD               	addwfc	postdec2,f,c
 13896                           
 13897                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1195:             llu = (unsi
      +                          gned long long)(*(unsigned long *)__va_arg(*(unsigned long **)ap, (unsigned long)0));
 13898  0007DE  504E               	movf	vfpfcnvrt@ap^0,w,c
 13899  0007E0  6ED9               	movwf	fsr2l,c
 13900  0007E2  6ADA               	clrf	fsr2h,c
 13901  0007E4  CFDF F04F          	movff	indf2,??_vfpfcnvrt
 13902  0007E8  0E04               	movlw	4
 13903  0007EA  26DF               	addwf	indf2,f,c
 13904  0007EC  504F               	movf	??_vfpfcnvrt^0,w,c
 13905  0007EE  6ED9               	movwf	fsr2l,c
 13906  0007F0  6ADA               	clrf	fsr2h,c
 13907  0007F2  CFDE F050          	movff	postinc2,??_vfpfcnvrt+1
 13908  0007F6  CFDE F051          	movff	postinc2,??_vfpfcnvrt+2
 13909  0007FA  CFDE F052          	movff	postinc2,??_vfpfcnvrt+3
 13910  0007FE  CFDE F053          	movff	postinc2,??_vfpfcnvrt+4
 13911  000802  5050               	movf	(??_vfpfcnvrt+1)^0,w,c
 13912  000804  0100               	movlb	0	; () banked
 13913  000806  6FC3               	movwf	vfpfcnvrt@llu& (0+255),b
 13914  000808  5051               	movf	(??_vfpfcnvrt+2)^0,w,c
 13915  00080A  6FC4               	movwf	(vfpfcnvrt@llu+1)& (0+255),b
 13916  00080C  5052               	movf	(??_vfpfcnvrt+3)^0,w,c
 13917  00080E  6FC5               	movwf	(vfpfcnvrt@llu+2)& (0+255),b
 13918  000810  5053               	movf	(??_vfpfcnvrt+4)^0,w,c
 13919  000812  6FC6               	movwf	(vfpfcnvrt@llu+3)& (0+255),b
 13920  000814  6BC7               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
 13921  000816  6BC8               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
 13922  000818  6BC9               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
 13923  00081A  6BCA               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
 13924                           
 13925                           ; BSR set to: 0
 13926                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1197:             return utoa
      +                          (fp, llu);
 13927  00081C  C04B  F026         	movff	vfpfcnvrt@fp,utoa@fp
 13928  000820  C04C  F027         	movff	vfpfcnvrt@fp+1,utoa@fp+1
 13929  000824  C0C3  F028         	movff	vfpfcnvrt@llu,utoa@d
 13930  000828  C0C4  F029         	movff	vfpfcnvrt@llu+1,utoa@d+1
 13931  00082C  C0C5  F02A         	movff	vfpfcnvrt@llu+2,utoa@d+2
 13932  000830  C0C6  F02B         	movff	vfpfcnvrt@llu+3,utoa@d+3
 13933  000834  C0C7  F02C         	movff	vfpfcnvrt@llu+4,utoa@d+4
 13934  000838  C0C8  F02D         	movff	vfpfcnvrt@llu+5,utoa@d+5
 13935  00083C  C0C9  F02E         	movff	vfpfcnvrt@llu+6,utoa@d+6
 13936  000840  C0CA  F02F         	movff	vfpfcnvrt@llu+7,utoa@d+7
 13937  000844  EC8E  F015         	call	_utoa	;wreg free
 13938  000848  C026  F04B         	movff	?_utoa,?_vfpfcnvrt
 13939  00084C  C027  F04C         	movff	?_utoa+1,?_vfpfcnvrt+1
 13940  000850  0012               	return	
 13941  000852                     l6603:
 13942                           
 13943                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1350:         if ((*fmt)[0] =
      +                          = '%') {
 13944  000852  504D               	movf	vfpfcnvrt@fmt^0,w,c
 13945  000854  6ED9               	movwf	fsr2l,c
 13946  000856  6ADA               	clrf	fsr2h,c
 13947  000858  CFDE FFF6          	movff	postinc2,tblptrl
 13948  00085C  CFDD FFF7          	movff	postdec2,tblptrh
 13949  000860                     	if	0	;tblptru may be non-zero
 13950  000860                     	endif
 13951  000860                     	if	0	;tblptru may be non-zero
 13952  000860                     	endif
 13953  000860  0008               	tblrd		*
 13954  000862  50F5               	movf	tablat,w,c
 13955  000864  0A25               	xorlw	37
 13956  000866  A4D8               	btfss	status,2,c
 13957  000868  D015               	goto	l6613
 13958                           
 13959                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1351:             ++*fmt;
 13960  00086A  504D               	movf	vfpfcnvrt@fmt^0,w,c
 13961  00086C  6ED9               	movwf	fsr2l,c
 13962  00086E  6ADA               	clrf	fsr2h,c
 13963  000870  2ADE               	incf	postinc2,f,c
 13964  000872  0E00               	movlw	0
 13965  000874  22DD               	addwfc	postdec2,f,c
 13966                           
 13967                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1352:             fputc((int)
      +                          '%', fp);
 13968  000876  0E00               	movlw	0
 13969  000878  6E0F               	movwf	(fputc@c+1)^0,c
 13970  00087A  0E25               	movlw	37
 13971  00087C  6E0E               	movwf	fputc@c^0,c
 13972  00087E  C04B  F010         	movff	vfpfcnvrt@fp,fputc@fp
 13973  000882  C04C  F011         	movff	vfpfcnvrt@fp+1,fputc@fp+1
 13974  000886  EC7C  F027         	call	_fputc	;wreg free
 13975  00088A                     l6609:
 13976                           
 13977                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1353:             return 1;
 13978  00088A  0E00               	movlw	0
 13979  00088C  6E4C               	movwf	(?_vfpfcnvrt+1)^0,c
 13980  00088E  0E01               	movlw	1
 13981  000890  6E4B               	movwf	?_vfpfcnvrt^0,c
 13982  000892  0012               	return	
 13983  000894                     l6613:
 13984                           
 13985                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1357:         ++*fmt;
 13986  000894  504D               	movf	vfpfcnvrt@fmt^0,w,c
 13987  000896  6ED9               	movwf	fsr2l,c
 13988  000898  6ADA               	clrf	fsr2h,c
 13989  00089A  2ADE               	incf	postinc2,f,c
 13990  00089C  0E00               	movlw	0
 13991  00089E  22DD               	addwfc	postdec2,f,c
 13992                           
 13993                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1358:         return 0;
 13994  0008A0  0E00               	movlw	0
 13995  0008A2  6E4C               	movwf	(?_vfpfcnvrt+1)^0,c
 13996  0008A4  0E00               	movlw	0
 13997  0008A6  6E4B               	movwf	?_vfpfcnvrt^0,c
 13998  0008A8  0012               	return	
 13999  0008AA                     l6619:
 14000                           
 14001                           ; BSR set to: 0
 14002                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1362:     fputc((int)(*fmt)[0
      +                          ], fp);
 14003  0008AA  504D               	movf	vfpfcnvrt@fmt^0,w,c
 14004  0008AC  6ED9               	movwf	fsr2l,c
 14005  0008AE  6ADA               	clrf	fsr2h,c
 14006  0008B0  CFDE FFF6          	movff	postinc2,tblptrl
 14007  0008B4  CFDD FFF7          	movff	postdec2,tblptrh
 14008  0008B8                     	if	0	;tblptru may be non-zero
 14009  0008B8                     	endif
 14010  0008B8                     	if	0	;tblptru may be non-zero
 14011  0008B8                     	endif
 14012  0008B8  0008               	tblrd		*
 14013  0008BA  50F5               	movf	tablat,w,c
 14014  0008BC  6E0E               	movwf	fputc@c^0,c
 14015  0008BE  6A0F               	clrf	(fputc@c+1)^0,c
 14016  0008C0  C04B  F010         	movff	vfpfcnvrt@fp,fputc@fp
 14017  0008C4  C04C  F011         	movff	vfpfcnvrt@fp+1,fputc@fp+1
 14018  0008C8  EC7C  F027         	call	_fputc	;wreg free
 14019                           
 14020                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 1363:     ++*fmt;
 14021  0008CC  504D               	movf	vfpfcnvrt@fmt^0,w,c
 14022  0008CE  6ED9               	movwf	fsr2l,c
 14023  0008D0  6ADA               	clrf	fsr2h,c
 14024  0008D2  2ADE               	incf	postinc2,f,c
 14025  0008D4  0E00               	movlw	0
 14026  0008D6  22DD               	addwfc	postdec2,f,c
 14027  0008D8  D7D8               	goto	l6609
 14028  0008DA                     __end_of_vfpfcnvrt:
 14029                           	opt callstack 0
 14030                           
 14031 ;; *************** function _utoa *****************
 14032 ;; Defined at:
 14033 ;;		line 593 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c"
 14034 ;; Parameters:    Size  Location     Type
 14035 ;;  fp              2   37[COMRAM] PTR struct _IO_FILE
 14036 ;;		 -> NULL(0), 
 14037 ;;  d               8   39[COMRAM] unsigned long long 
 14038 ;; Auto vars:     Size  Location     Type
 14039 ;;  n               8   59[COMRAM] unsigned long long 
 14040 ;;  i               2   67[COMRAM] int 
 14041 ;;  w               2   57[COMRAM] int 
 14042 ;;  p               2   55[COMRAM] int 
 14043 ;; Return value:  Size  Location     Type
 14044 ;;                  2   37[COMRAM] int 
 14045 ;; Registers used:
 14046 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14047 ;; Tracked objects:
 14048 ;;		On entry : 3F/0
 14049 ;;		On exit  : 0/0
 14050 ;;		Unchanged: 0/0
 14051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14052 ;;      Params:        10       0       0       0       0       0       0
 14053 ;;      Locals:        14       0       0       0       0       0       0
 14054 ;;      Temps:          8       0       0       0       0       0       0
 14055 ;;      Totals:        32       0       0       0       0       0       0
 14056 ;;Total ram usage:       32 bytes
 14057 ;; Hardware stack levels used:    1
 14058 ;; Hardware stack levels required when called:    6
 14059 ;; This function calls:
 14060 ;;		___lodiv
 14061 ;;		___lomod
 14062 ;;		_pad
 14063 ;; This function is called by:
 14064 ;;		_vfpfcnvrt
 14065 ;; This function uses a non-reentrant model
 14066 ;;
 14067                           
 14068                           	psect	text61
 14069  002B1C                     __ptext61:
 14070                           	opt callstack 0
 14071  002B1C                     _utoa:
 14072                           	opt callstack 18
 14073                           
 14074                           ; BSR set to: 0
 14075                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 593: static int utoa(FILE *fp
      +                          , unsigned long long d);/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 594: {
      +                          ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 595:     int i, p, w;;/opt/mi
      +                          crochip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 596:     unsigned long long n;;/opt/m
      +                          icrochip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 599:     if (!(prec < 0)) {
 14076                           
 14077                           ;incstack = 0
 14078  002B1C  AE6A               	btfss	(_prec+1)^0,7,c
 14079                           
 14080                           ; BSR set to: 0
 14081                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 600:         flags &= ~(1 << 
      +                          1);
 14082  002B1E  926B               	bcf	_flags^0,1,c
 14083                           
 14084                           ; BSR set to: 0
 14085                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 602:     p = (0 < prec) ? pre
      +                          c : 1;
 14086  002B20  BE6A               	btfsc	(_prec+1)^0,7,c
 14087  002B22  D005               	goto	u8170
 14088  002B24  506A               	movf	(_prec+1)^0,w,c
 14089  002B26  E108               	bnz	l848
 14090  002B28  0469               	decf	_prec^0,w,c
 14091  002B2A  B0D8               	btfsc	status,0,c
 14092  002B2C  D005               	goto	l848
 14093  002B2E                     u8170:
 14094                           
 14095                           ; BSR set to: 0
 14096  002B2E  0E00               	movlw	0
 14097  002B30  6E39               	movwf	(utoa@p+1)^0,c
 14098  002B32  0E01               	movlw	1
 14099  002B34  6E38               	movwf	utoa@p^0,c
 14100  002B36  D004               	goto	l850
 14101  002B38                     l848:
 14102                           
 14103                           ; BSR set to: 0
 14104  002B38  C069  F038         	movff	_prec,utoa@p
 14105  002B3C  C06A  F039         	movff	_prec+1,utoa@p+1
 14106  002B40                     l850:
 14107                           
 14108                           ; BSR set to: 0
 14109                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 603:     w = width;
 14110  002B40  C067  F03A         	movff	_width,utoa@w
 14111  002B44  C068  F03B         	movff	_width+1,utoa@w+1
 14112                           
 14113                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 606:     n = d;
 14114  002B48  C028  F03C         	movff	utoa@d,utoa@n
 14115  002B4C  C029  F03D         	movff	utoa@d+1,utoa@n+1
 14116  002B50  C02A  F03E         	movff	utoa@d+2,utoa@n+2
 14117  002B54  C02B  F03F         	movff	utoa@d+3,utoa@n+3
 14118  002B58  C02C  F040         	movff	utoa@d+4,utoa@n+4
 14119  002B5C  C02D  F041         	movff	utoa@d+5,utoa@n+5
 14120  002B60  C02E  F042         	movff	utoa@d+6,utoa@n+6
 14121  002B64  C02F  F043         	movff	utoa@d+7,utoa@n+7
 14122                           
 14123                           ; BSR set to: 0
 14124                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 607:     i = sizeof(dbuf) - 1
      +                          ;
 14125  002B68  0E00               	movlw	0
 14126  002B6A  6E45               	movwf	(utoa@i+1)^0,c
 14127  002B6C  0E1F               	movlw	31
 14128  002B6E  6E44               	movwf	utoa@i^0,c
 14129                           
 14130                           ; BSR set to: 0
 14131                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 608:     dbuf[i] = '\0';
 14132  002B70  0E00               	movlw	0
 14133  002B72  6FB8               	movwf	(_dbuf+31)& (0+255),b
 14134                           
 14135                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 609:     while (i && (n || (0
      +                           < p) || ((0 < w) && (flags & (1 << 1))))) {
 14136  002B74  D074               	goto	l6507
 14137  002B76                     l6497:
 14138                           
 14139                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 610:         --i;
 14140  002B76  0644               	decf	utoa@i^0,f,c
 14141  002B78  A0D8               	btfss	status,0,c
 14142  002B7A  0645               	decf	(utoa@i+1)^0,f,c
 14143                           
 14144                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 611:         dbuf[i] = '0' + 
      +                          (n % 10);
 14145  002B7C  5044               	movf	utoa@i^0,w,c
 14146  002B7E  0F99               	addlw	low _dbuf
 14147  002B80  6ED9               	movwf	fsr2l,c
 14148  002B82  6ADA               	clrf	fsr2h,c
 14149  002B84  C03C  F00D         	movff	utoa@n,___lomod@dividend
 14150  002B88  C03D  F00E         	movff	utoa@n+1,___lomod@dividend+1
 14151  002B8C  C03E  F00F         	movff	utoa@n+2,___lomod@dividend+2
 14152  002B90  C03F  F010         	movff	utoa@n+3,___lomod@dividend+3
 14153  002B94  C040  F011         	movff	utoa@n+4,___lomod@dividend+4
 14154  002B98  C041  F012         	movff	utoa@n+5,___lomod@dividend+5
 14155  002B9C  C042  F013         	movff	utoa@n+6,___lomod@dividend+6
 14156  002BA0  C043  F014         	movff	utoa@n+7,___lomod@dividend+7
 14157  002BA4  0E0A               	movlw	10
 14158  002BA6  6E15               	movwf	___lomod@divisor^0,c
 14159  002BA8  0E00               	movlw	0
 14160  002BAA  6E16               	movwf	(___lomod@divisor+1)^0,c
 14161  002BAC  0E00               	movlw	0
 14162  002BAE  6E17               	movwf	(___lomod@divisor+2)^0,c
 14163  002BB0  0E00               	movlw	0
 14164  002BB2  6E18               	movwf	(___lomod@divisor+3)^0,c
 14165  002BB4  0E00               	movlw	0
 14166  002BB6  6E19               	movwf	(___lomod@divisor+4)^0,c
 14167  002BB8  0E00               	movlw	0
 14168  002BBA  6E1A               	movwf	(___lomod@divisor+5)^0,c
 14169  002BBC  0E00               	movlw	0
 14170  002BBE  6E1B               	movwf	(___lomod@divisor+6)^0,c
 14171  002BC0  0E00               	movlw	0
 14172  002BC2  6E1C               	movwf	(___lomod@divisor+7)^0,c
 14173  002BC4  ECC4  F01E         	call	___lomod	;wreg free
 14174  002BC8  C00D  F030         	movff	?___lomod,??_utoa
 14175  002BCC  C00E  F031         	movff	?___lomod+1,??_utoa+1
 14176  002BD0  C00F  F032         	movff	?___lomod+2,??_utoa+2
 14177  002BD4  C010  F033         	movff	?___lomod+3,??_utoa+3
 14178  002BD8  C011  F034         	movff	?___lomod+4,??_utoa+4
 14179  002BDC  C012  F035         	movff	?___lomod+5,??_utoa+5
 14180  002BE0  C013  F036         	movff	?___lomod+6,??_utoa+6
 14181  002BE4  C014  F037         	movff	?___lomod+7,??_utoa+7
 14182  002BE8  5030               	movf	??_utoa^0,w,c
 14183  002BEA  0F30               	addlw	48
 14184  002BEC  6EDF               	movwf	indf2,c
 14185                           
 14186                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 612:         --p;
 14187  002BEE  0638               	decf	utoa@p^0,f,c
 14188  002BF0  A0D8               	btfss	status,0,c
 14189  002BF2  0639               	decf	(utoa@p+1)^0,f,c
 14190                           
 14191                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 613:         --w;
 14192  002BF4  063A               	decf	utoa@w^0,f,c
 14193  002BF6  A0D8               	btfss	status,0,c
 14194  002BF8  063B               	decf	(utoa@w+1)^0,f,c
 14195                           
 14196                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 614:         n = n / 10;
 14197  002BFA  C03C  F00D         	movff	utoa@n,___lodiv@dividend
 14198  002BFE  C03D  F00E         	movff	utoa@n+1,___lodiv@dividend+1
 14199  002C02  C03E  F00F         	movff	utoa@n+2,___lodiv@dividend+2
 14200  002C06  C03F  F010         	movff	utoa@n+3,___lodiv@dividend+3
 14201  002C0A  C040  F011         	movff	utoa@n+4,___lodiv@dividend+4
 14202  002C0E  C041  F012         	movff	utoa@n+5,___lodiv@dividend+5
 14203  002C12  C042  F013         	movff	utoa@n+6,___lodiv@dividend+6
 14204  002C16  C043  F014         	movff	utoa@n+7,___lodiv@dividend+7
 14205  002C1A  0E0A               	movlw	10
 14206  002C1C  6E15               	movwf	___lodiv@divisor^0,c
 14207  002C1E  0E00               	movlw	0
 14208  002C20  6E16               	movwf	(___lodiv@divisor+1)^0,c
 14209  002C22  0E00               	movlw	0
 14210  002C24  6E17               	movwf	(___lodiv@divisor+2)^0,c
 14211  002C26  0E00               	movlw	0
 14212  002C28  6E18               	movwf	(___lodiv@divisor+3)^0,c
 14213  002C2A  0E00               	movlw	0
 14214  002C2C  6E19               	movwf	(___lodiv@divisor+4)^0,c
 14215  002C2E  0E00               	movlw	0
 14216  002C30  6E1A               	movwf	(___lodiv@divisor+5)^0,c
 14217  002C32  0E00               	movlw	0
 14218  002C34  6E1B               	movwf	(___lodiv@divisor+6)^0,c
 14219  002C36  0E00               	movlw	0
 14220  002C38  6E1C               	movwf	(___lodiv@divisor+7)^0,c
 14221  002C3A  EC3D  F01D         	call	___lodiv	;wreg free
 14222  002C3E  C00D  F03C         	movff	?___lodiv,utoa@n
 14223  002C42  C00E  F03D         	movff	?___lodiv+1,utoa@n+1
 14224  002C46  C00F  F03E         	movff	?___lodiv+2,utoa@n+2
 14225  002C4A  C010  F03F         	movff	?___lodiv+3,utoa@n+3
 14226  002C4E  C011  F040         	movff	?___lodiv+4,utoa@n+4
 14227  002C52  C012  F041         	movff	?___lodiv+5,utoa@n+5
 14228  002C56  C013  F042         	movff	?___lodiv+6,utoa@n+6
 14229  002C5A  C014  F043         	movff	?___lodiv+7,utoa@n+7
 14230  002C5E                     l6507:
 14231                           
 14232                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 609:     while (i && (n || (0
      +                           < p) || ((0 < w) && (flags & (1 << 1))))) {
 14233  002C5E  5044               	movf	utoa@i^0,w,c
 14234  002C60  1045               	iorwf	(utoa@i+1)^0,w,c
 14235  002C62  B4D8               	btfsc	status,2,c
 14236  002C64  D01A               	goto	u8220
 14237  002C66  503C               	movf	utoa@n^0,w,c
 14238  002C68  103D               	iorwf	(utoa@n+1)^0,w,c
 14239  002C6A  103E               	iorwf	(utoa@n+2)^0,w,c
 14240  002C6C  103F               	iorwf	(utoa@n+3)^0,w,c
 14241  002C6E  1040               	iorwf	(utoa@n+4)^0,w,c
 14242  002C70  1041               	iorwf	(utoa@n+5)^0,w,c
 14243  002C72  1042               	iorwf	(utoa@n+6)^0,w,c
 14244  002C74  1043               	iorwf	(utoa@n+7)^0,w,c
 14245  002C76  A4D8               	btfss	status,2,c
 14246  002C78  D77E               	goto	l6497
 14247  002C7A  BE39               	btfsc	(utoa@p+1)^0,7,c
 14248  002C7C  D005               	goto	u8200
 14249  002C7E  5039               	movf	(utoa@p+1)^0,w,c
 14250  002C80  E102               	bnz	u8201
 14251  002C82  0438               	decf	utoa@p^0,w,c
 14252  002C84  B0D8               	btfsc	status,0,c
 14253  002C86                     u8201:
 14254  002C86  D777               	goto	l6497
 14255  002C88                     u8200:
 14256  002C88  BE3B               	btfsc	(utoa@w+1)^0,7,c
 14257  002C8A  D007               	goto	u8220
 14258  002C8C  503B               	movf	(utoa@w+1)^0,w,c
 14259  002C8E  E103               	bnz	u8210
 14260  002C90  043A               	decf	utoa@w^0,w,c
 14261  002C92  A0D8               	btfss	status,0,c
 14262  002C94  D002               	goto	u8220
 14263  002C96                     u8210:
 14264  002C96  B26B               	btfsc	_flags^0,1,c
 14265  002C98  D76E               	goto	l6497
 14266  002C9A                     u8220:
 14267                           
 14268                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 618:     return pad(fp, &dbuf
      +                          [i], w);
 14269  002C9A  C026  F018         	movff	utoa@fp,pad@fp
 14270  002C9E  C027  F019         	movff	utoa@fp+1,pad@fp+1
 14271  002CA2  5044               	movf	utoa@i^0,w,c
 14272  002CA4  0F99               	addlw	low _dbuf
 14273  002CA6  6E1A               	movwf	pad@buf^0,c
 14274  002CA8  C03A  F01B         	movff	utoa@w,pad@p
 14275  002CAC  C03B  F01C         	movff	utoa@w+1,pad@p+1
 14276  002CB0  ECF1  F020         	call	_pad	;wreg free
 14277  002CB4  C018  F026         	movff	?_pad,?_utoa
 14278  002CB8  C019  F027         	movff	?_pad+1,?_utoa+1
 14279  002CBC  0012               	return		;funcret
 14280  002CBE                     __end_of_utoa:
 14281                           	opt callstack 0
 14282                           
 14283 ;; *************** function ___lomod *****************
 14284 ;; Defined at:
 14285 ;;		line 9 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/lomod.c"
 14286 ;; Parameters:    Size  Location     Type
 14287 ;;  dividend        8   12[COMRAM] unsigned long long 
 14288 ;;  divisor         8   20[COMRAM] unsigned long long 
 14289 ;; Auto vars:     Size  Location     Type
 14290 ;;  counter         1   28[COMRAM] unsigned char 
 14291 ;; Return value:  Size  Location     Type
 14292 ;;                  8   12[COMRAM] unsigned long long 
 14293 ;; Registers used:
 14294 ;;		wreg, status,2, status,0
 14295 ;; Tracked objects:
 14296 ;;		On entry : 0/0
 14297 ;;		On exit  : 0/0
 14298 ;;		Unchanged: 0/0
 14299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14300 ;;      Params:        16       0       0       0       0       0       0
 14301 ;;      Locals:         1       0       0       0       0       0       0
 14302 ;;      Temps:          0       0       0       0       0       0       0
 14303 ;;      Totals:        17       0       0       0       0       0       0
 14304 ;;Total ram usage:       17 bytes
 14305 ;; Hardware stack levels used:    1
 14306 ;; Hardware stack levels required when called:    2
 14307 ;; This function calls:
 14308 ;;		Nothing
 14309 ;; This function is called by:
 14310 ;;		_utoa
 14311 ;; This function uses a non-reentrant model
 14312 ;;
 14313                           
 14314                           	psect	text62
 14315  003D88                     __ptext62:
 14316                           	opt callstack 0
 14317  003D88                     ___lomod:
 14318                           	opt callstack 21
 14319                           
 14320                           ;incstack = 0
 14321  003D88  5015               	movf	___lomod@divisor^0,w,c
 14322  003D8A  1016               	iorwf	(___lomod@divisor+1)^0,w,c
 14323  003D8C  1017               	iorwf	(___lomod@divisor+2)^0,w,c
 14324  003D8E  1018               	iorwf	(___lomod@divisor+3)^0,w,c
 14325  003D90  1019               	iorwf	(___lomod@divisor+4)^0,w,c
 14326  003D92  101A               	iorwf	(___lomod@divisor+5)^0,w,c
 14327  003D94  101B               	iorwf	(___lomod@divisor+6)^0,w,c
 14328  003D96  101C               	iorwf	(___lomod@divisor+7)^0,w,c
 14329  003D98  B4D8               	btfsc	status,2,c
 14330  003D9A  D03C               	goto	l1329
 14331  003D9C  0E01               	movlw	1
 14332  003D9E  6E1D               	movwf	___lomod@counter^0,c
 14333  003DA0  D00A               	goto	l6371
 14334  003DA2                     l6369:
 14335  003DA2  90D8               	bcf	status,0,c
 14336  003DA4  3615               	rlcf	___lomod@divisor^0,f,c
 14337  003DA6  3616               	rlcf	(___lomod@divisor+1)^0,f,c
 14338  003DA8  3617               	rlcf	(___lomod@divisor+2)^0,f,c
 14339  003DAA  3618               	rlcf	(___lomod@divisor+3)^0,f,c
 14340  003DAC  3619               	rlcf	(___lomod@divisor+4)^0,f,c
 14341  003DAE  361A               	rlcf	(___lomod@divisor+5)^0,f,c
 14342  003DB0  361B               	rlcf	(___lomod@divisor+6)^0,f,c
 14343  003DB2  361C               	rlcf	(___lomod@divisor+7)^0,f,c
 14344  003DB4  2A1D               	incf	___lomod@counter^0,f,c
 14345  003DB6                     l6371:
 14346  003DB6  AE1C               	btfss	(___lomod@divisor+7)^0,7,c
 14347  003DB8  D7F4               	goto	l6369
 14348  003DBA                     u7890:
 14349  003DBA  5015               	movf	___lomod@divisor^0,w,c
 14350  003DBC  5C0D               	subwf	___lomod@dividend^0,w,c
 14351  003DBE  5016               	movf	(___lomod@divisor+1)^0,w,c
 14352  003DC0  580E               	subwfb	(___lomod@dividend+1)^0,w,c
 14353  003DC2  5017               	movf	(___lomod@divisor+2)^0,w,c
 14354  003DC4  580F               	subwfb	(___lomod@dividend+2)^0,w,c
 14355  003DC6  5018               	movf	(___lomod@divisor+3)^0,w,c
 14356  003DC8  5810               	subwfb	(___lomod@dividend+3)^0,w,c
 14357  003DCA  5019               	movf	(___lomod@divisor+4)^0,w,c
 14358  003DCC  5811               	subwfb	(___lomod@dividend+4)^0,w,c
 14359  003DCE  501A               	movf	(___lomod@divisor+5)^0,w,c
 14360  003DD0  5812               	subwfb	(___lomod@dividend+5)^0,w,c
 14361  003DD2  501B               	movf	(___lomod@divisor+6)^0,w,c
 14362  003DD4  5813               	subwfb	(___lomod@dividend+6)^0,w,c
 14363  003DD6  501C               	movf	(___lomod@divisor+7)^0,w,c
 14364  003DD8  5814               	subwfb	(___lomod@dividend+7)^0,w,c
 14365  003DDA  A0D8               	btfss	status,0,c
 14366  003DDC  D010               	goto	l6377
 14367  003DDE  5015               	movf	___lomod@divisor^0,w,c
 14368  003DE0  5E0D               	subwf	___lomod@dividend^0,f,c
 14369  003DE2  5016               	movf	(___lomod@divisor+1)^0,w,c
 14370  003DE4  5A0E               	subwfb	(___lomod@dividend+1)^0,f,c
 14371  003DE6  5017               	movf	(___lomod@divisor+2)^0,w,c
 14372  003DE8  5A0F               	subwfb	(___lomod@dividend+2)^0,f,c
 14373  003DEA  5018               	movf	(___lomod@divisor+3)^0,w,c
 14374  003DEC  5A10               	subwfb	(___lomod@dividend+3)^0,f,c
 14375  003DEE  5019               	movf	(___lomod@divisor+4)^0,w,c
 14376  003DF0  5A11               	subwfb	(___lomod@dividend+4)^0,f,c
 14377  003DF2  501A               	movf	(___lomod@divisor+5)^0,w,c
 14378  003DF4  5A12               	subwfb	(___lomod@dividend+5)^0,f,c
 14379  003DF6  501B               	movf	(___lomod@divisor+6)^0,w,c
 14380  003DF8  5A13               	subwfb	(___lomod@dividend+6)^0,f,c
 14381  003DFA  501C               	movf	(___lomod@divisor+7)^0,w,c
 14382  003DFC  5A14               	subwfb	(___lomod@dividend+7)^0,f,c
 14383  003DFE                     l6377:
 14384  003DFE  90D8               	bcf	status,0,c
 14385  003E00  321C               	rrcf	(___lomod@divisor+7)^0,f,c
 14386  003E02  321B               	rrcf	(___lomod@divisor+6)^0,f,c
 14387  003E04  321A               	rrcf	(___lomod@divisor+5)^0,f,c
 14388  003E06  3219               	rrcf	(___lomod@divisor+4)^0,f,c
 14389  003E08  3218               	rrcf	(___lomod@divisor+3)^0,f,c
 14390  003E0A  3217               	rrcf	(___lomod@divisor+2)^0,f,c
 14391  003E0C  3216               	rrcf	(___lomod@divisor+1)^0,f,c
 14392  003E0E  3215               	rrcf	___lomod@divisor^0,f,c
 14393  003E10  2E1D               	decfsz	___lomod@counter^0,f,c
 14394  003E12  D7D3               	goto	u7890
 14395  003E14                     l1329:
 14396  003E14  C00D  F00D         	movff	___lomod@dividend,?___lomod
 14397  003E18  C00E  F00E         	movff	___lomod@dividend+1,?___lomod+1
 14398  003E1C  C00F  F00F         	movff	___lomod@dividend+2,?___lomod+2
 14399  003E20  C010  F010         	movff	___lomod@dividend+3,?___lomod+3
 14400  003E24  C011  F011         	movff	___lomod@dividend+4,?___lomod+4
 14401  003E28  C012  F012         	movff	___lomod@dividend+5,?___lomod+5
 14402  003E2C  C013  F013         	movff	___lomod@dividend+6,?___lomod+6
 14403  003E30  C014  F014         	movff	___lomod@dividend+7,?___lomod+7
 14404  003E34  0012               	return		;funcret
 14405  003E36                     __end_of___lomod:
 14406                           	opt callstack 0
 14407                           
 14408 ;; *************** function ___lodiv *****************
 14409 ;; Defined at:
 14410 ;;		line 9 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/lodiv.c"
 14411 ;; Parameters:    Size  Location     Type
 14412 ;;  dividend        8   12[COMRAM] unsigned long long 
 14413 ;;  divisor         8   20[COMRAM] unsigned long long 
 14414 ;; Auto vars:     Size  Location     Type
 14415 ;;  quotient        8   28[COMRAM] unsigned long long 
 14416 ;;  counter         1   36[COMRAM] unsigned char 
 14417 ;; Return value:  Size  Location     Type
 14418 ;;                  8   12[COMRAM] unsigned long long 
 14419 ;; Registers used:
 14420 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14421 ;; Tracked objects:
 14422 ;;		On entry : 0/0
 14423 ;;		On exit  : 0/0
 14424 ;;		Unchanged: 0/0
 14425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14426 ;;      Params:        16       0       0       0       0       0       0
 14427 ;;      Locals:         9       0       0       0       0       0       0
 14428 ;;      Temps:          0       0       0       0       0       0       0
 14429 ;;      Totals:        25       0       0       0       0       0       0
 14430 ;;Total ram usage:       25 bytes
 14431 ;; Hardware stack levels used:    1
 14432 ;; Hardware stack levels required when called:    2
 14433 ;; This function calls:
 14434 ;;		Nothing
 14435 ;; This function is called by:
 14436 ;;		_utoa
 14437 ;; This function uses a non-reentrant model
 14438 ;;
 14439                           
 14440                           	psect	text63
 14441  003A7A                     __ptext63:
 14442                           	opt callstack 0
 14443  003A7A                     ___lodiv:
 14444                           	opt callstack 21
 14445                           
 14446                           ;incstack = 0
 14447  003A7A  EE20  F01D         	lfsr	2,___lodiv@quotient
 14448  003A7E  0E07               	movlw	7
 14449  003A80                     u7841:
 14450  003A80  6ADE               	clrf	postinc2,c
 14451  003A82  06E8               	decf	wreg,f,c
 14452  003A84  E2FD               	bc	u7841
 14453  003A86  5015               	movf	___lodiv@divisor^0,w,c
 14454  003A88  1016               	iorwf	(___lodiv@divisor+1)^0,w,c
 14455  003A8A  1017               	iorwf	(___lodiv@divisor+2)^0,w,c
 14456  003A8C  1018               	iorwf	(___lodiv@divisor+3)^0,w,c
 14457  003A8E  1019               	iorwf	(___lodiv@divisor+4)^0,w,c
 14458  003A90  101A               	iorwf	(___lodiv@divisor+5)^0,w,c
 14459  003A92  101B               	iorwf	(___lodiv@divisor+6)^0,w,c
 14460  003A94  101C               	iorwf	(___lodiv@divisor+7)^0,w,c
 14461  003A96  B4D8               	btfsc	status,2,c
 14462  003A98  D046               	goto	l1319
 14463  003A9A  0E01               	movlw	1
 14464  003A9C  6E25               	movwf	___lodiv@counter^0,c
 14465  003A9E  D00A               	goto	l6351
 14466  003AA0                     l6349:
 14467  003AA0  90D8               	bcf	status,0,c
 14468  003AA2  3615               	rlcf	___lodiv@divisor^0,f,c
 14469  003AA4  3616               	rlcf	(___lodiv@divisor+1)^0,f,c
 14470  003AA6  3617               	rlcf	(___lodiv@divisor+2)^0,f,c
 14471  003AA8  3618               	rlcf	(___lodiv@divisor+3)^0,f,c
 14472  003AAA  3619               	rlcf	(___lodiv@divisor+4)^0,f,c
 14473  003AAC  361A               	rlcf	(___lodiv@divisor+5)^0,f,c
 14474  003AAE  361B               	rlcf	(___lodiv@divisor+6)^0,f,c
 14475  003AB0  361C               	rlcf	(___lodiv@divisor+7)^0,f,c
 14476  003AB2  2A25               	incf	___lodiv@counter^0,f,c
 14477  003AB4                     l6351:
 14478  003AB4  AE1C               	btfss	(___lodiv@divisor+7)^0,7,c
 14479  003AB6  D7F4               	goto	l6349
 14480  003AB8                     u7860:
 14481  003AB8  90D8               	bcf	status,0,c
 14482  003ABA  361D               	rlcf	___lodiv@quotient^0,f,c
 14483  003ABC  361E               	rlcf	(___lodiv@quotient+1)^0,f,c
 14484  003ABE  361F               	rlcf	(___lodiv@quotient+2)^0,f,c
 14485  003AC0  3620               	rlcf	(___lodiv@quotient+3)^0,f,c
 14486  003AC2  3621               	rlcf	(___lodiv@quotient+4)^0,f,c
 14487  003AC4  3622               	rlcf	(___lodiv@quotient+5)^0,f,c
 14488  003AC6  3623               	rlcf	(___lodiv@quotient+6)^0,f,c
 14489  003AC8  3624               	rlcf	(___lodiv@quotient+7)^0,f,c
 14490  003ACA  5015               	movf	___lodiv@divisor^0,w,c
 14491  003ACC  5C0D               	subwf	___lodiv@dividend^0,w,c
 14492  003ACE  5016               	movf	(___lodiv@divisor+1)^0,w,c
 14493  003AD0  580E               	subwfb	(___lodiv@dividend+1)^0,w,c
 14494  003AD2  5017               	movf	(___lodiv@divisor+2)^0,w,c
 14495  003AD4  580F               	subwfb	(___lodiv@dividend+2)^0,w,c
 14496  003AD6  5018               	movf	(___lodiv@divisor+3)^0,w,c
 14497  003AD8  5810               	subwfb	(___lodiv@dividend+3)^0,w,c
 14498  003ADA  5019               	movf	(___lodiv@divisor+4)^0,w,c
 14499  003ADC  5811               	subwfb	(___lodiv@dividend+4)^0,w,c
 14500  003ADE  501A               	movf	(___lodiv@divisor+5)^0,w,c
 14501  003AE0  5812               	subwfb	(___lodiv@dividend+5)^0,w,c
 14502  003AE2  501B               	movf	(___lodiv@divisor+6)^0,w,c
 14503  003AE4  5813               	subwfb	(___lodiv@dividend+6)^0,w,c
 14504  003AE6  501C               	movf	(___lodiv@divisor+7)^0,w,c
 14505  003AE8  5814               	subwfb	(___lodiv@dividend+7)^0,w,c
 14506  003AEA  A0D8               	btfss	status,0,c
 14507  003AEC  D011               	goto	l6361
 14508  003AEE  5015               	movf	___lodiv@divisor^0,w,c
 14509  003AF0  5E0D               	subwf	___lodiv@dividend^0,f,c
 14510  003AF2  5016               	movf	(___lodiv@divisor+1)^0,w,c
 14511  003AF4  5A0E               	subwfb	(___lodiv@dividend+1)^0,f,c
 14512  003AF6  5017               	movf	(___lodiv@divisor+2)^0,w,c
 14513  003AF8  5A0F               	subwfb	(___lodiv@dividend+2)^0,f,c
 14514  003AFA  5018               	movf	(___lodiv@divisor+3)^0,w,c
 14515  003AFC  5A10               	subwfb	(___lodiv@dividend+3)^0,f,c
 14516  003AFE  5019               	movf	(___lodiv@divisor+4)^0,w,c
 14517  003B00  5A11               	subwfb	(___lodiv@dividend+4)^0,f,c
 14518  003B02  501A               	movf	(___lodiv@divisor+5)^0,w,c
 14519  003B04  5A12               	subwfb	(___lodiv@dividend+5)^0,f,c
 14520  003B06  501B               	movf	(___lodiv@divisor+6)^0,w,c
 14521  003B08  5A13               	subwfb	(___lodiv@dividend+6)^0,f,c
 14522  003B0A  501C               	movf	(___lodiv@divisor+7)^0,w,c
 14523  003B0C  5A14               	subwfb	(___lodiv@dividend+7)^0,f,c
 14524  003B0E  801D               	bsf	___lodiv@quotient^0,0,c
 14525  003B10                     l6361:
 14526  003B10  90D8               	bcf	status,0,c
 14527  003B12  321C               	rrcf	(___lodiv@divisor+7)^0,f,c
 14528  003B14  321B               	rrcf	(___lodiv@divisor+6)^0,f,c
 14529  003B16  321A               	rrcf	(___lodiv@divisor+5)^0,f,c
 14530  003B18  3219               	rrcf	(___lodiv@divisor+4)^0,f,c
 14531  003B1A  3218               	rrcf	(___lodiv@divisor+3)^0,f,c
 14532  003B1C  3217               	rrcf	(___lodiv@divisor+2)^0,f,c
 14533  003B1E  3216               	rrcf	(___lodiv@divisor+1)^0,f,c
 14534  003B20  3215               	rrcf	___lodiv@divisor^0,f,c
 14535  003B22  2E25               	decfsz	___lodiv@counter^0,f,c
 14536  003B24  D7C9               	goto	u7860
 14537  003B26                     l1319:
 14538  003B26  C01D  F00D         	movff	___lodiv@quotient,?___lodiv
 14539  003B2A  C01E  F00E         	movff	___lodiv@quotient+1,?___lodiv+1
 14540  003B2E  C01F  F00F         	movff	___lodiv@quotient+2,?___lodiv+2
 14541  003B32  C020  F010         	movff	___lodiv@quotient+3,?___lodiv+3
 14542  003B36  C021  F011         	movff	___lodiv@quotient+4,?___lodiv+4
 14543  003B3A  C022  F012         	movff	___lodiv@quotient+5,?___lodiv+5
 14544  003B3E  C023  F013         	movff	___lodiv@quotient+6,?___lodiv+6
 14545  003B42  C024  F014         	movff	___lodiv@quotient+7,?___lodiv+7
 14546  003B46  0012               	return		;funcret
 14547  003B48                     __end_of___lodiv:
 14548                           	opt callstack 0
 14549                           
 14550 ;; *************** function _strncmp *****************
 14551 ;; Defined at:
 14552 ;;		line 3 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/strncmp.c"
 14553 ;; Parameters:    Size  Location     Type
 14554 ;;  _l              2   12[COMRAM] PTR const unsigned char 
 14555 ;;		 -> STR_37(35), STR_36(30), STR_35(31), STR_32(19), 
 14556 ;;		 -> STR_29(33), STR_28(17), STR_27(14), STR_26(14), 
 14557 ;;		 -> STR_25(17), STR_24(15), STR_23(15), STR_22(14), 
 14558 ;;		 -> STR_21(14), STR_20(27), STR_19(39), STR_18(14), 
 14559 ;;		 -> STR_17(19), STR_14(23), STR_11(44), STR_8(36), 
 14560 ;;		 -> STR_7(7), STR_6(55), STR_5(72), STR_4(74), 
 14561 ;;		 -> STR_1(22), 
 14562 ;;  _r              2   14[COMRAM] PTR const unsigned char 
 14563 ;;		 -> STR_49(3), STR_44(3), STR_40(3), 
 14564 ;;  n               2   16[COMRAM] unsigned int 
 14565 ;; Auto vars:     Size  Location     Type
 14566 ;;  r               2   21[COMRAM] PTR const unsigned char 
 14567 ;;		 -> STR_49(3), STR_44(3), STR_40(3), 
 14568 ;;  l               2   19[COMRAM] PTR const unsigned char 
 14569 ;;		 -> STR_37(35), STR_36(30), STR_35(31), STR_32(19), 
 14570 ;;		 -> STR_29(33), STR_28(17), STR_27(14), STR_26(14), 
 14571 ;;		 -> STR_25(17), STR_24(15), STR_23(15), STR_22(14), 
 14572 ;;		 -> STR_21(14), STR_20(27), STR_19(39), STR_18(14), 
 14573 ;;		 -> STR_17(19), STR_14(23), STR_11(44), STR_8(36), 
 14574 ;;		 -> STR_7(7), STR_6(55), STR_5(72), STR_4(74), 
 14575 ;;		 -> STR_1(22), 
 14576 ;; Return value:  Size  Location     Type
 14577 ;;                  2   12[COMRAM] int 
 14578 ;; Registers used:
 14579 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 14580 ;; Tracked objects:
 14581 ;;		On entry : 0/0
 14582 ;;		On exit  : 0/0
 14583 ;;		Unchanged: 0/0
 14584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14585 ;;      Params:         6       0       0       0       0       0       0
 14586 ;;      Locals:         4       0       0       0       0       0       0
 14587 ;;      Temps:          1       0       0       0       0       0       0
 14588 ;;      Totals:        11       0       0       0       0       0       0
 14589 ;;Total ram usage:       11 bytes
 14590 ;; Hardware stack levels used:    1
 14591 ;; Hardware stack levels required when called:    2
 14592 ;; This function calls:
 14593 ;;		Nothing
 14594 ;; This function is called by:
 14595 ;;		_vfpfcnvrt
 14596 ;; This function uses a non-reentrant model
 14597 ;;
 14598                           
 14599                           	psect	text64
 14600  003EE0                     __ptext64:
 14601                           	opt callstack 0
 14602  003EE0                     _strncmp:
 14603                           	opt callstack 22
 14604                           
 14605                           ;incstack = 0
 14606  003EE0  C00D  F014         	movff	strncmp@_l,strncmp@l
 14607  003EE4  C00E  F015         	movff	strncmp@_l+1,strncmp@l+1
 14608  003EE8  C00F  F016         	movff	strncmp@_r,strncmp@r
 14609  003EEC  C010  F017         	movff	strncmp@_r+1,strncmp@r+1
 14610  003EF0  0611               	decf	strncmp@n^0,f,c
 14611  003EF2  A0D8               	btfss	status,0,c
 14612  003EF4  0612               	decf	(strncmp@n+1)^0,f,c
 14613  003EF6  2811               	incf	strncmp@n^0,w,c
 14614  003EF8  E10F               	bnz	l6529
 14615  003EFA  2812               	incf	(strncmp@n+1)^0,w,c
 14616  003EFC  A4D8               	btfss	status,2,c
 14617  003EFE  D00C               	goto	l6529
 14618  003F00  0E00               	movlw	0
 14619  003F02  6E0E               	movwf	(?_strncmp+1)^0,c
 14620  003F04  0E00               	movlw	0
 14621  003F06  6E0D               	movwf	?_strncmp^0,c
 14622  003F08  0012               	return	
 14623  003F0A                     l6527:
 14624  003F0A  4A14               	infsnz	strncmp@l^0,f,c
 14625  003F0C  2A15               	incf	(strncmp@l+1)^0,f,c
 14626  003F0E  4A16               	infsnz	strncmp@r^0,f,c
 14627  003F10  2A17               	incf	(strncmp@r+1)^0,f,c
 14628  003F12  0611               	decf	strncmp@n^0,f,c
 14629  003F14  A0D8               	btfss	status,0,c
 14630  003F16  0612               	decf	(strncmp@n+1)^0,f,c
 14631  003F18                     l6529:
 14632  003F18  C014  FFF6         	movff	strncmp@l,tblptrl
 14633  003F1C  C015  FFF7         	movff	strncmp@l+1,tblptrh
 14634  003F20                     	if	0	;tblptru may be non-zero
 14635  003F20                     	endif
 14636  003F20                     	if	0	;tblptru may be non-zero
 14637  003F20                     	endif
 14638  003F20  0008               	tblrd		*
 14639  003F22  50F5               	movf	tablat,w,c
 14640  003F24  0900               	iorlw	0
 14641  003F26  B4D8               	btfsc	status,2,c
 14642  003F28  D01D               	goto	u8270
 14643  003F2A  C016  FFF6         	movff	strncmp@r,tblptrl
 14644  003F2E  C017  FFF7         	movff	strncmp@r+1,tblptrh
 14645  003F32                     	if	0	;tblptru may be non-zero
 14646  003F32                     	endif
 14647  003F32                     	if	0	;tblptru may be non-zero
 14648  003F32                     	endif
 14649  003F32  0008               	tblrd		*
 14650  003F34  50F5               	movf	tablat,w,c
 14651  003F36  0900               	iorlw	0
 14652  003F38  B4D8               	btfsc	status,2,c
 14653  003F3A  D014               	goto	u8270
 14654  003F3C  5011               	movf	strncmp@n^0,w,c
 14655  003F3E  1012               	iorwf	(strncmp@n+1)^0,w,c
 14656  003F40  B4D8               	btfsc	status,2,c
 14657  003F42  D010               	goto	u8270
 14658  003F44  C014  FFF6         	movff	strncmp@l,tblptrl
 14659  003F48  C015  FFF7         	movff	strncmp@l+1,tblptrh
 14660  003F4C                     	if	0	;tblptru may be non-zero
 14661  003F4C                     	endif
 14662  003F4C                     	if	0	;tblptru may be non-zero
 14663  003F4C                     	endif
 14664  003F4C  0008               	tblrd		*
 14665  003F4E  CFF5 F013          	movff	tablat,??_strncmp
 14666  003F52  C016  FFF6         	movff	strncmp@r,tblptrl
 14667  003F56  C017  FFF7         	movff	strncmp@r+1,tblptrh
 14668  003F5A                     	if	0	;tblptru may be non-zero
 14669  003F5A                     	endif
 14670  003F5A                     	if	0	;tblptru may be non-zero
 14671  003F5A                     	endif
 14672  003F5A  0008               	tblrd		*
 14673  003F5C  50F5               	movf	tablat,w,c
 14674  003F5E  1813               	xorwf	??_strncmp^0,w,c
 14675  003F60  B4D8               	btfsc	status,2,c
 14676  003F62  D7D3               	goto	l6527
 14677  003F64                     u8270:
 14678  003F64  C014  FFF6         	movff	strncmp@l,tblptrl
 14679  003F68  C015  FFF7         	movff	strncmp@l+1,tblptrh
 14680  003F6C                     	if	0	;tblptru may be non-zero
 14681  003F6C                     	endif
 14682  003F6C                     	if	0	;tblptru may be non-zero
 14683  003F6C                     	endif
 14684  003F6C  0008               	tblrd		*
 14685  003F6E  CFF5 F013          	movff	tablat,??_strncmp
 14686  003F72  C016  FFF6         	movff	strncmp@r,tblptrl
 14687  003F76  C017  FFF7         	movff	strncmp@r+1,tblptrh
 14688  003F7A                     	if	0	;tblptru may be non-zero
 14689  003F7A                     	endif
 14690  003F7A                     	if	0	;tblptru may be non-zero
 14691  003F7A                     	endif
 14692  003F7A  0008               	tblrd		*
 14693  003F7C  50F5               	movf	tablat,w,c
 14694  003F7E  5C13               	subwf	??_strncmp^0,w,c
 14695  003F80  6E0D               	movwf	?_strncmp^0,c
 14696  003F82  6A0E               	clrf	(?_strncmp+1)^0,c
 14697  003F84  A0D8               	btfss	status,0,c
 14698  003F86  060E               	decf	(?_strncmp+1)^0,f,c
 14699  003F88  0012               	return		;funcret
 14700  003F8A                     __end_of_strncmp:
 14701                           	opt callstack 0
 14702                           
 14703 ;; *************** function _stoa *****************
 14704 ;; Defined at:
 14705 ;;		line 546 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c"
 14706 ;; Parameters:    Size  Location     Type
 14707 ;;  fp              2   17[COMRAM] PTR struct _IO_FILE
 14708 ;;		 -> NULL(0), 
 14709 ;;  s               2   19[COMRAM] PTR unsigned char 
 14710 ;;		 -> ?_printf(2), calc_power@v(2), STR_34(4), STR_33(3), 
 14711 ;;		 -> STR_31(4), STR_30(3), STR_16(3), STR_15(3), 
 14712 ;;		 -> STR_13(5), STR_12(5), STR_10(5), STR_9(5), 
 14713 ;;		 -> down_rxbuf(101), STR_3(9), STR_2(7), 
 14714 ;; Auto vars:     Size  Location     Type
 14715 ;;  nuls            7   22[COMRAM] unsigned char [7]
 14716 ;;  l               2   37[COMRAM] int 
 14717 ;;  p               2   35[COMRAM] int 
 14718 ;;  cp              2   33[COMRAM] PTR unsigned char 
 14719 ;;		 -> ?_printf(2), stoa@nuls(7), calc_power@v(2), STR_34(4), 
 14720 ;;		 -> STR_33(3), STR_31(4), STR_30(3), STR_16(3), 
 14721 ;;		 -> STR_15(3), STR_13(5), STR_12(5), STR_10(5), 
 14722 ;;		 -> STR_9(5), down_rxbuf(101), STR_3(9), STR_2(7), 
 14723 ;;  w               2   31[COMRAM] int 
 14724 ;;  i               2   29[COMRAM] int 
 14725 ;; Return value:  Size  Location     Type
 14726 ;;                  2   17[COMRAM] int 
 14727 ;; Registers used:
 14728 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14729 ;; Tracked objects:
 14730 ;;		On entry : 0/0
 14731 ;;		On exit  : 0/0
 14732 ;;		Unchanged: 0/0
 14733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14734 ;;      Params:         4       0       0       0       0       0       0
 14735 ;;      Locals:        17       0       0       0       0       0       0
 14736 ;;      Temps:          1       0       0       0       0       0       0
 14737 ;;      Totals:        22       0       0       0       0       0       0
 14738 ;;Total ram usage:       22 bytes
 14739 ;; Hardware stack levels used:    1
 14740 ;; Hardware stack levels required when called:    4
 14741 ;; This function calls:
 14742 ;;		_fputc
 14743 ;;		_strlen
 14744 ;; This function is called by:
 14745 ;;		_vfpfcnvrt
 14746 ;; This function uses a non-reentrant model
 14747 ;;
 14748                           
 14749                           	psect	text65
 14750  003096                     __ptext65:
 14751                           	opt callstack 0
 14752  003096                     _stoa:
 14753                           	opt callstack 20
 14754                           
 14755                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 546: static int stoa(FILE *fp
      +                          , char *s);/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 547: {;/opt/microch
      +                          ip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 548:     char *cp, nuls[] = "(null)";
 14756                           
 14757                           ;incstack = 0
 14758  003096  EE20  F0ED         	lfsr	2,stoa@F1139
 14759  00309A  EE10  F017         	lfsr	1,stoa@nuls
 14760  00309E  0E06               	movlw	6
 14761  0030A0                     u8061:
 14762  0030A0  CFDB FFE3          	movff	plusw2,plusw1
 14763  0030A4  06E8               	decf	wreg,f,c
 14764  0030A6  E2FC               	bc	u8061
 14765                           
 14766                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 549:     int i, l, p, w;;/opt
      +                          /microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 552:     cp = s;
 14767  0030A8  C014  F022         	movff	stoa@s,stoa@cp
 14768  0030AC  C015  F023         	movff	stoa@s+1,stoa@cp+1
 14769                           
 14770                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 553:     if (!cp) {
 14771  0030B0  5022               	movf	stoa@cp^0,w,c
 14772  0030B2  1023               	iorwf	(stoa@cp+1)^0,w,c
 14773  0030B4  A4D8               	btfss	status,2,c
 14774  0030B6  D003               	goto	l6451
 14775                           
 14776                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 554:         cp = nuls;
 14777  0030B8  0E17               	movlw	low stoa@nuls
 14778  0030BA  6E22               	movwf	stoa@cp^0,c
 14779  0030BC  6A23               	clrf	(stoa@cp+1)^0,c
 14780  0030BE                     l6451:
 14781                           
 14782                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 558:     l = strlen(cp);
 14783  0030BE  C022  F00D         	movff	stoa@cp,strlen@s
 14784  0030C2  C023  F00E         	movff	stoa@cp+1,strlen@s+1
 14785  0030C6  EC8A  F026         	call	_strlen	;wreg free
 14786  0030CA  C00D  F026         	movff	?_strlen,stoa@l
 14787  0030CE  C00E  F027         	movff	?_strlen+1,stoa@l+1
 14788                           
 14789                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 559:     p = prec;
 14790  0030D2  C069  F024         	movff	_prec,stoa@p
 14791  0030D6  C06A  F025         	movff	_prec+1,stoa@p+1
 14792                           
 14793                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 560:     l = (!(p < 0) && (p 
      +                          < l)) ? p : l;
 14794  0030DA  BE25               	btfsc	(stoa@p+1)^0,7,c
 14795  0030DC  D00E               	goto	l829
 14796  0030DE  5026               	movf	stoa@l^0,w,c
 14797  0030E0  5C24               	subwf	stoa@p^0,w,c
 14798  0030E2  5025               	movf	(stoa@p+1)^0,w,c
 14799  0030E4  0A80               	xorlw	128
 14800  0030E6  6E16               	movwf	??_stoa^0,c
 14801  0030E8  5027               	movf	(stoa@l+1)^0,w,c
 14802  0030EA  0A80               	xorlw	128
 14803  0030EC  5816               	subwfb	??_stoa^0,w,c
 14804  0030EE  B0D8               	btfsc	status,0,c
 14805  0030F0  D004               	goto	l829
 14806  0030F2  C024  F026         	movff	stoa@p,stoa@l
 14807  0030F6  C025  F027         	movff	stoa@p+1,stoa@l+1
 14808  0030FA                     l829:
 14809                           
 14810                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 561:     p = l;
 14811  0030FA  C026  F024         	movff	stoa@l,stoa@p
 14812  0030FE  C027  F025         	movff	stoa@l+1,stoa@p+1
 14813                           
 14814                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 562:     w = width;
 14815  003102  C067  F020         	movff	_width,stoa@w
 14816  003106  C068  F021         	movff	_width+1,stoa@w+1
 14817                           
 14818                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 565:     if (!(flags & (1 << 
      +                          0))) {
 14819  00310A  A06B               	btfss	_flags^0,0,c
 14820  00310C  D00D               	goto	l6465
 14821  00310E  D016               	goto	u8110
 14822  003110                     l6461:
 14823                           
 14824                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 567:             fputc(' ', f
      +                          p);
 14825  003110  0E00               	movlw	0
 14826  003112  6E0F               	movwf	(fputc@c+1)^0,c
 14827  003114  0E20               	movlw	32
 14828  003116  6E0E               	movwf	fputc@c^0,c
 14829  003118  C012  F010         	movff	stoa@fp,fputc@fp
 14830  00311C  C013  F011         	movff	stoa@fp+1,fputc@fp+1
 14831  003120  EC7C  F027         	call	_fputc	;wreg free
 14832                           
 14833                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 568:             ++l;
 14834  003124  4A26               	infsnz	stoa@l^0,f,c
 14835  003126  2A27               	incf	(stoa@l+1)^0,f,c
 14836  003128                     l6465:
 14837                           
 14838                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 566:         while (l < w) {
 14839  003128  5020               	movf	stoa@w^0,w,c
 14840  00312A  5C26               	subwf	stoa@l^0,w,c
 14841  00312C  5027               	movf	(stoa@l+1)^0,w,c
 14842  00312E  0A80               	xorlw	128
 14843  003130  6E16               	movwf	??_stoa^0,c
 14844  003132  5021               	movf	(stoa@w+1)^0,w,c
 14845  003134  0A80               	xorlw	128
 14846  003136  5816               	subwfb	??_stoa^0,w,c
 14847  003138  A0D8               	btfss	status,0,c
 14848  00313A  D7EA               	goto	l6461
 14849  00313C                     u8110:
 14850                           
 14851                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 573:     i = 0;
 14852  00313C  0E00               	movlw	0
 14853  00313E  6E1F               	movwf	(stoa@i+1)^0,c
 14854  003140  0E00               	movlw	0
 14855  003142  6E1E               	movwf	stoa@i^0,c
 14856                           
 14857                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 574:     while (i < p) {
 14858  003144  D01E               	goto	l6475
 14859  003146                     l6469:
 14860                           
 14861                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 575:         fputc(*cp, fp);
 14862  003146  C022  FFF6         	movff	stoa@cp,tblptrl
 14863  00314A  C023  FFF7         	movff	stoa@cp+1,tblptrh
 14864  00314E  6AF8               	clrf	tblptru,c
 14865  003150  0E05               	movlw	(high __ramtop+-1)
 14866  003152  64F7               	cpfsgt	tblptrh,c
 14867  003154  D003               	bra	u8127
 14868  003156  0008               	tblrd		*
 14869  003158  50F5               	movf	tablat,w,c
 14870  00315A  D005               	bra	u8120
 14871  00315C                     u8127:
 14872  00315C  CFF6 FFE1          	movff	tblptrl,fsr1l
 14873  003160  CFF7 FFE2          	movff	tblptrh,fsr1h
 14874  003164  50E7               	movf	indf1,w,c
 14875  003166                     u8120:
 14876  003166  6E16               	movwf	??_stoa^0,c
 14877  003168  5016               	movf	??_stoa^0,w,c
 14878  00316A  6E0E               	movwf	fputc@c^0,c
 14879  00316C  6A0F               	clrf	(fputc@c+1)^0,c
 14880  00316E  C012  F010         	movff	stoa@fp,fputc@fp
 14881  003172  C013  F011         	movff	stoa@fp+1,fputc@fp+1
 14882  003176  EC7C  F027         	call	_fputc	;wreg free
 14883                           
 14884                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 576:         ++cp;
 14885  00317A  4A22               	infsnz	stoa@cp^0,f,c
 14886  00317C  2A23               	incf	(stoa@cp+1)^0,f,c
 14887                           
 14888                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 577:         ++i;
 14889  00317E  4A1E               	infsnz	stoa@i^0,f,c
 14890  003180  2A1F               	incf	(stoa@i+1)^0,f,c
 14891  003182                     l6475:
 14892                           
 14893                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 574:     while (i < p) {
 14894  003182  5024               	movf	stoa@p^0,w,c
 14895  003184  5C1E               	subwf	stoa@i^0,w,c
 14896  003186  501F               	movf	(stoa@i+1)^0,w,c
 14897  003188  0A80               	xorlw	128
 14898  00318A  6E16               	movwf	??_stoa^0,c
 14899  00318C  5025               	movf	(stoa@p+1)^0,w,c
 14900  00318E  0A80               	xorlw	128
 14901  003190  5816               	subwfb	??_stoa^0,w,c
 14902  003192  A0D8               	btfss	status,0,c
 14903  003194  D7D8               	goto	l6469
 14904                           
 14905                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 581:     if (flags & (1 << 0)
      +                          ) {
 14906  003196  B06B               	btfsc	_flags^0,0,c
 14907  003198  D00D               	goto	l6483
 14908  00319A  D016               	goto	u8150
 14909  00319C                     l6479:
 14910                           
 14911                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 583:             fputc(' ', f
      +                          p);
 14912  00319C  0E00               	movlw	0
 14913  00319E  6E0F               	movwf	(fputc@c+1)^0,c
 14914  0031A0  0E20               	movlw	32
 14915  0031A2  6E0E               	movwf	fputc@c^0,c
 14916  0031A4  C012  F010         	movff	stoa@fp,fputc@fp
 14917  0031A8  C013  F011         	movff	stoa@fp+1,fputc@fp+1
 14918  0031AC  EC7C  F027         	call	_fputc	;wreg free
 14919                           
 14920                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 584:             ++l;
 14921  0031B0  4A26               	infsnz	stoa@l^0,f,c
 14922  0031B2  2A27               	incf	(stoa@l+1)^0,f,c
 14923  0031B4                     l6483:
 14924                           
 14925                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 582:         while (l < w) {
 14926  0031B4  5020               	movf	stoa@w^0,w,c
 14927  0031B6  5C26               	subwf	stoa@l^0,w,c
 14928  0031B8  5027               	movf	(stoa@l+1)^0,w,c
 14929  0031BA  0A80               	xorlw	128
 14930  0031BC  6E16               	movwf	??_stoa^0,c
 14931  0031BE  5021               	movf	(stoa@w+1)^0,w,c
 14932  0031C0  0A80               	xorlw	128
 14933  0031C2  5816               	subwfb	??_stoa^0,w,c
 14934  0031C4  A0D8               	btfss	status,0,c
 14935  0031C6  D7EA               	goto	l6479
 14936  0031C8                     u8150:
 14937                           
 14938                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 588:     return l;
 14939                           
 14940                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 586:     }
 14941  0031C8  C026  F012         	movff	stoa@l,?_stoa
 14942  0031CC  C027  F013         	movff	stoa@l+1,?_stoa+1
 14943  0031D0  0012               	return		;funcret
 14944  0031D2                     __end_of_stoa:
 14945                           	opt callstack 0
 14946                           
 14947 ;; *************** function _dtoa *****************
 14948 ;; Defined at:
 14949 ;;		line 274 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c"
 14950 ;; Parameters:    Size  Location     Type
 14951 ;;  fp              2   38[COMRAM] PTR struct _IO_FILE
 14952 ;;		 -> NULL(0), 
 14953 ;;  d               8   40[COMRAM] long long 
 14954 ;; Auto vars:     Size  Location     Type
 14955 ;;  n               8   64[COMRAM] long long 
 14956 ;;  i               2   72[COMRAM] int 
 14957 ;;  s               2   62[COMRAM] int 
 14958 ;;  w               2   60[COMRAM] int 
 14959 ;;  p               2   58[COMRAM] int 
 14960 ;; Return value:  Size  Location     Type
 14961 ;;                  2   38[COMRAM] int 
 14962 ;; Registers used:
 14963 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14964 ;; Tracked objects:
 14965 ;;		On entry : 0/0
 14966 ;;		On exit  : 0/0
 14967 ;;		Unchanged: 0/0
 14968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14969 ;;      Params:        10       0       0       0       0       0       0
 14970 ;;      Locals:        18       0       0       0       0       0       0
 14971 ;;      Temps:          8       0       0       0       0       0       0
 14972 ;;      Totals:        36       0       0       0       0       0       0
 14973 ;;Total ram usage:       36 bytes
 14974 ;; Hardware stack levels used:    1
 14975 ;; Hardware stack levels required when called:    6
 14976 ;; This function calls:
 14977 ;;		___aodiv
 14978 ;;		___aomod
 14979 ;;		_abs
 14980 ;;		_pad
 14981 ;; This function is called by:
 14982 ;;		_vfpfcnvrt
 14983 ;; This function uses a non-reentrant model
 14984 ;;
 14985                           
 14986                           	psect	text66
 14987  001D90                     __ptext66:
 14988                           	opt callstack 0
 14989  001D90                     _dtoa:
 14990                           	opt callstack 18
 14991                           
 14992                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 274: static int dtoa(FILE *fp
      +                          , long long d);/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 275: {;/opt/mic
      +                          rochip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 276:     int i, p, s, w;;/opt/microchi
      +                          p/xc8/v2.10/pic/sources/c99/common/doprnt.c: 277:     long long n;;/opt/microchip/xc8/v2
      +                          .10/pic/sources/c99/common/doprnt.c: 280:     n = d;
 14993                           
 14994                           ;incstack = 0
 14995  001D90  C029  F041         	movff	dtoa@d,dtoa@n
 14996  001D94  C02A  F042         	movff	dtoa@d+1,dtoa@n+1
 14997  001D98  C02B  F043         	movff	dtoa@d+2,dtoa@n+2
 14998  001D9C  C02C  F044         	movff	dtoa@d+3,dtoa@n+3
 14999  001DA0  C02D  F045         	movff	dtoa@d+4,dtoa@n+4
 15000  001DA4  C02E  F046         	movff	dtoa@d+5,dtoa@n+5
 15001  001DA8  C02F  F047         	movff	dtoa@d+6,dtoa@n+6
 15002  001DAC  C030  F048         	movff	dtoa@d+7,dtoa@n+7
 15003                           
 15004                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 281:     s = n < 0 ? 1 : 0;
 15005  001DB0  AE48               	btfss	(dtoa@n+7)^0,7,c
 15006  001DB2  D002               	goto	u7910
 15007  001DB4  0E01               	movlw	1
 15008  001DB6  D001               	goto	u7920
 15009  001DB8                     u7910:
 15010  001DB8  0E00               	movlw	0
 15011  001DBA                     u7920:
 15012  001DBA  6E3F               	movwf	dtoa@s^0,c
 15013  001DBC  6A40               	clrf	(dtoa@s+1)^0,c
 15014                           
 15015                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 282:     if (s) {
 15016  001DBE  503F               	movf	dtoa@s^0,w,c
 15017  001DC0  1040               	iorwf	(dtoa@s+1)^0,w,c
 15018  001DC2  B4D8               	btfsc	status,2,c
 15019  001DC4  D010               	goto	l6387
 15020                           
 15021                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 283:         n = -n;
 15022  001DC6  1E48               	comf	(dtoa@n+7)^0,f,c
 15023  001DC8  1E47               	comf	(dtoa@n+6)^0,f,c
 15024  001DCA  1E46               	comf	(dtoa@n+5)^0,f,c
 15025  001DCC  1E45               	comf	(dtoa@n+4)^0,f,c
 15026  001DCE  1E44               	comf	(dtoa@n+3)^0,f,c
 15027  001DD0  1E43               	comf	(dtoa@n+2)^0,f,c
 15028  001DD2  1E42               	comf	(dtoa@n+1)^0,f,c
 15029  001DD4  6C41               	negf	dtoa@n^0,c
 15030  001DD6  0E00               	movlw	0
 15031  001DD8  2242               	addwfc	(dtoa@n+1)^0,f,c
 15032  001DDA  2243               	addwfc	(dtoa@n+2)^0,f,c
 15033  001DDC  2244               	addwfc	(dtoa@n+3)^0,f,c
 15034  001DDE  2245               	addwfc	(dtoa@n+4)^0,f,c
 15035  001DE0  2246               	addwfc	(dtoa@n+5)^0,f,c
 15036  001DE2  2247               	addwfc	(dtoa@n+6)^0,f,c
 15037  001DE4  2248               	addwfc	(dtoa@n+7)^0,f,c
 15038  001DE6                     l6387:
 15039                           
 15040                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 287:     if (!(prec < 0)) {
 15041  001DE6  AE6A               	btfss	(_prec+1)^0,7,c
 15042                           
 15043                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 288:         flags &= ~(1 << 
      +                          1);
 15044  001DE8  926B               	bcf	_flags^0,1,c
 15045                           
 15046                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 290:     p = (0 < prec) ? pre
      +                          c : 1;
 15047  001DEA  BE6A               	btfsc	(_prec+1)^0,7,c
 15048  001DEC  D005               	goto	u7950
 15049  001DEE  506A               	movf	(_prec+1)^0,w,c
 15050  001DF0  E108               	bnz	l800
 15051  001DF2  0469               	decf	_prec^0,w,c
 15052  001DF4  B0D8               	btfsc	status,0,c
 15053  001DF6  D005               	goto	l800
 15054  001DF8                     u7950:
 15055  001DF8  0E00               	movlw	0
 15056  001DFA  6E3C               	movwf	(dtoa@p+1)^0,c
 15057  001DFC  0E01               	movlw	1
 15058  001DFE  6E3B               	movwf	dtoa@p^0,c
 15059  001E00  D004               	goto	l802
 15060  001E02                     l800:
 15061  001E02  C069  F03B         	movff	_prec,dtoa@p
 15062  001E06  C06A  F03C         	movff	_prec+1,dtoa@p+1
 15063  001E0A                     l802:
 15064                           
 15065                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 291:     w = width;
 15066  001E0A  C067  F03D         	movff	_width,dtoa@w
 15067  001E0E  C068  F03E         	movff	_width+1,dtoa@w+1
 15068                           
 15069                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 292:     if (s || (flags & (1
      +                           << 2))) {
 15070  001E12  503F               	movf	dtoa@s^0,w,c
 15071  001E14  1040               	iorwf	(dtoa@s+1)^0,w,c
 15072  001E16  A4D8               	btfss	status,2,c
 15073  001E18  D002               	goto	u7970
 15074  001E1A  A46B               	btfss	_flags^0,2,c
 15075  001E1C  D003               	goto	l6401
 15076  001E1E                     u7970:
 15077                           
 15078                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 293:         --w;
 15079  001E1E  063D               	decf	dtoa@w^0,f,c
 15080  001E20  A0D8               	btfss	status,0,c
 15081  001E22  063E               	decf	(dtoa@w+1)^0,f,c
 15082  001E24                     l6401:
 15083                           
 15084                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 297:     i = sizeof(dbuf) - 1
      +                          ;
 15085  001E24  0E00               	movlw	0
 15086  001E26  6E4A               	movwf	(dtoa@i+1)^0,c
 15087  001E28  0E1F               	movlw	31
 15088  001E2A  6E49               	movwf	dtoa@i^0,c
 15089                           
 15090                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 298:     dbuf[i] = '\0';
 15091  001E2C  0E00               	movlw	0
 15092  001E2E  0100               	movlb	0	; () banked
 15093  001E30  6FB8               	movwf	(_dbuf+31)& (0+255),b
 15094                           
 15095                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 299:     while (!(i < 1) && (
      +                          n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 15096  001E32  D07A               	goto	l6415
 15097  001E34                     l6405:
 15098                           
 15099                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 300:         --i;
 15100  001E34  0649               	decf	dtoa@i^0,f,c
 15101  001E36  A0D8               	btfss	status,0,c
 15102  001E38  064A               	decf	(dtoa@i+1)^0,f,c
 15103                           
 15104                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 301:         dbuf[i] = '0' + 
      +                          abs(n % 10);
 15105  001E3A  5049               	movf	dtoa@i^0,w,c
 15106  001E3C  0F99               	addlw	low _dbuf
 15107  001E3E  6ED9               	movwf	fsr2l,c
 15108  001E40  6ADA               	clrf	fsr2h,c
 15109  001E42  C041  F00D         	movff	dtoa@n,___aomod@dividend
 15110  001E46  C042  F00E         	movff	dtoa@n+1,___aomod@dividend+1
 15111  001E4A  C043  F00F         	movff	dtoa@n+2,___aomod@dividend+2
 15112  001E4E  C044  F010         	movff	dtoa@n+3,___aomod@dividend+3
 15113  001E52  C045  F011         	movff	dtoa@n+4,___aomod@dividend+4
 15114  001E56  C046  F012         	movff	dtoa@n+5,___aomod@dividend+5
 15115  001E5A  C047  F013         	movff	dtoa@n+6,___aomod@dividend+6
 15116  001E5E  C048  F014         	movff	dtoa@n+7,___aomod@dividend+7
 15117  001E62  0E0A               	movlw	10
 15118  001E64  6E15               	movwf	___aomod@divisor^0,c
 15119  001E66  0E00               	movlw	0
 15120  001E68  6E16               	movwf	(___aomod@divisor+1)^0,c
 15121  001E6A  0E00               	movlw	0
 15122  001E6C  6E17               	movwf	(___aomod@divisor+2)^0,c
 15123  001E6E  0E00               	movlw	0
 15124  001E70  6E18               	movwf	(___aomod@divisor+3)^0,c
 15125  001E72  0E00               	movlw	0
 15126  001E74  6E19               	movwf	(___aomod@divisor+4)^0,c
 15127  001E76  0E00               	movlw	0
 15128  001E78  6E1A               	movwf	(___aomod@divisor+5)^0,c
 15129  001E7A  0E00               	movlw	0
 15130  001E7C  6E1B               	movwf	(___aomod@divisor+6)^0,c
 15131  001E7E  0E00               	movlw	0
 15132  001E80  6E1C               	movwf	(___aomod@divisor+7)^0,c
 15133  001E82  EC82  F019         	call	___aomod	;wreg free
 15134  001E86  C00D  F031         	movff	?___aomod,??_dtoa
 15135  001E8A  C00E  F032         	movff	?___aomod+1,??_dtoa+1
 15136  001E8E  C00F  F033         	movff	?___aomod+2,??_dtoa+2
 15137  001E92  C010  F034         	movff	?___aomod+3,??_dtoa+3
 15138  001E96  C011  F035         	movff	?___aomod+4,??_dtoa+4
 15139  001E9A  C012  F036         	movff	?___aomod+5,??_dtoa+5
 15140  001E9E  C013  F037         	movff	?___aomod+6,??_dtoa+6
 15141  001EA2  C014  F038         	movff	?___aomod+7,??_dtoa+7
 15142  001EA6  C031  F01F         	movff	??_dtoa,abs@a
 15143  001EAA  C033  F020         	movff	??_dtoa+2,abs@a+1
 15144  001EAE  ECFE  F026         	call	_abs	;wreg free
 15145  001EB2  501F               	movf	?_abs^0,w,c
 15146  001EB4  0F30               	addlw	48
 15147  001EB6  6EDF               	movwf	indf2,c
 15148                           
 15149                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 302:         --p;
 15150  001EB8  063B               	decf	dtoa@p^0,f,c
 15151  001EBA  A0D8               	btfss	status,0,c
 15152  001EBC  063C               	decf	(dtoa@p+1)^0,f,c
 15153                           
 15154                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 303:         --w;
 15155  001EBE  063D               	decf	dtoa@w^0,f,c
 15156  001EC0  A0D8               	btfss	status,0,c
 15157  001EC2  063E               	decf	(dtoa@w+1)^0,f,c
 15158                           
 15159                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 304:         n = n / 10;
 15160  001EC4  C041  F00D         	movff	dtoa@n,___aodiv@dividend
 15161  001EC8  C042  F00E         	movff	dtoa@n+1,___aodiv@dividend+1
 15162  001ECC  C043  F00F         	movff	dtoa@n+2,___aodiv@dividend+2
 15163  001ED0  C044  F010         	movff	dtoa@n+3,___aodiv@dividend+3
 15164  001ED4  C045  F011         	movff	dtoa@n+4,___aodiv@dividend+4
 15165  001ED8  C046  F012         	movff	dtoa@n+5,___aodiv@dividend+5
 15166  001EDC  C047  F013         	movff	dtoa@n+6,___aodiv@dividend+6
 15167  001EE0  C048  F014         	movff	dtoa@n+7,___aodiv@dividend+7
 15168  001EE4  0E0A               	movlw	10
 15169  001EE6  6E15               	movwf	___aodiv@divisor^0,c
 15170  001EE8  0E00               	movlw	0
 15171  001EEA  6E16               	movwf	(___aodiv@divisor+1)^0,c
 15172  001EEC  0E00               	movlw	0
 15173  001EEE  6E17               	movwf	(___aodiv@divisor+2)^0,c
 15174  001EF0  0E00               	movlw	0
 15175  001EF2  6E18               	movwf	(___aodiv@divisor+3)^0,c
 15176  001EF4  0E00               	movlw	0
 15177  001EF6  6E19               	movwf	(___aodiv@divisor+4)^0,c
 15178  001EF8  0E00               	movlw	0
 15179  001EFA  6E1A               	movwf	(___aodiv@divisor+5)^0,c
 15180  001EFC  0E00               	movlw	0
 15181  001EFE  6E1B               	movwf	(___aodiv@divisor+6)^0,c
 15182  001F00  0E00               	movlw	0
 15183  001F02  6E1C               	movwf	(___aodiv@divisor+7)^0,c
 15184  001F04  EC07  F017         	call	___aodiv	;wreg free
 15185  001F08  C00D  F041         	movff	?___aodiv,dtoa@n
 15186  001F0C  C00E  F042         	movff	?___aodiv+1,dtoa@n+1
 15187  001F10  C00F  F043         	movff	?___aodiv+2,dtoa@n+2
 15188  001F14  C010  F044         	movff	?___aodiv+3,dtoa@n+3
 15189  001F18  C011  F045         	movff	?___aodiv+4,dtoa@n+4
 15190  001F1C  C012  F046         	movff	?___aodiv+5,dtoa@n+5
 15191  001F20  C013  F047         	movff	?___aodiv+6,dtoa@n+6
 15192  001F24  C014  F048         	movff	?___aodiv+7,dtoa@n+7
 15193  001F28                     l6415:
 15194                           
 15195                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 299:     while (!(i < 1) && (
      +                          n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 15196  001F28  BE4A               	btfsc	(dtoa@i+1)^0,7,c
 15197  001F2A  D01F               	goto	u8020
 15198  001F2C  504A               	movf	(dtoa@i+1)^0,w,c
 15199  001F2E  E103               	bnz	u7980
 15200  001F30  0449               	decf	dtoa@i^0,w,c
 15201  001F32  A0D8               	btfss	status,0,c
 15202  001F34  D01A               	goto	u8020
 15203  001F36                     u7980:
 15204  001F36  5041               	movf	dtoa@n^0,w,c
 15205  001F38  1042               	iorwf	(dtoa@n+1)^0,w,c
 15206  001F3A  1043               	iorwf	(dtoa@n+2)^0,w,c
 15207  001F3C  1044               	iorwf	(dtoa@n+3)^0,w,c
 15208  001F3E  1045               	iorwf	(dtoa@n+4)^0,w,c
 15209  001F40  1046               	iorwf	(dtoa@n+5)^0,w,c
 15210  001F42  1047               	iorwf	(dtoa@n+6)^0,w,c
 15211  001F44  1048               	iorwf	(dtoa@n+7)^0,w,c
 15212  001F46  A4D8               	btfss	status,2,c
 15213  001F48  D775               	goto	l6405
 15214  001F4A  BE3C               	btfsc	(dtoa@p+1)^0,7,c
 15215  001F4C  D005               	goto	u8000
 15216  001F4E  503C               	movf	(dtoa@p+1)^0,w,c
 15217  001F50  E102               	bnz	u8001
 15218  001F52  043B               	decf	dtoa@p^0,w,c
 15219  001F54  B0D8               	btfsc	status,0,c
 15220  001F56                     u8001:
 15221  001F56  D76E               	goto	l6405
 15222  001F58                     u8000:
 15223  001F58  BE3E               	btfsc	(dtoa@w+1)^0,7,c
 15224  001F5A  D007               	goto	u8020
 15225  001F5C  503E               	movf	(dtoa@w+1)^0,w,c
 15226  001F5E  E103               	bnz	u8010
 15227  001F60  043D               	decf	dtoa@w^0,w,c
 15228  001F62  A0D8               	btfss	status,0,c
 15229  001F64  D002               	goto	u8020
 15230  001F66                     u8010:
 15231  001F66  B26B               	btfsc	_flags^0,1,c
 15232  001F68  D765               	goto	l6405
 15233  001F6A                     u8020:
 15234                           
 15235                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 308:     if (s || (flags & (1
      +                           << 2))) {
 15236  001F6A  503F               	movf	dtoa@s^0,w,c
 15237  001F6C  1040               	iorwf	(dtoa@s+1)^0,w,c
 15238  001F6E  A4D8               	btfss	status,2,c
 15239  001F70  D002               	goto	u8040
 15240  001F72  A46B               	btfss	_flags^0,2,c
 15241  001F74  D015               	goto	l6439
 15242  001F76                     u8040:
 15243                           
 15244                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 309:         --i;
 15245  001F76  0649               	decf	dtoa@i^0,f,c
 15246  001F78  A0D8               	btfss	status,0,c
 15247  001F7A  064A               	decf	(dtoa@i+1)^0,f,c
 15248                           
 15249                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 310:         dbuf[i] = s ? '-
      +                          ' : '+';
 15250  001F7C  503F               	movf	dtoa@s^0,w,c
 15251  001F7E  1040               	iorwf	(dtoa@s+1)^0,w,c
 15252  001F80  A4D8               	btfss	status,2,c
 15253  001F82  D004               	goto	l6435
 15254  001F84  0E00               	movlw	0
 15255  001F86  6E3A               	movwf	(_dtoa$2337+1)^0,c
 15256  001F88  0E2B               	movlw	43
 15257  001F8A  D003               	goto	L16
 15258  001F8C                     l6435:
 15259  001F8C  0E00               	movlw	0
 15260  001F8E  6E3A               	movwf	(_dtoa$2337+1)^0,c
 15261  001F90  0E2D               	movlw	45
 15262  001F92                     L16:
 15263  001F92  6E39               	movwf	_dtoa$2337^0,c
 15264  001F94  5049               	movf	dtoa@i^0,w,c
 15265  001F96  0F99               	addlw	low _dbuf
 15266  001F98  6ED9               	movwf	fsr2l,c
 15267  001F9A  6ADA               	clrf	fsr2h,c
 15268  001F9C  C039  FFDF         	movff	_dtoa$2337,indf2
 15269  001FA0                     l6439:
 15270                           
 15271                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 314:     return pad(fp, &dbuf
      +                          [i], w);
 15272  001FA0  C027  F018         	movff	dtoa@fp,pad@fp
 15273  001FA4  C028  F019         	movff	dtoa@fp+1,pad@fp+1
 15274  001FA8  5049               	movf	dtoa@i^0,w,c
 15275  001FAA  0F99               	addlw	low _dbuf
 15276  001FAC  6E1A               	movwf	pad@buf^0,c
 15277  001FAE  C03D  F01B         	movff	dtoa@w,pad@p
 15278  001FB2  C03E  F01C         	movff	dtoa@w+1,pad@p+1
 15279  001FB6  ECF1  F020         	call	_pad	;wreg free
 15280  001FBA  C018  F027         	movff	?_pad,?_dtoa
 15281  001FBE  C019  F028         	movff	?_pad+1,?_dtoa+1
 15282  001FC2  0012               	return		;funcret
 15283  001FC4                     __end_of_dtoa:
 15284                           	opt callstack 0
 15285                           
 15286 ;; *************** function _pad *****************
 15287 ;; Defined at:
 15288 ;;		line 72 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c"
 15289 ;; Parameters:    Size  Location     Type
 15290 ;;  fp              2   23[COMRAM] PTR struct _IO_FILE
 15291 ;;		 -> NULL(0), 
 15292 ;;  buf             1   25[COMRAM] PTR unsigned char 
 15293 ;;		 -> dbuf(32), 
 15294 ;;  p               2   26[COMRAM] int 
 15295 ;; Auto vars:     Size  Location     Type
 15296 ;;  w               2   31[COMRAM] int 
 15297 ;;  i               2   29[COMRAM] int 
 15298 ;; Return value:  Size  Location     Type
 15299 ;;                  2   23[COMRAM] int 
 15300 ;; Registers used:
 15301 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15302 ;; Tracked objects:
 15303 ;;		On entry : 0/0
 15304 ;;		On exit  : 0/0
 15305 ;;		Unchanged: 0/0
 15306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15307 ;;      Params:         5       0       0       0       0       0       0
 15308 ;;      Locals:         4       0       0       0       0       0       0
 15309 ;;      Temps:          1       0       0       0       0       0       0
 15310 ;;      Totals:        10       0       0       0       0       0       0
 15311 ;;Total ram usage:       10 bytes
 15312 ;; Hardware stack levels used:    1
 15313 ;; Hardware stack levels required when called:    5
 15314 ;; This function calls:
 15315 ;;		_fputc
 15316 ;;		_fputs
 15317 ;;		_strlen
 15318 ;; This function is called by:
 15319 ;;		_dtoa
 15320 ;;		_utoa
 15321 ;; This function uses a non-reentrant model
 15322 ;;
 15323                           
 15324                           	psect	text67
 15325  0041E2                     __ptext67:
 15326                           	opt callstack 0
 15327  0041E2                     _pad:
 15328                           	opt callstack 18
 15329                           
 15330                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 72: static int pad(FILE *fp, 
      +                          char *buf, int p);/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 73: {;/opt/m
      +                          icrochip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 74:     int i, w;;/opt/microchip/xc8
      +                          /v2.10/pic/sources/c99/common/doprnt.c: 77:     if (flags & (1 << 0)) {
 15331                           
 15332                           ;incstack = 0
 15333  0041E2  A06B               	btfss	_flags^0,0,c
 15334  0041E4  D008               	goto	l6241
 15335                           
 15336                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 78:         fputs((const char
      +                           *)buf, fp);
 15337  0041E6  C01A  F012         	movff	pad@buf,fputs@s
 15338  0041EA  C018  F013         	movff	pad@fp,fputs@fp
 15339  0041EE  C019  F014         	movff	pad@fp+1,fputs@fp+1
 15340  0041F2  ECCB  F026         	call	_fputs	;wreg free
 15341  0041F6                     l6241:
 15342                           
 15343                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 82:     w = (p < 0) ? 0 : p;
 15344  0041F6  BE1C               	btfsc	(pad@p+1)^0,7,c
 15345  0041F8  D005               	goto	l6245
 15346  0041FA  C01B  F020         	movff	pad@p,pad@w
 15347  0041FE  C01C  F021         	movff	pad@p+1,pad@w+1
 15348  004202  D004               	goto	l789
 15349  004204                     l6245:
 15350  004204  0E00               	movlw	0
 15351  004206  6E21               	movwf	(pad@w+1)^0,c
 15352  004208  0E00               	movlw	0
 15353  00420A  6E20               	movwf	pad@w^0,c
 15354  00420C                     l789:
 15355                           
 15356                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 83:     i = 0;
 15357  00420C  0E00               	movlw	0
 15358  00420E  6E1F               	movwf	(pad@i+1)^0,c
 15359  004210  0E00               	movlw	0
 15360  004212  6E1E               	movwf	pad@i^0,c
 15361                           
 15362                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 84:     while (i < w) {
 15363  004214  D00C               	goto	l6251
 15364  004216                     l6247:
 15365                           
 15366                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 85:         fputc(' ', fp);
 15367  004216  0E00               	movlw	0
 15368  004218  6E0F               	movwf	(fputc@c+1)^0,c
 15369  00421A  0E20               	movlw	32
 15370  00421C  6E0E               	movwf	fputc@c^0,c
 15371  00421E  C018  F010         	movff	pad@fp,fputc@fp
 15372  004222  C019  F011         	movff	pad@fp+1,fputc@fp+1
 15373  004226  EC7C  F027         	call	_fputc	;wreg free
 15374                           
 15375                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 86:         ++i;
 15376  00422A  4A1E               	infsnz	pad@i^0,f,c
 15377  00422C  2A1F               	incf	(pad@i+1)^0,f,c
 15378  00422E                     l6251:
 15379                           
 15380                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 84:     while (i < w) {
 15381  00422E  5020               	movf	pad@w^0,w,c
 15382  004230  5C1E               	subwf	pad@i^0,w,c
 15383  004232  501F               	movf	(pad@i+1)^0,w,c
 15384  004234  0A80               	xorlw	128
 15385  004236  6E1D               	movwf	??_pad^0,c
 15386  004238  5021               	movf	(pad@w+1)^0,w,c
 15387  00423A  0A80               	xorlw	128
 15388  00423C  581D               	subwfb	??_pad^0,w,c
 15389  00423E  A0D8               	btfss	status,0,c
 15390  004240  D7EA               	goto	l6247
 15391                           
 15392                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 90:     if (!(flags & (1 << 0
      +                          ))) {
 15393  004242  B06B               	btfsc	_flags^0,0,c
 15394  004244  D008               	goto	l6255
 15395                           
 15396                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 91:         fputs((const char
      +                           *)buf, fp);
 15397  004246  C01A  F012         	movff	pad@buf,fputs@s
 15398  00424A  C018  F013         	movff	pad@fp,fputs@fp
 15399  00424E  C019  F014         	movff	pad@fp+1,fputs@fp+1
 15400  004252  ECCB  F026         	call	_fputs	;wreg free
 15401  004256                     l6255:
 15402                           
 15403                           ;/opt/microchip/xc8/v2.10/pic/sources/c99/common/doprnt.c: 94:     return strlen(buf) + 
      +                          w;
 15404  004256  C01A  F00D         	movff	pad@buf,strlen@s
 15405  00425A  6A0E               	clrf	(strlen@s+1)^0,c
 15406  00425C  EC8A  F026         	call	_strlen	;wreg free
 15407  004260  5020               	movf	pad@w^0,w,c
 15408  004262  240D               	addwf	?_strlen^0,w,c
 15409  004264  6E18               	movwf	?_pad^0,c
 15410  004266  5021               	movf	(pad@w+1)^0,w,c
 15411  004268  200E               	addwfc	(?_strlen+1)^0,w,c
 15412  00426A  6E19               	movwf	(?_pad+1)^0,c
 15413  00426C  0012               	return		;funcret
 15414  00426E                     __end_of_pad:
 15415                           	opt callstack 0
 15416                           
 15417 ;; *************** function _strlen *****************
 15418 ;; Defined at:
 15419 ;;		line 5 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/strlen.c"
 15420 ;; Parameters:    Size  Location     Type
 15421 ;;  s               2   12[COMRAM] PTR const unsigned char 
 15422 ;;		 -> ?_printf(2), stoa@nuls(7), dbuf(32), calc_power@v(2), 
 15423 ;;		 -> STR_34(4), STR_33(3), STR_31(4), STR_30(3), 
 15424 ;;		 -> STR_16(3), STR_15(3), STR_13(5), STR_12(5), 
 15425 ;;		 -> STR_10(5), STR_9(5), down_rxbuf(101), STR_3(9), 
 15426 ;;		 -> STR_2(7), 
 15427 ;; Auto vars:     Size  Location     Type
 15428 ;;  a               2   14[COMRAM] PTR const unsigned char 
 15429 ;;		 -> ?_printf(2), stoa@nuls(7), dbuf(32), calc_power@v(2), 
 15430 ;;		 -> STR_34(4), STR_33(3), STR_31(4), STR_30(3), 
 15431 ;;		 -> STR_16(3), STR_15(3), STR_13(5), STR_12(5), 
 15432 ;;		 -> STR_10(5), STR_9(5), down_rxbuf(101), STR_3(9), 
 15433 ;;		 -> STR_2(7), 
 15434 ;; Return value:  Size  Location     Type
 15435 ;;                  2   12[COMRAM] unsigned int 
 15436 ;; Registers used:
 15437 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
 15438 ;; Tracked objects:
 15439 ;;		On entry : 0/0
 15440 ;;		On exit  : 0/0
 15441 ;;		Unchanged: 0/0
 15442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15443 ;;      Params:         2       0       0       0       0       0       0
 15444 ;;      Locals:         2       0       0       0       0       0       0
 15445 ;;      Temps:          0       0       0       0       0       0       0
 15446 ;;      Totals:         4       0       0       0       0       0       0
 15447 ;;Total ram usage:        4 bytes
 15448 ;; Hardware stack levels used:    1
 15449 ;; Hardware stack levels required when called:    2
 15450 ;; This function calls:
 15451 ;;		Nothing
 15452 ;; This function is called by:
 15453 ;;		_pad
 15454 ;;		_stoa
 15455 ;; This function uses a non-reentrant model
 15456 ;;
 15457                           
 15458                           	psect	text68
 15459  004D14                     __ptext68:
 15460                           	opt callstack 0
 15461  004D14                     _strlen:
 15462                           	opt callstack 20
 15463                           
 15464                           ;incstack = 0
 15465  004D14  C00D  F00F         	movff	strlen@s,strlen@a
 15466  004D18  C00E  F010         	movff	strlen@s+1,strlen@a+1
 15467  004D1C  D002               	goto	l6231
 15468  004D1E                     l6229:
 15469  004D1E  4A0D               	infsnz	strlen@s^0,f,c
 15470  004D20  2A0E               	incf	(strlen@s+1)^0,f,c
 15471  004D22                     l6231:
 15472  004D22  C00D  FFF6         	movff	strlen@s,tblptrl
 15473  004D26  C00E  FFF7         	movff	strlen@s+1,tblptrh
 15474  004D2A  6AF8               	clrf	tblptru,c
 15475  004D2C  0E05               	movlw	(high __ramtop+-1)
 15476  004D2E  64F7               	cpfsgt	tblptrh,c
 15477  004D30  D003               	bra	u7647
 15478  004D32  0008               	tblrd		*
 15479  004D34  50F5               	movf	tablat,w,c
 15480  004D36  D005               	bra	u7640
 15481  004D38                     u7647:
 15482  004D38  CFF6 FFE1          	movff	tblptrl,fsr1l
 15483  004D3C  CFF7 FFE2          	movff	tblptrh,fsr1h
 15484  004D40  50E7               	movf	indf1,w,c
 15485  004D42                     u7640:
 15486  004D42  0900               	iorlw	0
 15487  004D44  A4D8               	btfss	status,2,c
 15488  004D46  D7EB               	goto	l6229
 15489  004D48  500F               	movf	strlen@a^0,w,c
 15490  004D4A  5C0D               	subwf	strlen@s^0,w,c
 15491  004D4C  6E0D               	movwf	?_strlen^0,c
 15492  004D4E  5010               	movf	(strlen@a+1)^0,w,c
 15493  004D50  580E               	subwfb	(strlen@s+1)^0,w,c
 15494  004D52  6E0E               	movwf	(?_strlen+1)^0,c
 15495  004D54  0012               	return		;funcret
 15496  004D56                     __end_of_strlen:
 15497                           	opt callstack 0
 15498                           
 15499 ;; *************** function _fputs *****************
 15500 ;; Defined at:
 15501 ;;		line 8 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/nf_fputs.c"
 15502 ;; Parameters:    Size  Location     Type
 15503 ;;  s               1   17[COMRAM] PTR const unsigned char 
 15504 ;;		 -> dbuf(32), 
 15505 ;;  fp              2   18[COMRAM] PTR struct _IO_FILE
 15506 ;;		 -> NULL(0), 
 15507 ;; Auto vars:     Size  Location     Type
 15508 ;;  i               2   21[COMRAM] int 
 15509 ;;  c               1   20[COMRAM] unsigned char 
 15510 ;; Return value:  Size  Location     Type
 15511 ;;                  2   17[COMRAM] int 
 15512 ;; Registers used:
 15513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15514 ;; Tracked objects:
 15515 ;;		On entry : 0/0
 15516 ;;		On exit  : 0/0
 15517 ;;		Unchanged: 0/0
 15518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15519 ;;      Params:         3       0       0       0       0       0       0
 15520 ;;      Locals:         3       0       0       0       0       0       0
 15521 ;;      Temps:          0       0       0       0       0       0       0
 15522 ;;      Totals:         6       0       0       0       0       0       0
 15523 ;;Total ram usage:        6 bytes
 15524 ;; Hardware stack levels used:    1
 15525 ;; Hardware stack levels required when called:    4
 15526 ;; This function calls:
 15527 ;;		_fputc
 15528 ;; This function is called by:
 15529 ;;		_pad
 15530 ;; This function uses a non-reentrant model
 15531 ;;
 15532                           
 15533                           	psect	text69
 15534  004D96                     __ptext69:
 15535                           	opt callstack 0
 15536  004D96                     _fputs:
 15537                           	opt callstack 18
 15538                           
 15539                           ;incstack = 0
 15540  004D96  0E00               	movlw	0
 15541  004D98  6E17               	movwf	(fputs@i+1)^0,c
 15542  004D9A  0E00               	movlw	0
 15543  004D9C  6E16               	movwf	fputs@i^0,c
 15544  004D9E  D00B               	goto	l6225
 15545  004DA0                     l6221:
 15546  004DA0  C015  F00E         	movff	fputs@c,fputc@c
 15547  004DA4  6A0F               	clrf	(fputc@c+1)^0,c
 15548  004DA6  C013  F010         	movff	fputs@fp,fputc@fp
 15549  004DAA  C014  F011         	movff	fputs@fp+1,fputc@fp+1
 15550  004DAE  EC7C  F027         	call	_fputc	;wreg free
 15551  004DB2  4A16               	infsnz	fputs@i^0,f,c
 15552  004DB4  2A17               	incf	(fputs@i+1)^0,f,c
 15553  004DB6                     l6225:
 15554  004DB6  5012               	movf	fputs@s^0,w,c
 15555  004DB8  2416               	addwf	fputs@i^0,w,c
 15556  004DBA  6ED9               	movwf	fsr2l,c
 15557  004DBC  6ADA               	clrf	fsr2h,c
 15558  004DBE  50DF               	movf	indf2,w,c
 15559  004DC0  6E15               	movwf	fputs@c^0,c
 15560  004DC2  5015               	movf	fputs@c^0,w,c
 15561  004DC4  B4D8               	btfsc	status,2,c
 15562  004DC6  0012               	return	
 15563  004DC8  D7EB               	goto	l6221
 15564  004DCA                     __end_of_fputs:
 15565                           	opt callstack 0
 15566                           
 15567 ;; *************** function _fputc *****************
 15568 ;; Defined at:
 15569 ;;		line 570 in file "src/main.c"
 15570 ;; Parameters:    Size  Location     Type
 15571 ;;  c               2   13[COMRAM] int 
 15572 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
 15573 ;;		 -> NULL(0), 
 15574 ;; Auto vars:     Size  Location     Type
 15575 ;;		None
 15576 ;; Return value:  Size  Location     Type
 15577 ;;                  2   13[COMRAM] int 
 15578 ;; Registers used:
 15579 ;;		wreg, status,2, status,0, cstack
 15580 ;; Tracked objects:
 15581 ;;		On entry : 0/0
 15582 ;;		On exit  : 0/0
 15583 ;;		Unchanged: 0/0
 15584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15585 ;;      Params:         4       0       0       0       0       0       0
 15586 ;;      Locals:         0       0       0       0       0       0       0
 15587 ;;      Temps:          0       0       0       0       0       0       0
 15588 ;;      Totals:         4       0       0       0       0       0       0
 15589 ;;Total ram usage:        4 bytes
 15590 ;; Hardware stack levels used:    1
 15591 ;; Hardware stack levels required when called:    3
 15592 ;; This function calls:
 15593 ;;		_usart_putc
 15594 ;; This function is called by:
 15595 ;;		_pad
 15596 ;;		_stoa
 15597 ;;		_vfpfcnvrt
 15598 ;;		_fputs
 15599 ;; This function uses a non-reentrant model
 15600 ;;
 15601                           
 15602                           	psect	text70
 15603  004EF8                     __ptext70:
 15604                           	opt callstack 0
 15605  004EF8                     _fputc:
 15606                           	opt callstack 18
 15607                           
 15608                           ;src/main.c: 570: int fputc(int c, FILE *fp);src/main.c: 571: {;src/main.c: 572:     if(
      +                          c == '\n') {
 15609                           
 15610                           ;incstack = 0
 15611  004EF8  0E0A               	movlw	10
 15612  004EFA  180E               	xorwf	fputc@c^0,w,c
 15613  004EFC  100F               	iorwf	(fputc@c+1)^0,w,c
 15614  004EFE  A4D8               	btfss	status,2,c
 15615  004F00  D003               	goto	l6215
 15616                           
 15617                           ;src/main.c: 573:         usart_putc('\r');
 15618  004F02  0E0D               	movlw	13
 15619  004F04  ECAE  F027         	call	_usart_putc
 15620  004F08                     l6215:
 15621                           
 15622                           ;src/main.c: 575:     usart_putc((char)c);
 15623  004F08  500E               	movf	fputc@c^0,w,c
 15624  004F0A  ECAE  F027         	call	_usart_putc
 15625  004F0E  0012               	return		;funcret
 15626  004F10                     __end_of_fputc:
 15627                           	opt callstack 0
 15628                           
 15629 ;; *************** function _usart_putc *****************
 15630 ;; Defined at:
 15631 ;;		line 53 in file "src/driver/usart.c"
 15632 ;; Parameters:    Size  Location     Type
 15633 ;;  c               1    wreg     unsigned char 
 15634 ;; Auto vars:     Size  Location     Type
 15635 ;;  c               1   12[COMRAM] unsigned char 
 15636 ;; Return value:  Size  Location     Type
 15637 ;;                  1    wreg      unsigned char 
 15638 ;; Registers used:
 15639 ;;		wreg
 15640 ;; Tracked objects:
 15641 ;;		On entry : 0/0
 15642 ;;		On exit  : 0/0
 15643 ;;		Unchanged: 0/0
 15644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15645 ;;      Params:         0       0       0       0       0       0       0
 15646 ;;      Locals:         1       0       0       0       0       0       0
 15647 ;;      Temps:          0       0       0       0       0       0       0
 15648 ;;      Totals:         1       0       0       0       0       0       0
 15649 ;;Total ram usage:        1 bytes
 15650 ;; Hardware stack levels used:    1
 15651 ;; Hardware stack levels required when called:    2
 15652 ;; This function calls:
 15653 ;;		Nothing
 15654 ;; This function is called by:
 15655 ;;		_fputc
 15656 ;; This function uses a non-reentrant model
 15657 ;;
 15658                           
 15659                           	psect	text71
 15660  004F5C                     __ptext71:
 15661                           	opt callstack 0
 15662  004F5C                     _usart_putc:
 15663                           	opt callstack 18
 15664                           
 15665                           ;incstack = 0
 15666                           ;usart_putc@c stored from wreg
 15667  004F5C  6E0D               	movwf	usart_putc@c^0,c
 15668  004F5E                     
 15669                           ;src/driver/usart.c: 53: char usart_putc(char c);src/driver/usart.c: 54: {;src/driver/us
      +                          art.c: 56:     while(TXSTAbits.TRMT == 0);
 15670  004F5E  A2AC               	btfss	172,1,c	;volatile
 15671  004F60  D7FE               	goto	l6205
 15672                           
 15673                           ;src/driver/usart.c: 58:     TXREG = c;
 15674  004F62  C00D  FFAD         	movff	usart_putc@c,4013	;volatile
 15675  004F66  0012               	return		;funcret
 15676  004F68                     __end_of_usart_putc:
 15677                           	opt callstack 0
 15678                           
 15679 ;; *************** function _abs *****************
 15680 ;; Defined at:
 15681 ;;		line 1 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/abs.c"
 15682 ;; Parameters:    Size  Location     Type
 15683 ;;  a               2   30[COMRAM] int 
 15684 ;; Auto vars:     Size  Location     Type
 15685 ;;		None
 15686 ;; Return value:  Size  Location     Type
 15687 ;;                  2   30[COMRAM] int 
 15688 ;; Registers used:
 15689 ;;		wreg, status,2, status,0
 15690 ;; Tracked objects:
 15691 ;;		On entry : 0/0
 15692 ;;		On exit  : 0/0
 15693 ;;		Unchanged: 0/0
 15694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15695 ;;      Params:         2       0       0       0       0       0       0
 15696 ;;      Locals:         0       0       0       0       0       0       0
 15697 ;;      Temps:          2       0       0       0       0       0       0
 15698 ;;      Totals:         4       0       0       0       0       0       0
 15699 ;;Total ram usage:        4 bytes
 15700 ;; Hardware stack levels used:    1
 15701 ;; Hardware stack levels required when called:    2
 15702 ;; This function calls:
 15703 ;;		Nothing
 15704 ;; This function is called by:
 15705 ;;		_dtoa
 15706 ;; This function uses a non-reentrant model
 15707 ;;
 15708                           
 15709                           	psect	text72
 15710  004DFC                     __ptext72:
 15711                           	opt callstack 0
 15712  004DFC                     _abs:
 15713                           	opt callstack 21
 15714                           
 15715                           ;incstack = 0
 15716  004DFC  BE20               	btfsc	(abs@a+1)^0,7,c
 15717  004DFE  D005               	goto	u7700
 15718  004E00  5020               	movf	(abs@a+1)^0,w,c
 15719  004E02  E110               	bnz	l1556
 15720  004E04  041F               	decf	abs@a^0,w,c
 15721  004E06  B0D8               	btfsc	status,0,c
 15722  004E08  D00D               	goto	l1556
 15723  004E0A                     u7700:
 15724  004E0A  C01F  F021         	movff	abs@a,??_abs
 15725  004E0E  C020  F022         	movff	abs@a+1,??_abs+1
 15726  004E12  1E21               	comf	??_abs^0,f,c
 15727  004E14  1E22               	comf	(??_abs+1)^0,f,c
 15728  004E16  4A21               	infsnz	??_abs^0,f,c
 15729  004E18  2A22               	incf	(??_abs+1)^0,f,c
 15730  004E1A  C021  F01F         	movff	??_abs,?_abs
 15731  004E1E  C022  F020         	movff	??_abs+1,?_abs+1
 15732  004E22  0012               	return	
 15733  004E24                     l1556:
 15734  004E24  C01F  F01F         	movff	abs@a,?_abs
 15735  004E28  C020  F020         	movff	abs@a+1,?_abs+1
 15736  004E2C  0012               	return		;funcret
 15737  004E2E                     __end_of_abs:
 15738                           	opt callstack 0
 15739                           
 15740 ;; *************** function ___aomod *****************
 15741 ;; Defined at:
 15742 ;;		line 9 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/aomod.c"
 15743 ;; Parameters:    Size  Location     Type
 15744 ;;  dividend        8   12[COMRAM] long long 
 15745 ;;  divisor         8   20[COMRAM] long long 
 15746 ;; Auto vars:     Size  Location     Type
 15747 ;;  sign            1   29[COMRAM] unsigned char 
 15748 ;;  counter         1   28[COMRAM] unsigned char 
 15749 ;; Return value:  Size  Location     Type
 15750 ;;                  8   12[COMRAM] long long 
 15751 ;; Registers used:
 15752 ;;		wreg, status,2, status,0
 15753 ;; Tracked objects:
 15754 ;;		On entry : 0/0
 15755 ;;		On exit  : 0/0
 15756 ;;		Unchanged: 0/0
 15757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15758 ;;      Params:        16       0       0       0       0       0       0
 15759 ;;      Locals:         2       0       0       0       0       0       0
 15760 ;;      Temps:          0       0       0       0       0       0       0
 15761 ;;      Totals:        18       0       0       0       0       0       0
 15762 ;;Total ram usage:       18 bytes
 15763 ;; Hardware stack levels used:    1
 15764 ;; Hardware stack levels required when called:    2
 15765 ;; This function calls:
 15766 ;;		Nothing
 15767 ;; This function is called by:
 15768 ;;		_dtoa
 15769 ;; This function uses a non-reentrant model
 15770 ;;
 15771                           
 15772                           	psect	text73
 15773  003304                     __ptext73:
 15774                           	opt callstack 0
 15775  003304                     ___aomod:
 15776                           	opt callstack 21
 15777                           
 15778                           ;incstack = 0
 15779  003304  0E00               	movlw	0
 15780  003306  6E1E               	movwf	___aomod@sign^0,c
 15781  003308  AE14               	btfss	(___aomod@dividend+7)^0,7,c
 15782  00330A  D012               	goto	l6315
 15783  00330C  1E14               	comf	(___aomod@dividend+7)^0,f,c
 15784  00330E  1E13               	comf	(___aomod@dividend+6)^0,f,c
 15785  003310  1E12               	comf	(___aomod@dividend+5)^0,f,c
 15786  003312  1E11               	comf	(___aomod@dividend+4)^0,f,c
 15787  003314  1E10               	comf	(___aomod@dividend+3)^0,f,c
 15788  003316  1E0F               	comf	(___aomod@dividend+2)^0,f,c
 15789  003318  1E0E               	comf	(___aomod@dividend+1)^0,f,c
 15790  00331A  6C0D               	negf	___aomod@dividend^0,c
 15791  00331C  0E00               	movlw	0
 15792  00331E  220E               	addwfc	(___aomod@dividend+1)^0,f,c
 15793  003320  220F               	addwfc	(___aomod@dividend+2)^0,f,c
 15794  003322  2210               	addwfc	(___aomod@dividend+3)^0,f,c
 15795  003324  2211               	addwfc	(___aomod@dividend+4)^0,f,c
 15796  003326  2212               	addwfc	(___aomod@dividend+5)^0,f,c
 15797  003328  2213               	addwfc	(___aomod@dividend+6)^0,f,c
 15798  00332A  2214               	addwfc	(___aomod@dividend+7)^0,f,c
 15799  00332C  0E01               	movlw	1
 15800  00332E  6E1E               	movwf	___aomod@sign^0,c
 15801  003330                     l6315:
 15802  003330  AE1C               	btfss	(___aomod@divisor+7)^0,7,c
 15803  003332  D010               	goto	l6319
 15804  003334  1E1C               	comf	(___aomod@divisor+7)^0,f,c
 15805  003336  1E1B               	comf	(___aomod@divisor+6)^0,f,c
 15806  003338  1E1A               	comf	(___aomod@divisor+5)^0,f,c
 15807  00333A  1E19               	comf	(___aomod@divisor+4)^0,f,c
 15808  00333C  1E18               	comf	(___aomod@divisor+3)^0,f,c
 15809  00333E  1E17               	comf	(___aomod@divisor+2)^0,f,c
 15810  003340  1E16               	comf	(___aomod@divisor+1)^0,f,c
 15811  003342  6C15               	negf	___aomod@divisor^0,c
 15812  003344  0E00               	movlw	0
 15813  003346  2216               	addwfc	(___aomod@divisor+1)^0,f,c
 15814  003348  2217               	addwfc	(___aomod@divisor+2)^0,f,c
 15815  00334A  2218               	addwfc	(___aomod@divisor+3)^0,f,c
 15816  00334C  2219               	addwfc	(___aomod@divisor+4)^0,f,c
 15817  00334E  221A               	addwfc	(___aomod@divisor+5)^0,f,c
 15818  003350  221B               	addwfc	(___aomod@divisor+6)^0,f,c
 15819  003352  221C               	addwfc	(___aomod@divisor+7)^0,f,c
 15820  003354                     l6319:
 15821  003354  5015               	movf	___aomod@divisor^0,w,c
 15822  003356  1016               	iorwf	(___aomod@divisor+1)^0,w,c
 15823  003358  1017               	iorwf	(___aomod@divisor+2)^0,w,c
 15824  00335A  1018               	iorwf	(___aomod@divisor+3)^0,w,c
 15825  00335C  1019               	iorwf	(___aomod@divisor+4)^0,w,c
 15826  00335E  101A               	iorwf	(___aomod@divisor+5)^0,w,c
 15827  003360  101B               	iorwf	(___aomod@divisor+6)^0,w,c
 15828  003362  101C               	iorwf	(___aomod@divisor+7)^0,w,c
 15829  003364  B4D8               	btfsc	status,2,c
 15830  003366  D03C               	goto	l6335
 15831  003368  0E01               	movlw	1
 15832  00336A  6E1D               	movwf	___aomod@counter^0,c
 15833  00336C  D00A               	goto	l6325
 15834  00336E                     l6323:
 15835  00336E  90D8               	bcf	status,0,c
 15836  003370  3615               	rlcf	___aomod@divisor^0,f,c
 15837  003372  3616               	rlcf	(___aomod@divisor+1)^0,f,c
 15838  003374  3617               	rlcf	(___aomod@divisor+2)^0,f,c
 15839  003376  3618               	rlcf	(___aomod@divisor+3)^0,f,c
 15840  003378  3619               	rlcf	(___aomod@divisor+4)^0,f,c
 15841  00337A  361A               	rlcf	(___aomod@divisor+5)^0,f,c
 15842  00337C  361B               	rlcf	(___aomod@divisor+6)^0,f,c
 15843  00337E  361C               	rlcf	(___aomod@divisor+7)^0,f,c
 15844  003380  2A1D               	incf	___aomod@counter^0,f,c
 15845  003382                     l6325:
 15846  003382  AE1C               	btfss	(___aomod@divisor+7)^0,7,c
 15847  003384  D7F4               	goto	l6323
 15848  003386                     u7810:
 15849  003386  5015               	movf	___aomod@divisor^0,w,c
 15850  003388  5C0D               	subwf	___aomod@dividend^0,w,c
 15851  00338A  5016               	movf	(___aomod@divisor+1)^0,w,c
 15852  00338C  580E               	subwfb	(___aomod@dividend+1)^0,w,c
 15853  00338E  5017               	movf	(___aomod@divisor+2)^0,w,c
 15854  003390  580F               	subwfb	(___aomod@dividend+2)^0,w,c
 15855  003392  5018               	movf	(___aomod@divisor+3)^0,w,c
 15856  003394  5810               	subwfb	(___aomod@dividend+3)^0,w,c
 15857  003396  5019               	movf	(___aomod@divisor+4)^0,w,c
 15858  003398  5811               	subwfb	(___aomod@dividend+4)^0,w,c
 15859  00339A  501A               	movf	(___aomod@divisor+5)^0,w,c
 15860  00339C  5812               	subwfb	(___aomod@dividend+5)^0,w,c
 15861  00339E  501B               	movf	(___aomod@divisor+6)^0,w,c
 15862  0033A0  5813               	subwfb	(___aomod@dividend+6)^0,w,c
 15863  0033A2  501C               	movf	(___aomod@divisor+7)^0,w,c
 15864  0033A4  5814               	subwfb	(___aomod@dividend+7)^0,w,c
 15865  0033A6  A0D8               	btfss	status,0,c
 15866  0033A8  D010               	goto	l6331
 15867  0033AA  5015               	movf	___aomod@divisor^0,w,c
 15868  0033AC  5E0D               	subwf	___aomod@dividend^0,f,c
 15869  0033AE  5016               	movf	(___aomod@divisor+1)^0,w,c
 15870  0033B0  5A0E               	subwfb	(___aomod@dividend+1)^0,f,c
 15871  0033B2  5017               	movf	(___aomod@divisor+2)^0,w,c
 15872  0033B4  5A0F               	subwfb	(___aomod@dividend+2)^0,f,c
 15873  0033B6  5018               	movf	(___aomod@divisor+3)^0,w,c
 15874  0033B8  5A10               	subwfb	(___aomod@dividend+3)^0,f,c
 15875  0033BA  5019               	movf	(___aomod@divisor+4)^0,w,c
 15876  0033BC  5A11               	subwfb	(___aomod@dividend+4)^0,f,c
 15877  0033BE  501A               	movf	(___aomod@divisor+5)^0,w,c
 15878  0033C0  5A12               	subwfb	(___aomod@dividend+5)^0,f,c
 15879  0033C2  501B               	movf	(___aomod@divisor+6)^0,w,c
 15880  0033C4  5A13               	subwfb	(___aomod@dividend+6)^0,f,c
 15881  0033C6  501C               	movf	(___aomod@divisor+7)^0,w,c
 15882  0033C8  5A14               	subwfb	(___aomod@dividend+7)^0,f,c
 15883  0033CA                     l6331:
 15884  0033CA  90D8               	bcf	status,0,c
 15885  0033CC  321C               	rrcf	(___aomod@divisor+7)^0,f,c
 15886  0033CE  321B               	rrcf	(___aomod@divisor+6)^0,f,c
 15887  0033D0  321A               	rrcf	(___aomod@divisor+5)^0,f,c
 15888  0033D2  3219               	rrcf	(___aomod@divisor+4)^0,f,c
 15889  0033D4  3218               	rrcf	(___aomod@divisor+3)^0,f,c
 15890  0033D6  3217               	rrcf	(___aomod@divisor+2)^0,f,c
 15891  0033D8  3216               	rrcf	(___aomod@divisor+1)^0,f,c
 15892  0033DA  3215               	rrcf	___aomod@divisor^0,f,c
 15893  0033DC  2E1D               	decfsz	___aomod@counter^0,f,c
 15894  0033DE  D7D3               	goto	u7810
 15895  0033E0                     l6335:
 15896  0033E0  501E               	movf	___aomod@sign^0,w,c
 15897  0033E2  B4D8               	btfsc	status,2,c
 15898  0033E4  D010               	goto	l6339
 15899  0033E6  1E14               	comf	(___aomod@dividend+7)^0,f,c
 15900  0033E8  1E13               	comf	(___aomod@dividend+6)^0,f,c
 15901  0033EA  1E12               	comf	(___aomod@dividend+5)^0,f,c
 15902  0033EC  1E11               	comf	(___aomod@dividend+4)^0,f,c
 15903  0033EE  1E10               	comf	(___aomod@dividend+3)^0,f,c
 15904  0033F0  1E0F               	comf	(___aomod@dividend+2)^0,f,c
 15905  0033F2  1E0E               	comf	(___aomod@dividend+1)^0,f,c
 15906  0033F4  6C0D               	negf	___aomod@dividend^0,c
 15907  0033F6  0E00               	movlw	0
 15908  0033F8  220E               	addwfc	(___aomod@dividend+1)^0,f,c
 15909  0033FA  220F               	addwfc	(___aomod@dividend+2)^0,f,c
 15910  0033FC  2210               	addwfc	(___aomod@dividend+3)^0,f,c
 15911  0033FE  2211               	addwfc	(___aomod@dividend+4)^0,f,c
 15912  003400  2212               	addwfc	(___aomod@dividend+5)^0,f,c
 15913  003402  2213               	addwfc	(___aomod@dividend+6)^0,f,c
 15914  003404  2214               	addwfc	(___aomod@dividend+7)^0,f,c
 15915  003406                     l6339:
 15916  003406  C00D  F00D         	movff	___aomod@dividend,?___aomod
 15917  00340A  C00E  F00E         	movff	___aomod@dividend+1,?___aomod+1
 15918  00340E  C00F  F00F         	movff	___aomod@dividend+2,?___aomod+2
 15919  003412  C010  F010         	movff	___aomod@dividend+3,?___aomod+3
 15920  003416  C011  F011         	movff	___aomod@dividend+4,?___aomod+4
 15921  00341A  C012  F012         	movff	___aomod@dividend+5,?___aomod+5
 15922  00341E  C013  F013         	movff	___aomod@dividend+6,?___aomod+6
 15923  003422  C014  F014         	movff	___aomod@dividend+7,?___aomod+7
 15924  003426  0012               	return		;funcret
 15925  003428                     __end_of___aomod:
 15926                           	opt callstack 0
 15927                           
 15928 ;; *************** function ___aodiv *****************
 15929 ;; Defined at:
 15930 ;;		line 9 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/aodiv.c"
 15931 ;; Parameters:    Size  Location     Type
 15932 ;;  dividend        8   12[COMRAM] long long 
 15933 ;;  divisor         8   20[COMRAM] long long 
 15934 ;; Auto vars:     Size  Location     Type
 15935 ;;  quotient        8   30[COMRAM] long long 
 15936 ;;  sign            1   29[COMRAM] unsigned char 
 15937 ;;  counter         1   28[COMRAM] unsigned char 
 15938 ;; Return value:  Size  Location     Type
 15939 ;;                  8   12[COMRAM] long long 
 15940 ;; Registers used:
 15941 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15942 ;; Tracked objects:
 15943 ;;		On entry : 0/0
 15944 ;;		On exit  : 0/0
 15945 ;;		Unchanged: 0/0
 15946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15947 ;;      Params:        16       0       0       0       0       0       0
 15948 ;;      Locals:        10       0       0       0       0       0       0
 15949 ;;      Temps:          0       0       0       0       0       0       0
 15950 ;;      Totals:        26       0       0       0       0       0       0
 15951 ;;Total ram usage:       26 bytes
 15952 ;; Hardware stack levels used:    1
 15953 ;; Hardware stack levels required when called:    2
 15954 ;; This function calls:
 15955 ;;		Nothing
 15956 ;; This function is called by:
 15957 ;;		_dtoa
 15958 ;; This function uses a non-reentrant model
 15959 ;;
 15960                           
 15961                           	psect	text74
 15962  002E0E                     __ptext74:
 15963                           	opt callstack 0
 15964  002E0E                     ___aodiv:
 15965                           	opt callstack 21
 15966                           
 15967                           ;incstack = 0
 15968  002E0E  0E00               	movlw	0
 15969  002E10  6E1E               	movwf	___aodiv@sign^0,c
 15970  002E12  AE1C               	btfss	(___aodiv@divisor+7)^0,7,c
 15971  002E14  D012               	goto	l6271
 15972  002E16  1E1C               	comf	(___aodiv@divisor+7)^0,f,c
 15973  002E18  1E1B               	comf	(___aodiv@divisor+6)^0,f,c
 15974  002E1A  1E1A               	comf	(___aodiv@divisor+5)^0,f,c
 15975  002E1C  1E19               	comf	(___aodiv@divisor+4)^0,f,c
 15976  002E1E  1E18               	comf	(___aodiv@divisor+3)^0,f,c
 15977  002E20  1E17               	comf	(___aodiv@divisor+2)^0,f,c
 15978  002E22  1E16               	comf	(___aodiv@divisor+1)^0,f,c
 15979  002E24  6C15               	negf	___aodiv@divisor^0,c
 15980  002E26  0E00               	movlw	0
 15981  002E28  2216               	addwfc	(___aodiv@divisor+1)^0,f,c
 15982  002E2A  2217               	addwfc	(___aodiv@divisor+2)^0,f,c
 15983  002E2C  2218               	addwfc	(___aodiv@divisor+3)^0,f,c
 15984  002E2E  2219               	addwfc	(___aodiv@divisor+4)^0,f,c
 15985  002E30  221A               	addwfc	(___aodiv@divisor+5)^0,f,c
 15986  002E32  221B               	addwfc	(___aodiv@divisor+6)^0,f,c
 15987  002E34  221C               	addwfc	(___aodiv@divisor+7)^0,f,c
 15988  002E36  0E01               	movlw	1
 15989  002E38  6E1E               	movwf	___aodiv@sign^0,c
 15990  002E3A                     l6271:
 15991  002E3A  AE14               	btfss	(___aodiv@dividend+7)^0,7,c
 15992  002E3C  D012               	goto	l6277
 15993  002E3E  1E14               	comf	(___aodiv@dividend+7)^0,f,c
 15994  002E40  1E13               	comf	(___aodiv@dividend+6)^0,f,c
 15995  002E42  1E12               	comf	(___aodiv@dividend+5)^0,f,c
 15996  002E44  1E11               	comf	(___aodiv@dividend+4)^0,f,c
 15997  002E46  1E10               	comf	(___aodiv@dividend+3)^0,f,c
 15998  002E48  1E0F               	comf	(___aodiv@dividend+2)^0,f,c
 15999  002E4A  1E0E               	comf	(___aodiv@dividend+1)^0,f,c
 16000  002E4C  6C0D               	negf	___aodiv@dividend^0,c
 16001  002E4E  0E00               	movlw	0
 16002  002E50  220E               	addwfc	(___aodiv@dividend+1)^0,f,c
 16003  002E52  220F               	addwfc	(___aodiv@dividend+2)^0,f,c
 16004  002E54  2210               	addwfc	(___aodiv@dividend+3)^0,f,c
 16005  002E56  2211               	addwfc	(___aodiv@dividend+4)^0,f,c
 16006  002E58  2212               	addwfc	(___aodiv@dividend+5)^0,f,c
 16007  002E5A  2213               	addwfc	(___aodiv@dividend+6)^0,f,c
 16008  002E5C  2214               	addwfc	(___aodiv@dividend+7)^0,f,c
 16009  002E5E  0E01               	movlw	1
 16010  002E60  1A1E               	xorwf	___aodiv@sign^0,f,c
 16011  002E62                     l6277:
 16012  002E62  EE20  F01F         	lfsr	2,___aodiv@quotient
 16013  002E66  0E07               	movlw	7
 16014  002E68                     u7731:
 16015  002E68  6ADE               	clrf	postinc2,c
 16016  002E6A  06E8               	decf	wreg,f,c
 16017  002E6C  E2FD               	bc	u7731
 16018  002E6E  5015               	movf	___aodiv@divisor^0,w,c
 16019  002E70  1016               	iorwf	(___aodiv@divisor+1)^0,w,c
 16020  002E72  1017               	iorwf	(___aodiv@divisor+2)^0,w,c
 16021  002E74  1018               	iorwf	(___aodiv@divisor+3)^0,w,c
 16022  002E76  1019               	iorwf	(___aodiv@divisor+4)^0,w,c
 16023  002E78  101A               	iorwf	(___aodiv@divisor+5)^0,w,c
 16024  002E7A  101B               	iorwf	(___aodiv@divisor+6)^0,w,c
 16025  002E7C  101C               	iorwf	(___aodiv@divisor+7)^0,w,c
 16026  002E7E  B4D8               	btfsc	status,2,c
 16027  002E80  D046               	goto	l6299
 16028  002E82  0E01               	movlw	1
 16029  002E84  6E1D               	movwf	___aodiv@counter^0,c
 16030  002E86  D00A               	goto	l6285
 16031  002E88                     l6283:
 16032  002E88  90D8               	bcf	status,0,c
 16033  002E8A  3615               	rlcf	___aodiv@divisor^0,f,c
 16034  002E8C  3616               	rlcf	(___aodiv@divisor+1)^0,f,c
 16035  002E8E  3617               	rlcf	(___aodiv@divisor+2)^0,f,c
 16036  002E90  3618               	rlcf	(___aodiv@divisor+3)^0,f,c
 16037  002E92  3619               	rlcf	(___aodiv@divisor+4)^0,f,c
 16038  002E94  361A               	rlcf	(___aodiv@divisor+5)^0,f,c
 16039  002E96  361B               	rlcf	(___aodiv@divisor+6)^0,f,c
 16040  002E98  361C               	rlcf	(___aodiv@divisor+7)^0,f,c
 16041  002E9A  2A1D               	incf	___aodiv@counter^0,f,c
 16042  002E9C                     l6285:
 16043  002E9C  AE1C               	btfss	(___aodiv@divisor+7)^0,7,c
 16044  002E9E  D7F4               	goto	l6283
 16045  002EA0                     u7750:
 16046  002EA0  90D8               	bcf	status,0,c
 16047  002EA2  361F               	rlcf	___aodiv@quotient^0,f,c
 16048  002EA4  3620               	rlcf	(___aodiv@quotient+1)^0,f,c
 16049  002EA6  3621               	rlcf	(___aodiv@quotient+2)^0,f,c
 16050  002EA8  3622               	rlcf	(___aodiv@quotient+3)^0,f,c
 16051  002EAA  3623               	rlcf	(___aodiv@quotient+4)^0,f,c
 16052  002EAC  3624               	rlcf	(___aodiv@quotient+5)^0,f,c
 16053  002EAE  3625               	rlcf	(___aodiv@quotient+6)^0,f,c
 16054  002EB0  3626               	rlcf	(___aodiv@quotient+7)^0,f,c
 16055  002EB2  5015               	movf	___aodiv@divisor^0,w,c
 16056  002EB4  5C0D               	subwf	___aodiv@dividend^0,w,c
 16057  002EB6  5016               	movf	(___aodiv@divisor+1)^0,w,c
 16058  002EB8  580E               	subwfb	(___aodiv@dividend+1)^0,w,c
 16059  002EBA  5017               	movf	(___aodiv@divisor+2)^0,w,c
 16060  002EBC  580F               	subwfb	(___aodiv@dividend+2)^0,w,c
 16061  002EBE  5018               	movf	(___aodiv@divisor+3)^0,w,c
 16062  002EC0  5810               	subwfb	(___aodiv@dividend+3)^0,w,c
 16063  002EC2  5019               	movf	(___aodiv@divisor+4)^0,w,c
 16064  002EC4  5811               	subwfb	(___aodiv@dividend+4)^0,w,c
 16065  002EC6  501A               	movf	(___aodiv@divisor+5)^0,w,c
 16066  002EC8  5812               	subwfb	(___aodiv@dividend+5)^0,w,c
 16067  002ECA  501B               	movf	(___aodiv@divisor+6)^0,w,c
 16068  002ECC  5813               	subwfb	(___aodiv@dividend+6)^0,w,c
 16069  002ECE  501C               	movf	(___aodiv@divisor+7)^0,w,c
 16070  002ED0  5814               	subwfb	(___aodiv@dividend+7)^0,w,c
 16071  002ED2  A0D8               	btfss	status,0,c
 16072  002ED4  D011               	goto	l6295
 16073  002ED6  5015               	movf	___aodiv@divisor^0,w,c
 16074  002ED8  5E0D               	subwf	___aodiv@dividend^0,f,c
 16075  002EDA  5016               	movf	(___aodiv@divisor+1)^0,w,c
 16076  002EDC  5A0E               	subwfb	(___aodiv@dividend+1)^0,f,c
 16077  002EDE  5017               	movf	(___aodiv@divisor+2)^0,w,c
 16078  002EE0  5A0F               	subwfb	(___aodiv@dividend+2)^0,f,c
 16079  002EE2  5018               	movf	(___aodiv@divisor+3)^0,w,c
 16080  002EE4  5A10               	subwfb	(___aodiv@dividend+3)^0,f,c
 16081  002EE6  5019               	movf	(___aodiv@divisor+4)^0,w,c
 16082  002EE8  5A11               	subwfb	(___aodiv@dividend+4)^0,f,c
 16083  002EEA  501A               	movf	(___aodiv@divisor+5)^0,w,c
 16084  002EEC  5A12               	subwfb	(___aodiv@dividend+5)^0,f,c
 16085  002EEE  501B               	movf	(___aodiv@divisor+6)^0,w,c
 16086  002EF0  5A13               	subwfb	(___aodiv@dividend+6)^0,f,c
 16087  002EF2  501C               	movf	(___aodiv@divisor+7)^0,w,c
 16088  002EF4  5A14               	subwfb	(___aodiv@dividend+7)^0,f,c
 16089  002EF6  801F               	bsf	___aodiv@quotient^0,0,c
 16090  002EF8                     l6295:
 16091  002EF8  90D8               	bcf	status,0,c
 16092  002EFA  321C               	rrcf	(___aodiv@divisor+7)^0,f,c
 16093  002EFC  321B               	rrcf	(___aodiv@divisor+6)^0,f,c
 16094  002EFE  321A               	rrcf	(___aodiv@divisor+5)^0,f,c
 16095  002F00  3219               	rrcf	(___aodiv@divisor+4)^0,f,c
 16096  002F02  3218               	rrcf	(___aodiv@divisor+3)^0,f,c
 16097  002F04  3217               	rrcf	(___aodiv@divisor+2)^0,f,c
 16098  002F06  3216               	rrcf	(___aodiv@divisor+1)^0,f,c
 16099  002F08  3215               	rrcf	___aodiv@divisor^0,f,c
 16100  002F0A  2E1D               	decfsz	___aodiv@counter^0,f,c
 16101  002F0C  D7C9               	goto	u7750
 16102  002F0E                     l6299:
 16103  002F0E  501E               	movf	___aodiv@sign^0,w,c
 16104  002F10  B4D8               	btfsc	status,2,c
 16105  002F12  D010               	goto	l6303
 16106  002F14  1E26               	comf	(___aodiv@quotient+7)^0,f,c
 16107  002F16  1E25               	comf	(___aodiv@quotient+6)^0,f,c
 16108  002F18  1E24               	comf	(___aodiv@quotient+5)^0,f,c
 16109  002F1A  1E23               	comf	(___aodiv@quotient+4)^0,f,c
 16110  002F1C  1E22               	comf	(___aodiv@quotient+3)^0,f,c
 16111  002F1E  1E21               	comf	(___aodiv@quotient+2)^0,f,c
 16112  002F20  1E20               	comf	(___aodiv@quotient+1)^0,f,c
 16113  002F22  6C1F               	negf	___aodiv@quotient^0,c
 16114  002F24  0E00               	movlw	0
 16115  002F26  2220               	addwfc	(___aodiv@quotient+1)^0,f,c
 16116  002F28  2221               	addwfc	(___aodiv@quotient+2)^0,f,c
 16117  002F2A  2222               	addwfc	(___aodiv@quotient+3)^0,f,c
 16118  002F2C  2223               	addwfc	(___aodiv@quotient+4)^0,f,c
 16119  002F2E  2224               	addwfc	(___aodiv@quotient+5)^0,f,c
 16120  002F30  2225               	addwfc	(___aodiv@quotient+6)^0,f,c
 16121  002F32  2226               	addwfc	(___aodiv@quotient+7)^0,f,c
 16122  002F34                     l6303:
 16123  002F34  C01F  F00D         	movff	___aodiv@quotient,?___aodiv
 16124  002F38  C020  F00E         	movff	___aodiv@quotient+1,?___aodiv+1
 16125  002F3C  C021  F00F         	movff	___aodiv@quotient+2,?___aodiv+2
 16126  002F40  C022  F010         	movff	___aodiv@quotient+3,?___aodiv+3
 16127  002F44  C023  F011         	movff	___aodiv@quotient+4,?___aodiv+4
 16128  002F48  C024  F012         	movff	___aodiv@quotient+5,?___aodiv+5
 16129  002F4C  C025  F013         	movff	___aodiv@quotient+6,?___aodiv+6
 16130  002F50  C026  F014         	movff	___aodiv@quotient+7,?___aodiv+7
 16131  002F54  0012               	return		;funcret
 16132  002F56                     __end_of___aodiv:
 16133                           	opt callstack 0
 16134                           
 16135 ;; *************** function _adf4351_init *****************
 16136 ;; Defined at:
 16137 ;;		line 49 in file "src/driver/adf4351.c"
 16138 ;; Parameters:    Size  Location     Type
 16139 ;;  ctx             2   24[COMRAM] PTR struct adf4351_ctx
 16140 ;;		 -> g_adf4351(55), 
 16141 ;;  ref             4   26[COMRAM] unsigned long 
 16142 ;;  pfd             4   30[COMRAM] unsigned long 
 16143 ;; Auto vars:     Size  Location     Type
 16144 ;;		None
 16145 ;; Return value:  Size  Location     Type
 16146 ;;                  1    wreg      void 
 16147 ;; Registers used:
 16148 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16149 ;; Tracked objects:
 16150 ;;		On entry : 3F/1
 16151 ;;		On exit  : 0/0
 16152 ;;		Unchanged: 0/0
 16153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16154 ;;      Params:        10       0       0       0       0       0       0
 16155 ;;      Locals:         0       0       0       0       0       0       0
 16156 ;;      Temps:          3       0       0       0       0       0       0
 16157 ;;      Totals:        13       0       0       0       0       0       0
 16158 ;;Total ram usage:       13 bytes
 16159 ;; Hardware stack levels used:    1
 16160 ;; Hardware stack levels required when called:    3
 16161 ;; This function calls:
 16162 ;;		_adf4351_default
 16163 ;;		_memset
 16164 ;; This function is called by:
 16165 ;;		_main
 16166 ;; This function uses a non-reentrant model
 16167 ;;
 16168                           
 16169                           	psect	text75
 16170  003804                     __ptext75:
 16171                           	opt callstack 0
 16172  003804                     _adf4351_init:
 16173                           	opt callstack 27
 16174                           
 16175                           ; BSR set to: 1
 16176                           ;src/driver/adf4351.c: 49: void adf4351_init(adf4351_ctx* ctx, u32 ref, u32 pfd);src/dri
      +                          ver/adf4351.c: 50: {;src/driver/adf4351.c: 51:  memset(ctx, 0, sizeof(*ctx));
 16177                           
 16178                           ;incstack = 0
 16179  003804  C019  F00D         	movff	adf4351_init@ctx,memset@dest
 16180  003808  C01A  F00E         	movff	adf4351_init@ctx+1,memset@dest+1
 16181  00380C  0E00               	movlw	0
 16182  00380E  6E10               	movwf	(memset@c+1)^0,c
 16183  003810  0E00               	movlw	0
 16184  003812  6E0F               	movwf	memset@c^0,c
 16185  003814  0E00               	movlw	0
 16186  003816  6E12               	movwf	(memset@n+1)^0,c
 16187  003818  0E37               	movlw	55
 16188  00381A  6E11               	movwf	memset@n^0,c
 16189  00381C  ECE9  F018         	call	_memset	;wreg free
 16190                           
 16191                           ; BSR set to: 1
 16192                           ;src/driver/adf4351.c: 54:  ctx->init = 1;
 16193  003820  C019  FFD9         	movff	adf4351_init@ctx,fsr2l
 16194  003824  C01A  FFDA         	movff	adf4351_init@ctx+1,fsr2h
 16195  003828  0E01               	movlw	1
 16196  00382A  6EDE               	movwf	postinc2,c
 16197  00382C  0E00               	movlw	0
 16198  00382E  6EDD               	movwf	postdec2,c
 16199                           
 16200                           ; BSR set to: 1
 16201                           ;src/driver/adf4351.c: 55:  ctx->ref = ref;
 16202  003830  EE20 F02B          	lfsr	2,43
 16203  003834  5019               	movf	adf4351_init@ctx^0,w,c
 16204  003836  26D9               	addwf	fsr2l,f,c
 16205  003838  501A               	movf	(adf4351_init@ctx+1)^0,w,c
 16206  00383A  22DA               	addwfc	fsr2h,f,c
 16207  00383C  C01B  FFDE         	movff	adf4351_init@ref,postinc2
 16208  003840  C01C  FFDE         	movff	adf4351_init@ref+1,postinc2
 16209  003844  C01D  FFDE         	movff	adf4351_init@ref+2,postinc2
 16210  003848  C01E  FFDE         	movff	adf4351_init@ref+3,postinc2
 16211                           
 16212                           ; BSR set to: 1
 16213                           ;src/driver/adf4351.c: 56:  ctx->pfd = pfd;
 16214  00384C  EE20 F02F          	lfsr	2,47
 16215  003850  5019               	movf	adf4351_init@ctx^0,w,c
 16216  003852  26D9               	addwf	fsr2l,f,c
 16217  003854  501A               	movf	(adf4351_init@ctx+1)^0,w,c
 16218  003856  22DA               	addwfc	fsr2h,f,c
 16219  003858  C01F  FFDE         	movff	adf4351_init@pfd,postinc2
 16220  00385C  C020  FFDE         	movff	adf4351_init@pfd+1,postinc2
 16221  003860  C021  FFDE         	movff	adf4351_init@pfd+2,postinc2
 16222  003864  C022  FFDE         	movff	adf4351_init@pfd+3,postinc2
 16223                           
 16224                           ; BSR set to: 1
 16225                           ;src/driver/adf4351.c: 59:     *((PIN_ADF_LE)->pPORT) &= ~(PIN_ADF_LE)->mask;
 16226  003868  0E0F               	movlw	low (_PIN_ADF_LE_DEF+4)
 16227  00386A  6EF6               	movwf	tblptrl,c
 16228  00386C  0E7D               	movlw	high (_PIN_ADF_LE_DEF+4)
 16229  00386E  6EF7               	movwf	tblptrh,c
 16230  003870                     	if	0	;tblptru may be non-zero
 16231  003870                     	endif
 16232  003870                     	if	0	;tblptru may be non-zero
 16233  003870                     	endif
 16234  003870  0008               	tblrd		*
 16235  003872  50F5               	movf	tablat,w,c
 16236  003874  0AFF               	xorlw	255
 16237  003876  6E23               	movwf	??_adf4351_init^0,c
 16238  003878  0E0B               	movlw	low _PIN_ADF_LE_DEF
 16239  00387A  6EF6               	movwf	tblptrl,c
 16240  00387C                     	if	1	;There is more than 1 active tblptr byte
 16241  00387C  0E7D               	movlw	high _PIN_ADF_LE_DEF
 16242  00387E  6EF7               	movwf	tblptrh,c
 16243  003880                     	endif
 16244  003880                     	if	0	;There are less than 3 active tblptr bytes
 16245  003880                     	endif
 16246  003880  0009               	tblrd		*+
 16247  003882  CFF5 F024          	movff	tablat,??_adf4351_init+1
 16248  003886  0009               	tblrd		*+
 16249  003888  CFF5 F025          	movff	tablat,??_adf4351_init+2
 16250  00388C  C024  FFD9         	movff	??_adf4351_init+1,fsr2l
 16251  003890  C025  FFDA         	movff	??_adf4351_init+2,fsr2h
 16252  003894  5023               	movf	??_adf4351_init^0,w,c
 16253  003896  16DF               	andwf	indf2,f,c
 16254                           
 16255                           ; BSR set to: 1
 16256                           ;src/driver/adf4351.c: 60:     *((PIN_ADF_CE)->pPORT) |= (PIN_ADF_CE)->mask;
 16257  003898  0E14               	movlw	low (_PIN_ADF_CE_DEF+4)
 16258  00389A  6EF6               	movwf	tblptrl,c
 16259  00389C  0E7D               	movlw	high (_PIN_ADF_CE_DEF+4)
 16260  00389E  6EF7               	movwf	tblptrh,c
 16261  0038A0                     	if	0	;tblptru may be non-zero
 16262  0038A0                     	endif
 16263  0038A0                     	if	0	;tblptru may be non-zero
 16264  0038A0                     	endif
 16265  0038A0  0008               	tblrd		*
 16266  0038A2  CFF5 F023          	movff	tablat,??_adf4351_init
 16267  0038A6  0E10               	movlw	low _PIN_ADF_CE_DEF
 16268  0038A8  6EF6               	movwf	tblptrl,c
 16269  0038AA                     	if	1	;There is more than 1 active tblptr byte
 16270  0038AA  0E7D               	movlw	high _PIN_ADF_CE_DEF
 16271  0038AC  6EF7               	movwf	tblptrh,c
 16272  0038AE                     	endif
 16273  0038AE                     	if	0	;There are less than 3 active tblptr bytes
 16274  0038AE                     	endif
 16275  0038AE  0009               	tblrd		*+
 16276  0038B0  CFF5 F024          	movff	tablat,??_adf4351_init+1
 16277  0038B4  0009               	tblrd		*+
 16278  0038B6  CFF5 F025          	movff	tablat,??_adf4351_init+2
 16279  0038BA  C024  FFD9         	movff	??_adf4351_init+1,fsr2l
 16280  0038BE  C025  FFDA         	movff	??_adf4351_init+2,fsr2h
 16281  0038C2  5023               	movf	??_adf4351_init^0,w,c
 16282  0038C4  12DF               	iorwf	indf2,f,c
 16283                           
 16284                           ; BSR set to: 1
 16285                           ;src/driver/adf4351.c: 63:  adf4351_default(ctx);
 16286  0038C6  C019  F00D         	movff	adf4351_init@ctx,adf4351_default@ctx
 16287  0038CA  C01A  F00E         	movff	adf4351_init@ctx+1,adf4351_default@ctx+1
 16288  0038CE  ECC5  F01F         	call	_adf4351_default	;wreg free
 16289                           
 16290                           ; BSR set to: 1
 16291                           ;src/driver/adf4351.c: 65:     _delay((unsigned long)((100)*(8000000/4000000.0)));
 16292  0038D2  0E42               	movlw	66
 16293  0038D4                     u11377:
 16294  0038D4  2EE8               	decfsz	wreg,f,c
 16295  0038D6  D7FE               	bra	u11377
 16296  0038D8  D000               	nop2	
 16297  0038DA  0012               	return		;funcret
 16298  0038DC                     __end_of_adf4351_init:
 16299                           	opt callstack 0
 16300                           
 16301 ;; *************** function _memset *****************
 16302 ;; Defined at:
 16303 ;;		line 4 in file "/opt/microchip/xc8/v2.10/pic/sources/c99/common/memset.c"
 16304 ;; Parameters:    Size  Location     Type
 16305 ;;  dest            2   12[COMRAM] PTR void 
 16306 ;;		 -> g_adf4351(55), 
 16307 ;;  c               2   14[COMRAM] int 
 16308 ;;  n               2   16[COMRAM] unsigned int 
 16309 ;; Auto vars:     Size  Location     Type
 16310 ;;  s               2   22[COMRAM] PTR unsigned char 
 16311 ;;		 -> g_adf4351(55), 
 16312 ;;  k               2   20[COMRAM] unsigned int 
 16313 ;; Return value:  Size  Location     Type
 16314 ;;                  2   12[COMRAM] PTR void 
 16315 ;; Registers used:
 16316 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16317 ;; Tracked objects:
 16318 ;;		On entry : 3F/1
 16319 ;;		On exit  : 3F/1
 16320 ;;		Unchanged: 3F/0
 16321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16322 ;;      Params:         6       0       0       0       0       0       0
 16323 ;;      Locals:         4       0       0       0       0       0       0
 16324 ;;      Temps:          2       0       0       0       0       0       0
 16325 ;;      Totals:        12       0       0       0       0       0       0
 16326 ;;Total ram usage:       12 bytes
 16327 ;; Hardware stack levels used:    1
 16328 ;; Hardware stack levels required when called:    2
 16329 ;; This function calls:
 16330 ;;		Nothing
 16331 ;; This function is called by:
 16332 ;;		_adf4351_init
 16333 ;; This function uses a non-reentrant model
 16334 ;;
 16335                           
 16336                           	psect	text76
 16337  0031D2                     __ptext76:
 16338                           	opt callstack 0
 16339  0031D2                     _memset:
 16340                           	opt callstack 27
 16341                           
 16342                           ; BSR set to: 1
 16343                           
 16344                           ;incstack = 0
 16345  0031D2  C00D  F017         	movff	memset@dest,memset@s
 16346  0031D6  C00E  F018         	movff	memset@dest+1,memset@s+1
 16347  0031DA  5011               	movf	memset@n^0,w,c
 16348  0031DC  1012               	iorwf	(memset@n+1)^0,w,c
 16349  0031DE  B4D8               	btfsc	status,2,c
 16350  0031E0  0012               	return	
 16351                           
 16352                           ; BSR set to: 1
 16353  0031E2  C017  FFD9         	movff	memset@s,fsr2l
 16354  0031E6  C018  FFDA         	movff	memset@s+1,fsr2h
 16355  0031EA  C00F  FFDF         	movff	memset@c,indf2
 16356                           
 16357                           ; BSR set to: 1
 16358  0031EE  5011               	movf	memset@n^0,w,c
 16359  0031F0  2417               	addwf	memset@s^0,w,c
 16360  0031F2  6E13               	movwf	??_memset^0,c
 16361  0031F4  5012               	movf	(memset@n+1)^0,w,c
 16362  0031F6  2018               	addwfc	(memset@s+1)^0,w,c
 16363  0031F8  6E14               	movwf	(??_memset+1)^0,c
 16364  0031FA  0EFF               	movlw	255
 16365  0031FC  2413               	addwf	??_memset^0,w,c
 16366  0031FE  6ED9               	movwf	fsr2l,c
 16367  003200  0EFF               	movlw	255
 16368  003202  2014               	addwfc	(??_memset+1)^0,w,c
 16369  003204  6EDA               	movwf	fsr2h,c
 16370  003206  C00F  FFDF         	movff	memset@c,indf2
 16371  00320A  5012               	movf	(memset@n+1)^0,w,c
 16372  00320C  E104               	bnz	l7903
 16373  00320E  0E03               	movlw	3
 16374  003210  5C11               	subwf	memset@n^0,w,c
 16375  003212  A0D8               	btfss	status,0,c
 16376  003214  0012               	return	
 16377  003216                     l7903:
 16378                           
 16379                           ; BSR set to: 1
 16380  003216  EE20 F001          	lfsr	2,1
 16381  00321A  5017               	movf	memset@s^0,w,c
 16382  00321C  26D9               	addwf	fsr2l,f,c
 16383  00321E  5018               	movf	(memset@s+1)^0,w,c
 16384  003220  22DA               	addwfc	fsr2h,f,c
 16385  003222  C00F  FFDF         	movff	memset@c,indf2
 16386  003226  EE20 F002          	lfsr	2,2
 16387  00322A  5017               	movf	memset@s^0,w,c
 16388  00322C  26D9               	addwf	fsr2l,f,c
 16389  00322E  5018               	movf	(memset@s+1)^0,w,c
 16390  003230  22DA               	addwfc	fsr2h,f,c
 16391  003232  C00F  FFDF         	movff	memset@c,indf2
 16392  003236  5011               	movf	memset@n^0,w,c
 16393  003238  2417               	addwf	memset@s^0,w,c
 16394  00323A  6E13               	movwf	??_memset^0,c
 16395  00323C  5012               	movf	(memset@n+1)^0,w,c
 16396  00323E  2018               	addwfc	(memset@s+1)^0,w,c
 16397  003240  6E14               	movwf	(??_memset+1)^0,c
 16398  003242  0EFE               	movlw	254
 16399  003244  2413               	addwf	??_memset^0,w,c
 16400  003246  6ED9               	movwf	fsr2l,c
 16401  003248  0EFF               	movlw	255
 16402  00324A  2014               	addwfc	(??_memset+1)^0,w,c
 16403  00324C  6EDA               	movwf	fsr2h,c
 16404  00324E  C00F  FFDF         	movff	memset@c,indf2
 16405  003252  5011               	movf	memset@n^0,w,c
 16406  003254  2417               	addwf	memset@s^0,w,c
 16407  003256  6E13               	movwf	??_memset^0,c
 16408  003258  5012               	movf	(memset@n+1)^0,w,c
 16409  00325A  2018               	addwfc	(memset@s+1)^0,w,c
 16410  00325C  6E14               	movwf	(??_memset+1)^0,c
 16411  00325E  0EFD               	movlw	253
 16412  003260  2413               	addwf	??_memset^0,w,c
 16413  003262  6ED9               	movwf	fsr2l,c
 16414  003264  0EFF               	movlw	255
 16415  003266  2014               	addwfc	(??_memset+1)^0,w,c
 16416  003268  6EDA               	movwf	fsr2h,c
 16417  00326A  C00F  FFDF         	movff	memset@c,indf2
 16418                           
 16419                           ; BSR set to: 1
 16420  00326E  5012               	movf	(memset@n+1)^0,w,c
 16421  003270  E104               	bnz	l7909
 16422  003272  0E07               	movlw	7
 16423  003274  5C11               	subwf	memset@n^0,w,c
 16424  003276  A0D8               	btfss	status,0,c
 16425  003278  0012               	return	
 16426  00327A                     l7909:
 16427                           
 16428                           ; BSR set to: 1
 16429  00327A  EE20 F003          	lfsr	2,3
 16430  00327E  5017               	movf	memset@s^0,w,c
 16431  003280  26D9               	addwf	fsr2l,f,c
 16432  003282  5018               	movf	(memset@s+1)^0,w,c
 16433  003284  22DA               	addwfc	fsr2h,f,c
 16434  003286  C00F  FFDF         	movff	memset@c,indf2
 16435  00328A  5011               	movf	memset@n^0,w,c
 16436  00328C  2417               	addwf	memset@s^0,w,c
 16437  00328E  6E13               	movwf	??_memset^0,c
 16438  003290  5012               	movf	(memset@n+1)^0,w,c
 16439  003292  2018               	addwfc	(memset@s+1)^0,w,c
 16440  003294  6E14               	movwf	(??_memset+1)^0,c
 16441  003296  0EFC               	movlw	252
 16442  003298  2413               	addwf	??_memset^0,w,c
 16443  00329A  6ED9               	movwf	fsr2l,c
 16444  00329C  0EFF               	movlw	255
 16445  00329E  2014               	addwfc	(??_memset+1)^0,w,c
 16446  0032A0  6EDA               	movwf	fsr2h,c
 16447  0032A2  C00F  FFDF         	movff	memset@c,indf2
 16448                           
 16449                           ; BSR set to: 1
 16450  0032A6  5012               	movf	(memset@n+1)^0,w,c
 16451  0032A8  E104               	bnz	l7915
 16452  0032AA  0E09               	movlw	9
 16453  0032AC  5C11               	subwf	memset@n^0,w,c
 16454  0032AE  A0D8               	btfss	status,0,c
 16455  0032B0  0012               	return	
 16456  0032B2                     l7915:
 16457                           
 16458                           ; BSR set to: 1
 16459  0032B2  C017  F013         	movff	memset@s,??_memset
 16460  0032B6  C018  F014         	movff	memset@s+1,??_memset+1
 16461  0032BA  1E13               	comf	??_memset^0,f,c
 16462  0032BC  1E14               	comf	(??_memset+1)^0,f,c
 16463  0032BE  4A13               	infsnz	??_memset^0,f,c
 16464  0032C0  2A14               	incf	(??_memset+1)^0,f,c
 16465  0032C2  0E03               	movlw	3
 16466  0032C4  1413               	andwf	??_memset^0,w,c
 16467  0032C6  6E15               	movwf	memset@k^0,c
 16468  0032C8  6A16               	clrf	(memset@k+1)^0,c
 16469  0032CA  5015               	movf	memset@k^0,w,c
 16470  0032CC  2617               	addwf	memset@s^0,f,c
 16471  0032CE  5016               	movf	(memset@k+1)^0,w,c
 16472  0032D0  2218               	addwfc	(memset@s+1)^0,f,c
 16473  0032D2  5015               	movf	memset@k^0,w,c
 16474  0032D4  5E11               	subwf	memset@n^0,f,c
 16475  0032D6  5016               	movf	(memset@k+1)^0,w,c
 16476  0032D8  5A12               	subwfb	(memset@n+1)^0,f,c
 16477  0032DA  0EFC               	movlw	252
 16478  0032DC  1611               	andwf	memset@n^0,f,c
 16479  0032DE  0EFF               	movlw	255
 16480  0032E0  1612               	andwf	(memset@n+1)^0,f,c
 16481  0032E2  D00B               	goto	l7923
 16482  0032E4                     l7917:
 16483                           
 16484                           ; BSR set to: 1
 16485  0032E4  C017  FFD9         	movff	memset@s,fsr2l
 16486  0032E8  C018  FFDA         	movff	memset@s+1,fsr2h
 16487  0032EC  C00F  FFDF         	movff	memset@c,indf2
 16488                           
 16489                           ; BSR set to: 1
 16490  0032F0  0611               	decf	memset@n^0,f,c
 16491  0032F2  A0D8               	btfss	status,0,c
 16492  0032F4  0612               	decf	(memset@n+1)^0,f,c
 16493                           
 16494                           ; BSR set to: 1
 16495  0032F6  4A17               	infsnz	memset@s^0,f,c
 16496  0032F8  2A18               	incf	(memset@s+1)^0,f,c
 16497  0032FA                     l7923:
 16498                           
 16499                           ; BSR set to: 1
 16500  0032FA  5011               	movf	memset@n^0,w,c
 16501  0032FC  1012               	iorwf	(memset@n+1)^0,w,c
 16502  0032FE  B4D8               	btfsc	status,2,c
 16503  003300  0012               	return	
 16504  003302  D7F0               	goto	l7917
 16505  003304                     __end_of_memset:
 16506                           	opt callstack 0
 16507                           
 16508 ;; *************** function _adf4351_default *****************
 16509 ;; Defined at:
 16510 ;;		line 151 in file "src/driver/adf4351.c"
 16511 ;; Parameters:    Size  Location     Type
 16512 ;;  ctx             2   12[COMRAM] PTR struct adf4351_ctx
 16513 ;;		 -> g_adf4351(55), 
 16514 ;; Auto vars:     Size  Location     Type
 16515 ;;		None
 16516 ;; Return value:  Size  Location     Type
 16517 ;;                  1    wreg      void 
 16518 ;; Registers used:
 16519 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16520 ;; Tracked objects:
 16521 ;;		On entry : 3F/1
 16522 ;;		On exit  : 3F/1
 16523 ;;		Unchanged: 3F/0
 16524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16525 ;;      Params:         2       0       0       0       0       0       0
 16526 ;;      Locals:         0       0       0       0       0       0       0
 16527 ;;      Temps:          0       0       0       0       0       0       0
 16528 ;;      Totals:         2       0       0       0       0       0       0
 16529 ;;Total ram usage:        2 bytes
 16530 ;; Hardware stack levels used:    1
 16531 ;; Hardware stack levels required when called:    2
 16532 ;; This function calls:
 16533 ;;		Nothing
 16534 ;; This function is called by:
 16535 ;;		_adf4351_init
 16536 ;; This function uses a non-reentrant model
 16537 ;;
 16538                           
 16539                           	psect	text77
 16540  003F8A                     __ptext77:
 16541                           	opt callstack 0
 16542  003F8A                     _adf4351_default:
 16543                           	opt callstack 27
 16544                           
 16545                           ; BSR set to: 1
 16546                           ;src/driver/adf4351.c: 151: static void adf4351_default(adf4351_ctx* ctx);src/driver/adf
      +                          4351.c: 152: {;src/driver/adf4351.c: 153:  ctx->reg1.phase = 1;
 16547                           
 16548                           ; BSR set to: 1
 16549                           ;incstack = 0
 16550  003F8A  EE20 F007          	lfsr	2,7
 16551  003F8E  500D               	movf	adf4351_default@ctx^0,w,c
 16552  003F90  26D9               	addwf	fsr2l,f,c
 16553  003F92  500E               	movf	(adf4351_default@ctx+1)^0,w,c
 16554  003F94  22DA               	addwfc	fsr2h,f,c
 16555  003F96  0E01               	movlw	1
 16556  003F98  6EDE               	movwf	postinc2,c
 16557  003F9A  0E00               	movlw	0
 16558  003F9C  6EDD               	movwf	postdec2,c
 16559                           
 16560                           ;src/driver/adf4351.c: 154:  ctx->reg2.muxout = 6;
 16561  003F9E  EE20 F00C          	lfsr	2,12
 16562  003FA2  500D               	movf	adf4351_default@ctx^0,w,c
 16563  003FA4  26D9               	addwf	fsr2l,f,c
 16564  003FA6  500E               	movf	(adf4351_default@ctx+1)^0,w,c
 16565  003FA8  22DA               	addwfc	fsr2h,f,c
 16566  003FAA  0E06               	movlw	6
 16567  003FAC  6EDF               	movwf	indf2,c
 16568                           
 16569                           ;src/driver/adf4351.c: 155:  ctx->reg2.cpc = 7;
 16570  003FAE  EE20 F012          	lfsr	2,18
 16571  003FB2  500D               	movf	adf4351_default@ctx^0,w,c
 16572  003FB4  26D9               	addwf	fsr2l,f,c
 16573  003FB6  500E               	movf	(adf4351_default@ctx+1)^0,w,c
 16574  003FB8  22DA               	addwfc	fsr2h,f,c
 16575  003FBA  0E07               	movlw	7
 16576  003FBC  6EDF               	movwf	indf2,c
 16577                           
 16578                           ;src/driver/adf4351.c: 156:  ctx->reg2.lownoise = 3;
 16579  003FBE  EE20 F00B          	lfsr	2,11
 16580  003FC2  500D               	movf	adf4351_default@ctx^0,w,c
 16581  003FC4  26D9               	addwf	fsr2l,f,c
 16582  003FC6  500E               	movf	(adf4351_default@ctx+1)^0,w,c
 16583  003FC8  22DA               	addwfc	fsr2h,f,c
 16584  003FCA  0E03               	movlw	3
 16585  003FCC  6EDF               	movwf	indf2,c
 16586                           
 16587                           ;src/driver/adf4351.c: 157:  ctx->reg2.pdpol = 1;
 16588  003FCE  EE20 F015          	lfsr	2,21
 16589  003FD2  500D               	movf	adf4351_default@ctx^0,w,c
 16590  003FD4  26D9               	addwf	fsr2l,f,c
 16591  003FD6  500E               	movf	(adf4351_default@ctx+1)^0,w,c
 16592  003FD8  22DA               	addwfc	fsr2h,f,c
 16593  003FDA  0E01               	movlw	1
 16594  003FDC  6EDF               	movwf	indf2,c
 16595                           
 16596                           ;src/driver/adf4351.c: 158:  ctx->reg4.fbsel = 1;
 16597  003FDE  EE20 F020          	lfsr	2,32
 16598  003FE2  500D               	movf	adf4351_default@ctx^0,w,c
 16599  003FE4  26D9               	addwf	fsr2l,f,c
 16600  003FE6  500E               	movf	(adf4351_default@ctx+1)^0,w,c
 16601  003FE8  22DA               	addwfc	fsr2h,f,c
 16602  003FEA  0E01               	movlw	1
 16603  003FEC  6EDF               	movwf	indf2,c
 16604                           
 16605                           ;src/driver/adf4351.c: 159:  ctx->reg4.rfoutena = 0;
 16606  003FEE  EE20 F028          	lfsr	2,40
 16607  003FF2  500D               	movf	adf4351_default@ctx^0,w,c
 16608  003FF4  26D9               	addwf	fsr2l,f,c
 16609  003FF6  500E               	movf	(adf4351_default@ctx+1)^0,w,c
 16610  003FF8  22DA               	addwfc	fsr2h,f,c
 16611  003FFA  0E00               	movlw	0
 16612  003FFC  6EDF               	movwf	indf2,c
 16613                           
 16614                           ;src/driver/adf4351.c: 160:  ctx->reg4.rfoutpwr = 3;
 16615  003FFE  EE20 F029          	lfsr	2,41
 16616  004002  500D               	movf	adf4351_default@ctx^0,w,c
 16617  004004  26D9               	addwf	fsr2l,f,c
 16618  004006  500E               	movf	(adf4351_default@ctx+1)^0,w,c
 16619  004008  22DA               	addwfc	fsr2h,f,c
 16620  00400A  0E03               	movlw	3
 16621  00400C  6EDF               	movwf	indf2,c
 16622                           
 16623                           ;src/driver/adf4351.c: 161:     ctx->reg4.vcopd = 1;
 16624  00400E  EE20 F023          	lfsr	2,35
 16625  004012  500D               	movf	adf4351_default@ctx^0,w,c
 16626  004014  26D9               	addwf	fsr2l,f,c
 16627  004016  500E               	movf	(adf4351_default@ctx+1)^0,w,c
 16628  004018  22DA               	addwfc	fsr2h,f,c
 16629  00401A  0E01               	movlw	1
 16630  00401C  6EDF               	movwf	indf2,c
 16631                           
 16632                           ;src/driver/adf4351.c: 162:     ctx->reg5.ldpinmod = 1;
 16633  00401E  EE20 F02A          	lfsr	2,42
 16634  004022  500D               	movf	adf4351_default@ctx^0,w,c
 16635  004024  26D9               	addwf	fsr2l,f,c
 16636  004026  500E               	movf	(adf4351_default@ctx+1)^0,w,c
 16637  004028  22DA               	addwfc	fsr2h,f,c
 16638  00402A  0E01               	movlw	1
 16639  00402C  6EDF               	movwf	indf2,c
 16640                           
 16641                           ; BSR set to: 1
 16642  00402E  0012               	return		;funcret
 16643  004030                     __end_of_adf4351_default:
 16644                           	opt callstack 0
 16645                           
 16646 ;; *************** function _adc_init *****************
 16647 ;; Defined at:
 16648 ;;		line 23 in file "src/driver/adc.c"
 16649 ;; Parameters:    Size  Location     Type
 16650 ;;		None
 16651 ;; Auto vars:     Size  Location     Type
 16652 ;;		None
 16653 ;; Return value:  Size  Location     Type
 16654 ;;                  1    wreg      void 
 16655 ;; Registers used:
 16656 ;;		wreg, status,2
 16657 ;; Tracked objects:
 16658 ;;		On entry : 0/0
 16659 ;;		On exit  : 0/0
 16660 ;;		Unchanged: 0/0
 16661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16662 ;;      Params:         0       0       0       0       0       0       0
 16663 ;;      Locals:         0       0       0       0       0       0       0
 16664 ;;      Temps:          0       0       0       0       0       0       0
 16665 ;;      Totals:         0       0       0       0       0       0       0
 16666 ;;Total ram usage:        0 bytes
 16667 ;; Hardware stack levels used:    1
 16668 ;; Hardware stack levels required when called:    2
 16669 ;; This function calls:
 16670 ;;		Nothing
 16671 ;; This function is called by:
 16672 ;;		_main
 16673 ;; This function uses a non-reentrant model
 16674 ;;
 16675                           
 16676                           	psect	text78
 16677  004F10                     __ptext78:
 16678                           	opt callstack 0
 16679  004F10                     _adc_init:
 16680                           	opt callstack 28
 16681                           
 16682                           ;src/driver/adc.c: 25:     ADCON1bits.VCFG1 = 0;
 16683                           
 16684                           ; BSR set to: 1
 16685                           ;incstack = 0
 16686  004F10  9AC1               	bcf	193,5,c	;volatile
 16687                           
 16688                           ;src/driver/adc.c: 26:     ADCON1bits.VCFG0 = 0;
 16689  004F12  98C1               	bcf	193,4,c	;volatile
 16690                           
 16691                           ;src/driver/adc.c: 27:     ADCON1bits.PCFG = 0xF;
 16692  004F14  0E0F               	movlw	15
 16693  004F16  12C1               	iorwf	193,f,c	;volatile
 16694                           
 16695                           ;src/driver/adc.c: 29:     ADCON2bits.ADFM = 1;
 16696  004F18  8EC0               	bsf	192,7,c	;volatile
 16697                           
 16698                           ;src/driver/adc.c: 30:     ADCON2bits.ACQT = 7;
 16699  004F1A  0E38               	movlw	56
 16700  004F1C  12C0               	iorwf	192,f,c	;volatile
 16701                           
 16702                           ;src/driver/adc.c: 31:     ADCON2bits.ADCS = 7;
 16703  004F1E  0E07               	movlw	7
 16704  004F20  12C0               	iorwf	192,f,c	;volatile
 16705                           
 16706                           ;src/driver/adc.c: 33:     ADCON0bits.ADON = 1;
 16707  004F22  80C2               	bsf	194,0,c	;volatile
 16708  004F24  0012               	return		;funcret
 16709  004F26                     __end_of_adc_init:
 16710                           	opt callstack 0
 16711                           
 16712 ;; *************** function _adc_cfg_gpio *****************
 16713 ;; Defined at:
 16714 ;;		line 36 in file "src/driver/adc.c"
 16715 ;; Parameters:    Size  Location     Type
 16716 ;;  gpio            2   16[COMRAM] PTR const struct gpio_pi
 16717 ;;		 -> PIN_VOLTAGE_DEF(5), PIN_RF_V_DEF(5), PIN_RF_R_DEF(5), PIN_TEMP_DEF(5), 
 16718 ;; Auto vars:     Size  Location     Type
 16719 ;;		None
 16720 ;; Return value:  Size  Location     Type
 16721 ;;                  2   16[COMRAM] int 
 16722 ;; Registers used:
 16723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16724 ;; Tracked objects:
 16725 ;;		On entry : 0/0
 16726 ;;		On exit  : 0/0
 16727 ;;		Unchanged: 0/0
 16728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16729 ;;      Params:         2       0       0       0       0       0       0
 16730 ;;      Locals:         0       0       0       0       0       0       0
 16731 ;;      Temps:          5       0       0       0       0       0       0
 16732 ;;      Totals:         7       0       0       0       0       0       0
 16733 ;;Total ram usage:        7 bytes
 16734 ;; Hardware stack levels used:    1
 16735 ;; Hardware stack levels required when called:    3
 16736 ;; This function calls:
 16737 ;;		_gpio_to_ch
 16738 ;; This function is called by:
 16739 ;;		_main
 16740 ;; This function uses a non-reentrant model
 16741 ;;
 16742                           
 16743                           	psect	text79
 16744  004AD0                     __ptext79:
 16745                           	opt callstack 0
 16746  004AD0                     _adc_cfg_gpio:
 16747                           	opt callstack 27
 16748                           
 16749                           ;src/driver/adc.c: 36: int adc_cfg_gpio(gpio_pin gpio);src/driver/adc.c: 37: {;src/drive
      +                          r/adc.c: 38:     if(gpio_to_ch(gpio) < 0) return -1;
 16750                           
 16751                           ;incstack = 0
 16752  004AD0  C011  F00D         	movff	adc_cfg_gpio@gpio,gpio_to_ch@gpio
 16753  004AD4  C012  F00E         	movff	adc_cfg_gpio@gpio+1,gpio_to_ch@gpio+1
 16754  004AD8  EC03  F013         	call	_gpio_to_ch	;wreg free
 16755  004ADC  BE0E               	btfsc	(?_gpio_to_ch+1)^0,7,c
 16756  004ADE  0012               	return	
 16757                           
 16758                           ;src/driver/adc.c: 40:     *((gpio)->pTRIS) |= (gpio)->mask;
 16759  004AE0  0E04               	movlw	4
 16760  004AE2  2411               	addwf	adc_cfg_gpio@gpio^0,w,c
 16761  004AE4  6E13               	movwf	??_adc_cfg_gpio^0,c
 16762  004AE6  0E00               	movlw	0
 16763  004AE8  2012               	addwfc	(adc_cfg_gpio@gpio+1)^0,w,c
 16764  004AEA  6E14               	movwf	(??_adc_cfg_gpio+1)^0,c
 16765  004AEC  C013  FFF6         	movff	??_adc_cfg_gpio,tblptrl
 16766  004AF0  C014  FFF7         	movff	??_adc_cfg_gpio+1,tblptrh
 16767  004AF4                     	if	0	;tblptru may be non-zero
 16768  004AF4                     	endif
 16769  004AF4                     	if	0	;tblptru may be non-zero
 16770  004AF4                     	endif
 16771  004AF4  0008               	tblrd		*
 16772  004AF6  CFF5 F015          	movff	tablat,??_adc_cfg_gpio+2
 16773  004AFA  0E02               	movlw	2
 16774  004AFC  2411               	addwf	adc_cfg_gpio@gpio^0,w,c
 16775  004AFE  6E16               	movwf	(??_adc_cfg_gpio+3)^0,c
 16776  004B00  0E00               	movlw	0
 16777  004B02  2012               	addwfc	(adc_cfg_gpio@gpio+1)^0,w,c
 16778  004B04  6E17               	movwf	(??_adc_cfg_gpio+4)^0,c
 16779  004B06  C016  FFF6         	movff	??_adc_cfg_gpio+3,tblptrl
 16780  004B0A  C017  FFF7         	movff	??_adc_cfg_gpio+4,tblptrh
 16781  004B0E                     	if	0	;tblptru may be non-zero
 16782  004B0E                     	endif
 16783  004B0E                     	if	0	;tblptru may be non-zero
 16784  004B0E                     	endif
 16785  004B0E  0009               	tblrd		*+
 16786  004B10  CFF5 FFD9          	movff	tablat,fsr2l
 16787  004B14  0009               	tblrd		*+
 16788  004B16  CFF5 FFDA          	movff	tablat,fsr2h
 16789  004B1A  5015               	movf	(??_adc_cfg_gpio+2)^0,w,c
 16790  004B1C  12DF               	iorwf	indf2,f,c
 16791  004B1E  0012               	return		;funcret
 16792  004B20                     __end_of_adc_cfg_gpio:
 16793                           	opt callstack 0
 16794                           
 16795 ;; *************** function _gpio_to_ch *****************
 16796 ;; Defined at:
 16797 ;;		line 78 in file "src/driver/adc.c"
 16798 ;; Parameters:    Size  Location     Type
 16799 ;;  gpio            2   12[COMRAM] PTR const struct gpio_pi
 16800 ;;		 -> PIN_VOLTAGE_DEF(5), PIN_RF_V_DEF(5), PIN_RF_R_DEF(5), PIN_TEMP_DEF(5), 
 16801 ;; Auto vars:     Size  Location     Type
 16802 ;;		None
 16803 ;; Return value:  Size  Location     Type
 16804 ;;                  2   12[COMRAM] int 
 16805 ;; Registers used:
 16806 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 16807 ;; Tracked objects:
 16808 ;;		On entry : 0/0
 16809 ;;		On exit  : 0/0
 16810 ;;		Unchanged: 0/0
 16811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16812 ;;      Params:         2       0       0       0       0       0       0
 16813 ;;      Locals:         0       0       0       0       0       0       0
 16814 ;;      Temps:          2       0       0       0       0       0       0
 16815 ;;      Totals:         4       0       0       0       0       0       0
 16816 ;;Total ram usage:        4 bytes
 16817 ;; Hardware stack levels used:    1
 16818 ;; Hardware stack levels required when called:    2
 16819 ;; This function calls:
 16820 ;;		Nothing
 16821 ;; This function is called by:
 16822 ;;		_adc_cfg_gpio
 16823 ;;		_adc_sample
 16824 ;; This function uses a non-reentrant model
 16825 ;;
 16826                           
 16827                           	psect	text80
 16828  002606                     __ptext80:
 16829                           	opt callstack 0
 16830  002606                     _gpio_to_ch:
 16831                           	opt callstack 23
 16832                           
 16833                           ;src/driver/adc.c: 78: static __attribute__((inline)) int gpio_to_ch(gpio_pin gpio);src/
      +                          driver/adc.c: 79: {;src/driver/adc.c: 80:     if(gpio->pTRIS == (volatile unsigned char 
      +                          *)&TRISA) {
 16834                           
 16835                           ;incstack = 0
 16836  002606  0E02               	movlw	2
 16837  002608  240D               	addwf	gpio_to_ch@gpio^0,w,c
 16838  00260A  6E0F               	movwf	??_gpio_to_ch^0,c
 16839  00260C  0E00               	movlw	0
 16840  00260E  200E               	addwfc	(gpio_to_ch@gpio+1)^0,w,c
 16841  002610  6E10               	movwf	(??_gpio_to_ch+1)^0,c
 16842  002612  C00F  FFF6         	movff	??_gpio_to_ch,tblptrl
 16843  002616  C010  FFF7         	movff	??_gpio_to_ch+1,tblptrh
 16844  00261A                     	if	0	;tblptru may be non-zero
 16845  00261A                     	endif
 16846  00261A                     	if	0	;tblptru may be non-zero
 16847  00261A                     	endif
 16848  00261A  0009               	tblrd		*+
 16849  00261C  0E92               	movlw	146
 16850  00261E  18F5               	xorwf	tablat,w,c
 16851  002620  E162               	bnz	l6687
 16852  002622  0009               	tblrd		*+
 16853  002624  0E0F               	movlw	15
 16854  002626  18F5               	xorwf	tablat,w,c
 16855  002628  A4D8               	btfss	status,2,c
 16856  00262A  D05D               	goto	l6687
 16857                           
 16858                           ;src/driver/adc.c: 81:         if(gpio->mask & 0x01) return 0;
 16859  00262C  0E04               	movlw	4
 16860  00262E  240D               	addwf	gpio_to_ch@gpio^0,w,c
 16861  002630  6E0F               	movwf	??_gpio_to_ch^0,c
 16862  002632  0E00               	movlw	0
 16863  002634  200E               	addwfc	(gpio_to_ch@gpio+1)^0,w,c
 16864  002636  6E10               	movwf	(??_gpio_to_ch+1)^0,c
 16865  002638  C00F  FFF6         	movff	??_gpio_to_ch,tblptrl
 16866  00263C  C010  FFF7         	movff	??_gpio_to_ch+1,tblptrh
 16867  002640                     	if	0	;tblptru may be non-zero
 16868  002640                     	endif
 16869  002640                     	if	0	;tblptru may be non-zero
 16870  002640                     	endif
 16871  002640  0008               	tblrd		*
 16872  002642  A0F5               	btfss	tablat,0,c
 16873  002644  D005               	goto	l6663
 16874  002646  0E00               	movlw	0
 16875  002648  6E0E               	movwf	(?_gpio_to_ch+1)^0,c
 16876  00264A  0E00               	movlw	0
 16877  00264C  6E0D               	movwf	?_gpio_to_ch^0,c
 16878  00264E  0012               	return	
 16879  002650                     l6663:
 16880                           
 16881                           ;src/driver/adc.c: 82:         if(gpio->mask & 0x02) return 1;
 16882  002650  0E04               	movlw	4
 16883  002652  240D               	addwf	gpio_to_ch@gpio^0,w,c
 16884  002654  6E0F               	movwf	??_gpio_to_ch^0,c
 16885  002656  0E00               	movlw	0
 16886  002658  200E               	addwfc	(gpio_to_ch@gpio+1)^0,w,c
 16887  00265A  6E10               	movwf	(??_gpio_to_ch+1)^0,c
 16888  00265C  C00F  FFF6         	movff	??_gpio_to_ch,tblptrl
 16889  002660  C010  FFF7         	movff	??_gpio_to_ch+1,tblptrh
 16890  002664                     	if	0	;tblptru may be non-zero
 16891  002664                     	endif
 16892  002664                     	if	0	;tblptru may be non-zero
 16893  002664                     	endif
 16894  002664  0008               	tblrd		*
 16895  002666  A2F5               	btfss	tablat,1,c
 16896  002668  D005               	goto	l6669
 16897  00266A  0E00               	movlw	0
 16898  00266C  6E0E               	movwf	(?_gpio_to_ch+1)^0,c
 16899  00266E  0E01               	movlw	1
 16900  002670  6E0D               	movwf	?_gpio_to_ch^0,c
 16901  002672  0012               	return	
 16902  002674                     l6669:
 16903                           
 16904                           ;src/driver/adc.c: 83:         if(gpio->mask & 0x04) return 2;
 16905  002674  0E04               	movlw	4
 16906  002676  240D               	addwf	gpio_to_ch@gpio^0,w,c
 16907  002678  6E0F               	movwf	??_gpio_to_ch^0,c
 16908  00267A  0E00               	movlw	0
 16909  00267C  200E               	addwfc	(gpio_to_ch@gpio+1)^0,w,c
 16910  00267E  6E10               	movwf	(??_gpio_to_ch+1)^0,c
 16911  002680  C00F  FFF6         	movff	??_gpio_to_ch,tblptrl
 16912  002684  C010  FFF7         	movff	??_gpio_to_ch+1,tblptrh
 16913  002688                     	if	0	;tblptru may be non-zero
 16914  002688                     	endif
 16915  002688                     	if	0	;tblptru may be non-zero
 16916  002688                     	endif
 16917  002688  0008               	tblrd		*
 16918  00268A  A4F5               	btfss	tablat,2,c
 16919  00268C  D005               	goto	l6675
 16920  00268E  0E00               	movlw	0
 16921  002690  6E0E               	movwf	(?_gpio_to_ch+1)^0,c
 16922  002692  0E02               	movlw	2
 16923  002694  6E0D               	movwf	?_gpio_to_ch^0,c
 16924  002696  0012               	return	
 16925  002698                     l6675:
 16926                           
 16927                           ;src/driver/adc.c: 84:         if(gpio->mask & 0x08) return 3;
 16928  002698  0E04               	movlw	4
 16929  00269A  240D               	addwf	gpio_to_ch@gpio^0,w,c
 16930  00269C  6E0F               	movwf	??_gpio_to_ch^0,c
 16931  00269E  0E00               	movlw	0
 16932  0026A0  200E               	addwfc	(gpio_to_ch@gpio+1)^0,w,c
 16933  0026A2  6E10               	movwf	(??_gpio_to_ch+1)^0,c
 16934  0026A4  C00F  FFF6         	movff	??_gpio_to_ch,tblptrl
 16935  0026A8  C010  FFF7         	movff	??_gpio_to_ch+1,tblptrh
 16936  0026AC                     	if	0	;tblptru may be non-zero
 16937  0026AC                     	endif
 16938  0026AC                     	if	0	;tblptru may be non-zero
 16939  0026AC                     	endif
 16940  0026AC  0008               	tblrd		*
 16941  0026AE  A6F5               	btfss	tablat,3,c
 16942  0026B0  D005               	goto	l6681
 16943  0026B2  0E00               	movlw	0
 16944  0026B4  6E0E               	movwf	(?_gpio_to_ch+1)^0,c
 16945  0026B6  0E03               	movlw	3
 16946  0026B8  6E0D               	movwf	?_gpio_to_ch^0,c
 16947  0026BA  0012               	return	
 16948  0026BC                     l6681:
 16949                           
 16950                           ;src/driver/adc.c: 85:         if(gpio->mask & 0x20) return 4;
 16951  0026BC  0E04               	movlw	4
 16952  0026BE  240D               	addwf	gpio_to_ch@gpio^0,w,c
 16953  0026C0  6E0F               	movwf	??_gpio_to_ch^0,c
 16954  0026C2  0E00               	movlw	0
 16955  0026C4  200E               	addwfc	(gpio_to_ch@gpio+1)^0,w,c
 16956  0026C6  6E10               	movwf	(??_gpio_to_ch+1)^0,c
 16957  0026C8  C00F  FFF6         	movff	??_gpio_to_ch,tblptrl
 16958  0026CC  C010  FFF7         	movff	??_gpio_to_ch+1,tblptrh
 16959  0026D0                     	if	0	;tblptru may be non-zero
 16960  0026D0                     	endif
 16961  0026D0                     	if	0	;tblptru may be non-zero
 16962  0026D0                     	endif
 16963  0026D0  0008               	tblrd		*
 16964  0026D2  AAF5               	btfss	tablat,5,c
 16965  0026D4  D005               	goto	l292
 16966  0026D6  0E00               	movlw	0
 16967  0026D8  6E0E               	movwf	(?_gpio_to_ch+1)^0,c
 16968  0026DA  0E04               	movlw	4
 16969  0026DC  6E0D               	movwf	?_gpio_to_ch^0,c
 16970  0026DE  0012               	return	
 16971  0026E0                     l292:
 16972                           
 16973                           ;src/driver/adc.c: 86:         return -1;
 16974  0026E0  680D               	setf	?_gpio_to_ch^0,c
 16975  0026E2  680E               	setf	(?_gpio_to_ch+1)^0,c
 16976  0026E4  0012               	return	
 16977  0026E6                     l6687:
 16978                           
 16979                           ;src/driver/adc.c: 88:     if(gpio->pTRIS == (volatile unsigned char *)&TRISB) {
 16980  0026E6  0E02               	movlw	2
 16981  0026E8  240D               	addwf	gpio_to_ch@gpio^0,w,c
 16982  0026EA  6E0F               	movwf	??_gpio_to_ch^0,c
 16983  0026EC  0E00               	movlw	0
 16984  0026EE  200E               	addwfc	(gpio_to_ch@gpio+1)^0,w,c
 16985  0026F0  6E10               	movwf	(??_gpio_to_ch+1)^0,c
 16986  0026F2  C00F  FFF6         	movff	??_gpio_to_ch,tblptrl
 16987  0026F6  C010  FFF7         	movff	??_gpio_to_ch+1,tblptrh
 16988  0026FA                     	if	0	;tblptru may be non-zero
 16989  0026FA                     	endif
 16990  0026FA                     	if	0	;tblptru may be non-zero
 16991  0026FA                     	endif
 16992  0026FA  0009               	tblrd		*+
 16993  0026FC  0E93               	movlw	147
 16994  0026FE  18F5               	xorwf	tablat,w,c
 16995  002700  E1EF               	bnz	l292
 16996  002702  0009               	tblrd		*+
 16997  002704  0E0F               	movlw	15
 16998  002706  18F5               	xorwf	tablat,w,c
 16999  002708  A4D8               	btfss	status,2,c
 17000  00270A  D7EA               	goto	l292
 17001                           
 17002                           ;src/driver/adc.c: 89:         if(gpio->mask & 0x01) return 12;
 17003  00270C  0E04               	movlw	4
 17004  00270E  240D               	addwf	gpio_to_ch@gpio^0,w,c
 17005  002710  6E0F               	movwf	??_gpio_to_ch^0,c
 17006  002712  0E00               	movlw	0
 17007  002714  200E               	addwfc	(gpio_to_ch@gpio+1)^0,w,c
 17008  002716  6E10               	movwf	(??_gpio_to_ch+1)^0,c
 17009  002718  C00F  FFF6         	movff	??_gpio_to_ch,tblptrl
 17010  00271C  C010  FFF7         	movff	??_gpio_to_ch+1,tblptrh
 17011  002720                     	if	0	;tblptru may be non-zero
 17012  002720                     	endif
 17013  002720                     	if	0	;tblptru may be non-zero
 17014  002720                     	endif
 17015  002720  0008               	tblrd		*
 17016  002722  A0F5               	btfss	tablat,0,c
 17017  002724  D005               	goto	l6695
 17018  002726  0E00               	movlw	0
 17019  002728  6E0E               	movwf	(?_gpio_to_ch+1)^0,c
 17020  00272A  0E0C               	movlw	12
 17021  00272C  6E0D               	movwf	?_gpio_to_ch^0,c
 17022  00272E  0012               	return	
 17023  002730                     l6695:
 17024                           
 17025                           ;src/driver/adc.c: 90:         if(gpio->mask & 0x02) return 10;
 17026  002730  0E04               	movlw	4
 17027  002732  240D               	addwf	gpio_to_ch@gpio^0,w,c
 17028  002734  6E0F               	movwf	??_gpio_to_ch^0,c
 17029  002736  0E00               	movlw	0
 17030  002738  200E               	addwfc	(gpio_to_ch@gpio+1)^0,w,c
 17031  00273A  6E10               	movwf	(??_gpio_to_ch+1)^0,c
 17032  00273C  C00F  FFF6         	movff	??_gpio_to_ch,tblptrl
 17033  002740  C010  FFF7         	movff	??_gpio_to_ch+1,tblptrh
 17034  002744                     	if	0	;tblptru may be non-zero
 17035  002744                     	endif
 17036  002744                     	if	0	;tblptru may be non-zero
 17037  002744                     	endif
 17038  002744  0008               	tblrd		*
 17039  002746  A2F5               	btfss	tablat,1,c
 17040  002748  D005               	goto	l6701
 17041  00274A  0E00               	movlw	0
 17042  00274C  6E0E               	movwf	(?_gpio_to_ch+1)^0,c
 17043  00274E  0E0A               	movlw	10
 17044  002750  6E0D               	movwf	?_gpio_to_ch^0,c
 17045  002752  0012               	return	
 17046  002754                     l6701:
 17047                           
 17048                           ;src/driver/adc.c: 91:         if(gpio->mask & 0x04) return 8;
 17049  002754  0E04               	movlw	4
 17050  002756  240D               	addwf	gpio_to_ch@gpio^0,w,c
 17051  002758  6E0F               	movwf	??_gpio_to_ch^0,c
 17052  00275A  0E00               	movlw	0
 17053  00275C  200E               	addwfc	(gpio_to_ch@gpio+1)^0,w,c
 17054  00275E  6E10               	movwf	(??_gpio_to_ch+1)^0,c
 17055  002760  C00F  FFF6         	movff	??_gpio_to_ch,tblptrl
 17056  002764  C010  FFF7         	movff	??_gpio_to_ch+1,tblptrh
 17057  002768                     	if	0	;tblptru may be non-zero
 17058  002768                     	endif
 17059  002768                     	if	0	;tblptru may be non-zero
 17060  002768                     	endif
 17061  002768  0008               	tblrd		*
 17062  00276A  A4F5               	btfss	tablat,2,c
 17063  00276C  D005               	goto	l6707
 17064  00276E  0E00               	movlw	0
 17065  002770  6E0E               	movwf	(?_gpio_to_ch+1)^0,c
 17066  002772  0E08               	movlw	8
 17067  002774  6E0D               	movwf	?_gpio_to_ch^0,c
 17068  002776  0012               	return	
 17069  002778                     l6707:
 17070                           
 17071                           ;src/driver/adc.c: 92:         if(gpio->mask & 0x08) return 9;
 17072  002778  0E04               	movlw	4
 17073  00277A  240D               	addwf	gpio_to_ch@gpio^0,w,c
 17074  00277C  6E0F               	movwf	??_gpio_to_ch^0,c
 17075  00277E  0E00               	movlw	0
 17076  002780  200E               	addwfc	(gpio_to_ch@gpio+1)^0,w,c
 17077  002782  6E10               	movwf	(??_gpio_to_ch+1)^0,c
 17078  002784  C00F  FFF6         	movff	??_gpio_to_ch,tblptrl
 17079  002788  C010  FFF7         	movff	??_gpio_to_ch+1,tblptrh
 17080  00278C                     	if	0	;tblptru may be non-zero
 17081  00278C                     	endif
 17082  00278C                     	if	0	;tblptru may be non-zero
 17083  00278C                     	endif
 17084  00278C  0008               	tblrd		*
 17085  00278E  A6F5               	btfss	tablat,3,c
 17086  002790  D005               	goto	l6713
 17087  002792  0E00               	movlw	0
 17088  002794  6E0E               	movwf	(?_gpio_to_ch+1)^0,c
 17089  002796  0E09               	movlw	9
 17090  002798  6E0D               	movwf	?_gpio_to_ch^0,c
 17091  00279A  0012               	return	
 17092  00279C                     l6713:
 17093                           
 17094                           ;src/driver/adc.c: 93:         if(gpio->mask & 0x10) return 11;
 17095  00279C  0E04               	movlw	4
 17096  00279E  240D               	addwf	gpio_to_ch@gpio^0,w,c
 17097  0027A0  6E0F               	movwf	??_gpio_to_ch^0,c
 17098  0027A2  0E00               	movlw	0
 17099  0027A4  200E               	addwfc	(gpio_to_ch@gpio+1)^0,w,c
 17100  0027A6  6E10               	movwf	(??_gpio_to_ch+1)^0,c
 17101  0027A8  C00F  FFF6         	movff	??_gpio_to_ch,tblptrl
 17102  0027AC  C010  FFF7         	movff	??_gpio_to_ch+1,tblptrh
 17103  0027B0                     	if	0	;tblptru may be non-zero
 17104  0027B0                     	endif
 17105  0027B0                     	if	0	;tblptru may be non-zero
 17106  0027B0                     	endif
 17107  0027B0  0008               	tblrd		*
 17108  0027B2  A8F5               	btfss	tablat,4,c
 17109  0027B4  D795               	goto	l292
 17110  0027B6  0E00               	movlw	0
 17111  0027B8  6E0E               	movwf	(?_gpio_to_ch+1)^0,c
 17112  0027BA  0E0B               	movlw	11
 17113  0027BC  6E0D               	movwf	?_gpio_to_ch^0,c
 17114  0027BE  0012               	return		;funcret
 17115  0027C0                     __end_of_gpio_to_ch:
 17116                           	opt callstack 0
 17117                           
 17118 ;; *************** function _global_irq_handler *****************
 17119 ;; Defined at:
 17120 ;;		line 31 in file "src/driver/irq.c"
 17121 ;; Parameters:    Size  Location     Type
 17122 ;;		None
 17123 ;; Auto vars:     Size  Location     Type
 17124 ;;  dummy           1   11[COMRAM] volatile unsigned char 
 17125 ;; Return value:  Size  Location     Type
 17126 ;;                  1    wreg      void 
 17127 ;; Registers used:
 17128 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, cstack
 17129 ;; Tracked objects:
 17130 ;;		On entry : 0/0
 17131 ;;		On exit  : 0/0
 17132 ;;		Unchanged: 0/0
 17133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17134 ;;      Params:         0       0       0       0       0       0       0
 17135 ;;      Locals:         1       0       0       0       0       0       0
 17136 ;;      Temps:          4       0       0       0       0       0       0
 17137 ;;      Totals:         5       0       0       0       0       0       0
 17138 ;;Total ram usage:        5 bytes
 17139 ;; Hardware stack levels used:    1
 17140 ;; Hardware stack levels required when called:    1
 17141 ;; This function calls:
 17142 ;;		_usart_rx_irq_handler
 17143 ;; This function is called by:
 17144 ;;		Interrupt level 2
 17145 ;; This function uses a non-reentrant model
 17146 ;;
 17147                           
 17148                           	psect	intcode
 17149  000008                     __pintcode:
 17150                           	opt callstack 0
 17151  000008                     _global_irq_handler:
 17152                           	opt callstack 17
 17153                           
 17154                           ;incstack = 0
 17155  000008  8273               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 17156  00000A  EDB5  F024         	call	int_func,f	;refresh shadow registers
 17157                           
 17158                           	psect	intcode_body
 17159  00496A                     __pintcode_body:
 17160                           	opt callstack 17
 17161  00496A                     int_func:
 17162                           	opt callstack 17
 17163  00496A  0006               	pop		; remove dummy address from shadow register refresh
 17164  00496C  CFFA F008          	movff	pclath,??_global_irq_handler
 17165  004970  CFFB F009          	movff	pclatu,??_global_irq_handler+1
 17166  004974  CFD9 F00A          	movff	fsr2l,??_global_irq_handler+2
 17167  004978  CFDA F00B          	movff	fsr2h,??_global_irq_handler+3
 17168                           
 17169                           ;src/driver/irq.c: 33:     if(PIR1bits.RCIF) {
 17170  00497C  AA9E               	btfss	158,5,c	;volatile
 17171  00497E  D015               	goto	i2u753_49
 17172                           
 17173                           ;src/driver/irq.c: 34:         if(g_irq_handler_info[IRQ_HANDLER_ID_USART].handler) {
 17174  004980  0100               	movlb	0	; () banked
 17175  004982  5180               	movf	_g_irq_handler_info& (0+255),w,b
 17176  004984  1181               	iorwf	(_g_irq_handler_info+1)& (0+255),w,b
 17177  004986  B4D8               	btfsc	status,2,c
 17178  004988  D010               	goto	i2u753_49
 17179                           
 17180                           ; BSR set to: 0
 17181                           ;src/driver/irq.c: 35:             g_irq_handler_info[IRQ_HANDLER_ID_USART].handler(g_ir
      +                          q_handler_info[IRQ_HANDLER_ID_USART].udata);
 17182  00498A  C082  F001         	movff	_g_irq_handler_info+2,usart_rx_irq_handler@udata
 17183  00498E  C083  F002         	movff	_g_irq_handler_info+3,usart_rx_irq_handler@udata+1
 17184  004992  D801               	call	i2u753_48
 17185  004994  D00A               	goto	i2u753_49
 17186  004996                     i2u753_48:
 17187  004996  0005               	push	
 17188  004998  6EFA               	movwf	pclath,c
 17189  00499A  5180               	movf	_g_irq_handler_info& (0+255),w,b
 17190  00499C  6EFD               	movwf	tosl,c
 17191  00499E  5181               	movf	(_g_irq_handler_info+1)& (0+255),w,b
 17192  0049A0  6EFE               	movwf	tosh,c
 17193  0049A2  50F8               	movf	tblptru,w,c
 17194  0049A4  6EFF               	movwf	tosu,c
 17195  0049A6  50FA               	movf	pclath,w,c
 17196  0049A8  0012               	return		;indir
 17197  0049AA                     i2u753_49:
 17198                           
 17199                           ;src/driver/irq.c: 39:     if(INTCONbits.RBIF) {
 17200  0049AA  A0F2               	btfss	242,0,c	;volatile
 17201  0049AC  D003               	goto	i2l226
 17202                           
 17203                           ;src/driver/irq.c: 40:         volatile u8 dummy = PORTB;
 17204  0049AE  CF81 F00C          	movff	3969,global_irq_handler@dummy	;volatile
 17205                           
 17206                           ;src/driver/irq.c: 41:         INTCONbits.RBIF = 0;
 17207  0049B2  90F2               	bcf	242,0,c	;volatile
 17208  0049B4                     i2l226:
 17209  0049B4  C00B  FFDA         	movff	??_global_irq_handler+3,fsr2h
 17210  0049B8  C00A  FFD9         	movff	??_global_irq_handler+2,fsr2l
 17211  0049BC  C009  FFFB         	movff	??_global_irq_handler+1,pclatu
 17212  0049C0  C008  FFFA         	movff	??_global_irq_handler,pclath
 17213  0049C4  9273               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17214  0049C6  0011               	retfie		f
 17215  0049C8                     __end_of_global_irq_handler:
 17216                           	opt callstack 0
 17217                           
 17218 ;; *************** function _usart_rx_irq_handler *****************
 17219 ;; Defined at:
 17220 ;;		line 85 in file "src/driver/usart.c"
 17221 ;; Parameters:    Size  Location     Type
 17222 ;;  udata           2    0[COMRAM] PTR void 
 17223 ;;		 -> NULL(0), 
 17224 ;; Auto vars:     Size  Location     Type
 17225 ;;  wposn           2    5[COMRAM] volatile int 
 17226 ;;  c               1    4[COMRAM] volatile unsigned char 
 17227 ;; Return value:  Size  Location     Type
 17228 ;;                  1    wreg      void 
 17229 ;; Registers used:
 17230 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17231 ;; Tracked objects:
 17232 ;;		On entry : 3F/0
 17233 ;;		On exit  : 3F/0
 17234 ;;		Unchanged: 3F/0
 17235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17236 ;;      Params:         2       0       0       0       0       0       0
 17237 ;;      Locals:         3       0       0       0       0       0       0
 17238 ;;      Temps:          2       0       0       0       0       0       0
 17239 ;;      Totals:         7       0       0       0       0       0       0
 17240 ;;Total ram usage:        7 bytes
 17241 ;; Hardware stack levels used:    1
 17242 ;; This function calls:
 17243 ;;		Nothing
 17244 ;; This function is called by:
 17245 ;;		_usart_init
 17246 ;;		_global_irq_handler
 17247 ;; This function uses a non-reentrant model
 17248 ;;
 17249                           
 17250                           	psect	text82
 17251  004B20                     __ptext82:
 17252                           	opt callstack 0
 17253  004B20                     _usart_rx_irq_handler:
 17254                           	opt callstack 17
 17255                           
 17256                           ; BSR set to: 0
 17257                           ;src/driver/usart.c: 85: static void usart_rx_irq_handler(void *udata);src/driver/usart.
      +                          c: 86: {;src/driver/usart.c: 87:     volatile char c;;src/driver/usart.c: 88:     volati
      +                          le int wposn;;src/driver/usart.c: 91:     if(BAUDCONbits.RCIDL == 0) return;
 17258                           
 17259                           ;incstack = 0
 17260  004B20  ACB8               	btfss	184,6,c	;volatile
 17261  004B22  0012               	return	
 17262                           
 17263                           ; BSR set to: 0
 17264                           ;src/driver/usart.c: 94:  c = RCREG;
 17265  004B24  CFAE F005          	movff	4014,usart_rx_irq_handler@c	;volatile
 17266                           
 17267                           ;src/driver/usart.c: 97:     if(RCSTAbits.FERR) {
 17268  004B28  B4AB               	btfsc	171,2,c	;volatile
 17269  004B2A  0012               	return	
 17270                           
 17271                           ; BSR set to: 0
 17272                           ;src/driver/usart.c: 100:     if(RCSTAbits.OERR) {
 17273                           
 17274                           ;src/driver/usart.c: 99:     }
 17275  004B2C  A2AB               	btfss	171,1,c	;volatile
 17276  004B2E  D003               	goto	i2l5905
 17277                           
 17278                           ; BSR set to: 0
 17279                           ;src/driver/usart.c: 102:         RCSTAbits.CREN = 0;
 17280  004B30  98AB               	bcf	171,4,c	;volatile
 17281                           
 17282                           ;src/driver/usart.c: 103:         RCSTAbits.CREN = 1;
 17283  004B32  88AB               	bsf	171,4,c	;volatile
 17284                           
 17285                           ;src/driver/usart.c: 104:         return;
 17286  004B34  0012               	return	
 17287  004B36                     i2l5905:
 17288                           
 17289                           ; BSR set to: 0
 17290                           ;src/driver/usart.c: 110:  wposn = (g_usart_wpos+1) % sizeof(g_usart_buf);
 17291  004B36  0E01               	movlw	1
 17292  004B38  246D               	addwf	_g_usart_wpos^0,w,c	;volatile
 17293  004B3A  6E03               	movwf	??_usart_rx_irq_handler^0,c
 17294  004B3C  0E00               	movlw	0
 17295  004B3E  206E               	addwfc	(_g_usart_wpos+1)^0,w,c	;volatile
 17296  004B40  6E04               	movwf	(??_usart_rx_irq_handler+1)^0,c
 17297  004B42  5003               	movf	??_usart_rx_irq_handler^0,w,c
 17298  004B44  6E06               	movwf	usart_rx_irq_handler@wposn^0,c	;volatile
 17299  004B46  6A07               	clrf	(usart_rx_irq_handler@wposn+1)^0,c	;volatile
 17300                           
 17301                           ;src/driver/usart.c: 111:  if(wposn != g_usart_rpos) {
 17302  004B48  506F               	movf	_g_usart_rpos^0,w,c	;volatile
 17303  004B4A  1806               	xorwf	usart_rx_irq_handler@wposn^0,w,c	;volatile
 17304  004B4C  E104               	bnz	i2u731_40
 17305  004B4E  5070               	movf	(_g_usart_rpos+1)^0,w,c	;volatile
 17306  004B50  1807               	xorwf	(usart_rx_irq_handler@wposn+1)^0,w,c	;volatile
 17307  004B52  B4D8               	btfsc	status,2,c
 17308  004B54  0012               	return	
 17309  004B56                     i2u731_40:
 17310                           
 17311                           ; BSR set to: 0
 17312                           ;src/driver/usart.c: 112:   g_usart_buf[g_usart_wpos] = c;
 17313  004B56  0E00               	movlw	low _g_usart_buf
 17314  004B58  246D               	addwf	_g_usart_wpos^0,w,c	;volatile
 17315  004B5A  6ED9               	movwf	fsr2l,c
 17316  004B5C  0E02               	movlw	high _g_usart_buf
 17317  004B5E  206E               	addwfc	(_g_usart_wpos+1)^0,w,c	;volatile
 17318  004B60  6EDA               	movwf	fsr2h,c
 17319  004B62  C005  FFDF         	movff	usart_rx_irq_handler@c,indf2	;volatile
 17320                           
 17321                           ; BSR set to: 0
 17322                           ;src/driver/usart.c: 113:   g_usart_wpos = wposn;
 17323  004B66  C006  F06D         	movff	usart_rx_irq_handler@wposn,_g_usart_wpos	;volatile
 17324  004B6A  C007  F06E         	movff	usart_rx_irq_handler@wposn+1,_g_usart_wpos+1	;volatile
 17325                           
 17326                           ; BSR set to: 0
 17327  004B6E  0012               	return		;funcret
 17328  004B70                     __end_of_usart_rx_irq_handler:
 17329                           	opt callstack 0
 17330                           
 17331                           	psect	text83
 17332  000000                     __ptext83:
 17333                           	opt callstack 0
 17334                           
 17335                           	psect	rparam
 17336  0000                     
 17337                           	psect	temp
 17338  000073                     btemp:
 17339                           	opt callstack 0
 17340  000073                     	ds	1
 17341  0000                     int$flags	set	btemp
 17342  0000                     wtemp8	set	btemp+1
 17343  0000                     ttemp5	set	btemp+1
 17344  0000                     ttemp6	set	btemp+4
 17345  0000                     ttemp7	set	btemp+8
 17346                           tosu	equ	0xFFF
 17347                           tosh	equ	0xFFE
 17348                           tosl	equ	0xFFD
 17349                           stkptr	equ	0xFFC
 17350                           pclatu	equ	0xFFB
 17351                           pclath	equ	0xFFA
 17352                           pcl	equ	0xFF9
 17353                           tblptru	equ	0xFF8
 17354                           tblptrh	equ	0xFF7
 17355                           tblptrl	equ	0xFF6
 17356                           tablat	equ	0xFF5
 17357                           prodh	equ	0xFF4
 17358                           prodl	equ	0xFF3
 17359                           indf0	equ	0xFEF
 17360                           postinc0	equ	0xFEE
 17361                           postdec0	equ	0xFED
 17362                           preinc0	equ	0xFEC
 17363                           plusw0	equ	0xFEB
 17364                           fsr0h	equ	0xFEA
 17365                           fsr0l	equ	0xFE9
 17366                           wreg	equ	0xFE8
 17367                           indf1	equ	0xFE7
 17368                           postinc1	equ	0xFE6
 17369                           postdec1	equ	0xFE5
 17370                           preinc1	equ	0xFE4
 17371                           plusw1	equ	0xFE3
 17372                           fsr1h	equ	0xFE2
 17373                           fsr1l	equ	0xFE1
 17374                           bsr	equ	0xFE0
 17375                           indf2	equ	0xFDF
 17376                           postinc2	equ	0xFDE
 17377                           postdec2	equ	0xFDD
 17378                           preinc2	equ	0xFDC
 17379                           plusw2	equ	0xFDB
 17380                           fsr2h	equ	0xFDA
 17381                           fsr2l	equ	0xFD9
 17382                           status	equ	0xFD8


Data Sizes:
    Strings     741
    Constant    163
    Data        88
    BSS         480
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    102     114
    BANK0           128     52     128
    BANK1           256      9     233
    BANK2           256      0     256
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    usart_rx_irq_handler@udata	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    handler$0	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    adf4351_get_lock@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    S1190$0$0	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_49(CODE[3]), STR_44(CODE[3]), STR_40(CODE[3]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_49(CODE[3]), STR_44(CODE[3]), STR_40(CODE[3]), 

    strncmp@_l	PTR const unsigned char  size(2) Largest target is 74
		 -> STR_37(CODE[35]), STR_36(CODE[30]), STR_35(CODE[31]), STR_32(CODE[19]), 
		 -> STR_29(CODE[33]), STR_28(CODE[17]), STR_27(CODE[14]), STR_26(CODE[14]), 
		 -> STR_25(CODE[17]), STR_24(CODE[15]), STR_23(CODE[15]), STR_22(CODE[14]), 
		 -> STR_21(CODE[14]), STR_20(CODE[27]), STR_19(CODE[39]), STR_18(CODE[14]), 
		 -> STR_17(CODE[19]), STR_14(CODE[23]), STR_11(CODE[44]), STR_8(CODE[36]), 
		 -> STR_7(CODE[7]), STR_6(CODE[55]), STR_5(CODE[72]), STR_4(CODE[74]), 
		 -> STR_1(CODE[22]), 

    strncmp@l	PTR const unsigned char  size(2) Largest target is 74
		 -> STR_37(CODE[35]), STR_36(CODE[30]), STR_35(CODE[31]), STR_32(CODE[19]), 
		 -> STR_29(CODE[33]), STR_28(CODE[17]), STR_27(CODE[14]), STR_26(CODE[14]), 
		 -> STR_25(CODE[17]), STR_24(CODE[15]), STR_23(CODE[15]), STR_22(CODE[14]), 
		 -> STR_21(CODE[14]), STR_20(CODE[27]), STR_19(CODE[39]), STR_18(CODE[14]), 
		 -> STR_17(CODE[19]), STR_14(CODE[23]), STR_11(CODE[44]), STR_8(CODE[36]), 
		 -> STR_7(CODE[7]), STR_6(CODE[55]), STR_5(CODE[72]), STR_4(CODE[74]), 
		 -> STR_1(CODE[22]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> ?_printf(BANK0[2]), stoa@nuls(COMRAM[7]), dbuf(BANK0[32]), calc_power@v(COMRAM[2]), 
		 -> STR_34(CODE[4]), STR_33(CODE[3]), STR_31(CODE[4]), STR_30(CODE[3]), 
		 -> STR_16(CODE[3]), STR_15(CODE[3]), STR_13(CODE[5]), STR_12(CODE[5]), 
		 -> STR_10(CODE[5]), STR_9(CODE[5]), down_rxbuf(BANK1[101]), STR_3(CODE[9]), 
		 -> STR_2(CODE[7]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> ?_printf(BANK0[2]), stoa@nuls(COMRAM[7]), dbuf(BANK0[32]), calc_power@v(COMRAM[2]), 
		 -> STR_34(CODE[4]), STR_33(CODE[3]), STR_31(CODE[4]), STR_30(CODE[3]), 
		 -> STR_16(CODE[3]), STR_15(CODE[3]), STR_13(CODE[5]), STR_12(CODE[5]), 
		 -> STR_10(CODE[5]), STR_9(CODE[5]), down_rxbuf(BANK1[101]), STR_3(CODE[9]), 
		 -> STR_2(CODE[7]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 74
		 -> STR_37(CODE[35]), STR_36(CODE[30]), STR_35(CODE[31]), STR_32(CODE[19]), 
		 -> STR_29(CODE[33]), STR_28(CODE[17]), STR_27(CODE[14]), STR_26(CODE[14]), 
		 -> STR_25(CODE[17]), STR_24(CODE[15]), STR_23(CODE[15]), STR_22(CODE[14]), 
		 -> STR_21(CODE[14]), STR_20(CODE[27]), STR_19(CODE[39]), STR_18(CODE[14]), 
		 -> STR_17(CODE[19]), STR_14(CODE[23]), STR_11(CODE[44]), STR_8(CODE[36]), 
		 -> STR_7(CODE[7]), STR_6(CODE[55]), STR_5(CODE[72]), STR_4(CODE[74]), 
		 -> STR_1(CODE[22]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    memset@dest	PTR void  size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    memset@s	PTR unsigned char  size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(COMRAM[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 74
		 -> STR_37(CODE[35]), STR_36(CODE[30]), STR_35(CODE[31]), STR_32(CODE[19]), 
		 -> STR_29(CODE[33]), STR_28(CODE[17]), STR_27(CODE[14]), STR_26(CODE[14]), 
		 -> STR_25(CODE[17]), STR_24(CODE[15]), STR_23(CODE[15]), STR_22(CODE[14]), 
		 -> STR_21(CODE[14]), STR_20(CODE[27]), STR_19(CODE[39]), STR_18(CODE[14]), 
		 -> STR_17(CODE[19]), STR_14(CODE[23]), STR_11(CODE[44]), STR_8(CODE[36]), 
		 -> STR_7(CODE[7]), STR_6(CODE[55]), STR_5(CODE[72]), STR_4(CODE[74]), 
		 -> STR_1(CODE[22]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 74
		 -> STR_37(CODE[35]), STR_36(CODE[30]), STR_35(CODE[31]), STR_32(CODE[19]), 
		 -> STR_29(CODE[33]), STR_28(CODE[17]), STR_27(CODE[14]), STR_26(CODE[14]), 
		 -> STR_25(CODE[17]), STR_24(CODE[15]), STR_23(CODE[15]), STR_22(CODE[14]), 
		 -> STR_21(CODE[14]), STR_20(CODE[27]), STR_19(CODE[39]), STR_18(CODE[14]), 
		 -> STR_17(CODE[19]), STR_14(CODE[23]), STR_11(CODE[44]), STR_8(CODE[36]), 
		 -> STR_7(CODE[7]), STR_6(CODE[55]), STR_5(CODE[72]), STR_4(CODE[74]), 
		 -> STR_1(CODE[22]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), calc_power@v(COMRAM[2]), STR_34(CODE[4]), STR_33(CODE[3]), 
		 -> STR_31(CODE[4]), STR_30(CODE[3]), STR_16(CODE[3]), STR_15(CODE[3]), 
		 -> STR_13(CODE[5]), STR_12(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), 
		 -> down_rxbuf(BANK1[101]), STR_3(CODE[9]), STR_2(CODE[7]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> printf@ap(COMRAM[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    utoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    stoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    stoa@s	PTR unsigned char  size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), calc_power@v(COMRAM[2]), STR_34(CODE[4]), STR_33(CODE[3]), 
		 -> STR_31(CODE[4]), STR_30(CODE[3]), STR_16(CODE[3]), STR_15(CODE[3]), 
		 -> STR_13(CODE[5]), STR_12(CODE[5]), STR_10(CODE[5]), STR_9(CODE[5]), 
		 -> down_rxbuf(BANK1[101]), STR_3(CODE[9]), STR_2(CODE[7]), 

    stoa@cp	PTR unsigned char  size(2) Largest target is 7
		 -> ?_printf(BANK0[2]), stoa@nuls(COMRAM[7]), calc_power@v(COMRAM[2]), STR_34(CODE[4]), 
		 -> STR_33(CODE[3]), STR_31(CODE[4]), STR_30(CODE[3]), STR_16(CODE[3]), 
		 -> STR_15(CODE[3]), STR_13(CODE[5]), STR_12(CODE[5]), STR_10(CODE[5]), 
		 -> STR_9(CODE[5]), down_rxbuf(BANK1[101]), STR_3(CODE[9]), STR_2(CODE[7]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK0[32]), 

    alarm$2277	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_34(CODE[4]), STR_33(CODE[3]), 

    alarm$2272	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_31(CODE[4]), STR_30(CODE[3]), 

    PIN_USART_RX_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_USART_RX_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_USART_TX_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_USART_TX_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_POWER_GOOD	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_POWER_GOOD_DEF(CODE[5]), 

    PIN_POWER_GOOD_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_POWER_GOOD_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_PA_ENABLE_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_PA_ENABLE_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ALARM_OUTPUT_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_ALARM_OUTPUT_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LED_PTT_ACTIVE_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_LED_PTT_ACTIVE_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LED_ADF_LOCK_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_LED_ADF_LOCK_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LED_CPU_OK_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_LED_CPU_OK_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_FSW1_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_FSW1_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_FSW0_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_FSW0_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_VOLTAGE_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_VOLTAGE_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_RF_V_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_RF_V_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_RF_R_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_RF_R_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_TEMP_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_TEMP_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_PTT_INPUT_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_PTT_INPUT_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ADF_FREQ_SEL_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_ADF_FREQ_SEL_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_SIO_CLK_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_SIO_CLK_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_SIO_DATA_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_SIO_DATA_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ADF_LE_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_ADF_LE_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ADF_CE_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_ADF_CE_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ADF_LOCK_DEF.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_ADF_LOCK_DEF.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_USART_RX.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_USART_RX.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_USART_RX	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_USART_RX_DEF(CODE[5]), 

    PIN_USART_TX.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_USART_TX.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_USART_TX	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_USART_TX_DEF(CODE[5]), 

    PIN_ALARM_OUTPUT.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_ALARM_OUTPUT.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ALARM_OUTPUT	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_ALARM_OUTPUT_DEF(CODE[5]), 

    PIN_LED_CPU_OK.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_LED_CPU_OK.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LED_CPU_OK	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_LED_CPU_OK_DEF(CODE[5]), 

    PIN_FSW1.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_FSW1.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_FSW1	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_FSW1_DEF(CODE[5]), 

    PIN_FSW0.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_FSW0.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_FSW0	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_FSW0_DEF(CODE[5]), 

    PIN_PTT_INPUT.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_PTT_INPUT.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_PTT_INPUT	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_PTT_INPUT_DEF(CODE[5]), 

    PIN_LED_PTT_ACTIVE.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_LED_PTT_ACTIVE.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LED_PTT_ACTIVE	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_LED_PTT_ACTIVE_DEF(CODE[5]), 

    PIN_LED_ADF_LOCK.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_LED_ADF_LOCK.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_LED_ADF_LOCK	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_LED_ADF_LOCK_DEF(CODE[5]), 

    PIN_PA_ENABLE.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_PA_ENABLE.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_PA_ENABLE	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_PA_ENABLE_DEF(CODE[5]), 

    main$1985	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_16(CODE[3]), STR_15(CODE[3]), 

    PIN_ADF_FREQ_SEL.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_ADF_FREQ_SEL.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ADF_FREQ_SEL	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_ADF_FREQ_SEL_DEF(CODE[5]), 

    PIN_RF_R	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_RF_R_DEF(CODE[5]), 

    PIN_RF_V	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_RF_V_DEF(CODE[5]), 

    PIN_VOLTAGE	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_VOLTAGE_DEF(CODE[5]), 

    gpio_to_ch@gpio.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    gpio_to_ch@gpio.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    gpio_to_ch@gpio	PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_VOLTAGE_DEF(CODE[5]), PIN_RF_V_DEF(CODE[5]), PIN_RF_R_DEF(CODE[5]), PIN_TEMP_DEF(CODE[5]), 

    adc_voltage@gpio	PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_VOLTAGE_DEF(CODE[5]), PIN_RF_V_DEF(CODE[5]), PIN_RF_R_DEF(CODE[5]), PIN_TEMP_DEF(CODE[5]), 

    adc_sample@gpio	PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_VOLTAGE_DEF(CODE[5]), PIN_RF_V_DEF(CODE[5]), PIN_RF_R_DEF(CODE[5]), PIN_TEMP_DEF(CODE[5]), 

    adc_cfg_gpio@gpio.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    adc_cfg_gpio@gpio.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    adc_cfg_gpio@gpio	PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_VOLTAGE_DEF(CODE[5]), PIN_RF_V_DEF(CODE[5]), PIN_RF_R_DEF(CODE[5]), PIN_TEMP_DEF(CODE[5]), 

    PIN_TEMP	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_TEMP_DEF(CODE[5]), 

    irq_set_handler@handler	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> usart_rx_irq_handler(), 

    S1190$udata	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    g_irq_handler_info.udata	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S1190$handler	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> usart_rx_irq_handler(), 

    g_irq_handler_info.handler	PTR FTN(PTR void ,)void  size(2) Largest target is 1
		 -> usart_rx_irq_handler(), 

    irq_set_handler@udata	PTR void  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    PIN_SIO_DATA.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_SIO_DATA.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_SIO_DATA	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_SIO_DATA_DEF(CODE[5]), 

    PIN_SIO_CLK.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_SIO_CLK.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_SIO_CLK	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_SIO_CLK_DEF(CODE[5]), 

    adf4351_write_reg5@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_write_reg4@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_write_reg3@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_write_reg2@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_write_reg1@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_write_reg0@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_calc_vco_core_freq@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_calc_rcnt_block@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_calc_counters@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_setup@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_default@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_set_tune@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_set_mode@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_set_rfout_enable@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_get_lock$290	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_3(CODE[9]), STR_2(CODE[7]), 

    PIN_ADF_LOCK.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_ADF_LOCK.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ADF_LOCK	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_ADF_LOCK_DEF(CODE[5]), 

    adf4351_set_freq@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    PIN_ADF_CE.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_ADF_CE.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ADF_CE	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_ADF_CE_DEF(CODE[5]), 

    S83gpio_pin_def$pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    PIN_ADF_LE.pTRIS	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISC(SFR[1]), TRISB(SFR[1]), TRISA(SFR[1]), 

    S83gpio_pin_def$pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ADF_LE.pPORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTC(SFR[1]), PORTA(SFR[1]), PORTB(SFR[1]), 

    PIN_ADF_LE	const PTR const struct gpio_pin_def size(2) Largest target is 7
		 -> PIN_ADF_LE_DEF(CODE[5]), 

    sp__memset	PTR void  size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 

    adf4351_init@ctx	PTR struct adf4351_ctx size(2) Largest target is 55
		 -> g_adf4351(BANK1[55]), 


Critical Paths under _main in COMRAM

    _main->_check_adf4351_lock
    _usart_init->___lldiv
    _update_led->_setLOCK_LED
    _pa_unmute->_setPTT_LED
    _handle_cmd->_setLOCK_LED
    _setLOCK_LED->_printf
    _pa_mute->_setPTT_LED
    _setPTT_LED->_printf
    _adf4351_set_rfout_enable->_adf4351_write_reg2
    _adf4351_set_mode->_adf4351_setup
    _adf4351_calc_rcnt_block->_printf
    _adf4351_calc_counters->_gcd
    _gcd->___llmod
    _check_usart->_receive_downconverter_data
    _receive_downconverter_data->_printf
    _check_adf4351_lock->_printf
    _alarm->_printf
    _readPowerVoltage->_adc_voltage
    _readKTY82->_KTY82_222_Adc2Temperature
    _KTY82_222_Adc2Temperature->___fldiv
    ___fltol->___flmul
    ___flsub->___fladd
    ___fldiv->___flmul
    _readFWD->_adc_voltage
    _adc_voltage->___lmul
    _adc_voltage->_adc_sample
    _adc_sample->_gpio_to_ch
    _calc_power->___aldiv
    _adf4351_set_tune->_adf4351_setup
    _adf4351_setup->_adf4351_write_reg0
    _adf4351_setup->_adf4351_write_reg1
    _adf4351_setup->_adf4351_write_reg2
    _adf4351_setup->_adf4351_write_reg3
    _adf4351_write_reg5->_adf4351_write_latch
    _adf4351_write_reg4->_adf4351_write_latch
    _adf4351_write_reg3->_adf4351_write_latch
    _adf4351_write_reg2->_adf4351_write_latch
    _adf4351_write_reg1->_adf4351_write_latch
    _adf4351_write_reg0->_adf4351_write_latch
    _adf4351_get_lock->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _utoa->___lodiv
    _stoa->_fputc
    _dtoa->___aodiv
    _pad->_fputs
    _fputs->_fputc
    _fputc->_usart_putc
    _abs->___aomod
    _adf4351_init->_memset
    _adc_cfg_gpio->_gpio_to_ch

Critical Paths under _global_irq_handler in COMRAM

    _global_irq_handler->_usart_rx_irq_handler

Critical Paths under _main in BANK0

    _main->_update_switch
    _update_switch->_handle_cmd
    _update_led->_adf4351_get_lock
    _pa_update->_adf4351_get_lock
    _pa_unmute->_setPTT_LED
    _init_switch->_handle_cmd
    _handle_cmd->_adf4351_set_freq
    _setLOCK_LED->_printf
    _pa_mute->_setPTT_LED
    _setPTT_LED->_printf
    _adf4351_set_freq->_adf4351_calc_rcnt_block
    _adf4351_calc_rcnt_block->_printf
    _check_usart->_receive_downconverter_data
    _receive_downconverter_data->_printf
    _check_adf4351_lock->_alarm
    _alarm->_printf
    _adf4351_get_lock->_printf
    _vfprintf->_vfpfcnvrt

Critical Paths under _global_irq_handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _global_irq_handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _global_irq_handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _global_irq_handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _global_irq_handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _global_irq_handler in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0  554055
                                              0 BANK1      9     9      0
                       _adc_cfg_gpio
                           _adc_init
                       _adf4351_init
                   _adf4351_set_tune
                 _check_adf4351_lock
                        _check_usart
                         _init_gpios
                        _init_switch
                          _pa_update
                             _printf
                         _update_led
                      _update_switch
                         _usart_init
 ---------------------------------------------------------------------------------
 (1) _usart_init                                           6     2      4    1785
                                             25 COMRAM     6     2      4
                            ___lldiv
                    _irq_set_handler
 ---------------------------------------------------------------------------------
 (2) _irq_set_handler                                      5     1      4     335
                                             12 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _update_switch                                        1     1      0  141066
                                             51 BANK0      1     1      0
                         _handle_cmd
                        _read_switch
 ---------------------------------------------------------------------------------
 (1) _update_led                                           5     5      0   45107
                                             36 BANK0      5     5      0
                   _adf4351_get_lock
                        _setLOCK_LED
 ---------------------------------------------------------------------------------
 (1) _pa_update                                            3     3      0   73957
                                             36 BANK0      3     3      0
                   _adf4351_get_lock
                           _pa_alarm
                            _pa_mute
                          _pa_unmute
 ---------------------------------------------------------------------------------
 (2) _pa_unmute                                            3     3      0   25611
                                             31 BANK0      3     3      0
           _adf4351_set_rfout_enable
                           _pa_alarm
                         _setPTT_LED
 ---------------------------------------------------------------------------------
 (3) _pa_alarm                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_switch                                          0     0      0  141001
                         _handle_cmd
                        _read_switch
 ---------------------------------------------------------------------------------
 (2) _read_switch                                          5     5      0      68
                                             12 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (2) _handle_cmd                                           7     7      0  140933
                                             44 BANK0      7     7      0
                   _adf4351_get_lock
                   _adf4351_set_freq
                   _adf4351_set_mode
                            _pa_mute
                             _printf
                        _setLOCK_LED
 ---------------------------------------------------------------------------------
 (3) _setLOCK_LED                                          4     4      0   22335
                                            101 COMRAM     1     1      0
                                             28 BANK0      3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (3) _pa_mute                                              3     3      0   25611
                                             31 BANK0      3     3      0
           _adf4351_set_rfout_enable
                         _setPTT_LED
 ---------------------------------------------------------------------------------
 (4) _setPTT_LED                                           4     4      0   22366
                                            101 COMRAM     1     1      0
                                             28 BANK0      3     3      0
                             _printf
 ---------------------------------------------------------------------------------
 (4) _adf4351_set_rfout_enable                             4     0      4    3245
                                             36 COMRAM     4     0      4
                 _adf4351_write_reg2
                 _adf4351_write_reg4
 ---------------------------------------------------------------------------------
 (3) _adf4351_set_mode                                     6     2      4    9959
                                             38 COMRAM     6     2      4
                      _adf4351_setup
                 _adf4351_write_reg2
                 _adf4351_write_reg4
 ---------------------------------------------------------------------------------
 (3) _adf4351_set_freq                                     8     2      6   37828
                                             36 BANK0      8     2      6
              _adf4351_calc_counters
            _adf4351_calc_rcnt_block
         _adf4351_calc_vco_core_freq
                      _adf4351_setup
 ---------------------------------------------------------------------------------
 (4) _adf4351_calc_vco_core_freq                          12     6      6     530
                                             12 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (4) _adf4351_calc_rcnt_block                              8     6      2   25803
                                             28 BANK0      8     6      2
                            ___awdiv
                            ___lldiv
                            ___llmod
                             _printf
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     625
                                             12 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (4) _adf4351_calc_counters                               22    20      2    4328
                                             33 COMRAM    22    20      2
                            ___lldiv
                            ___llmod
                                _gcd
 ---------------------------------------------------------------------------------
 (5) _gcd                                                 12     4      8    1368
                                             21 COMRAM    12     4      8
                            ___llmod
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     832
                                             12 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8    1261
                                             12 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _init_gpios                                           3     3      0       0
                                             12 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _check_usart                                          2     2      0   22465
                                             30 BANK0      2     2      0
         _receive_downconverter_data
                         _usart_getc
                         _usart_tstc
 ---------------------------------------------------------------------------------
 (2) _usart_tstc                                           2     0      2       0
                                             12 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _usart_getc                                           6     4      2      34
                                             12 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _receive_downconverter_data                           3     3      0   22397
                                            101 COMRAM     1     1      0
                                             28 BANK0      2     2      0
                             _printf
 ---------------------------------------------------------------------------------
 (1) _check_adf4351_lock                                   1     1      0   95069
                                            101 COMRAM     1     1      0
                   _adf4351_get_lock
                   _adf4351_set_tune
                              _alarm
                             _printf
 ---------------------------------------------------------------------------------
 (2) _alarm                                               15    15      0   42252
                                             28 BANK0     15    15      0
                         _calc_power
                             _printf
                            _readFWD
                          _readKTY82
                   _readPowerVoltage
 ---------------------------------------------------------------------------------
 (3) _readPowerVoltage                                     6     4      2    1881
                                             36 COMRAM     6     4      2
                        _adc_voltage
 ---------------------------------------------------------------------------------
 (3) _readKTY82                                            2     0      2   14145
                                             90 COMRAM     2     0      2
          _KTY82_222_Adc2Temperature
                        _adc_voltage
 ---------------------------------------------------------------------------------
 (4) _KTY82_222_Adc2Temperature                           28    26      2   12298
                                             62 COMRAM    28    26      2
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
                        _adc_voltage (ARG)
 ---------------------------------------------------------------------------------
 (5) ___xxtofl                                            14    10      4     656
                                             12 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (5) ___fltol                                             10     6      4     427
                                             37 COMRAM    10     6      4
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___flsub                                              8     0      8    4187
                                             28 COMRAM     8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) ___fladd                                             16     8      8    3262
                                             12 COMRAM    16     8      8
 ---------------------------------------------------------------------------------
 (5) ___flmul                                             25    17      8    2696
                                             12 COMRAM    25    17      8
 ---------------------------------------------------------------------------------
 (5) ___flge                                              12     4      8     626
                                             12 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (5) ___fleq                                              12     4      8     770
                                             12 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (5) ___fldiv                                             25    17      8    2363
                                             37 COMRAM    25    17      8
                            ___flmul (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _readFWD                                              6     4      2    1881
                                             36 COMRAM     6     4      2
                        _adc_voltage
 ---------------------------------------------------------------------------------
 (4) _adc_voltage                                         12     8      4    1847
                                             24 COMRAM    12     8      4
                             ___lmul
                         _adc_sample
 ---------------------------------------------------------------------------------
 (5) _adc_sample                                           8     6      2     772
                                             16 COMRAM     8     6      2
                         _gpio_to_ch
 ---------------------------------------------------------------------------------
 (3) _calc_power                                          10     8      2    1642
                                             26 COMRAM    10     8      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     636
                                             12 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             14     6      8     625
                                             12 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) _adf4351_set_tune                                     8     2      6    7775
                                             38 COMRAM     8     2      6
                      _adf4351_setup
 ---------------------------------------------------------------------------------
 (4) _adf4351_setup                                        2     0      2    6770
                                             36 COMRAM     2     0      2
                 _adf4351_write_reg0
                 _adf4351_write_reg1
                 _adf4351_write_reg2
                 _adf4351_write_reg3
                 _adf4351_write_reg4
                 _adf4351_write_reg5
 ---------------------------------------------------------------------------------
 (5) _adf4351_write_reg5                                  11     9      2     828
                                             24 COMRAM    11     9      2
                _adf4351_write_latch
 ---------------------------------------------------------------------------------
 (5) _adf4351_write_reg4                                  11     9      2    1314
                                             24 COMRAM    11     9      2
                _adf4351_write_latch
 ---------------------------------------------------------------------------------
 (5) _adf4351_write_reg3                                  12    10      2     998
                                             24 COMRAM    12    10      2
                _adf4351_write_latch
 ---------------------------------------------------------------------------------
 (5) _adf4351_write_reg2                                  12    10      2    1416
                                             24 COMRAM    12    10      2
                _adf4351_write_latch
 ---------------------------------------------------------------------------------
 (5) _adf4351_write_reg1                                  12    10      2     896
                                             24 COMRAM    12    10      2
                _adf4351_write_latch
 ---------------------------------------------------------------------------------
 (5) _adf4351_write_reg0                                  12    10      2     862
                                             24 COMRAM    12    10      2
                _adf4351_write_latch
 ---------------------------------------------------------------------------------
 (6) _adf4351_write_latch                                 12     8      4     639
                                             12 COMRAM    12     8      4
 ---------------------------------------------------------------------------------
 (3) _adf4351_get_lock                                     8     6      2   22735
                                             28 BANK0      8     6      2
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              13     3     10   22211
                                             98 COMRAM     3     3      0
                                             18 BANK0     10     0     10
                           _vfprintf
 ---------------------------------------------------------------------------------
 (5) _vfprintf                                             7     2      5   19856
                                             91 COMRAM     7     2      5
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (6) _vfpfcnvrt                                           50    46      4   19344
                                             74 COMRAM    17    13      4
                                              0 BANK0     18    18      0
                               _dtoa
                              _fputc
                               _stoa
                            _strncmp
                               _utoa
 ---------------------------------------------------------------------------------
 (7) _utoa                                                32    22     10    6029
                                             37 COMRAM    32    22     10
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (8) ___lomod                                             17     1     16     412
                                             12 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (8) ___lodiv                                             25     9     16     421
                                             12 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (7) _strncmp                                             11     5      6    1135
                                             12 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (7) _stoa                                                22    18      4    2529
                                             17 COMRAM    22    18      4
                              _fputc
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _dtoa                                                36    26     10    6883
                                             38 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (8) _pad                                                 10     5      5    4437
                                             23 COMRAM    10     5      5
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (9) _strlen                                               4     2      2     310
                                             12 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (9) _fputs                                                6     3      3    1867
                                             17 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (10) _fputc                                               4     0      4    1367
                                             13 COMRAM     4     0      4
                         _usart_putc
 ---------------------------------------------------------------------------------
 (11) _usart_putc                                          1     1      0      38
                                             12 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _abs                                                  4     2      2     183
                                             30 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (8) ___aomod                                             18     2     16     613
                                             12 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (8) ___aodiv                                             26    10     16     625
                                             12 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _adf4351_init                                        13     3     10    2444
                                             24 COMRAM    13     3     10
                    _adf4351_default
                             _memset
 ---------------------------------------------------------------------------------
 (2) _memset                                              12     6      6    1287
                                             12 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) _adf4351_default                                      2     0      2     400
                                             12 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_cfg_gpio                                         7     5      2    1005
                                             16 COMRAM     7     5      2
                         _gpio_to_ch
 ---------------------------------------------------------------------------------
 (6) _gpio_to_ch                                           4     2      2     552
                                             12 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _global_irq_handler                                  5     5      0     122
                                              7 COMRAM     5     5      0
               _usart_rx_irq_handler *
 ---------------------------------------------------------------------------------
 (14) _usart_rx_irq_handler                                7     5      2     121
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adc_cfg_gpio
     _gpio_to_ch
   _adc_init
   _adf4351_init
     _adf4351_default
     _memset
   _adf4351_set_tune
     _adf4351_setup
       _adf4351_write_reg0
         _adf4351_write_latch
       _adf4351_write_reg1
         _adf4351_write_latch
       _adf4351_write_reg2
         _adf4351_write_latch
       _adf4351_write_reg3
         _adf4351_write_latch
       _adf4351_write_reg4
         _adf4351_write_latch
       _adf4351_write_reg5
         _adf4351_write_latch
   _check_adf4351_lock
     _adf4351_get_lock
       _printf
         _vfprintf
           _vfpfcnvrt
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _fputc
               _usart_putc
             _stoa
               _fputc
                 _usart_putc
               _strlen
             _strncmp
             _utoa
               ___lodiv
               ___lomod
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
     _adf4351_set_tune
       _adf4351_setup
         _adf4351_write_reg0
           _adf4351_write_latch
         _adf4351_write_reg1
           _adf4351_write_latch
         _adf4351_write_reg2
           _adf4351_write_latch
         _adf4351_write_reg3
           _adf4351_write_latch
         _adf4351_write_reg4
           _adf4351_write_latch
         _adf4351_write_reg5
           _adf4351_write_latch
     _alarm
       _calc_power
         ___aldiv
         ___lmul
       _printf
         _vfprintf
           _vfpfcnvrt
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _fputc
               _usart_putc
             _stoa
               _fputc
                 _usart_putc
               _strlen
             _strncmp
             _utoa
               ___lodiv
               ___lomod
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
       _readFWD
         _adc_voltage
           ___lmul
           _adc_sample
             _gpio_to_ch
       _readKTY82
         _KTY82_222_Adc2Temperature
           ___fldiv
             ___flmul (ARG)
             ___flsub (ARG)
               ___fladd
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fleq
           ___flge
           ___flmul
           ___flsub
             ___fladd
             ___xxtofl (ARG)
           ___fltol
             ___flmul (ARG)
           ___xxtofl
           _adc_voltage (ARG)
             ___lmul
             _adc_sample
               _gpio_to_ch
         _adc_voltage
           ___lmul
           _adc_sample
             _gpio_to_ch
       _readPowerVoltage
         _adc_voltage
           ___lmul
           _adc_sample
             _gpio_to_ch
     _printf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
           _fputc
             _usart_putc
           _stoa
             _fputc
               _usart_putc
             _strlen
           _strncmp
           _utoa
             ___lodiv
             ___lomod
             _pad
               _fputc
                 _usart_putc
               _fputs
                 _fputc
                   _usart_putc
               _strlen
   _check_usart
     _receive_downconverter_data
       _printf
         _vfprintf
           _vfpfcnvrt
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _fputc
               _usart_putc
             _stoa
               _fputc
                 _usart_putc
               _strlen
             _strncmp
             _utoa
               ___lodiv
               ___lomod
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
     _usart_getc
     _usart_tstc
   _init_gpios
   _init_switch
     _handle_cmd
       _adf4351_get_lock
         _printf
           _vfprintf
             _vfpfcnvrt
               _dtoa
                 ___aodiv
                 ___aomod
                 _abs
                   ___aomod (ARG)
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _fputc
                 _usart_putc
               _stoa
                 _fputc
                   _usart_putc
                 _strlen
               _strncmp
               _utoa
                 ___lodiv
                 ___lomod
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
       _adf4351_set_freq
         _adf4351_calc_counters
           ___lldiv
           ___llmod
           _gcd
             ___llmod
         _adf4351_calc_rcnt_block
           ___awdiv
           ___lldiv
           ___llmod
           _printf
             _vfprintf
               _vfpfcnvrt
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _utoa
                   ___lodiv
                   ___lomod
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
         _adf4351_calc_vco_core_freq
         _adf4351_setup
           _adf4351_write_reg0
             _adf4351_write_latch
           _adf4351_write_reg1
             _adf4351_write_latch
           _adf4351_write_reg2
             _adf4351_write_latch
           _adf4351_write_reg3
             _adf4351_write_latch
           _adf4351_write_reg4
             _adf4351_write_latch
           _adf4351_write_reg5
             _adf4351_write_latch
       _adf4351_set_mode
         _adf4351_setup
           _adf4351_write_reg0
             _adf4351_write_latch
           _adf4351_write_reg1
             _adf4351_write_latch
           _adf4351_write_reg2
             _adf4351_write_latch
           _adf4351_write_reg3
             _adf4351_write_latch
           _adf4351_write_reg4
             _adf4351_write_latch
           _adf4351_write_reg5
             _adf4351_write_latch
         _adf4351_write_reg2
           _adf4351_write_latch
         _adf4351_write_reg4
           _adf4351_write_latch
       _pa_mute
         _adf4351_set_rfout_enable
           _adf4351_write_reg2
             _adf4351_write_latch
           _adf4351_write_reg4
             _adf4351_write_latch
         _setPTT_LED
           _printf
             _vfprintf
               _vfpfcnvrt
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _utoa
                   ___lodiv
                   ___lomod
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
       _printf
         _vfprintf
           _vfpfcnvrt
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _fputc
               _usart_putc
             _stoa
               _fputc
                 _usart_putc
               _strlen
             _strncmp
             _utoa
               ___lodiv
               ___lomod
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
       _setLOCK_LED
         _printf
           _vfprintf
             _vfpfcnvrt
               _dtoa
                 ___aodiv
                 ___aomod
                 _abs
                   ___aomod (ARG)
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _fputc
                 _usart_putc
               _stoa
                 _fputc
                   _usart_putc
                 _strlen
               _strncmp
               _utoa
                 ___lodiv
                 ___lomod
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
     _read_switch
   _pa_update
     _adf4351_get_lock
       _printf
         _vfprintf
           _vfpfcnvrt
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _fputc
               _usart_putc
             _stoa
               _fputc
                 _usart_putc
               _strlen
             _strncmp
             _utoa
               ___lodiv
               ___lomod
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
     _pa_alarm
     _pa_mute
       _adf4351_set_rfout_enable
         _adf4351_write_reg2
           _adf4351_write_latch
         _adf4351_write_reg4
           _adf4351_write_latch
       _setPTT_LED
         _printf
           _vfprintf
             _vfpfcnvrt
               _dtoa
                 ___aodiv
                 ___aomod
                 _abs
                   ___aomod (ARG)
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _fputc
                 _usart_putc
               _stoa
                 _fputc
                   _usart_putc
                 _strlen
               _strncmp
               _utoa
                 ___lodiv
                 ___lomod
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
     _pa_unmute
       _adf4351_set_rfout_enable
         _adf4351_write_reg2
           _adf4351_write_latch
         _adf4351_write_reg4
           _adf4351_write_latch
       _pa_alarm
       _setPTT_LED
         _printf
           _vfprintf
             _vfpfcnvrt
               _dtoa
                 ___aodiv
                 ___aomod
                 _abs
                   ___aomod (ARG)
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _fputc
                 _usart_putc
               _stoa
                 _fputc
                   _usart_putc
                 _strlen
               _strncmp
               _utoa
                 ___lodiv
                 ___lomod
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
   _printf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _usart_putc
             _fputs
               _fputc
                 _usart_putc
             _strlen
         _fputc
           _usart_putc
         _stoa
           _fputc
             _usart_putc
           _strlen
         _strncmp
         _utoa
           ___lodiv
           ___lomod
           _pad
             _fputc
               _usart_putc
             _fputs
               _fputc
                 _usart_putc
             _strlen
   _update_led
     _adf4351_get_lock
       _printf
         _vfprintf
           _vfpfcnvrt
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _fputc
               _usart_putc
             _stoa
               _fputc
                 _usart_putc
               _strlen
             _strncmp
             _utoa
               ___lodiv
               ___lomod
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
     _setLOCK_LED
       _printf
         _vfprintf
           _vfpfcnvrt
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _fputc
               _usart_putc
             _stoa
               _fputc
                 _usart_putc
               _strlen
             _strncmp
             _utoa
               ___lodiv
               ___lomod
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
   _update_switch
     _handle_cmd
       _adf4351_get_lock
         _printf
           _vfprintf
             _vfpfcnvrt
               _dtoa
                 ___aodiv
                 ___aomod
                 _abs
                   ___aomod (ARG)
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _fputc
                 _usart_putc
               _stoa
                 _fputc
                   _usart_putc
                 _strlen
               _strncmp
               _utoa
                 ___lodiv
                 ___lomod
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
       _adf4351_set_freq
         _adf4351_calc_counters
           ___lldiv
           ___llmod
           _gcd
             ___llmod
         _adf4351_calc_rcnt_block
           ___awdiv
           ___lldiv
           ___llmod
           _printf
             _vfprintf
               _vfpfcnvrt
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _utoa
                   ___lodiv
                   ___lomod
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
         _adf4351_calc_vco_core_freq
         _adf4351_setup
           _adf4351_write_reg0
             _adf4351_write_latch
           _adf4351_write_reg1
             _adf4351_write_latch
           _adf4351_write_reg2
             _adf4351_write_latch
           _adf4351_write_reg3
             _adf4351_write_latch
           _adf4351_write_reg4
             _adf4351_write_latch
           _adf4351_write_reg5
             _adf4351_write_latch
       _adf4351_set_mode
         _adf4351_setup
           _adf4351_write_reg0
             _adf4351_write_latch
           _adf4351_write_reg1
             _adf4351_write_latch
           _adf4351_write_reg2
             _adf4351_write_latch
           _adf4351_write_reg3
             _adf4351_write_latch
           _adf4351_write_reg4
             _adf4351_write_latch
           _adf4351_write_reg5
             _adf4351_write_latch
         _adf4351_write_reg2
           _adf4351_write_latch
         _adf4351_write_reg4
           _adf4351_write_latch
       _pa_mute
         _adf4351_set_rfout_enable
           _adf4351_write_reg2
             _adf4351_write_latch
           _adf4351_write_reg4
             _adf4351_write_latch
         _setPTT_LED
           _printf
             _vfprintf
               _vfpfcnvrt
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
                 _fputc
                   _usart_putc
                 _stoa
                   _fputc
                     _usart_putc
                   _strlen
                 _strncmp
                 _utoa
                   ___lodiv
                   ___lomod
                   _pad
                     _fputc
                       _usart_putc
                     _fputs
                       _fputc
                         _usart_putc
                     _strlen
       _printf
         _vfprintf
           _vfpfcnvrt
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
             _fputc
               _usart_putc
             _stoa
               _fputc
                 _usart_putc
               _strlen
             _strncmp
             _utoa
               ___lodiv
               ___lomod
               _pad
                 _fputc
                   _usart_putc
                 _fputs
                   _fputc
                     _usart_putc
                 _strlen
       _setLOCK_LED
         _printf
           _vfprintf
             _vfpfcnvrt
               _dtoa
                 ___aodiv
                 ___aomod
                 _abs
                   ___aomod (ARG)
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
               _fputc
                 _usart_putc
               _stoa
                 _fputc
                   _usart_putc
                 _strlen
               _strncmp
               _utoa
                 ___lodiv
                 ___lomod
                 _pad
                   _fputc
                     _usart_putc
                   _fputs
                     _fputc
                       _usart_putc
                   _strlen
     _read_switch
   _usart_init
     ___lldiv
     _irq_set_handler

 _global_irq_handler (ROOT)
   _usart_rx_irq_handler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      9      E9       7       91.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     34      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     66      72       1       90.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2DB      15        0.0%
DATA                 0      0     2DB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Fri May 29 12:04:43 2020

                __end_of_adf4351_setup 4C06                           ___fldiv@aexp 003E  
            adf4351_calc_counters@frac 0034                           ___fldiv@bexp 003D  
     __size_of_adf4351_calc_rcnt_block 02A2                           ___fldiv@sign 0036  
                                   l88 207A                           ___awdiv@sign 0012  
                   update_led@blinkcnt 0092                            __CFG_BORV$3 000000  
                       _PIN_LED_CPU_OK 7C8F                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                          _update_switch 4C90  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
             __end_of_adf4351_set_freq 48A6               __end_of_adf4351_set_mode 4612  
                          __CFG_WDT$ON 000000                                    l101 16F4  
                                  l109 3802                                    l144 3A38  
                                  l145 39AE                                    l146 39F4  
                                  l292 26E0                                    l277 4A52  
                                  l471 2414                                    l800 1E02  
                                  l480 25BC                                    l802 1E0A  
                                  l850 2B40                                    l908 4500  
                                  l829 30FA               __end_of_adf4351_set_tune 4840  
                                  l848 2B38                                    l789 420C  
                         __CFG_CPB$OFF 000000                           __CFG_CPD$OFF 000000  
                __size_of_adc_cfg_gpio 0050                                    _abs 4DFC  
                                  _gcd 39AC                                    _pad 41E2  
                  update_led@blinkstat 0091                                    tosl 000FFD  
                                  wreg 000FE8                       _PIN_LED_ADF_LOCK 7C99  
              __end_of_irq_set_handler 4DFC                           ___flmul@aexp 001A  
                         ___flmul@bexp 001B                           ___flmul@sign 0019  
                         ___flmul@temp 0024                           ___flmul@prod 0020  
                         __CFG_LVP$OFF 000000                   __size_of_adc_voltage 0070  
                         ___fltol@exp1 002F                                   ?_abs 001F  
                                 l1301 48FA                                   l1146 3970  
                                 l1410 1400                                   l1411 13DE  
                                 ?_gcd 0016                                   l1319 3B26  
                                 l1512 128A                                   l1504 1204  
                                 l1329 3E14                                   l1505 1200  
                                 l1426 14D2                                   l1435 1538  
                                 l1436 1534                                   l1543 3012  
                                 l1536 2F94                                   l1465 1C7A  
                                 l1556 4E24                                   l1476 1CE8  
                                 l1477 1CE4                                   l1495 1012  
                                 l6205 4F5E                                   l6221 4DA0  
                                 l7101 44B2                                   ?_pad 0018  
                                 l6303 2F34                                   l6215 4F08  
                                 l6231 4D22                                   l7103 44BE  
                                 l6225 4DB6                                   l6241 41F6  
                                 l6401 1E24                                   l7113 44F2  
                                 l6331 33CA                                   l6323 336E  
                                 l6315 3330                                   l6251 422E  
                                 l7211 1CAE                                   l6325 3382  
                                 l6229 4D1E                                   l6245 4204  
                                 l6405 1E34                                   l7205 1C90  
                                 l7133 1B38                                   l6271 2E3A  
                                 l6335 33E0                                   l6319 3354  
                                 l6255 4256                                   l6247 4216  
                                 l6415 1F28                                   l6351 3AB4  
                                 l7231 1D2C                                   l8007 3EAE  
                                 l6361 3B10                                   l7081 4A70  
                                 l7161 1BAC                                   l7153 1B78  
                                 l7129 1B34                                   l8041 2286  
                                 l8025 2230                                   l6283 2E88  
                                 l6339 3406                                   l6435 1F8C  
                                 l6451 30BE                                   l6371 3DB6  
                                 l6507 2C5E                                   l6603 0852  
                                 l7091 4A9E                                   l7235 1D50  
                                 l8051 22C8                                   l7411 4446  
                                 l8107 428E                                   l6701 2754  
                                 l6285 2E9C                                   l6277 2E62  
                                 l6461 3110                                   l6349 3AA0  
                                 l6613 0894                                   l7245 1D86  
                                 l7149 1B74                                   l8053 22CC  
                                 l8037 2276                                   l8029 2244  
                                 l8301 41BC                                   l7413 444E  
                                 l7405 4430                                   l8141 2DA6  
                                 l6295 2EF8                                   l6439 1FA0  
                                 l6527 3F0A                                   l7087 4A8A  
                                 l7247 1D88                                   l7239 1D7A  
                                 l7175 1BDA                                   l7167 1BC2  
                                 l7343 11CA                                   l7271 0FD2  
                                 l7431 4486                                   l7423 446E  
                                 l6713 279C                                   l6465 3128  
                                 l6529 3F18                                   l6377 3DFE  
                                 l6369 3DA2                                   l6609 088A  
                                 l6561 05C6                                   l6633 29B4  
                                 l7193 1C52                                   l7185 1C2A  
                                 l7337 11AC                                   l7513 3CBC  
                                 l7505 3C94                                   l8073 233C  
                                 l8153 2E02                                   l8145 2DBE  
                                 l8321 4CC2                                   l6707 2778  
                                 l6299 2F0E                                   l6387 1DE6  
                                 l6483 31B4                                   l6475 3182  
                                 l6619 08AA                                   l6723 4B82  
                                 l7443 43EA                                   l7363 1248  
                                 l7267 0FBE                                   l7507 3CA0  
                                 l7531 2FC8                                   l7523 2FA4  
                                 l8083 237A                                   l8067 2314  
                                 l8059 22E2                                   l7427 4478  
                                 l7603 1730                                   l8155 2E08  
                                 l8315 4CA2                                   l6469 3146  
                                 l6573 06C4                                   l6725 4BA0  
                                 l6637 2A08                                   l7285 0FFE  
                                 l7269 0FC2                                   l6805 1392  
                                 l7541 3038                                   l7533 2FD4  
                                 l7613 1824                                   l8333 3650  
                                 l8317 4CAC                                   l6663 2650  
                                 l6479 319C                                   l6583 071E  
                                 l6639 2A38                                   l6647 2AA6  
                                 l7199 1C78                                   l7447 4408  
                                 l7439 43B6                                   l7463 395A  
                                 l7455 3910                                   l7367 1266  
                                 l7295 1030                                   l7287 1002  
                                 l6743 12EE                                   l7543 3044  
                                 l7535 2FFA                                   l8087 2394  
                                 l8079 235E                                   l7631 20A8  
                                 l8423 254E                                   l8415 24F8  
                                 l6681 26BC                                   l6497 2B76  
                                 l6593 07A6                                   l6913 15A4  
                                 l6905 157E                                   l6841 1446  
                                 l6833 1424                                   l6817 13EC  
                                 l7529 2FC2                                   l8097 23DA  
                                 l8089 2398                                   l7641 2194  
                                 l7633 20BC                                   l7713 40EE  
                                 l8353 369C                                   l8361 3708  
                                 l8425 257A                                   l6675 2698  
                                 l7459 3944                                   l7379 12A8  
                                 l6843 144A                                   l6851 145C  
                                 l6819 13F0                                   l6763 1332  
                                 l6739 12EA                                   l7619 185A  
                                 l7571 3758                                   l8347 368C  
                                 l8355 36CE                                   l8451 25D8  
                                 l6669 2674                                   l7741 3BAA  
                                 l7733 3B7C                                   l7469 39A8  
                                 l6917 15AC                                   l6861 14C2  
                                 l6941 48EC                                   l6933 48B8  
                                 l7717 4126                                   l8373 491C  
                                 l8365 3724                                   l6695 2730  
                                 l6687 26E6                                   l7903 3216  
                                 l7751 3BDE                                   l7727 3B64  
                                 l6919 15AE                                   l6775 1356  
                                 l6767 1336                                   l7495 3C7C  
                                 l7479 3C32                                   l7559 3084  
                                 l6935 48C4                                   l7639 2174  
                                 l7399 4420                                   l7575 377C  
                                 l7807 45D8                                   l8359 3700  
                                 l7681 0A24                                   l7673 09CE  
                                 l8297 41AC                                   l7593 16A0  
                                 l7569 374A                                   l7657 4CEA  
                                 l7923 32FA                                   l7915 32B2  
                                 l7931 47E8                                   l7739 3B9E  
                                 l7755 3BEC                                   l7499 3C8C  
                                 l7675 09D8                                   l7579 37A0  
                                 l7917 32E4                                   l7909 327A  
                                 l6869 14F6                                   l6885 1516  
                                 l7693 0C2E                                   l7837 4A18  
                                 l7861 4352                                   l7759 3C02  
                                 l6879 150C                                   l7847 4F36  
                                 l7793 4684                                   l7881 34F6  
                                 l7873 34C6                                   l7857 431A  
                                 l7787 4664                                   l7885 350E  
                                 l7877 34DE                                   l7981 3E58  
                                 l7973 3E4E                                   l7965 3E3A  
                                 l7975 3E54                                   l7889 3526  
                                 l7993 3E6E                                   l7969 3E46  
                                 l7989 3E66                                   STR_1 7F0D  
                                 STR_2 7FD1                                   STR_3 7FCF  
                                 STR_4 7D1A                                   STR_5 7D64  
                                 STR_6 7DAC                                   STR_7 7FD8  
                                 STR_8 7E36                                   STR_9 7FE4  
                                 _PIE1 000F9D                                   _PIE2 000FA0  
                                 u8000 1F58                                   u8001 1F56  
                                 u8010 1F66                                   u8020 1F6A  
                                 u8110 313C                                   u8040 1F76  
                                 u8120 3166                                   u8200 2C88  
                                 u8201 2C86                                   u8210 2C96  
                                 u8220 2C9A                                   u8300 055A  
                                 u8061 30A0                                   u9005 1A1E  
                                 u8150 31C8                                   u8127 315C  
                                 u9015 1A58                                   u8320 061A  
                                 u9105 0DEA                                   u9025 1A96  
                                 u8170 2B2E                                   u9115 0E28  
                                 u9035 1AD4                                   u7700 4E0A  
                                 u9125 0E6C                                   u9205 2844  
                                 u8270 3F64                                   u9135 0EE2  
                                 u9055 0C78                                   u9215 2882  
                                 u7640 4D42                                   u9305 3D14  
                                 u9145 0F20                                   u9065 0CB6  
                                 u9225 28C0                                   u7810 3386  
                                 u8610 13B4                                   u7731 2E68  
                                 u9315 3D54                                   u9155 0F5E  
                                 u9075 0CF4                                   u9235 28FE  
                                 u8620 13C4                                   u9085 0D32  
                                 u9245 293C                                   u7750 2EA0  
                                 u7910 1DB8                                   u8630 13C6  
                                 u7647 4D38                                   u9095 0D70  
                                 u9175 46CC                                   u7920 1DBA  
                                 u7841 3A80                                   u9265 3586  
                                 u9610 1D3A                                   u8810 152E  
                                 u9275 35CA                                   u9195 2806  
                                 u7860 3AB8                                   u9620 1D5E  
                                 u8660 1408                                   u9285 3608  
                                 u7950 1DF8                                   u9710 101E  
                                 u9390 44C2                                   u9800 1274  
                                 u8920 48C8                                   u7970 1E1E  
                                 u7890 3DBA                                   u9570 1CDE  
                                 u7980 1F36                                   u9900 4404  
                                 u9750 11FA                                   u8870 158A  
                                 u8790 151A                                   u9850 4452  
                                 u8955 18AC                                   u8965 18EA  
                                 u9790 1256                                   u8975 1928  
                                 u9960 3C20                                   u8985 19A2  
                                 u9970 3C50                                   u8995 19E0  
                                 u9975 3C46                adf4351_write_latch@mask 0015  
                        calc_power@dBm 0021             __end_of_PIN_LED_PTT_ACTIVE 7C99  
                                 abs@a 001F                                   _dbuf 0099  
                                 gcd@a 0016                                   gcd@b 001A  
                                 gcd@c 001E                                   _main 240C  
                                 _dtoa 1D90                                   _prec 0069  
                                 _nout 0084                                   pad@i 001E  
                                 pad@p 001B                                   fsr1h 000FE2  
                                 fsr2h 000FDA                                   indf1 000FE7  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 pad@w 0020                                   fsr2l 000FD9  
                                 _stoa 3096                                   btemp 0073  
                                 _utoa 2B1C                                   prodh 000FF4  
                                 prodl 000FF3                  __end_of_PIN_PA_ENABLE 7C9D  
                                 start 000E                          __CFG_IESO$OFF 000000  
                      ___fldiv@new_exp 0037                           ___param_bank 000000  
               __end_of_PIN_LED_CPU_OK 7C91                           _adc_cfg_gpio 4AD0  
                                ??_abs 0021                                  ??_gcd 001E  
                                ??_pad 001D                        read_switch@fsw0 0010  
                      read_switch@fsw1 0011                   _PIN_ALARM_OUTPUT_DEF 7CC5  
            _KTY82_222_Adc2Temperature 08DA                         ?_update_switch 0001  
                        ___fltol@sign1 002E                        __end_of___aldiv 3C14  
                      __end_of___aodiv 2F56                        __end_of___fladd 15CA  
                                ?_main 0001                                  ?_dtoa 0027  
                      __end_of___aomod 3428                        __end_of___fldiv 1D90  
                      __end_of___awdiv 4490                                  STR_10 7FDF  
                                STR_11 7DE3                                  STR_12 7FE4  
                                STR_20 7EDB                                  STR_13 7FDF  
                                STR_21 7FB3                                  STR_30 7FF6  
                                STR_22 7FC1                                  STR_14 7EF6  
                                STR_15 7FF9                                  STR_31 7FE9  
                                STR_23 7F7A                                  STR_40 7FED  
                                STR_16 7FFC                                  STR_24 7F6B  
                                STR_32 7F23                                  STR_33 7FF6  
                                STR_25 7F5A                                  STR_17 7F36  
                                STR_34 7FE9                                  STR_42 7FF0  
                                STR_18 7FA5                                  STR_26 7F89  
                                STR_27 7F97                                  STR_35 7E9E  
                                STR_19 7E0F                                  STR_44 7FF0  
                                STR_28 7F49                                  STR_36 7EBD  
                                STR_29 7E7D                                  STR_37 7E5A  
                                STR_38 7FED                                  STR_47 7FF3  
                                STR_49 7FF3                        __end_of___flmul 12BE  
                      __end_of___flsub 4C4C                        __end_of___fltol 3CCE  
                                ?_stoa 0012                                  u10010 3CA6  
                      __end_of___lldiv 4512                                  ?_utoa 0026  
                                u11000 454C                                  u11010 4586  
                                u10300 21EE                                  u11020 4588  
                                u10230 17C2                                  u10150 377C  
                                u11120 41DA                                  u10240 1830  
                                u10160 3790                                  u10090 304E  
                                u10250 206C                                  u10420 3BAE  
                                u10340 0A6C                                  u10260 2078  
                                u10180 37EE                                  u11060 2DE0  
                                u11140 4CBA                                  u10181 37EA  
                                u10190 37F0                                  u11070 2DEE  
                                u11230 4916                                  u10600 34F2  
                                u10360 474A                                  u10610 350A  
                                u11090 4168                                  u10290 21EC  
                      __end_of___lodiv 3B48                                  u10620 3522  
                      ___awdiv@divisor 000F                                  u10365 4740  
                                u10470 464A                                  u10630 353A  
                                u10550 4F32                                  u10480 464C  
                                u10720 4EF0                                  u11280 24A6  
                                u10721 4EEC                        __end_of___llmod 490C  
                                u11337 25E0                                  u10810 222C  
                                u10730 4EF2                                  u11290 24A8  
                                u11347 42D8                                  u10580 34C2  
                                u10820 2240                                  u10740 4D64  
                                u11357 2DB4                                  u10590 34DA  
                                u10750 3E42                                  u11367 2B14  
                                u11377 38D4                                  u10950 23AA  
                                u10970 4286                                  u10990 454A  
                      __end_of___lomod 3E36                                  i2l226 49B4  
                      ___awdiv@counter 0011                                  _RCREG 000FAE  
                         vfpfcnvrt@fmt 004D                           vfpfcnvrt@llu 00C3  
                                _SPBRG 000FAF                                  _PORTA 000F80  
                                _PORTB 000F81                                  _PORTC 000F82  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TXREG 000FAD  
                     __end_of_PIN_FSW0 7C95                       __end_of_PIN_FSW1 7C93  
         ??_receive_downconverter_data 00D5                          __CFG_PWRT$OFF 000000  
             adf4351_write_latch@value 000D                       __end_of_PIN_TEMP 7CA7  
                        __CFG_WRT0$OFF 000000                           ?_setLOCK_LED 0001  
                     __end_of_PIN_RF_R 7CA1                       __end_of_PIN_RF_V 7CA3  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                  ___lmul@multiplicand 0011                          __CFG_WRT3$OFF 000000  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                 irq_set_handler@udata 000F                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
   KTY82_222_Adc2Temperature@adc_value 003F                           ?_init_switch 0001  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                  __end_of_PIN_PTT_INPUT 7C97  
                       __CFG_EBTRB$OFF 000000                                  _alarm 21F2  
                                _g_ipc 00F8                        __end_of_readFWD 4E7C  
                                _flags 006B                        __end_of_pa_mute 4A22  
                                _fputc 4EF8                                  _fputs 4D96  
                 __size_of_check_usart 0022                                  pad@fp 0018  
                                _width 0067                           ?_read_switch 0001  
                                main@i 01E7                                  dtoa@d 0029  
                                dtoa@i 0049                                  dtoa@n 0041  
                                dtoa@p 003B                                  dtoa@s 003F  
                                dtoa@w 003D                         _PIN_POWER_GOOD 7C87  
                                pclath 000FFA                                  tablat 000FF5  
                                plusw1 000FE3                                  plusw2 000FDB  
                                stoa@i 001E                                  stoa@l 0026  
                                stoa@p 0024                                  stoa@s 0014  
                                stoa@w 0020                                  ttemp5 0074  
                                ttemp6 0077                                  ttemp7 007B  
                                utoa@d 0028                                  utoa@i 0044  
                                utoa@n 003C                                  utoa@p 0038  
                                utoa@w 003A                                  status 000FD8  
                                wtemp8 0074                        __end_of_strncmp 3F8A  
                     ___lodiv@dividend 000D                       ?_adf4351_default 000D  
                       __CFG_PBADEN$ON 000000                        update_led@pause 0090  
                       __CFG_MCLRE$OFF 000000                 _g_cmd_debounce_counter 00FA  
                      __initialization 4030                           __end_of_main 2606  
                         __end_of_dtoa 1FC4                           __end_of_stoa 31D2  
                         __end_of_utoa 2CBE    __size_of_receive_downconverter_data 00AA  
    __size_of_adf4351_set_rfout_enable 0042                  usart_rx_irq_handler@c 0005  
            ?_adf4351_set_rfout_enable 0025                        readFWD@fwd_volt 0027  
                               ??_main 01E0                                 ??_dtoa 0031  
                usart_init@spbrg_value 001E                                 ??_stoa 0016  
                               ??_utoa 0030                          __activetblptr 000002  
                      adc_voltage@gpio 0019                   _adf4351_get_lock$290 00DA  
                     ___lodiv@quotient 001D                       ?_irq_set_handler 000D  
                    handle_cmd@timeout 00E9                ??_adf4351_calc_counters 0024  
                               ?_alarm 0001                 __end_of_PIN_POWER_GOOD 7C89  
                               ?_fputc 000E                       ___llmod@dividend 000D  
                               ?_fputs 0012                                 _ADRESH 000FC4  
                               _ADRESL 000FC3                       ___awdiv@dividend 000D  
                    _PIN_PTT_INPUT_DEF 7CF7                       __end_of_adc_init 4F26  
                               i2l5905 4B36                                 _OSCCON 000FD3  
                       __CFG_WDTPS$256 000000                                 _SPBRGH 000FB0  
                     __end_of___xxtofl 3096                         __CFG_XINST$OFF 000000  
              _adf4351_calc_rcnt_block 15CA                           vfprintf@cfmt 0061  
                               ___flge 38DC                                 ___fleq 4382  
            __size_of_readPowerVoltage 0028                                 ___lmul 4A7A  
                            ??___aldiv 0015                              ??___aodiv 001D  
                     __end_of_pa_alarm 4F3A                              ??___fladd 0015  
                            ??___aomod 001D                              ??___fldiv 002E  
                            ??___awdiv 0011                         __CFG_STVREN$ON 000000  
                      ??_update_switch 0067                              ??___flmul 0015  
                            ??___flsub 0025                              ??___fltol 002A  
                            ??___lldiv 0015                              ??___lodiv 001D  
                            ??___llmod 0015                              ??___lomod 001D  
                               _g_pout 00F6            __size_of_global_irq_handler 49C0  
                 update_led@updatetime 00E0                                 _memset 31D2  
                               clear_0 408A                                 clear_1 409C  
                               clear_2 40A8                                 clear_3 40B4  
                     ___awdiv@quotient 0013            ?_adf4351_calc_vco_core_freq 000D  
                               _printf 4EC0                                 pad@buf 001A  
         __size_of_adf4351_write_latch 01AC                                 dtoa@fp 0027  
                               _strlen 4D14                        _PIN_SIO_CLK_DEF 7D01  
                            ??_readFWD 0027                              ??_pa_mute 00D8  
                   _g_irq_handler_info 0080                                 fputc@c 000E  
                   _adf4351_write_reg0 3CCE                     _adf4351_write_reg1 3540  
                   _adf4351_write_reg2 0C38                     _adf4351_write_reg3 27C0  
                   _adf4351_write_reg4 186C                     _adf4351_write_reg5 468C  
                               fputs@c 0015                                 fputs@i 0016  
                         __pdataCOMRAM 0072                                 fputs@s 0012  
                   _PIN_LED_CPU_OK_DEF 7CD4                           __mediumconst 7C76  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8              __end_of_PIN_PTT_INPUT_DEF 7CFC  
                               stoa@cp 0022                                 stoa@fp 0012  
                     __end_of_vfprintf 4BBC                                 utoa@fp 0026  
                  ?_adf4351_write_reg0 0019                    ?_adf4351_write_reg1 0019  
                  ?_adf4351_write_reg2 0019                    ?_adf4351_write_reg3 0019  
                  ?_adf4351_write_reg4 0019                              ??_strncmp 0013  
                  ?_adf4351_write_reg5 0019                             ___flge@ff1 000D  
                           ___flge@ff2 0011                   setLOCK_LED@old_onoff 00FD  
                         ___xxtofl@arg 0017                           ___xxtofl@exp 0016  
                         ___xxtofl@val 000D                             ___fleq@ff1 000D  
                           ___fleq@ff2 0011                             __accesstop 0080  
              __end_of__initialization 40BA                    _supplyvoltage_alarm 008C  
                        ___rparam_used 000001                             ___fltol@f1 0026  
 receive_downconverter_data@rxdatabyte 0066                      ?_adf4351_get_lock 00D5  
             __end_of_PIN_LED_ADF_LOCK 7C9B                          ?_adf4351_init 0019  
                       __pcstackCOMRAM 0001                           __pidataBANK0 4F3A  
                         __pidataBANK1 4C4C                     ??_adf4351_get_lock 00D7  
                        __end_of_alarm 240C                   ??_adf4351_write_reg0 001B  
                 ??_adf4351_write_reg1 001B                   ??_adf4351_write_reg2 001B  
                 ??_adf4351_write_reg3 001B                   ??_adf4351_write_reg4 001B  
                 ??_adf4351_write_reg5 001B                          __end_of_fputc 4F10  
                        __end_of_fputs 4DCA                             _adc_sample 4A22  
                      _PIN_VOLTAGE_DEF 7CE3          __size_of_usart_rx_irq_handler 0050  
                    ?_adf4351_set_freq 00DD     __end_of_receive_downconverter_data 3EE0  
           _receive_downconverter_data 3E36                      ?_adf4351_set_mode 0027  
                    ?_adf4351_set_tune 0027                             _alarm$2272 00DA  
                           _alarm$2277 00DC                     ??_adf4351_set_freq 00E3  
                   ??_adf4351_set_mode 002B                             _calc_power 3428  
                   ??_adf4351_set_tune 002D                                ??_alarm 00D5  
                 __size_of_setLOCK_LED 008A                                ??_fputc 0012  
                              ??_fputs 0015                   __size_of_init_switch 000E  
           __end_of_check_adf4351_lock 41E2                             __pbssBANK0 0080  
                           __pbssBANK1 0100                             __pbssBANK2 0200  
                   __size_of_readKTY82 0022                   __size_of_read_switch 0080  
                   __size_of_pa_update 005E                     __size_of_pa_unmute 008A  
            ??_adf4351_calc_rcnt_block 0066                       setLOCK_LED@onoff 0066  
         __end_of_PIN_LED_ADF_LOCK_DEF 7CD4                         ??_adf4351_init 0023  
                              ?___flge 000D                                ?___fleq 000D  
                              ?___lmul 000D                __end_of_PIN_SIO_CLK_DEF 7D06  
                   _PIN_LED_PTT_ACTIVE 7C97                                ?_memset 000D  
                           _handle_cmd 2CBE                         ___lmul@product 0015  
                       usart_init@baud 001A          adf4351_calc_rcnt_block@bscdiv 00D7  
                              ?_printf 00CB                              ?_adc_init 0001  
                         adc_sample@ch 0017                                ?_strlen 000D  
                            ?___xxtofl 000D                          ??_adc_voltage 001D  
                   __size_of_vfpfcnvrt 03E8                                _OSCTUNE 000F9B  
                   __end_of_PIN_ADF_CE 7CAF                     __end_of_PIN_ADF_LE 7CB1  
               __size_of_adf4351_setup 004A                       ___lomod@dividend 000D  
                            ?_pa_alarm 0001                 irq_set_handler@handler 000D  
                 _g_cpu_led_update_cnt 0088       __end_of_adf4351_set_rfout_enable 4D14  
  __size_of_adf4351_calc_vco_core_freq 00D8                             _freq_table 7C77  
                              __Hparam 0000                         gpio_to_ch@gpio 000D  
              __end_of_PIN_VOLTAGE_DEF 7CE8                                __Lparam 0000  
                           _gpio_to_ch 2606                             _down_rxbuf 0100  
                           _down_rxidx 0098                       _readPowerVoltage 4E2E  
                              ___aldiv 3B48                        __size_of___flge 00D0  
                      __size_of___fleq 008A                                ___aodiv 2E0E  
                              ___fladd 12BE                                ___aomod 3304  
                              ___fldiv 1B08                                ___awdiv 440C  
                      __size_of___lmul 0056                                ___flmul 0F92  
                              ___flsub 4C06                                ___fltol 3C14  
                              ___lldiv 4490                                ___lodiv 3A7A  
                              ___llmod 48A6                                ___lomod 3D88  
                          ?_adc_sample 0011                              ?_vfprintf 005C  
                       adc_sample@gpio 0011                             _init_gpios 0012  
                              __pcinit 4030                        __size_of_memset 0132  
                              __ramtop 0600                      __end_of_readKTY82 4EC0  
                           ??_adc_init 000D                                __ptext0 240C  
                              __ptext1 4770                                __ptext2 4DCA  
                              __ptext3 4C90                                __ptext4 363C  
                              __ptext5 490C                                __ptext6 426E  
                              __ptext7 4F26                                __ptext8 4F4E  
                              __ptext9 4512                        __size_of_printf 001E  
                    __end_of_pa_update 496A                        __size_of_strlen 0042  
                              _readFWD 4E56                      __end_of_pa_unmute 42F8  
                              _pa_mute 49C8                           __size_of_abs 0032  
                         __size_of_gcd 00CE                           __size_of_pad 008C  
                           ??___xxtofl 0011                             _setPTT_LED 40C8  
                        ??_check_usart 0067                       ___aldiv@dividend 000D  
                          ?_calc_power 001B                       _PIN_SIO_DATA_DEF 7D06  
                              _temptab 019C                                main@ref 01E5  
                              _strncmp 3EE0                         __pintcode_body 496A  
       __size_of_adf4351_calc_counters 022E                   end_of_initialization 40BA  
        __end_of_adf4351_calc_counters 21F2                             ??_pa_alarm 000D  
                         _g_usart_rpos 006F                           _g_usart_wpos 006D  
                  __end_of_adc_voltage 4770                       update_switch@cmd 00EC  
                              fputc@fp 0010                                memset@c 000F  
                              memset@k 0015                                memset@n 0011  
                              memset@s 0017                          __Lmediumconst 7C76  
                  _adf4351_write_latch 2970                                int_func 496A  
                              fputs@fp 0013           alarm@old_supplyvoltage_alarm 008A  
                  adf4351_get_lock@ctx 00D5                        ___lldiv@divisor 0011  
                      ___lldiv@counter 0019                      __end_of_vfpfcnvrt 08DA  
                    _PIN_PA_ENABLE_DEF 7CC0                              _RCSTAbits 000FAB  
                     ___aldiv@quotient 0017                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc1 000FE6                                postinc2 000FDE  
                        _adf4351_setup 4BBC                        setPTT_LED@onoff 0066  
                           ??_vfprintf 0061                 _PIN_LED_PTT_ACTIVE_DEF 7CCA  
             __size_of_adf4351_default 00A6                            ?_handle_cmd 0001  
                              strlen@a 000F                                strlen@s 000D  
                 ?_adf4351_write_latch 000D                            ___fladd@grs 001C  
                 __end_of_PIN_ADF_LOCK 7CAD                          ___xxtofl@sign 0015  
           __end_of_PIN_POWER_GOOD_DEF 7CC0                   __end_of_adf4351_init 38DC  
                 _PIN_LED_ADF_LOCK_DEF 7CCF                             _update_led 363C  
       adf4351_calc_counters@remainder 0024                            ___fldiv@grs 0039  
                          ___fldiv@rem 0032                 adf4351_write_reg0@data 0021  
               adf4351_write_reg1@data 0021                 adf4351_write_reg2@data 0021  
               adf4351_write_reg3@data 0021                             _ptt_status 0095  
               adf4351_write_reg4@data 0020                 adf4351_write_reg5@data 0020  
                  __end_of_check_usart 4E9E                    __size_of_adc_sample 0058  
                          ___flmul@grs 001C               adf4351_set_tune@lownoise 002B  
             __size_of_irq_set_handler 0032                   __end_of_PIN_FSW0_DEF 7CE3  
                 __end_of_PIN_FSW1_DEF 7CDE                              _TXSTAbits 000FAC  
                     adc_cfg_gpio@gpio 0011                             _usart_getc 4D56  
                           _usart_init 4770                             _usart_putc 4F5C  
                           _usart_tstc 4EDE              __end_of_PIN_PA_ENABLE_DEF 7CC5  
                        _PIN_PA_ENABLE 7C9B                            ?_gpio_to_ch 000D  
           __end_of_global_irq_handler 49C8                    __size_of_calc_power 0118  
                       ?_adf4351_setup 0025               _adf4351_set_rfout_enable 4CD2  
                 __end_of_PIN_TEMP_DEF 7CF7                   __end_of_PIN_SIO_DATA 7CA9  
                       __end_of___flge 39AC                         __end_of___fleq 440C  
                       __end_of___lmul 4AD0                   __end_of_PIN_RF_R_DEF 7CF2  
                          vfpfcnvrt@ap 004E                            vfpfcnvrt@cp 00B9  
                          vfpfcnvrt@fp 004B                            vfpfcnvrt@ll 00BB  
                 __end_of_PIN_RF_V_DEF 7CED                            ?_init_gpios 0001  
                __end_of_update_switch 4CD2                            _BAUDCONbits 000FB8  
                        __pidataCOMRAM 4F68                  ??_adf4351_write_latch 0011  
          adf4351_set_rfout_enable@ctx 0025                   __end_of_PIN_USART_RX 7C8B  
                 __end_of_PIN_USART_TX 7C8D                         __end_of_memset 3304  
                       __end_of_printf 4EDE            ?_receive_downconverter_data 0001  
                       __end_of_strlen 4D56                            ?_setPTT_LED 0001  
            __size_of_adf4351_get_lock 007A                    start_initialization 4030  
                      ___lodiv@divisor 0015                          _g_applied_cmd 00FE  
                      ___lodiv@counter 0025                            _adc_voltage 4700  
              global_irq_handler@dummy 000C                       _PIN_USART_RX_DEF 7CB1  
                          __end_of_abs 4E2E                            __end_of_gcd 3A7A  
                     _PIN_USART_TX_DEF 7CB6                            __end_of_pad 426E  
                        _PIN_PTT_INPUT 7C95           __end_of_usart_rx_irq_handler 4B70  
                     alarm@temperature 00E0                    __size_of_handle_cmd 0150  
            __size_of_adf4351_set_freq 0066              __size_of_adf4351_set_mode 0080  
                      ___llmod@divisor 0011                       __CFG_OSC$INTIO67 000000  
            __size_of_adf4351_set_tune 0068                    setPTT_LED@old_onoff 00FC  
                      ___llmod@counter 0015                   _adf4351_set_tune$437 002D  
                          vfprintf@fmt 005E                               ??___flge 0015  
                             ??___fleq 0015                 check_adf4351_lock@lock 0066  
                   _check_adf4351_lock 4156                               ??___lmul 0015  
                        ?_adc_cfg_gpio 0011            __size_of_adf4351_write_reg0 00BA  
          __size_of_adf4351_write_reg1 00FC            __size_of_adf4351_write_reg2 035A  
          __size_of_adf4351_write_reg3 01B0            __size_of_adf4351_write_reg4 029C  
          __size_of_adf4351_write_reg5 0074                            __pdataBANK0 00ED  
                          __pdataBANK1 019C                       __CFG_LPT1OSC$OFF 000000  
                             ??_memset 0013                             memset@dest 000D  
                             ??_printf 0063                    ?_check_adf4351_lock 0001  
                             ??_strlen 000F                              ___fladd@a 0011  
                            ___fladd@b 000D               adf4351_get_lock@lastlock 00FF  
                    adc_voltage@adcval 001D                              ___fldiv@a 002A  
                            ___fldiv@b 0026                      __size_of_adc_init 0016  
                        ??_setLOCK_LED 00D5                              ___flmul@a 0011  
                            ___flmul@b 000D                            __pbssCOMRAM 0067  
                            ___flsub@a 0021                              ___flsub@b 001D  
                    ??_adf4351_default 000F                          __pcstackBANK0 00B9  
                        __pcstackBANK1 01E0                     adf4351_default@ctx 000D  
                          _check_usart 4E7C                          ??_init_switch 0067  
                     ___aodiv@dividend 000D                            ?_update_led 0001  
           KTY82_222_Adc2Temperature@i 0059             KTY82_222_Adc2Temperature@x 0049  
                    irq_set_handler@id 0011               __end_of_readPowerVoltage 4E56  
                    __size_of___xxtofl 0140                              _g_adf4351 0165  
                  __size_of_gpio_to_ch 01BA                          ??_read_switch 000D  
                  __size_of_init_gpios 04E0                   ??_check_adf4351_lock 0066  
                     adc_sample@result 0015                      __size_of_pa_alarm 0014  
                          ?_usart_getc 000D                            ?_usart_init 001A  
                          ?_usart_putc 0001                            ?_usart_tstc 000D  
                      ??_adf4351_setup 0027                          usart_getc@res 0011  
                            _main$1985 01E3                           check_usart@c 00D7  
                            _dtoa$2337 0039                    __size_of_setPTT_LED 008E  
                    __CFG_CCP2MX$PORTC 000000               __end_of_PIN_SIO_DATA_DEF 7D0B  
                         alarm@voltage 00E2                         ??_adc_cfg_gpio 0013  
        receive_downconverter_data@idx 0097                              __pintcode 0008  
                    ??_irq_set_handler 0011                          __pmediumconst 7C76  
                             ?___aldiv 000D                               ?___aodiv 000D  
                             ?___fladd 000D                               ?___aomod 000D  
                             ?___fldiv 0026                               ?___awdiv 000D  
                     ___aodiv@quotient 001F                               ?___flmul 000D  
                             ?___flsub 001D                               ?___fltol 0026  
                          usart_putc@c 000D                               ?___lldiv 000D  
                             ?___lodiv 000D                               ?___llmod 000D  
                             ?___lomod 000D                           ??_adc_sample 0013  
                     _PIN_ADF_FREQ_SEL 7C9D                  __size_of_adf4351_init 00D8  
                    __size_of_vfprintf 004C                       _PIN_ADF_LOCK_DEF 7D15  
                      ___lomod@divisor 0015                               ?_readFWD 0025  
                             ?_pa_mute 0001                        ___lomod@counter 001D  
                            _readKTY82 4E9E                           ??_calc_power 001D  
                            _pa_update 490C                              _pa_unmute 426E  
                       __size_of_alarm 021A                          _g_pending_cmd 0072  
             adf4351_calc_counters@div 0028                         __size_of_fputc 0018  
             adf4351_calc_counters@ctx 0022                         __size_of_fputs 0034  
             adf4351_calc_counters@mod 0030                               ?_strncmp 000D  
   __size_of_KTY82_222_Adc2Temperature 035E         KTY82_222_Adc2Temperature@Umess 0051  
                 adf4351_set_freq@freq 00DF               ?_adf4351_calc_rcnt_block 00D5  
           ?_KTY82_222_Adc2Temperature 003F                    __end_of_setLOCK_LED 4382  
                      ___aldiv@divisor 0011                    __end_of_init_switch 4F5C  
                   __end_of_adc_sample 4A7A                        ___aldiv@counter 0015  
                          _g_usart_buf 0200                               _PIE1bits 000F9D  
                  __end_of_read_switch 4592                           _PIN_ADF_LOCK 7CAB  
                             _PIR1bits 000F9E                               i2u731_40 4B56  
                             i2u753_48 4996                               i2u753_49 49AA  
                             _PIN_FSW0 7C93                               _PIN_FSW1 7C91  
                         _adf4351_init 3804                               _PIN_TEMP 7CA5  
                             _RCONbits 000FD0                               _PIN_RF_R 7C9F  
                             _PIN_RF_V 7CA1                    __size_of_update_led 00F0  
                   __end_of_calc_power 3540                       adf4351_setup@ctx 0025  
                         ??_handle_cmd 00E5                              _power_dBm 008F  
                            _vfpfcnvrt 04F2                   _usart_rx_irq_handler 4B20  
                           _ADCON0bits 000FC2           ??_adf4351_calc_vco_core_freq 0013  
                           _ADCON1bits 000FC1                             _ADCON2bits 000FC0  
                     _PIN_ALARM_OUTPUT 7C8D           __end_of_PIN_ADF_FREQ_SEL_DEF 7D01  
                         _PIN_FSW0_DEF 7CDE                  adf4351_write_reg0@ctx 0019  
                         _PIN_FSW1_DEF 7CD9                  adf4351_write_reg1@ctx 0019  
                adf4351_write_reg2@ctx 0019                  adf4351_write_reg3@ctx 0019  
                adf4351_write_reg4@ctx 0019                  adf4351_write_reg5@ctx 0019  
                     _adf4351_get_lock 4612                    __size_of_usart_getc 0040  
                          calc_power@v 001B                    __size_of_usart_init 0068  
                           ?_readKTY82 005B                    __size_of_usart_putc 000C  
                  __size_of_usart_tstc 001A                             ?_pa_update 0001  
                           ?_pa_unmute 0001                    __end_of_PIN_SIO_CLK 7CAB  
                         _PIN_TEMP_DEF 7CF2                      ___lmul@multiplier 000D  
                          _INTCON2bits 000FF1                    __end_of_PIN_VOLTAGE 7CA5  
                            copy_data0 4044                              copy_data1 4064  
                         _PIN_SIO_DATA 7CA7                alarm@old_overtemp_alarm 008B  
                         _PIN_RF_R_DEF 7CED                           _PIN_RF_V_DEF 7CE8  
                 adf4351_set_tune@pout 002A      __end_of_KTY82_222_Adc2Temperature 0C38  
           ??_adf4351_set_rfout_enable 0029                           _PIN_USART_RX 7C89  
                         _PIN_USART_TX 7C8B                       _adf4351_set_freq 4840  
                     _adf4351_set_mode 4592                  _adf4351_calc_counters 1FC4  
                     _adf4351_set_tune 47D8                     __end_of_handle_cmd 2E0E  
                        adc_voltage@mV 0021                     _PIN_POWER_GOOD_DEF 7CBB  
       __end_of_PIN_LED_PTT_ACTIVE_DEF 7CCF                               __Hrparam 0000  
                           vfprintf@ap 0060                               __Lrparam 0000  
                           vfprintf@fp 005C                           ??_gpio_to_ch 000F  
             __end_of_PIN_USART_RX_DEF 7CB6                     __CFG_BOREN$SBORDIS 000000  
             __end_of_PIN_USART_TX_DEF 7CBB                 _g_ptt_debounce_counter 00F4  
         check_adf4351_lock@timespan_s 0086                       __size_of___aldiv 00CC  
adf4351_calc_vco_core_freq@rf_out_freq 000F                       __size_of___aodiv 0148  
                     __size_of___fladd 030C                       __size_of___aomod 0124  
                     __size_of___fldiv 0288                       __size_of___awdiv 0084  
                     __size_of___flmul 032C                           ??_init_gpios 000D  
                     __size_of___flsub 0046                       __size_of___fltol 00BA  
                     __size_of___lldiv 0082                       __size_of___lodiv 00CE  
                     __size_of___llmod 0066                       __size_of___lomod 00AE  
                           ?_vfpfcnvrt 004B                  ?_usart_rx_irq_handler 0001  
                      ___aodiv@divisor 0015                               _adc_init 4F10  
                      ___aodiv@counter 001D                          handle_cmd@cmd 00EB  
                         ??_setPTT_LED 00D5           adf4351_calc_counters@integer 002C  
                             ___xxtofl 2F56                     _global_irq_handler 0008  
                     __size_of_readFWD 0026                       __size_of_pa_mute 005A  
                         ?_adc_voltage 0019                            _setLOCK_LED 42F8  
      __end_of_adf4351_calc_rcnt_block 186C           check_adf4351_lock@unlock_cnt 0093  
                   __end_of_freq_table 7C87                            _init_switch 4F4E  
                             __ptext10 2CBE                               __ptext11 42F8  
                             __ptext20 1FC4                               __ptext12 49C8  
                             __ptext21 39AC                               __ptext13 40C8  
                             __ptext30 21F2                               __ptext22 48A6  
                             __ptext14 4CD2                               __ptext31 4E2E  
                             __ptext23 4490                               __ptext15 4592  
                             __ptext40 4382                               __ptext32 4E9E  
                             __ptext24 0012                               __ptext16 4840  
                             __ptext41 1B08                               __ptext33 08DA  
                             __ptext25 4E7C                               __ptext17 372C  
                             __ptext50 468C                               __ptext42 4E56  
                             __ptext34 2F56                               __ptext26 4EDE  
                             __ptext18 15CA                               __ptext51 186C  
                             __ptext43 4700                               __ptext35 3C14  
                             __ptext27 4D56                               __ptext19 440C  
                             __ptext60 04F2                               __ptext52 27C0  
                             __ptext44 4A22                               __ptext36 4C06  
                             __ptext28 3E36                               __ptext61 2B1C  
                             __ptext53 0C38                               __ptext45 3428  
                             __ptext37 12BE                               __ptext29 4156  
                             __ptext70 4EF8                               __ptext62 3D88  
                             __ptext54 3540                               __ptext46 4A7A  
                             __ptext38 0F92                               __ptext71 4F5C  
                             __ptext63 3A7A                               __ptext55 3CCE  
                             __ptext47 3B48                               __ptext39 38DC  
                             __ptext80 2606                               __ptext72 4DFC  
                             __ptext64 3EE0                               __ptext56 2970  
                             __ptext48 47D8                               __ptext73 3304  
                             __ptext65 3096                               __ptext57 4612  
                             __ptext49 4BBC                               __ptext82 4B20  
                             __ptext74 2E0E                               __ptext66 1D90  
                             __ptext58 4EC0                               __ptext83 0000  
                             __ptext75 3804                               __ptext67 41E2  
                             __ptext59 4B70                               __ptext76 31D2  
                             __ptext68 4D14                               __ptext77 3F8A  
                             __ptext69 4D96                               __ptext78 4F10  
                             __ptext79 4AD0                   __end_of_adc_cfg_gpio 4B20  
                   __end_of_gpio_to_ch 27C0                            _read_switch 4512  
                  ?_global_irq_handler 0001                               _pa_alarm 4F26  
                     __size_of_strncmp 00AA                        adf4351_init@ctx 0019  
                      adf4351_init@pfd 001F                        adf4351_init@ref 001B  
                             alarm@fwd 00DE                          __size_of_main 01FA  
                        __size_of_dtoa 0234                               alarm@rev 00D8  
                   __end_of_init_gpios 04F2          KTY82_222_Adc2Temperature@Rptc 0055  
                        __size_of_stoa 013C                          __size_of_utoa 01A2  
                  adf4351_set_freq@ctx 00DD            check_adf4351_lock@last_lock 0094  
        adf4351_calc_vco_core_freq@div 0017          adf4351_calc_vco_core_freq@ctx 000D  
                  adf4351_set_mode@ctx 0027            __end_of_adf4351_write_latch 2B1C  
                            stoa@F1139 00ED                     __end_of_setPTT_LED 4156  
                             int$flags 0073                        _adf4351_default 3F8A  
                 ??_global_irq_handler 0008                               _vfprintf 4B70  
                            printf@fmt 00CB                       ___aomod@dividend 000D  
                          _PIN_SIO_CLK 7CA9                    adf4351_set_tune@icp 0029  
                  adf4351_set_tune@ctx 0027                            _PIN_VOLTAGE 7CA3  
                           _INTCONbits 000FF2                            ??_readKTY82 005D  
                         ?_check_usart 0001                           ??_update_led 00DD  
                          ??_pa_update 00DD             adf4351_calc_rcnt_block@div 00DB  
           adf4351_calc_rcnt_block@ctx 00D5                            ??_pa_unmute 00D8  
                alarm@old_revpwr_alarm 0071                      ?_readPowerVoltage 0025  
         __end_of_PIN_ALARM_OUTPUT_DEF 7CCA                 adf4351_set_mode@enable 0029  
                             intlevel2 0000                   adf4351_get_lock@lock 00DC  
               ?_adf4351_calc_counters 0022                        _irq_set_handler 4DCA  
                   ??_readPowerVoltage 0027               __end_of_PIN_ADF_FREQ_SEL 7C9F  
                       _PIN_ADF_CE_DEF 7D10                 __size_of_update_switch 0042  
                     ___lldiv@dividend 000D                         _PIN_ADF_LE_DEF 7D0B  
             __end_of_PIN_ADF_LOCK_DEF 7D1A                           ??_usart_getc 000F  
                         ??_usart_init 001E                           ??_usart_putc 000D  
                         ??_usart_tstc 000F                   _PIN_ADF_FREQ_SEL_DEF 7CFC  
                            strncmp@_l 000D                              strncmp@_r 000F  
                           _OSCCONbits 000FD3                             _PIN_ADF_CE 7CAD  
                           _PIN_ADF_LE 7CAF                      readPowerVoltage@v 0027  
           __end_of_adf4351_write_reg0 3D88             __end_of_adf4351_write_reg1 363C  
           __end_of_adf4351_write_reg2 0F92             __end_of_adf4351_write_reg3 2970  
           __end_of_adf4351_write_reg4 1B08             __end_of_adf4351_write_reg5 4700  
           __end_of_PIN_LED_CPU_OK_DEF 7CD9         adf4351_set_rfout_enable@enable 0027  
                             printf@ap 0065                     __end_of_update_led 372C  
               ??_usart_rx_irq_handler 0003                        ___aomod@divisor 0015  
                          ??_vfpfcnvrt 004F                               stoa@nuls 0017  
                      ___aomod@counter 001D     __end_of_adf4351_calc_vco_core_freq 3804  
           _adf4351_calc_vco_core_freq 372C                           _revpwr_alarm 008D  
                     ___lldiv@quotient 0015                         _overtemp_alarm 008E  
                             strncmp@l 0014                               strncmp@n 0011  
                             strncmp@r 0016                           ___aldiv@sign 0016  
                   __end_of_usart_getc 4D96                     __end_of_usart_init 47D8  
                   __end_of_usart_putc 4F68                     __end_of_usart_tstc 4EF8  
                        ___fladd@signs 0019                 __end_of_PIN_ADF_CE_DEF 7D15  
                         ___aodiv@sign 001E                 __end_of_PIN_ADF_LE_DEF 7D10  
          ??_KTY82_222_Adc2Temperature 0041         _KTY82_222_Adc2Temperature$3105 004D  
                         ___fladd@aexp 001A                           ___fladd@bexp 001B  
            usart_rx_irq_handler@udata 0001            __size_of_check_adf4351_lock 008C  
             __end_of_PIN_ALARM_OUTPUT 7C8F              usart_rx_irq_handler@wposn 0006  
              __end_of_adf4351_default 4030                            _power_blink 0096  
                         ___aomod@sign 001E               __end_of_adf4351_get_lock 468C  
