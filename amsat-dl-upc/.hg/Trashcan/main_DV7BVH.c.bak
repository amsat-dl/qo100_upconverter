/*
 * File:   main.c
 * Author: be
 *
 * Created on 23. April 2019, 16:56
 */

// PIC18F2520 Configuration Bit Settings

// CONFIG1H
#pragma config OSC = INTIO67    // Oscillator Selection bits (Internal oscillator block, port function on RA6 and RA7)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor disabled)
#pragma config IESO = OFF       // Internal/External Oscillator Switchover bit (Oscillator Switchover mode disabled)

// CONFIG2L
#pragma config PWRT = OFF       // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = SBORDIS  // Brown-out Reset Enable bits (Brown-out Reset enabled in hardware only (SBOREN is disabled))
#pragma config BORV = 3         // Brown Out Reset Voltage bits (Minimum setting)

// CONFIG2H
#pragma config WDT = OFF         // Watchdog Timer Enable bit (WDT enabled)
#pragma config WDTPS = 64        // Watchdog Timer Postscale Select bits (1:32768)

// CONFIG3H
#pragma config CCP2MX = PORTC   // CCP2 MUX bit (CCP2 input/output is multiplexed with RC1)
#pragma config PBADEN = OFF      // PORTB A/D Enable bit (PORTB<4:0> pins are configured as analog input channels on Reset)
#pragma config LPT1OSC = OFF    // Low-Power Timer1 Oscillator Enable bit (Timer1 configured for higher power operation)
#ifdef __RELEASE__
#pragma config MCLRE = OFF       // MCLR Pin Enable bit (MCLR pin disabled; RE3 input pin enabled)
#else
#pragma config MCLRE = ON       // MCLR Pin Enable bit (MCLR pin enabled; RE3 input pin disabled)
#endif //__RELEASE__

// CONFIG4L
#pragma config STVREN = ON      // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
#pragma config LVP = ON         // Single-Supply ICSP Enable bit (Single-Supply ICSP enabled)
#pragma config XINST = OFF       // Extended Instruction Set Enable bit (Instruction set extension and Indexed Addressing mode enabled)

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection bit (Block 0 (000800-001FFFh) not code-protected)
#pragma config CP1 = OFF        // Code Protection bit (Block 1 (002000-003FFFh) not code-protected)
#pragma config CP2 = OFF        // Code Protection bit (Block 2 (004000-005FFFh) not code-protected)
#pragma config CP3 = OFF        // Code Protection bit (Block 3 (006000-007FFFh) not code-protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot block (000000-0007FFh) not code-protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM not code-protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection bit (Block 0 (000800-001FFFh) not write-protected)
#pragma config WRT1 = OFF       // Write Protection bit (Block 1 (002000-003FFFh) not write-protected)
#pragma config WRT2 = OFF       // Write Protection bit (Block 2 (004000-005FFFh) not write-protected)
#pragma config WRT3 = OFF       // Write Protection bit (Block 3 (006000-007FFFh) not write-protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write-protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot block (000000-0007FFh) not write-protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write-protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (000800-001FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (002000-003FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection bit (Block 2 (004000-005FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection bit (Block 3 (006000-007FFFh) not protected from table reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot block (000000-0007FFh) not protected from table reads executed in other blocks)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.
#include <config.h>
#include <pinmap.h>
#include <app.h>

//forward declarations
static void init_gpios(void);

//
//main function
//
void main(void)
{
    //clock setup
    OSCTUNE = 0x80;
    OSCCON = 0xF2;
    
    //wait for clock to get stable
    while(!OSCCONbits.IOFS);

    //disable all interrupts
    PIE1 = 0;
    PIE2 = 0;

    init_gpios();

    app_init();

    //disable irq priority system
    RCONbits.IPEN = 0;
    //enable all peripheral interrupt sources
    INTCONbits.PEIE = 1;
    //enable all interrupt sources
    INTCONbits.GIE = 1;
    
    //main loop
    for(;;) {
        WDTCON=1;
        CLRWDT();
        app_event_loop();
        SLEEP(); //This is actually IDLE as of OSCCON:IDLEN configuration
    }
}

static void init_gpios(void)
{
    ADCON1bits.PCFG = 0xF;

    //
    //PORT A
    //
    //ADF4351 Lock Detect
    gpio_set_direction(PIN_ADF_LOCK, GPIO_DIR_IN);
    
    //ADF4351 Chip Enable
    gpio_set_output(PIN_ADF_CE, GPIO_LEVEL_LOW);
    gpio_set_direction(PIN_ADF_CE, GPIO_DIR_OUT);
    
    //ADF4351 Latch Enable
    gpio_set_output(PIN_ADF_LE, GPIO_LEVEL_LOW);
    gpio_set_direction(PIN_ADF_LE, GPIO_DIR_OUT);
    
    //Serial Data
    gpio_set_output(PIN_ADF_DATA, GPIO_LEVEL_LOW);
    gpio_set_direction(PIN_ADF_DATA, GPIO_DIR_OUT);
    
    //Serial Clock
    gpio_set_output(PIN_ADF_CLK, GPIO_LEVEL_LOW);
    gpio_set_direction(PIN_ADF_CLK, GPIO_DIR_OUT);

    //ADF4351 MUXout
    gpio_set_direction(PIN_ADF_MUXOUT, GPIO_DIR_IN);

    //LED high/low
    gpio_set_output(PIN_LED_HI_LOW, GPIO_LEVEL_LOW);
    gpio_set_direction(PIN_LED_HI_LOW, GPIO_DIR_OUT);

    //AD9553 Chip Select
    gpio_set_direction(PIN_AD9553_CS, GPIO_DIR_IN);


    //
    //PORT B
    //
    INTCON2bits.nRBPU = 0; //enable internal pull-up on Port B
    
    //LNB-QRG2
    gpio_set_direction(PIN_LNBQRG2, GPIO_DIR_IN);
    gpio_set_output(PIN_LNBQRG2, GPIO_LEVEL_HIGH); //pull-up
    
    //SJ3
    gpio_set_direction(PIN_SJ3, GPIO_DIR_IN);
    gpio_set_output(PIN_SJ3, GPIO_LEVEL_HIGH); //pull-up

    //SJ4
    gpio_set_direction(PIN_SJ4, GPIO_DIR_IN);
    gpio_set_output(PIN_SJ4, GPIO_LEVEL_HIGH); //pull-up

    //SJ5
    gpio_set_direction(PIN_SJ5, GPIO_DIR_IN);
    gpio_set_output(PIN_SJ5, GPIO_LEVEL_HIGH); //pull-up

    //SJ6
    gpio_set_direction(PIN_SJ6, GPIO_DIR_IN);
    gpio_set_output(PIN_SJ6, GPIO_LEVEL_HIGH); //pull-up

    //LNB-QRG1
    gpio_set_direction(PIN_LNBQRG1, GPIO_DIR_IN);
    gpio_set_output(PIN_LNBQRG1, GPIO_LEVEL_HIGH); //pull-up
    

    //
    //PORT C
    //
    //LED cpu ok
    gpio_set_output(PIN_LED_CPU_OK, GPIO_LEVEL_LOW);
    gpio_set_direction(PIN_LED_CPU_OK, GPIO_DIR_OUT);

    //LED lock
    gpio_set_output(PIN_LED_ADF_LOCK, GPIO_LEVEL_LOW);
    gpio_set_direction(PIN_LED_ADF_LOCK, GPIO_DIR_OUT);

    //LED lnb ok
    gpio_set_output(PIN_LED_LNB_GOOD, GPIO_LEVEL_LOW);
    gpio_set_direction(PIN_LED_LNB_GOOD, GPIO_DIR_OUT);

    //I2C scl
    gpio_set_direction(PIN_I2C_SCL, GPIO_DIR_IN);
    gpio_set_direction(PIN_I2C_SDA, GPIO_DIR_IN);

    //LNBH26 FAULT
    gpio_set_direction(PIN_LNB_FAULT, GPIO_DIR_IN);

    //Serial TX
    gpio_set_direction(PIN_USART_TX, GPIO_DIR_IN);

    //Serial RX
    gpio_set_direction(PIN_USART_RX, GPIO_DIR_IN);
}
