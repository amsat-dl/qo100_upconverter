#ifndef __DRIVER_GPIO_H__
#define __DRIVER_GPIO_H__

typedef enum {
	GPIO_DIR_IN  = 0,
	GPIO_DIR_OUT = 1,
} gpio_direction;

typedef enum {
	GPIO_LEVEL_LOW = 0,
	GPIO_LEVEL_HIGH = 1,
} gpio_level;

//gpio-pin-definition
typedef struct gpio_pin_def {
	volatile unsigned char *pPORT;
    volatile unsigned char *pTRIS;
	u8                      mask;   //bit mask for registers
} gpio_pin_def;

//gpio-pin-reference
typedef const gpio_pin_def *gpio_pin;

//helper macros
#define GPIO_DEFINE_PIN(name, port, pin) \
	static const gpio_pin_def name##_DEF = {&PORT##port, &TRIS##port, (1<<pin)}; \
	static const gpio_pin     name       = &name##_DEF;

//gpio functions
static inline void gpio_set_direction(gpio_pin pin, u8 out) {
	if(out) *(pin->pTRIS) &= ~pin->mask;
	else    *(pin->pTRIS) |= pin->mask;
}
static inline void gpio_set_output(gpio_pin pin, u8 out) {
	if(out) *(pin->pPORT) |=  pin->mask;
	else    *(pin->pPORT) &= ~pin->mask;
}
static inline u8 gpio_get_input(gpio_pin pin) {
	return (*(pin->pPORT) & pin->mask) != 0;
}

#endif // __DRIVER_GPIO_H__
