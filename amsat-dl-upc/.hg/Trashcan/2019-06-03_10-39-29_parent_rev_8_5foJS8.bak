diff --git a/src/driver/lnb.c b/src/driver/lnb.c
--- a/src/driver/lnb.c
+++ b/src/driver/lnb.c
@@ -7,7 +7,9 @@
 #define LNB_REG_DATA3 0x04
 #define LNB_REG_DATA4 0x05
 
+static int lnb_do_configure(i2c_dev i2c, u8 addr);
+
 int lnb_configure(i2c_dev i2c, u8 addr)
 {
     int res = i2c_probe_addr(i2c, addr);
     if(res == 0) {
@@ -10,13 +12,14 @@
 int lnb_configure(i2c_dev i2c, u8 addr)
 {
     int res = i2c_probe_addr(i2c, addr);
     if(res == 0) {
-        //14V 0x04
-        //18V 0x08
-        res = smbus8_write_byte(i2c, addr, LNB_REG_DATA1, 0x84);
+        res = lnb_do_configure(i2c, addr);
+        if(res != 0) {
+            printf("Failed to configure LNB Chip (%i)!\n", res);
+        }
     } else {
         printf("LNB Chip not found!\n");
     }
     
     return res;
 }
@@ -17,6 +20,33 @@
     } else {
         printf("LNB Chip not found!\n");
     }
     
     return res;
 }
+
+static int lnb_do_configure(i2c_dev i2c, u8 addr)
+{
+    u8 value;
+    int res;
+
+    //14V 0x04
+    //18V 0x08
+    res = smbus8_write_byte(i2c, addr, LNB_REG_DATA1, 0x84);
+    printf("a %i\n", res);
+    if(res != 0) return res;
+    res = smbus8_read_byte(i2c, addr, LNB_REG_DATA4, &value);
+    printf("b %i\n", res);
+    if(res != 0) return res;
+    value |= (1<<6) | (1<<3);
+    res = smbus8_write_byte(i2c, addr, LNB_REG_DATA4, value);
+    printf("c %i\n", res);
+    if(res != 0) return res;
+    res = smbus8_read_byte(i2c, addr, LNB_REG_DATA3, &value);
+    printf("d %i\n", res);
+    if(res != 0) return res;
+    value |= (1<<2) | (1<<6);
+    res = smbus8_write_byte(i2c, addr, LNB_REG_DATA3, value);
+    printf("e %i\n", res);
+    
+    return res;
+}
\ No newline at end of file
diff --git a/src/driver/i2c_native.c b/src/driver/i2c_native.c
--- a/src/driver/i2c_native.c
+++ b/src/driver/i2c_native.c
@@ -6,7 +6,8 @@
  */
 #include <config.h>
 #include <string.h>
+#include <stdio.h>
 #include "i2c_native.h"
 
 //config
 #define I2C_TIMEOUT_INT		 2500 //us
@@ -9,8 +10,8 @@
 #include "i2c_native.h"
 
 //config
 #define I2C_TIMEOUT_INT		 2500 //us
-#define I2C_TIMEOUT_BUSFREE	10000 //us
+#define I2C_TIMEOUT_BUSFREE	100000 //us
 
 //prototypes
 static void i2c_reset(i2c_data_native *ctx);
@@ -66,6 +67,7 @@
 		__delay_us(1);
 		if(--timeout == 0) {
 			//-> timeout
+            printf("!");
 			return ERROR_TIMEOUT;
 		}
 	}
@@ -82,6 +84,7 @@
 		__delay_us(1);
 		if(--timeout == 0) {
 			//-> timeout
+            printf("err %i %i", PIR1bits.SSPIF, SSPCON1bits.WCOL);
 			return ERROR_TIMEOUT;
 		}
 	}
@@ -139,6 +142,7 @@
 	//wait until stop-codition is generated
 	if(i2c_wait_int(I2C_TIMEOUT_BUSFREE)) {
 		//error -> reset bus
+        printf("-");
 		i2c_reset(ctx);
 	}
 }
