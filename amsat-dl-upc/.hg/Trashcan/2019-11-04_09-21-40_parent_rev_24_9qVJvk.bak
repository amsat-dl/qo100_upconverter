diff --git a/nbproject/configurations.xml b/nbproject/configurations.xml
--- a/nbproject/configurations.xml
+++ b/nbproject/configurations.xml
@@ -5,7 +5,4 @@
                    displayName="Header Files"
                    projectFiles="true">
       <logicalFolder name="driver" displayName="driver" projectFiles="true">
-        <logicalFolder name="base" displayName="base" projectFiles="true">
-          <itemPath>src/driver/base/i2c.h</itemPath>
-        </logicalFolder>
         <itemPath>src/driver/adf4351.h</itemPath>
@@ -11,5 +8,4 @@
         <itemPath>src/driver/adf4351.h</itemPath>
-        <itemPath>src/driver/i2c_native.h</itemPath>
         <itemPath>src/driver/usart.h</itemPath>
         <itemPath>src/driver/irq.h</itemPath>
         <itemPath>src/driver/gpio.h</itemPath>
@@ -31,7 +27,4 @@
                    displayName="Source Files"
                    projectFiles="true">
       <logicalFolder name="driver" displayName="driver" projectFiles="true">
-        <logicalFolder name="base" displayName="base" projectFiles="true">
-          <itemPath>src/driver/base/i2c.c</itemPath>
-        </logicalFolder>
         <itemPath>src/driver/adf4351.c</itemPath>
@@ -37,5 +30,4 @@
         <itemPath>src/driver/adf4351.c</itemPath>
-        <itemPath>src/driver/i2c_native.c</itemPath>
         <itemPath>src/driver/usart.c</itemPath>
         <itemPath>src/driver/irq.c</itemPath>
       </logicalFolder>
@@ -212,9 +204,6 @@
         <property key="programoptions.uselvpprogramming" value="false"/>
         <property key="voltagevalue" value="5.0"/>
       </PICkit3PlatformTool>
-      <XC8-CO>
-        <property key="coverage-enable" value=""/>
-      </XC8-CO>
       <XC8-config-global>
         <property key="advanced-elf" value="true"/>
         <property key="gcc-opt-driver-new" value="true"/>
@@ -389,9 +378,6 @@
         <property key="programoptions.uselvpprogramming" value="false"/>
         <property key="voltagevalue" value="5.0"/>
       </PICkit3PlatformTool>
-      <XC8-CO>
-        <property key="coverage-enable" value=""/>
-      </XC8-CO>
       <XC8-config-global>
         <property key="advanced-elf" value="true"/>
         <property key="gcc-opt-driver-new" value="true"/>
diff --git a/src/driver/base/i2c.c b/src/driver/base/i2c.c
deleted file mode 100755
--- a/src/driver/base/i2c.c
+++ /dev/null
@@ -1,370 +0,0 @@
-#include <config.h>
-#include "i2c.h"
-
-//
-//I2C operations
-//
-
-int i2c_setbaud(i2c_dev dev, int baud)
-{
-	if(!dev) return ERROR_NODEV;
-	if(!((i2c_driver_ops*)dev)->setbaud) return 0;
-	return ((i2c_driver_ops*)dev)->setbaud(dev, baud);
-}
-
-int i2c_transfer(i2c_dev dev, i2c_msg *msg, int num)
-{
-	if(!dev) return ERROR_NODEV;
-	return ((i2c_driver_ops*)dev)->transfer(dev, msg, num);
-}
-
-int i2c_probe_addr(i2c_dev dev, u8 addr)
-{
-	i2c_msg msg;
-	msg.addr  = addr;
-	msg.flags = I2C_STARTCOND | I2C_STOPCOND;
-	msg.len   = 0;
-	msg.data  = NULL;
-	return i2c_transfer(dev, &msg, 1);
-}
-
-int i2c_read_byte(i2c_dev dev, u8 addr, u8 *data)
-{
-	return i2c_read_data(dev, addr, data, 1);
-}
-
-int i2c_write_byte(i2c_dev dev, u8 addr, u8 data)
-{
-	return i2c_write_data(dev, addr, &data, 1);
-}
-
-int i2c_read_data(i2c_dev dev, u8 addr, u8 *data, int len)
-{
-	i2c_msg msg;
-	msg.addr  = addr;
-	msg.flags = I2C_STARTCOND | I2C_STOPCOND | I2C_READ;
-	msg.len   = len;
-	msg.data  = data;
-	return i2c_transfer(dev, &msg, 1);
-}
-
-int i2c_write_data(i2c_dev dev, u8 addr, const u8 *data, int len)
-{
-	i2c_msg msg;
-	msg.addr  = addr;
-	msg.flags = I2C_STARTCOND | I2C_STOPCOND;
-	msg.len   = len;
-	msg.data  = (u8*)data;
-	return i2c_transfer(dev, &msg, 1);
-}
-
-
-//
-//SMBUS wrapper
-//
-int smbus8_write_byte(i2c_dev dev, u8 addr, u8 reg, u8  data)
-{
-	i2c_msg msg;
-	u8 tmp[2];
-
-	msg.addr  = addr;
-	msg.flags = I2C_STARTCOND | I2C_STOPCOND;
-	msg.len   = 2;
-	msg.data  = tmp;
-
-	tmp[0] = reg;
-	tmp[1] = data;
-
-	return i2c_transfer(dev, &msg, 1);
-}
-
-int smbus8_write_data(i2c_dev dev, u8 addr, u8 reg, const u8* data, int len)
-{
-	i2c_msg msg[2];
-
-	msg[0].addr  = addr;
-	msg[0].flags = I2C_STARTCOND;
-	msg[0].len   = 1;
-	msg[0].data  = &reg;
-
-	msg[1].addr  = addr;
-	msg[1].flags = I2C_STOPCOND;
-	msg[1].len   = len;
-	msg[1].data  = (u8*)data;
-
-	return i2c_transfer(dev, msg, 2);
-}
-
-int smbus8_write_short(i2c_dev dev, u8 addr, u8 reg, u16 data)
-{
-	i2c_msg msg;
-	u8 tmp[4];
-
-	/* ALIGNMENT! */
-
-	msg.addr  = addr;
-	msg.flags = I2C_STARTCOND | I2C_STOPCOND;
-	msg.len   = 3;
-	msg.data  = tmp + 1;
-
-	tmp[1] = reg;
-	* (u16 *) (&tmp[2]) = data;
-
-	return i2c_transfer(dev, &msg, 1);
-}
-
-int smbus8_read_byte(i2c_dev dev, u8 addr, u8 reg, u8 *data)
-{
-	i2c_msg msg[2];
-
-	msg[0].addr  = addr;
-	msg[0].flags = I2C_STARTCOND;
-	msg[0].len   = 1;
-	msg[0].data  = &reg;
-
-	msg[1].addr  = addr;
-	msg[1].flags = I2C_STARTCOND | I2C_STOPCOND | I2C_READ;
-	msg[1].len   = 1;
-	msg[1].data  = data;
-
-	return i2c_transfer(dev, msg, 2);
-}
-
-int smbus8_read_data(i2c_dev dev, u8 addr, u8 reg, u8 *data, int len)
-{
-	i2c_msg msg[2];
-
-	msg[0].addr  = addr;
-	msg[0].flags = I2C_STARTCOND;
-	msg[0].len   = 1;
-	msg[0].data  = &reg;
-
-	msg[1].addr  = addr;
-	msg[1].flags = I2C_STARTCOND | I2C_STOPCOND | I2C_READ;
-	msg[1].len   = len;
-	msg[1].data  = data;
-
-	return i2c_transfer(dev, msg, 2);
-}
-
-int smbus8_read_short(i2c_dev dev, u8 addr, u8 reg, u16*data)
-{
-	i2c_msg msg[2];
-
-	msg[0].addr  = addr;
-	msg[0].flags = I2C_STARTCOND;
-	msg[0].len   = 1;
-	msg[0].data  = &reg;
-
-	msg[1].addr  = addr;
-	msg[1].flags = I2C_STARTCOND | I2C_STOPCOND | I2C_READ;
-	msg[1].len   = 2;
-	msg[1].data  = data;
-
-	return i2c_transfer(dev, msg, 2);
-}
-
-int smbus8_write_regset(i2c_dev dev, u8 addr, const smbus8_regset *regset)
-{
-	i2c_msg msg;
-	u8 tmp[2];
-
-	msg.addr  = addr;
-	msg.flags = I2C_STARTCOND | I2C_STOPCOND;
-	msg.len   = 2;
-	msg.data  = tmp;
-
-	while ((regset->reg != 0xFF) || (regset->val != 0xFF)) {
-		int res;
-
-		tmp[0] = regset->reg;
-		tmp[1] = regset->val;
-		regset++;
-
-		if (0 != (res = i2c_transfer(dev, &msg, 1)))
-			return res;
-
-	}
-
-	return 0;
-}
-
-int smbus16_write_data(i2c_dev dev, u8 addr, u16 reg, const u8 *data, int len)
-{
-        i2c_msg msg[2];
-        u8 ger[2];
-
-        ger[0] = (reg>>8) & 0x00FF;
-        ger[1] = reg & 0x00FF;
-
-        msg[0].addr  = addr;
-        msg[0].flags = I2C_STARTCOND;
-        msg[0].len   = 2;
-        msg[0].data  = ger;
-
-        msg[1].addr  = addr;
-        msg[1].flags = I2C_STOPCOND;
-        msg[1].len   = len;
-        msg[1].data  = (u8*)data;
-
-        return i2c_transfer(dev, msg, 2);
-}
-
-int smbus16_write_data_raw(i2c_dev dev, u8 addr, u16 reg, const u8 *data, int len)
-{
-        i2c_msg msg[2];
-        u8 ger[2];
-
-        ger[0] = (reg>>8) & 0x00FF;
-        ger[1] = reg & 0x00FF;
-
-        msg[0].addr  = addr;
-        msg[0].flags = I2C_STARTCOND;
-        msg[0].len   = 2;
-        msg[0].data  = ger;
-
-        msg[1].addr  = addr;
-        msg[1].flags = I2C_STOPCOND;
-        msg[1].len   = len;
-        msg[1].data  = (u8*)data;
-
-        return i2c_transfer(dev, msg, 2);
-}
-
-int smbus16_write_byte(i2c_dev dev, u8 addr, u16 reg, u8 data)
-{
-	i2c_msg msg;
-	u8 tmp[3];
-
-	msg.addr  = addr;
-	msg.flags = I2C_STARTCOND | I2C_STOPCOND;
-	msg.len   = 3;
-	msg.data  = tmp;
-
-	tmp[0] = (reg>>8) & 0xFF;
-	tmp[1] = (reg>>0) & 0xFF;
-	tmp[2] = data;
-
-	return i2c_transfer(dev, &msg, 1);
-}
-
-int smbus16_read_byte(i2c_dev dev, u8 addr, u16 reg, u8 *data)
-{
-	i2c_msg msg[2];
-
-	msg[0].addr  = addr;
-	msg[0].flags = I2C_STARTCOND;
-	msg[0].len   = 2;
-	msg[0].data  = &reg;
-
-	msg[1].addr  = addr;
-	msg[1].flags = I2C_STARTCOND | I2C_STOPCOND | I2C_READ;
-	msg[1].len   = 1;
-	msg[1].data  = data;
-
-	return i2c_transfer(dev, msg, 2);
-}
-
-int smbus16_read_data(i2c_dev dev, u8 addr, u16 reg, u8 *data, int len)
-{
-        i2c_msg msg[2];
-        u8 ger[2];
-
-        ger[0] = (reg>>8) & 0x00FF;
-        ger[1] = reg & 0x00FF;
-
-        msg[0].addr  = addr;
-        msg[0].flags = I2C_STARTCOND | I2C_STOPCOND;
-        msg[0].len   = 2;
-        msg[0].data  = ger;
-
-        msg[1].addr  = addr;
-        msg[1].flags = I2C_STARTCOND | I2C_STOPCOND | I2C_READ;
-        msg[1].len   = len;
-        msg[1].data  = data;
-
-        return i2c_transfer(dev, msg, 2);
-}
-
-int smbus16_read_data_raw(i2c_dev dev, u8 addr, u16 reg, u8 *data, int len)
-{
-        i2c_msg msg[2];
-        u8 ger[2];
-
-        ger[0] = (reg>>8) & 0x00FF;
-        ger[1] = reg & 0x00FF;
-
-        msg[0].addr  = addr;
-        msg[0].flags = I2C_STARTCOND;
-        msg[0].len   = 2;
-        msg[0].data  = ger;
-
-        msg[1].addr  = addr;
-        msg[1].flags = I2C_STARTCOND | I2C_STOPCOND | I2C_READ;
-        msg[1].len   = len;
-        msg[1].data  = data;
-
-        return i2c_transfer(dev, msg, 2);
-}
-
-
-
-int smbus16_write_short(i2c_dev dev, u8 addr, u16 reg, u16 data)
-{
-	i2c_msg msg;
-    u8 tmp[3];
-
-	/* ALIGNMENT! */
-
-	msg.addr  = addr;
-	msg.flags = I2C_STARTCOND | I2C_STOPCOND;
-	msg.len   = 4;
-	msg.data  = tmp;
-
-	* (u16 *) (&tmp[0]) = reg;
-	* (u16 *) (&tmp[2]) = data;
-
-	return i2c_transfer(dev, &msg, 1);
-}
-
-int smbus16_read_short(i2c_dev dev, u8 addr, u16 reg, u16*data)
-{
-	i2c_msg msg[2];
-
-	msg[0].addr  = addr;
-	msg[0].flags = I2C_STARTCOND;
-	msg[0].len   = 2;
-	msg[0].data  = &reg;
-
-	msg[1].addr  = addr;
-	msg[1].flags = I2C_STARTCOND | I2C_STOPCOND | I2C_READ;
-	msg[1].len   = 2;
-	msg[1].data  = data;
-
-	return i2c_transfer(dev, msg, 2);
-}
-
-int smbus16_write_regset(i2c_dev dev, u8 addr, const smbus16_regset *regset)
-{
-	i2c_msg msg;
-	u8 tmp[4];
-
-	msg.addr  = addr;
-	msg.flags = I2C_STARTCOND | I2C_STOPCOND;
-	msg.len   = 4;
-	msg.data  = tmp;
-
-	while ((regset->reg != 0xFFFF) || (regset->val != 0xFFFF)) {
-		int res;
-
-		* (u16 *) (&tmp[0]) = regset->reg;
-		* (u16 *) (&tmp[2]) = regset->val;
-		regset++;
-
-		if (0 != (res = i2c_transfer(dev, &msg, 1)))
-			return res;
-
-	}
-
-	return 0;
-}
diff --git a/src/driver/base/i2c.h b/src/driver/base/i2c.h
deleted file mode 100755
--- a/src/driver/base/i2c.h
+++ /dev/null
@@ -1,72 +0,0 @@
-#ifndef __BASE_I2C_H__
-#define __BASE_I2C_H__
-
-#include <stdlib.h>
-
-//
-//I2C abstraction layer
-//
-
-//I2C flags
-#define I2C_READ			(1<<0)	//read data
-#define I2C_STARTCOND		(1<<1)	//generate start-condition
-#define I2C_STOPCOND			(1<<2)	//generate stop-condition
-#define I2C_IGNORE_NAK		(1<<3)	//ignore NAK
-
-//I2C structures
-typedef struct i2c_msg {
-	u16   addr;		//slave address
-	u8    flags;	//flags
-	u16   len;		//message length
-	void* data;		//data buffer
-} i2c_msg;
-
-//smbus8 regset
-typedef struct {
-	u8 reg;
-	u8 val;
-} smbus8_regset;
-
-//smbus16 regset
-typedef struct {
-	u16 reg;
-	u16 val;
-} smbus16_regset;
-
-//dummy-type for I2C-device
-DECLARE_HANDLE(i2c_dev);
-
-//I2C driver ops
-typedef struct i2c_driver_ops {
-	int (*transfer)(i2c_dev dev, i2c_msg *msg, int num);
-    int (*setbaud)(i2c_dev dev, int baud);
-} i2c_driver_ops;
-
-//i2c operations
-extern int i2c_setbaud   (i2c_dev dev, int baud);
-extern int i2c_transfer  (i2c_dev dev, i2c_msg *msg, int num);
-extern int i2c_probe_addr(i2c_dev dev, u8 addr);
-extern int i2c_read_byte (i2c_dev dev, u8 addr, u8 *data);
-extern int i2c_write_byte(i2c_dev dev, u8 addr, u8  data);
-extern int i2c_read_data (i2c_dev dev, u8 addr, u8 *data, int len);
-extern int i2c_write_data(i2c_dev dev, u8 addr, const u8 *data, int len);
-
-//SMBUS wrapper
-extern int smbus8_write_byte   (i2c_dev dev, u8 addr, u8 reg, u8  data);
-extern int smbus8_write_data     (i2c_dev dev, u8 addr, u8 reg, const u8 *data, int len);
-extern int smbus8_read_byte    (i2c_dev dev, u8 addr, u8 reg, u8 *data);
-extern int smbus8_read_data      (i2c_dev dev, u8 addr, u8 reg, u8 *data, int len);
-extern int smbus8_write_short  (i2c_dev dev, u8 addr, u8 reg, u16 data);
-extern int smbus8_read_short   (i2c_dev dev, u8 addr, u8 reg, u16*data);
-extern int smbus8_write_regset (i2c_dev dev, u8 addr, const smbus8_regset *regset);
-extern int smbus16_write_data    (i2c_dev dev, u8 addr, u16 reg, const u8 *data, int len);
-extern int smbus16_write_data_raw(i2c_dev dev, u8 addr, u16 reg, const u8 *data, int len);
-extern int smbus16_read_data     (i2c_dev dev, u8 addr, u16 reg, u8 *data, int len);
-extern int smbus16_read_data_raw (i2c_dev dev, u8 addr, u16 reg, u8 *data, int len);
-extern int smbus16_write_byte  (i2c_dev dev, u8 addr, u16 reg, u8  data);
-extern int smbus16_read_byte   (i2c_dev dev, u8 addr, u16 reg, u8 *data);
-extern int smbus16_write_short (i2c_dev dev, u8 addr, u16 reg, u16 data);
-extern int smbus16_read_short  (i2c_dev dev, u8 addr, u16 reg, u16*data);
-extern int smbus16_write_regset(i2c_dev dev, u8 addr, const smbus16_regset *regset);
-
-#endif //__BASE_I2C_H__
