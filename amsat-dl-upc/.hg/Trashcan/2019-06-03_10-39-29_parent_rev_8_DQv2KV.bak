diff --git a/nbproject/configurations.xml b/nbproject/configurations.xml
--- a/nbproject/configurations.xml
+++ b/nbproject/configurations.xml
@@ -14,6 +14,7 @@
         <itemPath>src/driver/usart.h</itemPath>
         <itemPath>src/driver/irq.h</itemPath>
         <itemPath>src/driver/gpio.h</itemPath>
+        <itemPath>src/driver/ad9553.h</itemPath>
       </logicalFolder>
       <logicalFolder name="mtcrt" displayName="mtcrt" projectFiles="true">
         <itemPath>src/mtcrt/types.h</itemPath>
@@ -40,5 +41,6 @@
         <itemPath>src/driver/lnb.c</itemPath>
         <itemPath>src/driver/usart.c</itemPath>
         <itemPath>src/driver/irq.c</itemPath>
+        <itemPath>src/driver/ad9553.c</itemPath>
       </logicalFolder>
       <itemPath>src/main.c</itemPath>
@@ -43,5 +45,6 @@
       </logicalFolder>
       <itemPath>src/main.c</itemPath>
+      <itemPath>src/pinmap.c</itemPath>
     </logicalFolder>
     <logicalFolder name="ExternalFiles"
                    displayName="Important Files"
diff --git a/src/driver/ad9553.c b/src/driver/ad9553.c
new file mode 100644
--- /dev/null
+++ b/src/driver/ad9553.c
@@ -0,0 +1,111 @@
+#include <config.h>
+#include <pinmap.h>
+#include <stdio.h>
+
+#include "ad9553.h"
+
+//internal helper
+static void write_data(u16 addr, const u8 *data, int len);
+static void read_data(u16 addr, u8 *data, int len);
+static void write_byte(u8 data);
+static void read_byte(u8 *data);
+
+void ad9553_init(void)
+{
+    u8 data[10];
+    
+    read_data(0x00, data, 10);
+    
+    for(int i=0;i<10;i++) {
+        printf("0x%02X: 0x%02X\n", i, data[i]);
+    }
+}
+
+static void write_data(u16 addr, const u8 *data, int len)
+{
+    u16 frame = ((u16)len<<13) | (addr&0x1FFF) | 3;
+    
+    //set chip select
+    gpio_set_lvl_low(PIN_AD9553_CS);
+    __delay_us(1);
+    
+    //write start frame
+    write_byte((frame>>0)&0xFF);
+    write_byte((frame>>8)&0xFF);
+
+    //write data
+    while(len--) {
+        write_byte(*data++);
+    }
+
+    //release chip select
+    gpio_set_lvl_high(PIN_AD9553_CS);
+}
+
+static void read_data(u16 addr, u8 *data, int len)
+{
+    u16 frame = (1u<<15) | ((u16)len<<13) | (addr&0x1FFF) | 3;
+    
+    //set chip select
+    gpio_set_lvl_low(PIN_AD9553_CS);
+    __delay_us(1);
+
+    //write start frame
+    write_byte((frame>>0)&0xFF);
+    write_byte((frame>>8)&0xFF);
+
+    //read data
+    while(len--) {
+        read_byte(data++);
+    }
+
+    //release chip select
+    gpio_set_lvl_high(PIN_AD9553_CS);
+}
+
+static void write_byte(u8 data)
+{   
+    u8 mask = 0x80;
+
+    gpio_set_dir_out(PIN_SIO_DATA);
+    
+    gpio_set_lvl_low(PIN_SIO_CLK);
+    __delay_us(1);
+	//write 8bit
+    while(mask) {
+        if(data&mask) {
+            gpio_set_lvl_high(PIN_SIO_DATA);
+        } else {
+            gpio_set_lvl_low(PIN_SIO_DATA);
+        }
+        __delay_us(1);
+        gpio_set_lvl_high(PIN_SIO_CLK);
+        __delay_us(1);
+        gpio_set_lvl_low(PIN_SIO_CLK);
+        __delay_us(1);
+        //next bit
+        mask >>= 1;
+    }
+    
+    gpio_set_dir_in(PIN_SIO_DATA);
+}
+
+static void read_byte(u8 *data)
+{   
+    //printf("0x%08lX\n", value);
+    u8 mask = 0x80;
+
+	//read 8bit
+    while(mask) {
+        gpio_set_lvl_high(PIN_SIO_CLK);
+        __delay_us(1);
+        if(gpio_get_input(PIN_SIO_DATA)) {
+            *data |= mask;
+        }
+        __delay_us(1);
+        gpio_set_lvl_low(PIN_SIO_CLK);
+        __delay_us(1);
+        //next bit
+        mask >>= 1;
+    }
+}
diff --git a/src/driver/ad9553.h b/src/driver/ad9553.h
new file mode 100644
--- /dev/null
+++ b/src/driver/ad9553.h
@@ -0,0 +1,7 @@
+#ifndef __AD9553_H__
+#define __AD9553_H__
+
+extern void ad9553_init(void);
+extern void ad9553_set_freq(u32 freq);
+
+#endif //__AD9553_H__
diff --git a/src/driver/i2c_native.c b/src/driver/i2c_native.c
--- a/src/driver/i2c_native.c
+++ b/src/driver/i2c_native.c
@@ -6,7 +6,8 @@
  */
 #include <config.h>
 #include <string.h>
+#include <stdio.h>
 #include "i2c_native.h"
 
 //config
 #define I2C_TIMEOUT_INT		 2500 //us
@@ -9,8 +10,8 @@
 #include "i2c_native.h"
 
 //config
 #define I2C_TIMEOUT_INT		 2500 //us
-#define I2C_TIMEOUT_BUSFREE	10000 //us
+#define I2C_TIMEOUT_BUSFREE	100000 //us
 
 //prototypes
 static void i2c_reset(i2c_data_native *ctx);
@@ -66,6 +67,7 @@
 		__delay_us(1);
 		if(--timeout == 0) {
 			//-> timeout
+            printf("!");
 			return ERROR_TIMEOUT;
 		}
 	}
@@ -82,6 +84,7 @@
 		__delay_us(1);
 		if(--timeout == 0) {
 			//-> timeout
+            printf("err %i %i", PIR1bits.SSPIF, SSPCON1bits.WCOL);
 			return ERROR_TIMEOUT;
 		}
 	}
@@ -139,6 +142,7 @@
 	//wait until stop-codition is generated
 	if(i2c_wait_int(I2C_TIMEOUT_BUSFREE)) {
 		//error -> reset bus
+        printf("-");
 		i2c_reset(ctx);
 	}
 }
diff --git a/src/driver/lnb.c b/src/driver/lnb.c
--- a/src/driver/lnb.c
+++ b/src/driver/lnb.c
@@ -7,7 +7,9 @@
 #define LNB_REG_DATA3 0x04
 #define LNB_REG_DATA4 0x05
 
+static int lnb_do_configure(i2c_dev i2c, u8 addr);
+
 int lnb_configure(i2c_dev i2c, u8 addr)
 {
     int res = i2c_probe_addr(i2c, addr);
     if(res == 0) {
@@ -10,13 +12,14 @@
 int lnb_configure(i2c_dev i2c, u8 addr)
 {
     int res = i2c_probe_addr(i2c, addr);
     if(res == 0) {
-        //14V 0x04
-        //18V 0x08
-        res = smbus8_write_byte(i2c, addr, LNB_REG_DATA1, 0x84);
+        res = lnb_do_configure(i2c, addr);
+        if(res != 0) {
+            printf("Failed to configure LNB Chip (%i)!\n", res);
+        }
     } else {
         printf("LNB Chip not found!\n");
     }
     
     return res;
 }
@@ -17,6 +20,33 @@
     } else {
         printf("LNB Chip not found!\n");
     }
     
     return res;
 }
+
+static int lnb_do_configure(i2c_dev i2c, u8 addr)
+{
+    u8 value;
+    int res;
+
+    //14V 0x04
+    //18V 0x08
+    res = smbus8_write_byte(i2c, addr, LNB_REG_DATA1, 0x84);
+    printf("a %i\n", res);
+    if(res != 0) return res;
+    res = smbus8_read_byte(i2c, addr, LNB_REG_DATA4, &value);
+    printf("b %i\n", res);
+    if(res != 0) return res;
+    value |= (1<<6) | (1<<3);
+    res = smbus8_write_byte(i2c, addr, LNB_REG_DATA4, value);
+    printf("c %i\n", res);
+    if(res != 0) return res;
+    res = smbus8_read_byte(i2c, addr, LNB_REG_DATA3, &value);
+    printf("d %i\n", res);
+    if(res != 0) return res;
+    value |= (1<<2) | (1<<6);
+    res = smbus8_write_byte(i2c, addr, LNB_REG_DATA3, value);
+    printf("e %i\n", res);
+    
+    return res;
+}
\ No newline at end of file
diff -r 58299fa26b5f+ -r 58299fa26b5f src/main.c
--- a/src/main.c	Di Mai 14 17:41:18 2019 +0200
+++ b/src/main.c	Mo Jun 03 10:43:18 2019 +0200
@@ -73,6 +73,7 @@
 #include <stdio.h>
 #include <string.h>
 #include <driver/adf4351.h>
+#include <driver/ad9553.h>
 #include <driver/i2c_native.h>
 #include <driver/lnb.h>
 #include <driver/usart.h>
@@ -81,5 +81,8 @@
 //local variables
 static u8 g_pending_cmd = 0xFF;
 static u8 g_applied_cmd = 0xFF;
+static u8 g_pending_qrg = 0xFF;
+static u8 g_applied_qrg = 0xFF;
+static BOOL g_lnb_configured = FALSE;
 static adf4351_ctx g_adf4351;
 static i2c_data_native g_i2c_bus;
@@ -95,6 +99,10 @@
     711000,  689000,  669000,  595000, 594000,
 };
 
+static const u32 qrg_freq_table[4] = {
+    26000000, 27000000, 28000000, 29000000
+};
+
 //local functions declarations
 static void check_usart(void);
 
@@ -103,6 +106,9 @@
 static void update_switch(void);
 static void update_led(void);
 static void handle_cmd(u8 cmd);
+static u8 read_qrg(void);
+static void handle_qrg(u8 qrg);
+static void update_qrg(void);
 static void init_gpios(void);
 
 
@@ -111,8 +117,6 @@
 //
 void main(void)
 {
-    int lnb_good;
-
     //clock setup
     OSCTUNE = 0x80;
     OSCCON = 0xF2;
@@ -132,5 +136,5 @@
     printf("\nAMSAT DL SDC %s\n\n", HG_DISPLAY);
     
     i2c_native_init(&g_i2c_bus, 100000);
-    lnb_good = lnb_configure((i2c_dev)&g_i2c_bus, I2C_ADDR_LNBH26);
+    g_lnb_configured = (lnb_configure((i2c_dev)&g_i2c_bus, I2C_ADDR_LNBH26) == 0);
     //set lnb good led
@@ -136,6 +140,10 @@
     //set lnb good led
-    gpio_set_output(PIN_LED_LNB_GOOD, (lnb_good==0)?0:1);
-    adf4351_init(&g_adf4351, 40000ULL, 40000ULL);
+    if(gpio_get_input(PIN_LNB_FAULT) && g_lnb_configured) {
+        gpio_set_lvl_low(PIN_LED_LNB_GOOD);
+    } else {
+        gpio_set_lvl_high(PIN_LED_LNB_GOOD);
+    }
+    adf4351_init(&g_adf4351, 40000ULL, 10000ULL);
     adf4351_set_tune(&g_adf4351, g_ipc, g_pout, TRUE);
     init_switch();
     adf4351_set_mode(&g_adf4351, TRUE);
@@ -139,6 +147,7 @@
     adf4351_set_tune(&g_adf4351, g_ipc, g_pout, TRUE);
     init_switch();
     adf4351_set_mode(&g_adf4351, TRUE);
+    ad9553_init();
 
     //disable irq priority system
     RCONbits.IPEN = 0;
@@ -156,6 +165,7 @@
         check_usart();
         update_switch();
         update_led();
+        update_qrg();
         SLEEP(); //This is actually IDLE as of OSCCON:IDLEN configuration
     }
 }
@@ -279,6 +296,37 @@
     }
 }
 
+static u8 read_qrg(void)
+{
+    u8 qrg1, qrg2;
+
+    //read values
+    qrg1 = gpio_get_input(PIN_LNB_QRG1)?0:1;
+    qrg2 = gpio_get_input(PIN_LNB_QRG2)?0:1;
+
+    return (qrg2<<1) | (qrg1<<0);
+}
+
+static void handle_qrg(u8 qrg)
+{
+    if((qrg != g_applied_qrg) && (qrg < 4)) {
+        //ad9553_set_freq(qrg_freq_table[qrg]);
+        g_applied_qrg = qrg;
+    }
+}
+
+static void update_qrg(void)
+{
+    u8 qrg = read_qrg();
+
+    //handle read out value
+    if(g_pending_qrg == qrg) {
+        handle_qrg(g_pending_qrg);
+    } else {
+        g_pending_qrg = qrg;
+    }
+}
+
 static void init_gpios(void)
 {
     ADCON1bits.PCFG = 0xF;
