diff --git a/nbproject/configurations.xml b/nbproject/configurations.xml
--- a/nbproject/configurations.xml
+++ b/nbproject/configurations.xml
@@ -23,6 +23,7 @@
       </logicalFolder>
       <itemPath>src/config.h</itemPath>
       <itemPath>src/pinmap.h</itemPath>
+      <itemPath>src/app.h</itemPath>
     </logicalFolder>
     <logicalFolder name="LinkerScript"
                    displayName="Linker Files"
@@ -42,6 +43,8 @@
         <itemPath>src/driver/irq.c</itemPath>
       </logicalFolder>
       <itemPath>src/main.c</itemPath>
+      <itemPath>src/app.c</itemPath>
+      <itemPath>src/retarget.c</itemPath>
     </logicalFolder>
     <logicalFolder name="ExternalFiles"
                    displayName="Important Files"
diff --git a/src/app.c b/src/app.c
new file mode 100644
--- /dev/null
+++ b/src/app.c
@@ -0,0 +1,164 @@
+#include <config.h>
+#include <pinmap.h>
+#include <stdio.h>
+#include <string.h>
+#include <driver/adf4351.h>
+#include <driver/i2c_native.h>
+#include <driver/lnb.h>
+#include <driver/usart.h>
+
+#include "app.h"
+#include "../hg.h"
+
+//local variables
+static u8 g_applied_cmd = 0xFF;
+static adf4351_ctx g_adf4351;
+static i2c_data_native g_i2c_bus;
+static int g_ipc = ADF4351_ICP_031;
+static int g_pout = ADF4351_POUT_0;
+static char g_cmd_buf[10];
+static int  g_cmd_buf_pos = 0;
+static int g_cpu_led_update_cnt = 0;
+
+//1129000 LNB Freq
+static const u32 freq_table[10] = {
+    1101000, 1079000, 1059000, 985000, 984000,
+    711000,  689000,  669000,  595000, 594000,
+};
+
+//local functions declarations
+static void check_usart(void);
+static void update_switch(void);
+static void update_led(void);
+static void handle_cmd(u8 cmd);
+
+void app_init(void)
+{
+    int lnb_good;
+
+    usart_init(115200);
+    
+    //welcome message
+    printf("\nAMSAT DL SDC %s\n\n", HG_DISPLAY);
+    
+    i2c_native_init(&g_i2c_bus, 100000);
+    lnb_good = lnb_configure((i2c_dev)&g_i2c_bus, I2C_ADDR_LNBH26);
+    //set lnb good led
+    gpio_set_output(PIN_LED_LNB_GOOD, (lnb_good==0)?0:1);
+    adf4351_init(&g_adf4351, 40000ULL, 250ULL);
+    adf4351_set_tune(&g_adf4351, g_ipc, g_pout, TRUE);
+    adf4351_set_mode(&g_adf4351, TRUE);
+    update_switch();
+    
+    printf("cmd: ");
+}
+
+void app_event_loop(void)
+{
+    check_usart();
+    update_switch();
+    update_led();
+}
+
+
+//
+//local functions
+//
+static void apply_ipc(int ipc)
+{
+    g_ipc = ipc;
+    adf4351_set_tune(&g_adf4351, g_ipc, g_pout, TRUE);
+    printf("ipc set to %i\n", g_ipc); 
+}
+
+static void check_usart(void)
+{
+    if(usart_tstc()) {
+        int c = usart_getc();
+        if((c == 13) || (g_cmd_buf_pos >= sizeof(g_cmd_buf))) {
+            putchar('\n');
+            if(strncmp(g_cmd_buf, "ipc ", 4) == 0) {
+                if((g_cmd_buf[4] >= '0') && (g_cmd_buf[4] <= '9')) {
+                    apply_ipc(g_cmd_buf[4] - '0');
+                } else if((g_cmd_buf[4] >= 'a') && (g_cmd_buf[4] <= 'f')) {
+                    apply_ipc(g_cmd_buf[4] - 87);
+                } else if((g_cmd_buf[4] >= 'A') && (g_cmd_buf[4] <= 'F')) {
+                    apply_ipc(g_cmd_buf[4] - 55);
+                } else {
+                    printf("ipc value %c not in range [0-F]\n", g_cmd_buf[4]);
+                }
+            } else if(strncmp(g_cmd_buf, "pout ", 5) == 0) {
+                if((g_cmd_buf[5] >= '0') && (g_cmd_buf[5] <= '3')) {
+                    g_pout = g_cmd_buf[5] - '0';
+                    adf4351_set_tune(&g_adf4351, g_ipc, g_pout, TRUE);
+                    printf("pout set to %i\n", g_pout);
+                } else {
+                    printf("pwr value %c not in range [0-3]\n", g_cmd_buf[5]);
+                }
+            } else {
+                printf("invalid command!\n");
+            }
+            //reset buffer
+            memset(g_cmd_buf, 0, g_cmd_buf_pos);
+            g_cmd_buf_pos = 0;
+            printf("cmd: ");
+        } else if(c == 8) {
+			if(g_cmd_buf_pos > 0) {
+				g_cmd_buf_pos--;
+				g_cmd_buf[g_cmd_buf_pos] = 0;
+				printf("\b \b");
+			} 
+        } else {
+            g_cmd_buf[g_cmd_buf_pos++] = c;
+            if((c > 31) && (c < 128)) {
+                putchar(c);
+            } else {
+                putchar('.');
+            }
+        }
+    }
+}
+
+static void update_switch(void)
+{
+    u8 rb1, rb2, rb3, rb4;
+
+    //read values
+    rb1 = gpio_get_input(PIN_SJ3)?0:1;
+    rb2 = gpio_get_input(PIN_SJ4)?0:1;
+    rb3 = gpio_get_input(PIN_SJ5)?0:1;
+    rb4 = gpio_get_input(PIN_SJ6)?0:1;
+
+    //handle read out value
+    handle_cmd((rb4<<0) | (rb3<<1) | (rb2<<2) | (rb1<<3));
+}
+
+static void update_led(void)
+{
+    //update cpu alive led more or less every second (~250ms*4)
+    if(g_cpu_led_update_cnt++ >= 4) {
+        gpio_set_output(PIN_LED_CPU_OK, gpio_get_input(PIN_LED_CPU_OK)?0:1);
+        g_cpu_led_update_cnt = 0;
+    }
+    //update hi/low led
+    gpio_set_output(PIN_LED_HI_LOW, (g_applied_cmd>4)?1:0);
+    //update ADF lock led
+    gpio_set_output(PIN_LED_ADF_LOCK, (adf4351_get_lock(&g_adf4351)==FALSE)?1:0);
+}
+
+static void handle_cmd(u8 cmd)
+{
+    if((cmd < 10) && (cmd != g_applied_cmd)) {
+        int timeout = 1000;
+
+        adf4351_set_freq(&g_adf4351, freq_table[cmd]);
+        while((adf4351_get_lock(&g_adf4351) == FALSE) && timeout) {
+            timeout--;
+            __delay_ms(1);
+        }
+        if(timeout <= 0) {
+            printf("lock timed out!\n");
+        }
+        g_applied_cmd = cmd;
+    }
+}
diff --git a/src/app.h b/src/app.h
new file mode 100644
--- /dev/null
+++ b/src/app.h
@@ -0,0 +1,15 @@
+/* 
+ * File:   app.h
+ * Author: be
+ *
+ * Created on 9. Mai 2019, 10:32
+ */
+
+#ifndef __APP_H__
+#define	__APP_H__
+
+extern void app_init(void);
+extern void app_event_loop(void);
+
+#endif	/* __APP_H__ */
+
diff --git a/src/config.h b/src/config.h
--- a/src/config.h
+++ b/src/config.h
@@ -5,10 +5,10 @@
  * Created on 26. April 2019, 10:32
  */
 
-#ifndef CONFIG_H
-#define	CONFIG_H
+#ifndef __CONFIG_H__
+#define	__CONFIG_H__
 
 #include <mtstd/errorcodes.h>
 #include <mtcrt/types.h>
 #include <xc.h>
 
@@ -10,12 +10,8 @@
 
 #include <mtstd/errorcodes.h>
 #include <mtcrt/types.h>
 #include <xc.h>
 
-#ifdef	__cplusplus
-extern "C" {
-#endif
-
 #define I2C_ADDR_LNBH26 0x08
     
 #define _XTAL_FREQ 8000000
@@ -24,7 +20,5 @@
             struct name##__ { int unused; }; 		\
             typedef struct name##__ *name
 
-#ifdef	__cplusplus
-}
-#endif
+#endif	/* __CONFIG_H__ */
 
@@ -30,3 +24,1 @@
 
-#endif	/* CONFIG_H */
-
